{"version":3,"file":"js/813.295d14bf9fd01fc7c712.js","mappings":"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","sources":["webpack:///../../libs/components/dist/components.js","webpack:///./src/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/store/index.ts"],"sourcesContent":["var Na = Object.defineProperty;\nvar Ia = (r, e, t) => e in r ? Na(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;\nvar m = (r, e, t) => (Ia(r, typeof e != \"symbol\" ? e + \"\" : e, t), t);\nimport An, { createContext as Va, useContext as qa, useCallback as Ht, useState as Me } from \"react\";\nimport { EmptyState as zt, EmptyStateVariant as Fa, EmptyStateIcon as Ut, Title as yt, EmptyStateBody as Lt, Modal as mt, Button as we, ButtonVariant as Bt, Alert as Dn, Icon as Ma, ModalVariant as ka, PageSection as On, TextContent as Ha, Level as za, LevelItem as Sr, Text as Tr, Label as Ua, Page as La } from \"@patternfly/react-core\";\nimport { TableView as Kt, usePaginationSearchParams as $t, useURLSearchParamsChips as Wt } from \"@rhoas/app-services-ui-components\";\nimport { useQuery as ke, useMutation as Gt } from \"@tanstack/react-query\";\nimport * as Ba from \"uri-template-lite\";\nimport { SearchIcon as Ka, ExclamationCircleIcon as $a, PlusCircleIcon as Wa } from \"@patternfly/react-icons\";\nimport { useHistory as Yt, Link as Ga } from \"react-router-dom\";\nimport { ActionsColumn as Ya } from \"@patternfly/react-table\";\nvar A = {}, Xa = {\n  get exports() {\n    return A;\n  },\n  set exports(r) {\n    A = r;\n  }\n}, Ve = {};\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\nvar At, Pr;\nfunction Sn() {\n  if (Pr)\n    return At;\n  Pr = 1;\n  var r = Object.getOwnPropertySymbols, e = Object.prototype.hasOwnProperty, t = Object.prototype.propertyIsEnumerable;\n  function n(i) {\n    if (i == null)\n      throw new TypeError(\"Object.assign cannot be called with null or undefined\");\n    return Object(i);\n  }\n  function a() {\n    try {\n      if (!Object.assign)\n        return !1;\n      var i = new String(\"abc\");\n      if (i[5] = \"de\", Object.getOwnPropertyNames(i)[0] === \"5\")\n        return !1;\n      for (var o = {}, l = 0; l < 10; l++)\n        o[\"_\" + String.fromCharCode(l)] = l;\n      var u = Object.getOwnPropertyNames(o).map(function(d) {\n        return o[d];\n      });\n      if (u.join(\"\") !== \"0123456789\")\n        return !1;\n      var h = {};\n      return \"abcdefghijklmnopqrst\".split(\"\").forEach(function(d) {\n        h[d] = d;\n      }), Object.keys(Object.assign({}, h)).join(\"\") === \"abcdefghijklmnopqrst\";\n    } catch {\n      return !1;\n    }\n  }\n  return At = a() ? Object.assign : function(i, o) {\n    for (var l, u = n(i), h, d = 1; d < arguments.length; d++) {\n      l = Object(arguments[d]);\n      for (var w in l)\n        e.call(l, w) && (u[w] = l[w]);\n      if (r) {\n        h = r(l);\n        for (var c = 0; c < h.length; c++)\n          t.call(l, h[c]) && (u[h[c]] = l[h[c]]);\n      }\n    }\n    return u;\n  }, At;\n}\n/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Cr;\nfunction Qa() {\n  if (Cr)\n    return Ve;\n  Cr = 1, Sn();\n  var r = An, e = 60103;\n  if (Ve.Fragment = 60107, typeof Symbol == \"function\" && Symbol.for) {\n    var t = Symbol.for;\n    e = t(\"react.element\"), Ve.Fragment = t(\"react.fragment\");\n  }\n  var n = r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, a = Object.prototype.hasOwnProperty, i = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function o(l, u, h) {\n    var d, w = {}, c = null, g = null;\n    h !== void 0 && (c = \"\" + h), u.key !== void 0 && (c = \"\" + u.key), u.ref !== void 0 && (g = u.ref);\n    for (d in u)\n      a.call(u, d) && !i.hasOwnProperty(d) && (w[d] = u[d]);\n    if (l && l.defaultProps)\n      for (d in u = l.defaultProps, u)\n        w[d] === void 0 && (w[d] = u[d]);\n    return { $$typeof: e, type: l, key: c, ref: g, props: w, _owner: n.current };\n  }\n  return Ve.jsx = o, Ve.jsxs = o, Ve;\n}\nvar Dt = {};\n/** @license React v17.0.2\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar xr;\nfunction Ja() {\n  return xr || (xr = 1, function(r) {\n    process.env.NODE_ENV !== \"production\" && function() {\n      var e = An, t = Sn(), n = 60103, a = 60106;\n      r.Fragment = 60107;\n      var i = 60108, o = 60114, l = 60109, u = 60110, h = 60112, d = 60113, w = 60120, c = 60115, g = 60116, v = 60121, b = 60122, O = 60117, T = 60129, P = 60131;\n      if (typeof Symbol == \"function\" && Symbol.for) {\n        var x = Symbol.for;\n        n = x(\"react.element\"), a = x(\"react.portal\"), r.Fragment = x(\"react.fragment\"), i = x(\"react.strict_mode\"), o = x(\"react.profiler\"), l = x(\"react.provider\"), u = x(\"react.context\"), h = x(\"react.forward_ref\"), d = x(\"react.suspense\"), w = x(\"react.suspense_list\"), c = x(\"react.memo\"), g = x(\"react.lazy\"), v = x(\"react.block\"), b = x(\"react.server.block\"), O = x(\"react.fundamental\"), x(\"react.scope\"), x(\"react.opaque.id\"), T = x(\"react.debug_trace_mode\"), x(\"react.offscreen\"), P = x(\"react.legacy_hidden\");\n      }\n      var V = typeof Symbol == \"function\" && Symbol.iterator, k = \"@@iterator\";\n      function B(s) {\n        if (s === null || typeof s != \"object\")\n          return null;\n        var E = V && s[V] || s[k];\n        return typeof E == \"function\" ? E : null;\n      }\n      var K = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n      function M(s) {\n        {\n          for (var E = arguments.length, S = new Array(E > 1 ? E - 1 : 0), I = 1; I < E; I++)\n            S[I - 1] = arguments[I];\n          se(\"error\", s, S);\n        }\n      }\n      function se(s, E, S) {\n        {\n          var I = K.ReactDebugCurrentFrame, z = I.getStackAddendum();\n          z !== \"\" && (E += \"%s\", S = S.concat([z]));\n          var U = S.map(function(F) {\n            return \"\" + F;\n          });\n          U.unshift(\"Warning: \" + E), Function.prototype.apply.call(console[s], console, U);\n        }\n      }\n      var pe = !1;\n      function De(s) {\n        return !!(typeof s == \"string\" || typeof s == \"function\" || s === r.Fragment || s === o || s === T || s === i || s === d || s === w || s === P || pe || typeof s == \"object\" && s !== null && (s.$$typeof === g || s.$$typeof === c || s.$$typeof === l || s.$$typeof === u || s.$$typeof === h || s.$$typeof === O || s.$$typeof === v || s[0] === b));\n      }\n      function Oe(s, E, S) {\n        var I = E.displayName || E.name || \"\";\n        return s.displayName || (I !== \"\" ? S + \"(\" + I + \")\" : S);\n      }\n      function le(s) {\n        return s.displayName || \"Context\";\n      }\n      function C(s) {\n        if (s == null)\n          return null;\n        if (typeof s.tag == \"number\" && M(\"Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.\"), typeof s == \"function\")\n          return s.displayName || s.name || null;\n        if (typeof s == \"string\")\n          return s;\n        switch (s) {\n          case r.Fragment:\n            return \"Fragment\";\n          case a:\n            return \"Portal\";\n          case o:\n            return \"Profiler\";\n          case i:\n            return \"StrictMode\";\n          case d:\n            return \"Suspense\";\n          case w:\n            return \"SuspenseList\";\n        }\n        if (typeof s == \"object\")\n          switch (s.$$typeof) {\n            case u:\n              var E = s;\n              return le(E) + \".Consumer\";\n            case l:\n              var S = s;\n              return le(S._context) + \".Provider\";\n            case h:\n              return Oe(s, s.render, \"ForwardRef\");\n            case c:\n              return C(s.type);\n            case v:\n              return C(s._render);\n            case g: {\n              var I = s, z = I._payload, U = I._init;\n              try {\n                return C(U(z));\n              } catch {\n                return null;\n              }\n            }\n          }\n        return null;\n      }\n      var ne = 0, fe, p, f, y, _, D, R;\n      function j() {\n      }\n      j.__reactDisabledLog = !0;\n      function H() {\n        {\n          if (ne === 0) {\n            fe = console.log, p = console.info, f = console.warn, y = console.error, _ = console.group, D = console.groupCollapsed, R = console.groupEnd;\n            var s = {\n              configurable: !0,\n              enumerable: !0,\n              value: j,\n              writable: !0\n            };\n            Object.defineProperties(console, {\n              info: s,\n              log: s,\n              warn: s,\n              error: s,\n              group: s,\n              groupCollapsed: s,\n              groupEnd: s\n            });\n          }\n          ne++;\n        }\n      }\n      function ae() {\n        {\n          if (ne--, ne === 0) {\n            var s = {\n              configurable: !0,\n              enumerable: !0,\n              writable: !0\n            };\n            Object.defineProperties(console, {\n              log: t({}, s, {\n                value: fe\n              }),\n              info: t({}, s, {\n                value: p\n              }),\n              warn: t({}, s, {\n                value: f\n              }),\n              error: t({}, s, {\n                value: y\n              }),\n              group: t({}, s, {\n                value: _\n              }),\n              groupCollapsed: t({}, s, {\n                value: D\n              }),\n              groupEnd: t({}, s, {\n                value: R\n              })\n            });\n          }\n          ne < 0 && M(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n        }\n      }\n      var N = K.ReactCurrentDispatcher, $;\n      function G(s, E, S) {\n        {\n          if ($ === void 0)\n            try {\n              throw Error();\n            } catch (z) {\n              var I = z.stack.trim().match(/\\n( *(at )?)/);\n              $ = I && I[1] || \"\";\n            }\n          return `\n` + $ + s;\n        }\n      }\n      var W = !1, te;\n      {\n        var ce = typeof WeakMap == \"function\" ? WeakMap : Map;\n        te = new ce();\n      }\n      function ue(s, E) {\n        if (!s || W)\n          return \"\";\n        {\n          var S = te.get(s);\n          if (S !== void 0)\n            return S;\n        }\n        var I;\n        W = !0;\n        var z = Error.prepareStackTrace;\n        Error.prepareStackTrace = void 0;\n        var U;\n        U = N.current, N.current = null, H();\n        try {\n          if (E) {\n            var F = function() {\n              throw Error();\n            };\n            if (Object.defineProperty(F.prototype, \"props\", {\n              set: function() {\n                throw Error();\n              }\n            }), typeof Reflect == \"object\" && Reflect.construct) {\n              try {\n                Reflect.construct(F, []);\n              } catch (ye) {\n                I = ye;\n              }\n              Reflect.construct(s, [], F);\n            } else {\n              try {\n                F.call();\n              } catch (ye) {\n                I = ye;\n              }\n              s.call(F.prototype);\n            }\n          } else {\n            try {\n              throw Error();\n            } catch (ye) {\n              I = ye;\n            }\n            s();\n          }\n        } catch (ye) {\n          if (ye && I && typeof ye.stack == \"string\") {\n            for (var q = ye.stack.split(`\n`), re = I.stack.split(`\n`), Y = q.length - 1, X = re.length - 1; Y >= 1 && X >= 0 && q[Y] !== re[X]; )\n              X--;\n            for (; Y >= 1 && X >= 0; Y--, X--)\n              if (q[Y] !== re[X]) {\n                if (Y !== 1 || X !== 1)\n                  do\n                    if (Y--, X--, X < 0 || q[Y] !== re[X]) {\n                      var ge = `\n` + q[Y].replace(\" at new \", \" at \");\n                      return typeof s == \"function\" && te.set(s, ge), ge;\n                    }\n                  while (Y >= 1 && X >= 0);\n                break;\n              }\n          }\n        } finally {\n          W = !1, N.current = U, ae(), Error.prepareStackTrace = z;\n        }\n        var Ie = s ? s.displayName || s.name : \"\", Or = Ie ? G(Ie) : \"\";\n        return typeof s == \"function\" && te.set(s, Or), Or;\n      }\n      function de(s, E, S) {\n        return ue(s, !1);\n      }\n      function Se(s) {\n        var E = s.prototype;\n        return !!(E && E.isReactComponent);\n      }\n      function it(s, E, S) {\n        if (s == null)\n          return \"\";\n        if (typeof s == \"function\")\n          return ue(s, Se(s));\n        if (typeof s == \"string\")\n          return G(s);\n        switch (s) {\n          case d:\n            return G(\"Suspense\");\n          case w:\n            return G(\"SuspenseList\");\n        }\n        if (typeof s == \"object\")\n          switch (s.$$typeof) {\n            case h:\n              return de(s.render);\n            case c:\n              return it(s.type, E, S);\n            case v:\n              return de(s._render);\n            case g: {\n              var I = s, z = I._payload, U = I._init;\n              try {\n                return it(U(z), E, S);\n              } catch {\n              }\n            }\n          }\n        return \"\";\n      }\n      var yr = {}, mr = K.ReactDebugCurrentFrame;\n      function ot(s) {\n        if (s) {\n          var E = s._owner, S = it(s.type, s._source, E ? E.type : null);\n          mr.setExtraStackFrame(S);\n        } else\n          mr.setExtraStackFrame(null);\n      }\n      function ya(s, E, S, I, z) {\n        {\n          var U = Function.call.bind(Object.prototype.hasOwnProperty);\n          for (var F in s)\n            if (U(s, F)) {\n              var q = void 0;\n              try {\n                if (typeof s[F] != \"function\") {\n                  var re = Error((I || \"React class\") + \": \" + S + \" type `\" + F + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof s[F] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                  throw re.name = \"Invariant Violation\", re;\n                }\n                q = s[F](E, F, I, S, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n              } catch (Y) {\n                q = Y;\n              }\n              q && !(q instanceof Error) && (ot(z), M(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", I || \"React class\", S, F, typeof q), ot(null)), q instanceof Error && !(q.message in yr) && (yr[q.message] = !0, ot(z), M(\"Failed %s type: %s\", S, q.message), ot(null));\n            }\n        }\n      }\n      var Le = K.ReactCurrentOwner, vt = Object.prototype.hasOwnProperty, ma = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n      }, wr, vr, bt;\n      bt = {};\n      function wa(s) {\n        if (vt.call(s, \"ref\")) {\n          var E = Object.getOwnPropertyDescriptor(s, \"ref\").get;\n          if (E && E.isReactWarning)\n            return !1;\n        }\n        return s.ref !== void 0;\n      }\n      function va(s) {\n        if (vt.call(s, \"key\")) {\n          var E = Object.getOwnPropertyDescriptor(s, \"key\").get;\n          if (E && E.isReactWarning)\n            return !1;\n        }\n        return s.key !== void 0;\n      }\n      function ba(s, E) {\n        if (typeof s.ref == \"string\" && Le.current && E && Le.current.stateNode !== E) {\n          var S = C(Le.current.type);\n          bt[S] || (M('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', C(Le.current.type), s.ref), bt[S] = !0);\n        }\n      }\n      function _a(s, E) {\n        {\n          var S = function() {\n            wr || (wr = !0, M(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", E));\n          };\n          S.isReactWarning = !0, Object.defineProperty(s, \"key\", {\n            get: S,\n            configurable: !0\n          });\n        }\n      }\n      function Ea(s, E) {\n        {\n          var S = function() {\n            vr || (vr = !0, M(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", E));\n          };\n          S.isReactWarning = !0, Object.defineProperty(s, \"ref\", {\n            get: S,\n            configurable: !0\n          });\n        }\n      }\n      var Ra = function(s, E, S, I, z, U, F) {\n        var q = {\n          // This tag allows us to uniquely identify this as a React Element\n          $$typeof: n,\n          // Built-in properties that belong on the element\n          type: s,\n          key: E,\n          ref: S,\n          props: F,\n          // Record the component responsible for creating this element.\n          _owner: U\n        };\n        return q._store = {}, Object.defineProperty(q._store, \"validated\", {\n          configurable: !1,\n          enumerable: !1,\n          writable: !0,\n          value: !1\n        }), Object.defineProperty(q, \"_self\", {\n          configurable: !1,\n          enumerable: !1,\n          writable: !1,\n          value: I\n        }), Object.defineProperty(q, \"_source\", {\n          configurable: !1,\n          enumerable: !1,\n          writable: !1,\n          value: z\n        }), Object.freeze && (Object.freeze(q.props), Object.freeze(q)), q;\n      };\n      function Aa(s, E, S, I, z) {\n        {\n          var U, F = {}, q = null, re = null;\n          S !== void 0 && (q = \"\" + S), va(E) && (q = \"\" + E.key), wa(E) && (re = E.ref, ba(E, z));\n          for (U in E)\n            vt.call(E, U) && !ma.hasOwnProperty(U) && (F[U] = E[U]);\n          if (s && s.defaultProps) {\n            var Y = s.defaultProps;\n            for (U in Y)\n              F[U] === void 0 && (F[U] = Y[U]);\n          }\n          if (q || re) {\n            var X = typeof s == \"function\" ? s.displayName || s.name || \"Unknown\" : s;\n            q && _a(F, X), re && Ea(F, X);\n          }\n          return Ra(s, q, re, z, I, Le.current, F);\n        }\n      }\n      var _t = K.ReactCurrentOwner, br = K.ReactDebugCurrentFrame;\n      function Ne(s) {\n        if (s) {\n          var E = s._owner, S = it(s.type, s._source, E ? E.type : null);\n          br.setExtraStackFrame(S);\n        } else\n          br.setExtraStackFrame(null);\n      }\n      var Et;\n      Et = !1;\n      function Rt(s) {\n        return typeof s == \"object\" && s !== null && s.$$typeof === n;\n      }\n      function _r() {\n        {\n          if (_t.current) {\n            var s = C(_t.current.type);\n            if (s)\n              return `\n\nCheck the render method of \\`` + s + \"`.\";\n          }\n          return \"\";\n        }\n      }\n      function Da(s) {\n        {\n          if (s !== void 0) {\n            var E = s.fileName.replace(/^.*[\\\\\\/]/, \"\"), S = s.lineNumber;\n            return `\n\nCheck your code at ` + E + \":\" + S + \".\";\n          }\n          return \"\";\n        }\n      }\n      var Er = {};\n      function Oa(s) {\n        {\n          var E = _r();\n          if (!E) {\n            var S = typeof s == \"string\" ? s : s.displayName || s.name;\n            S && (E = `\n\nCheck the top-level render call using <` + S + \">.\");\n          }\n          return E;\n        }\n      }\n      function Rr(s, E) {\n        {\n          if (!s._store || s._store.validated || s.key != null)\n            return;\n          s._store.validated = !0;\n          var S = Oa(E);\n          if (Er[S])\n            return;\n          Er[S] = !0;\n          var I = \"\";\n          s && s._owner && s._owner !== _t.current && (I = \" It was passed a child from \" + C(s._owner.type) + \".\"), Ne(s), M('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', S, I), Ne(null);\n        }\n      }\n      function Ar(s, E) {\n        {\n          if (typeof s != \"object\")\n            return;\n          if (Array.isArray(s))\n            for (var S = 0; S < s.length; S++) {\n              var I = s[S];\n              Rt(I) && Rr(I, E);\n            }\n          else if (Rt(s))\n            s._store && (s._store.validated = !0);\n          else if (s) {\n            var z = B(s);\n            if (typeof z == \"function\" && z !== s.entries)\n              for (var U = z.call(s), F; !(F = U.next()).done; )\n                Rt(F.value) && Rr(F.value, E);\n          }\n        }\n      }\n      function Sa(s) {\n        {\n          var E = s.type;\n          if (E == null || typeof E == \"string\")\n            return;\n          var S;\n          if (typeof E == \"function\")\n            S = E.propTypes;\n          else if (typeof E == \"object\" && (E.$$typeof === h || // Note: Memo only checks outer props here.\n          // Inner props are checked in the reconciler.\n          E.$$typeof === c))\n            S = E.propTypes;\n          else\n            return;\n          if (S) {\n            var I = C(E);\n            ya(S, s.props, \"prop\", I, s);\n          } else if (E.PropTypes !== void 0 && !Et) {\n            Et = !0;\n            var z = C(E);\n            M(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", z || \"Unknown\");\n          }\n          typeof E.getDefaultProps == \"function\" && !E.getDefaultProps.isReactClassApproved && M(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n        }\n      }\n      function Ta(s) {\n        {\n          for (var E = Object.keys(s.props), S = 0; S < E.length; S++) {\n            var I = E[S];\n            if (I !== \"children\" && I !== \"key\") {\n              Ne(s), M(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", I), Ne(null);\n              break;\n            }\n          }\n          s.ref !== null && (Ne(s), M(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), Ne(null));\n        }\n      }\n      function Dr(s, E, S, I, z, U) {\n        {\n          var F = De(s);\n          if (!F) {\n            var q = \"\";\n            (s === void 0 || typeof s == \"object\" && s !== null && Object.keys(s).length === 0) && (q += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n            var re = Da(z);\n            re ? q += re : q += _r();\n            var Y;\n            s === null ? Y = \"null\" : Array.isArray(s) ? Y = \"array\" : s !== void 0 && s.$$typeof === n ? (Y = \"<\" + (C(s.type) || \"Unknown\") + \" />\", q = \" Did you accidentally export a JSX literal instead of a component?\") : Y = typeof s, M(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", Y, q);\n          }\n          var X = Aa(s, E, S, z, U);\n          if (X == null)\n            return X;\n          if (F) {\n            var ge = E.children;\n            if (ge !== void 0)\n              if (I)\n                if (Array.isArray(ge)) {\n                  for (var Ie = 0; Ie < ge.length; Ie++)\n                    Ar(ge[Ie], s);\n                  Object.freeze && Object.freeze(ge);\n                } else\n                  M(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n              else\n                Ar(ge, s);\n          }\n          return s === r.Fragment ? Ta(X) : Sa(X), X;\n        }\n      }\n      function Pa(s, E, S) {\n        return Dr(s, E, S, !0);\n      }\n      function Ca(s, E, S) {\n        return Dr(s, E, S, !1);\n      }\n      var xa = Ca, ja = Pa;\n      r.jsx = xa, r.jsxs = ja;\n    }();\n  }(Dt)), Dt;\n}\n(function(r) {\n  process.env.NODE_ENV === \"production\" ? r.exports = Qa() : r.exports = Ja();\n})(Xa);\nclass Za {\n  async get(e, t) {\n    const { totalSeats: n, availableSeats: a } = await (await fetch(\"/aw-api/subscriptions\")).json();\n    return {\n      total: n,\n      available: a\n    };\n  }\n  async seats(e, t, n) {\n    return (await (await fetch(\"/aw-api/users\")).json()).users.map(\n      ({ username: a, firstName: i, lastName: o }) => ({\n        id: a,\n        name: `${i} ${o}`\n      })\n    );\n  }\n  assign(e, t, n) {\n    return Promise.resolve();\n  }\n  unAssign(e, t, n) {\n    return Promise.resolve();\n  }\n}\nvar jr = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction Tn(r) {\n  if (r.__esModule)\n    return r;\n  var e = r.default;\n  if (typeof e == \"function\") {\n    var t = function n() {\n      if (this instanceof n) {\n        var a = [null];\n        a.push.apply(a, arguments);\n        var i = Function.bind.apply(e, a);\n        return new i();\n      }\n      return e.apply(this, arguments);\n    };\n    t.prototype = e.prototype;\n  } else\n    t = {};\n  return Object.defineProperty(t, \"__esModule\", { value: !0 }), Object.keys(r).forEach(function(n) {\n    var a = Object.getOwnPropertyDescriptor(r, n);\n    Object.defineProperty(t, n, a.get ? a : {\n      enumerable: !0,\n      get: function() {\n        return r[n];\n      }\n    });\n  }), t;\n}\nvar Xt = {}, ve = {}, ei = {\n  get exports() {\n    return ve;\n  },\n  set exports(r) {\n    ve = r;\n  }\n};\n(function(r) {\n  var e, t, n, a, i, o, l, u, h, d, w, c, g, v, b, O, T, P, x, V, k, B, K, M, se, pe, De, Oe, le;\n  (function(C) {\n    var ne = typeof jr == \"object\" ? jr : typeof self == \"object\" ? self : typeof this == \"object\" ? this : {};\n    C(fe(ne, fe(r.exports)));\n    function fe(p, f) {\n      return p !== ne && (typeof Object.create == \"function\" ? Object.defineProperty(p, \"__esModule\", { value: !0 }) : p.__esModule = !0), function(y, _) {\n        return p[y] = f ? f(y, _) : _;\n      };\n    }\n  })(function(C) {\n    var ne = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(p, f) {\n      p.__proto__ = f;\n    } || function(p, f) {\n      for (var y in f)\n        Object.prototype.hasOwnProperty.call(f, y) && (p[y] = f[y]);\n    };\n    e = function(p, f) {\n      if (typeof f != \"function\" && f !== null)\n        throw new TypeError(\"Class extends value \" + String(f) + \" is not a constructor or null\");\n      ne(p, f);\n      function y() {\n        this.constructor = p;\n      }\n      p.prototype = f === null ? Object.create(f) : (y.prototype = f.prototype, new y());\n    }, t = Object.assign || function(p) {\n      for (var f, y = 1, _ = arguments.length; y < _; y++) {\n        f = arguments[y];\n        for (var D in f)\n          Object.prototype.hasOwnProperty.call(f, D) && (p[D] = f[D]);\n      }\n      return p;\n    }, n = function(p, f) {\n      var y = {};\n      for (var _ in p)\n        Object.prototype.hasOwnProperty.call(p, _) && f.indexOf(_) < 0 && (y[_] = p[_]);\n      if (p != null && typeof Object.getOwnPropertySymbols == \"function\")\n        for (var D = 0, _ = Object.getOwnPropertySymbols(p); D < _.length; D++)\n          f.indexOf(_[D]) < 0 && Object.prototype.propertyIsEnumerable.call(p, _[D]) && (y[_[D]] = p[_[D]]);\n      return y;\n    }, a = function(p, f, y, _) {\n      var D = arguments.length, R = D < 3 ? f : _ === null ? _ = Object.getOwnPropertyDescriptor(f, y) : _, j;\n      if (typeof Reflect == \"object\" && typeof Reflect.decorate == \"function\")\n        R = Reflect.decorate(p, f, y, _);\n      else\n        for (var H = p.length - 1; H >= 0; H--)\n          (j = p[H]) && (R = (D < 3 ? j(R) : D > 3 ? j(f, y, R) : j(f, y)) || R);\n      return D > 3 && R && Object.defineProperty(f, y, R), R;\n    }, i = function(p, f) {\n      return function(y, _) {\n        f(y, _, p);\n      };\n    }, o = function(p, f, y, _, D, R) {\n      function j(Se) {\n        if (Se !== void 0 && typeof Se != \"function\")\n          throw new TypeError(\"Function expected\");\n        return Se;\n      }\n      for (var H = _.kind, ae = H === \"getter\" ? \"get\" : H === \"setter\" ? \"set\" : \"value\", N = !f && p ? _.static ? p : p.prototype : null, $ = f || (N ? Object.getOwnPropertyDescriptor(N, _.name) : {}), G, W = !1, te = y.length - 1; te >= 0; te--) {\n        var ce = {};\n        for (var ue in _)\n          ce[ue] = ue === \"access\" ? {} : _[ue];\n        for (var ue in _.access)\n          ce.access[ue] = _.access[ue];\n        ce.addInitializer = function(Se) {\n          if (W)\n            throw new TypeError(\"Cannot add initializers after decoration has completed\");\n          R.push(j(Se || null));\n        };\n        var de = (0, y[te])(H === \"accessor\" ? { get: $.get, set: $.set } : $[ae], ce);\n        if (H === \"accessor\") {\n          if (de === void 0)\n            continue;\n          if (de === null || typeof de != \"object\")\n            throw new TypeError(\"Object expected\");\n          (G = j(de.get)) && ($.get = G), (G = j(de.set)) && ($.set = G), (G = j(de.init)) && D.push(G);\n        } else\n          (G = j(de)) && (H === \"field\" ? D.push(G) : $[ae] = G);\n      }\n      N && Object.defineProperty(N, _.name, $), W = !0;\n    }, l = function(p, f, y) {\n      for (var _ = arguments.length > 2, D = 0; D < f.length; D++)\n        y = _ ? f[D].call(p, y) : f[D].call(p);\n      return _ ? y : void 0;\n    }, u = function(p) {\n      return typeof p == \"symbol\" ? p : \"\".concat(p);\n    }, h = function(p, f, y) {\n      return typeof f == \"symbol\" && (f = f.description ? \"[\".concat(f.description, \"]\") : \"\"), Object.defineProperty(p, \"name\", { configurable: !0, value: y ? \"\".concat(y, \" \", f) : f });\n    }, d = function(p, f) {\n      if (typeof Reflect == \"object\" && typeof Reflect.metadata == \"function\")\n        return Reflect.metadata(p, f);\n    }, w = function(p, f, y, _) {\n      function D(R) {\n        return R instanceof y ? R : new y(function(j) {\n          j(R);\n        });\n      }\n      return new (y || (y = Promise))(function(R, j) {\n        function H($) {\n          try {\n            N(_.next($));\n          } catch (G) {\n            j(G);\n          }\n        }\n        function ae($) {\n          try {\n            N(_.throw($));\n          } catch (G) {\n            j(G);\n          }\n        }\n        function N($) {\n          $.done ? R($.value) : D($.value).then(H, ae);\n        }\n        N((_ = _.apply(p, f || [])).next());\n      });\n    }, c = function(p, f) {\n      var y = { label: 0, sent: function() {\n        if (R[0] & 1)\n          throw R[1];\n        return R[1];\n      }, trys: [], ops: [] }, _, D, R, j;\n      return j = { next: H(0), throw: H(1), return: H(2) }, typeof Symbol == \"function\" && (j[Symbol.iterator] = function() {\n        return this;\n      }), j;\n      function H(N) {\n        return function($) {\n          return ae([N, $]);\n        };\n      }\n      function ae(N) {\n        if (_)\n          throw new TypeError(\"Generator is already executing.\");\n        for (; j && (j = 0, N[0] && (y = 0)), y; )\n          try {\n            if (_ = 1, D && (R = N[0] & 2 ? D.return : N[0] ? D.throw || ((R = D.return) && R.call(D), 0) : D.next) && !(R = R.call(D, N[1])).done)\n              return R;\n            switch (D = 0, R && (N = [N[0] & 2, R.value]), N[0]) {\n              case 0:\n              case 1:\n                R = N;\n                break;\n              case 4:\n                return y.label++, { value: N[1], done: !1 };\n              case 5:\n                y.label++, D = N[1], N = [0];\n                continue;\n              case 7:\n                N = y.ops.pop(), y.trys.pop();\n                continue;\n              default:\n                if (R = y.trys, !(R = R.length > 0 && R[R.length - 1]) && (N[0] === 6 || N[0] === 2)) {\n                  y = 0;\n                  continue;\n                }\n                if (N[0] === 3 && (!R || N[1] > R[0] && N[1] < R[3])) {\n                  y.label = N[1];\n                  break;\n                }\n                if (N[0] === 6 && y.label < R[1]) {\n                  y.label = R[1], R = N;\n                  break;\n                }\n                if (R && y.label < R[2]) {\n                  y.label = R[2], y.ops.push(N);\n                  break;\n                }\n                R[2] && y.ops.pop(), y.trys.pop();\n                continue;\n            }\n            N = f.call(p, y);\n          } catch ($) {\n            N = [6, $], D = 0;\n          } finally {\n            _ = R = 0;\n          }\n        if (N[0] & 5)\n          throw N[1];\n        return { value: N[0] ? N[1] : void 0, done: !0 };\n      }\n    }, g = function(p, f) {\n      for (var y in p)\n        y !== \"default\" && !Object.prototype.hasOwnProperty.call(f, y) && le(f, p, y);\n    }, le = Object.create ? function(p, f, y, _) {\n      _ === void 0 && (_ = y);\n      var D = Object.getOwnPropertyDescriptor(f, y);\n      (!D || (\"get\" in D ? !f.__esModule : D.writable || D.configurable)) && (D = { enumerable: !0, get: function() {\n        return f[y];\n      } }), Object.defineProperty(p, _, D);\n    } : function(p, f, y, _) {\n      _ === void 0 && (_ = y), p[_] = f[y];\n    }, v = function(p) {\n      var f = typeof Symbol == \"function\" && Symbol.iterator, y = f && p[f], _ = 0;\n      if (y)\n        return y.call(p);\n      if (p && typeof p.length == \"number\")\n        return {\n          next: function() {\n            return p && _ >= p.length && (p = void 0), { value: p && p[_++], done: !p };\n          }\n        };\n      throw new TypeError(f ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    }, b = function(p, f) {\n      var y = typeof Symbol == \"function\" && p[Symbol.iterator];\n      if (!y)\n        return p;\n      var _ = y.call(p), D, R = [], j;\n      try {\n        for (; (f === void 0 || f-- > 0) && !(D = _.next()).done; )\n          R.push(D.value);\n      } catch (H) {\n        j = { error: H };\n      } finally {\n        try {\n          D && !D.done && (y = _.return) && y.call(_);\n        } finally {\n          if (j)\n            throw j.error;\n        }\n      }\n      return R;\n    }, O = function() {\n      for (var p = [], f = 0; f < arguments.length; f++)\n        p = p.concat(b(arguments[f]));\n      return p;\n    }, T = function() {\n      for (var p = 0, f = 0, y = arguments.length; f < y; f++)\n        p += arguments[f].length;\n      for (var _ = Array(p), D = 0, f = 0; f < y; f++)\n        for (var R = arguments[f], j = 0, H = R.length; j < H; j++, D++)\n          _[D] = R[j];\n      return _;\n    }, P = function(p, f, y) {\n      if (y || arguments.length === 2)\n        for (var _ = 0, D = f.length, R; _ < D; _++)\n          (R || !(_ in f)) && (R || (R = Array.prototype.slice.call(f, 0, _)), R[_] = f[_]);\n      return p.concat(R || Array.prototype.slice.call(f));\n    }, x = function(p) {\n      return this instanceof x ? (this.v = p, this) : new x(p);\n    }, V = function(p, f, y) {\n      if (!Symbol.asyncIterator)\n        throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n      var _ = y.apply(p, f || []), D, R = [];\n      return D = {}, j(\"next\"), j(\"throw\"), j(\"return\"), D[Symbol.asyncIterator] = function() {\n        return this;\n      }, D;\n      function j(W) {\n        _[W] && (D[W] = function(te) {\n          return new Promise(function(ce, ue) {\n            R.push([W, te, ce, ue]) > 1 || H(W, te);\n          });\n        });\n      }\n      function H(W, te) {\n        try {\n          ae(_[W](te));\n        } catch (ce) {\n          G(R[0][3], ce);\n        }\n      }\n      function ae(W) {\n        W.value instanceof x ? Promise.resolve(W.value.v).then(N, $) : G(R[0][2], W);\n      }\n      function N(W) {\n        H(\"next\", W);\n      }\n      function $(W) {\n        H(\"throw\", W);\n      }\n      function G(W, te) {\n        W(te), R.shift(), R.length && H(R[0][0], R[0][1]);\n      }\n    }, k = function(p) {\n      var f, y;\n      return f = {}, _(\"next\"), _(\"throw\", function(D) {\n        throw D;\n      }), _(\"return\"), f[Symbol.iterator] = function() {\n        return this;\n      }, f;\n      function _(D, R) {\n        f[D] = p[D] ? function(j) {\n          return (y = !y) ? { value: x(p[D](j)), done: !1 } : R ? R(j) : j;\n        } : R;\n      }\n    }, B = function(p) {\n      if (!Symbol.asyncIterator)\n        throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n      var f = p[Symbol.asyncIterator], y;\n      return f ? f.call(p) : (p = typeof v == \"function\" ? v(p) : p[Symbol.iterator](), y = {}, _(\"next\"), _(\"throw\"), _(\"return\"), y[Symbol.asyncIterator] = function() {\n        return this;\n      }, y);\n      function _(R) {\n        y[R] = p[R] && function(j) {\n          return new Promise(function(H, ae) {\n            j = p[R](j), D(H, ae, j.done, j.value);\n          });\n        };\n      }\n      function D(R, j, H, ae) {\n        Promise.resolve(ae).then(function(N) {\n          R({ value: N, done: H });\n        }, j);\n      }\n    }, K = function(p, f) {\n      return Object.defineProperty ? Object.defineProperty(p, \"raw\", { value: f }) : p.raw = f, p;\n    };\n    var fe = Object.create ? function(p, f) {\n      Object.defineProperty(p, \"default\", { enumerable: !0, value: f });\n    } : function(p, f) {\n      p.default = f;\n    };\n    M = function(p) {\n      if (p && p.__esModule)\n        return p;\n      var f = {};\n      if (p != null)\n        for (var y in p)\n          y !== \"default\" && Object.prototype.hasOwnProperty.call(p, y) && le(f, p, y);\n      return fe(f, p), f;\n    }, se = function(p) {\n      return p && p.__esModule ? p : { default: p };\n    }, pe = function(p, f, y, _) {\n      if (y === \"a\" && !_)\n        throw new TypeError(\"Private accessor was defined without a getter\");\n      if (typeof f == \"function\" ? p !== f || !_ : !f.has(p))\n        throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n      return y === \"m\" ? _ : y === \"a\" ? _.call(p) : _ ? _.value : f.get(p);\n    }, De = function(p, f, y, _, D) {\n      if (_ === \"m\")\n        throw new TypeError(\"Private method is not writable\");\n      if (_ === \"a\" && !D)\n        throw new TypeError(\"Private accessor was defined without a setter\");\n      if (typeof f == \"function\" ? p !== f || !D : !f.has(p))\n        throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n      return _ === \"a\" ? D.call(p, y) : D ? D.value = y : f.set(p, y), y;\n    }, Oe = function(p, f) {\n      if (f === null || typeof f != \"object\" && typeof f != \"function\")\n        throw new TypeError(\"Cannot use 'in' operator on non-object\");\n      return typeof p == \"function\" ? f === p : p.has(f);\n    }, C(\"__extends\", e), C(\"__assign\", t), C(\"__rest\", n), C(\"__decorate\", a), C(\"__param\", i), C(\"__esDecorate\", o), C(\"__runInitializers\", l), C(\"__propKey\", u), C(\"__setFunctionName\", h), C(\"__metadata\", d), C(\"__awaiter\", w), C(\"__generator\", c), C(\"__exportStar\", g), C(\"__createBinding\", le), C(\"__values\", v), C(\"__read\", b), C(\"__spread\", O), C(\"__spreadArrays\", T), C(\"__spreadArray\", P), C(\"__await\", x), C(\"__asyncGenerator\", V), C(\"__asyncDelegator\", k), C(\"__asyncValues\", B), C(\"__makeTemplateObject\", K), C(\"__importStar\", M), C(\"__importDefault\", se), C(\"__classPrivateFieldGet\", pe), C(\"__classPrivateFieldSet\", De), C(\"__classPrivateFieldIn\", Oe);\n  });\n})(ei);\nvar Be = {};\nclass Ee {\n  constructor() {\n    this.contentTypeAssociatedFactories = /* @__PURE__ */ new Map();\n  }\n  getValidContentType() {\n    throw new Error(\"The registry supports multiple content types. Get the registered factory instead.\");\n  }\n  getRootParseNode(e, t) {\n    if (!e)\n      throw new Error(\"content type cannot be undefined or empty\");\n    if (!t)\n      throw new Error(\"content cannot be undefined or empty\");\n    const n = e.split(\";\")[0];\n    let a = this.contentTypeAssociatedFactories.get(n);\n    if (a)\n      return a.getRootParseNode(n, t);\n    const i = n.replace(/[^/]+\\+/gi, \"\");\n    if (a = this.contentTypeAssociatedFactories.get(i), a)\n      return a.getRootParseNode(i, t);\n    throw new Error(`Content type ${i} does not have a factory registered to be parsed`);\n  }\n}\nEe.defaultInstance = new Ee();\nclass Pn {\n  getValidContentType() {\n    return this._concrete.getValidContentType();\n  }\n  /**\n   * Creates a new proxy factory that wraps the specified concrete factory while composing the before and after callbacks.\n   * @param _concrete the concrete factory to wrap\n   * @param _onBefore the callback to invoke before the deserialization of any model object.\n   * @param _onAfter the callback to invoke after the deserialization of any model object.\n   */\n  constructor(e, t, n) {\n    if (this._concrete = e, this._onBefore = t, this._onAfter = n, !e)\n      throw new Error(\"_concrete cannot be undefined\");\n  }\n  getRootParseNode(e, t) {\n    const n = this._concrete.getRootParseNode(e, t), a = n.onBeforeAssignFieldValues, i = n.onAfterAssignFieldValues;\n    return n.onBeforeAssignFieldValues = (o) => {\n      this._onBefore && this._onBefore(o), a && a(o);\n    }, n.onAfterAssignFieldValues = (o) => {\n      this._onAfter && this._onAfter(o), i && i(o);\n    }, n;\n  }\n}\nclass Ce {\n  constructor() {\n    this.contentTypeAssociatedFactories = /* @__PURE__ */ new Map();\n  }\n  getValidContentType() {\n    throw new Error(\"The registry supports multiple content types. Get the registered factory instead.\");\n  }\n  getSerializationWriter(e) {\n    if (!e)\n      throw new Error(\"content type cannot be undefined or empty\");\n    const t = e.split(\";\")[0];\n    let n = this.contentTypeAssociatedFactories.get(t);\n    if (n)\n      return n.getSerializationWriter(t);\n    const a = t.replace(/[^/]+\\+/gi, \"\");\n    if (n = this.contentTypeAssociatedFactories.get(a), n)\n      return n.getSerializationWriter(a);\n    throw new Error(`Content type ${a} does not have a factory registered to be serialized`);\n  }\n}\nCe.defaultInstance = new Ce();\nclass Cn {\n  getValidContentType() {\n    return this._concrete.getValidContentType();\n  }\n  /**\n   * Creates a new proxy factory that wraps the specified concrete factory while composing the before and after callbacks.\n   * @param _concrete the concrete factory to wrap\n   * @param _onBefore the callback to invoke before the serialization of any model object.\n   * @param _onAfter the callback to invoke after the serialization of any model object.\n   * @param _onStart the callback to invoke when the serialization of a model object starts\n   */\n  constructor(e, t, n, a) {\n    if (this._concrete = e, this._onBefore = t, this._onAfter = n, this._onStart = a, !e)\n      throw new Error(\"_concrete cannot be undefined\");\n  }\n  getSerializationWriter(e) {\n    const t = this._concrete.getSerializationWriter(e), n = t.onBeforeObjectSerialization, a = t.onAfterObjectSerialization, i = t.onStartObjectSerialization;\n    return t.onBeforeObjectSerialization = (o) => {\n      this._onBefore && this._onBefore(o), n && n(o);\n    }, t.onAfterObjectSerialization = (o) => {\n      this._onAfter && this._onAfter(o), a && a(o);\n    }, t.onStartObjectSerialization = (o, l) => {\n      this._onStart && this._onStart(o, l), i && i(o, l);\n    }, t;\n  }\n}\nlet st;\nconst ti = new Uint8Array(16);\nfunction ri() {\n  if (!st && (st = typeof crypto < \"u\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !st))\n    throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n  return st(ti);\n}\nconst J = [];\nfor (let r = 0; r < 256; ++r)\n  J.push((r + 256).toString(16).slice(1));\nfunction ni(r, e = 0) {\n  return (J[r[e + 0]] + J[r[e + 1]] + J[r[e + 2]] + J[r[e + 3]] + \"-\" + J[r[e + 4]] + J[r[e + 5]] + \"-\" + J[r[e + 6]] + J[r[e + 7]] + \"-\" + J[r[e + 8]] + J[r[e + 9]] + \"-\" + J[r[e + 10]] + J[r[e + 11]] + J[r[e + 12]] + J[r[e + 13]] + J[r[e + 14]] + J[r[e + 15]]).toLowerCase();\n}\nconst ai = typeof crypto < \"u\" && crypto.randomUUID && crypto.randomUUID.bind(crypto), Nr = {\n  randomUUID: ai\n};\nfunction ii(r, e, t) {\n  if (Nr.randomUUID && !e && !r)\n    return Nr.randomUUID();\n  r = r || {};\n  const n = r.random || (r.rng || ri)();\n  if (n[6] = n[6] & 15 | 64, n[8] = n[8] & 63 | 128, e) {\n    t = t || 0;\n    for (let a = 0; a < 16; ++a)\n      e[t + a] = n[a];\n    return e;\n  }\n  return ni(n);\n}\nclass xn {\n  constructor() {\n    this.subscriptions = /* @__PURE__ */ new Map(), this.store = /* @__PURE__ */ new Map(), this.returnOnlyChangedValues = !1, this._initializationCompleted = !0;\n  }\n  get(e) {\n    const t = this.store.get(e);\n    if (t && (this.returnOnlyChangedValues && t.changed || !this.returnOnlyChangedValues))\n      return t.value;\n  }\n  set(e, t) {\n    const n = this.store.get(e), a = n == null ? void 0 : n.value;\n    n ? (n.value = t, n.changed = this.initializationCompleted) : this.store.set(e, {\n      changed: this.initializationCompleted,\n      value: t\n    }), this.subscriptions.forEach((i) => {\n      i(e, a, t);\n    });\n  }\n  enumerate() {\n    let e = [...this.store.entries()];\n    return this.returnOnlyChangedValues && (e = e.filter(([t, n]) => n.changed)), e.map(([t, n]) => ({ key: t, value: n }));\n  }\n  enumerateKeysForValuesChangedToNull() {\n    const e = [];\n    for (const [t, n] of this.store)\n      n.changed && !n.value && e.push(t);\n    return e;\n  }\n  subscribe(e, t) {\n    if (!e)\n      throw new Error(\"callback cannot be undefined\");\n    return t = t ?? ii(), this.subscriptions.set(t, e), t;\n  }\n  unsubscribe(e) {\n    this.subscriptions.delete(e);\n  }\n  clear() {\n    this.store.clear();\n  }\n  set initializationCompleted(e) {\n    this._initializationCompleted = e, this.store.forEach((t) => {\n      t.changed = !e;\n    });\n  }\n  get initializationCompleted() {\n    return this._initializationCompleted;\n  }\n}\nclass jn {\n  createBackingStore() {\n    return new xn();\n  }\n}\nclass Nn {\n}\nNn.instance = new jn();\nclass ct extends Pn {\n  /**\n   * Initializes a new instance of the BackingStoreParseNodeFactory class given the concrete implementation.\n   * @param concrete the concrete implementation of the ParseNodeFactory\n   */\n  constructor(e) {\n    super(e, (t) => {\n      const n = t;\n      n && n.backingStore && (n.backingStore.initializationCompleted = !1);\n    }, (t) => {\n      const n = t;\n      n && n.backingStore && (n.backingStore.initializationCompleted = !0);\n    });\n  }\n}\nclass dt extends Cn {\n  /**\n   * Initializes a new instance of the BackingStoreSerializationWriterProxyFactory class given a concrete implementation of SerializationWriterFactory.\n   * @param concrete a concrete implementation of SerializationWriterFactory to wrap.\n   */\n  constructor(e) {\n    super(e, (t) => {\n      const n = t;\n      n && n.backingStore && (n.backingStore.returnOnlyChangedValues = !0);\n    }, (t) => {\n      const n = t;\n      n && n.backingStore && (n.backingStore.returnOnlyChangedValues = !1, n.backingStore.initializationCompleted = !0);\n    }, (t, n) => {\n      const a = t;\n      if (a && a.backingStore) {\n        const i = a.backingStore.enumerateKeysForValuesChangedToNull();\n        for (const o of i)\n          n.writeNullValue(o);\n      }\n    });\n  }\n}\nfunction Qt(r) {\n  if (!r)\n    throw new Error(\"Type is required\");\n  const e = new r();\n  Ce.defaultInstance.contentTypeAssociatedFactories.set(e.getValidContentType(), e);\n}\nfunction Jt(r) {\n  if (!r)\n    throw new Error(\"Type is required\");\n  const e = new r();\n  Ee.defaultInstance.contentTypeAssociatedFactories.set(e.getValidContentType(), e);\n}\nfunction oi(r) {\n  if (!r)\n    throw new Error(\"Original must be specified\");\n  let e = r;\n  return r instanceof Ce ? Ir(r) : e = new dt(r), Ir(Ce.defaultInstance), jt(Ee.defaultInstance), e;\n}\nfunction si(r) {\n  if (!r)\n    throw new Error(\"Original must be specified\");\n  let e = r;\n  return r instanceof Ee ? jt(r) : e = new ct(r), jt(Ee.defaultInstance), e;\n}\nfunction jt(r) {\n  for (const [e, t] of r.contentTypeAssociatedFactories)\n    t instanceof ct || t instanceof Ee || r.contentTypeAssociatedFactories.set(e, new ct(t));\n}\nfunction Ir(r) {\n  for (const [e, t] of r.contentTypeAssociatedFactories)\n    t instanceof dt || t instanceof Ce || r.contentTypeAssociatedFactories.set(e, new dt(t));\n}\nclass ee extends Error {\n  constructor(e) {\n    super(e);\n  }\n}\nclass Zt {\n  /**\n   * Creates a new AllowedHostsValidator object with provided values.\n   * @param allowedHosts A list of valid hosts.  If the list is empty, all hosts are valid.\n   */\n  constructor(e = /* @__PURE__ */ new Set()) {\n    this.allowedHosts = e ?? /* @__PURE__ */ new Set();\n  }\n  /**\n   * Gets the list of valid hosts.  If the list is empty, all hosts are valid.\n   * @returns A list of valid hosts.  If the list is empty, all hosts are valid.\n   */\n  getAllowedHosts() {\n    return Array.from(this.allowedHosts);\n  }\n  /**\n   * Sets the list of valid hosts.  If the list is empty, all hosts are valid.\n   * @param allowedHosts A list of valid hosts.  If the list is empty, all hosts are valid.\n   */\n  setAllowedHosts(e) {\n    this.allowedHosts = e;\n  }\n  /**\n   * Checks whether the provided host is valid.\n   * @param url The url to check.\n   */\n  isUrlHostValid(e) {\n    var t;\n    if (!e)\n      return !1;\n    if (this.allowedHosts.size === 0)\n      return !0;\n    const n = e.split(\"://\");\n    if (n.length >= 2) {\n      const a = n[1];\n      if (a)\n        return this.isHostAndPathValid(a);\n    } else if (!e.startsWith(\"http\"))\n      return this.isHostAndPathValid(e);\n    return window && window.location && window.location.host ? this.allowedHosts.has((t = window.location.host) === null || t === void 0 ? void 0 : t.toLowerCase()) : !1;\n  }\n  isHostAndPathValid(e) {\n    const t = e.split(\"/\");\n    if (t.length >= 2) {\n      const n = t[0];\n      if (n)\n        return this.allowedHosts.has(n.toLowerCase());\n    }\n    return !1;\n  }\n}\nfunction In(r) {\n  if (!r.toLocaleLowerCase().startsWith(\"https://\") && !ui())\n    throw new Error(\"Authentication scheme can only be used with https requests\");\n}\nfunction ui() {\n  return window && window.location && window.location.protocol.toLowerCase() !== \"https:\";\n}\nclass li {\n  /**\n   * @constructor Creates an instance of ApiKeyAuthenticationProvider\n   * @param apiKey The API Key to use for authentication\n   * @param parameterName The name of the parameter to use for authentication\n   * @param location The location of the parameter to use for authentication\n   * @param validHosts The hosts that are allowed to use this authentication provider\n   */\n  constructor(e, t, n, a) {\n    if (this.apiKey = e, this.parameterName = t, this.location = n, e === void 0 || e === \"\")\n      throw new Error(\"apiKey cannot be null or empty\");\n    if (t === void 0 || t === \"\")\n      throw new Error(\"parameterName cannot be null or empty\");\n    if (n !== Te.QueryParameter && n !== Te.Header)\n      throw new Error(\"location must be either QueryParameter or Header\");\n    this.validator = new Zt(a);\n  }\n  authenticateRequest(e, t) {\n    const n = e.URL;\n    if (!n || !this.validator.isUrlHostValid(n))\n      return Promise.resolve();\n    switch (In(n), this.location) {\n      case Te.QueryParameter:\n        e.URL += (n.indexOf(\"?\") === -1 ? \"?\" : \"&\") + this.parameterName + \"=\" + this.apiKey;\n        break;\n      case Te.Header:\n        e.headers[this.parameterName] ? e.headers[this.parameterName].push(this.apiKey) : e.headers[this.parameterName] = [this.apiKey];\n        break;\n    }\n    return Promise.resolve();\n  }\n}\nvar Te;\n(function(r) {\n  r[r.QueryParameter = 0] = \"QueryParameter\", r[r.Header = 1] = \"Header\";\n})(Te || (Te = {}));\nclass Vn {\n  constructor() {\n    this.authenticateRequest = (e, t) => Promise.resolve();\n  }\n}\nclass be {\n  /**\n   *\n   * @param accessTokenProvider\n   */\n  constructor(e) {\n    this.accessTokenProvider = e, this.authenticateRequest = async (t, n) => {\n      if (!t)\n        throw new Error(\"request info cannot be null\");\n      if (n && n.claims && t.headers[be.authorizationHeaderKey] && delete t.headers[be.authorizationHeaderKey], !t.headers || !t.headers[be.authorizationHeaderKey]) {\n        const a = await this.accessTokenProvider.getAuthorizationToken(t.URL, n);\n        t.headers || (t.headers = {}), a && (t.headers[be.authorizationHeaderKey] = [`Bearer ${a}`]);\n      }\n    };\n  }\n}\nbe.authorizationHeaderKey = \"Authorization\";\nvar ci = typeof globalThis == \"object\" ? globalThis : typeof self == \"object\" ? self : typeof window == \"object\" ? window : typeof global == \"object\" ? global : {}, Pe = \"1.4.1\", Vr = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\nfunction di(r) {\n  var e = /* @__PURE__ */ new Set([r]), t = /* @__PURE__ */ new Set(), n = r.match(Vr);\n  if (!n)\n    return function() {\n      return !1;\n    };\n  var a = {\n    major: +n[1],\n    minor: +n[2],\n    patch: +n[3],\n    prerelease: n[4]\n  };\n  if (a.prerelease != null)\n    return function(l) {\n      return l === r;\n    };\n  function i(l) {\n    return t.add(l), !1;\n  }\n  function o(l) {\n    return e.add(l), !0;\n  }\n  return function(l) {\n    if (e.has(l))\n      return !0;\n    if (t.has(l))\n      return !1;\n    var u = l.match(Vr);\n    if (!u)\n      return i(l);\n    var h = {\n      major: +u[1],\n      minor: +u[2],\n      patch: +u[3],\n      prerelease: u[4]\n    };\n    return h.prerelease != null || a.major !== h.major ? i(l) : a.major === 0 ? a.minor === h.minor && a.patch <= h.patch ? o(l) : i(l) : a.minor <= h.minor ? o(l) : i(l);\n  };\n}\nvar hi = di(Pe), pi = Pe.split(\".\")[0], tt = Symbol.for(\"opentelemetry.js.api.\" + pi), rt = ci;\nfunction nt(r, e, t, n) {\n  var a;\n  n === void 0 && (n = !1);\n  var i = rt[tt] = (a = rt[tt]) !== null && a !== void 0 ? a : {\n    version: Pe\n  };\n  if (!n && i[r]) {\n    var o = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + r);\n    return t.error(o.stack || o.message), !1;\n  }\n  if (i.version !== Pe) {\n    var o = new Error(\"@opentelemetry/api: Registration of version v\" + i.version + \" for \" + r + \" does not match previously registered API v\" + Pe);\n    return t.error(o.stack || o.message), !1;\n  }\n  return i[r] = e, t.debug(\"@opentelemetry/api: Registered a global for \" + r + \" v\" + Pe + \".\"), !0;\n}\nfunction xe(r) {\n  var e, t, n = (e = rt[tt]) === null || e === void 0 ? void 0 : e.version;\n  if (!(!n || !hi(n)))\n    return (t = rt[tt]) === null || t === void 0 ? void 0 : t[r];\n}\nfunction at(r, e) {\n  e.debug(\"@opentelemetry/api: Unregistering a global for \" + r + \" v\" + Pe + \".\");\n  var t = rt[tt];\n  t && delete t[r];\n}\nvar fi = globalThis && globalThis.__read || function(r, e) {\n  var t = typeof Symbol == \"function\" && r[Symbol.iterator];\n  if (!t)\n    return r;\n  var n = t.call(r), a, i = [], o;\n  try {\n    for (; (e === void 0 || e-- > 0) && !(a = n.next()).done; )\n      i.push(a.value);\n  } catch (l) {\n    o = { error: l };\n  } finally {\n    try {\n      a && !a.done && (t = n.return) && t.call(n);\n    } finally {\n      if (o)\n        throw o.error;\n    }\n  }\n  return i;\n}, gi = globalThis && globalThis.__spreadArray || function(r, e, t) {\n  if (t || arguments.length === 2)\n    for (var n = 0, a = e.length, i; n < a; n++)\n      (i || !(n in e)) && (i || (i = Array.prototype.slice.call(e, 0, n)), i[n] = e[n]);\n  return r.concat(i || Array.prototype.slice.call(e));\n}, yi = (\n  /** @class */\n  function() {\n    function r(e) {\n      this._namespace = e.namespace || \"DiagComponentLogger\";\n    }\n    return r.prototype.debug = function() {\n      for (var e = [], t = 0; t < arguments.length; t++)\n        e[t] = arguments[t];\n      return Ke(\"debug\", this._namespace, e);\n    }, r.prototype.error = function() {\n      for (var e = [], t = 0; t < arguments.length; t++)\n        e[t] = arguments[t];\n      return Ke(\"error\", this._namespace, e);\n    }, r.prototype.info = function() {\n      for (var e = [], t = 0; t < arguments.length; t++)\n        e[t] = arguments[t];\n      return Ke(\"info\", this._namespace, e);\n    }, r.prototype.warn = function() {\n      for (var e = [], t = 0; t < arguments.length; t++)\n        e[t] = arguments[t];\n      return Ke(\"warn\", this._namespace, e);\n    }, r.prototype.verbose = function() {\n      for (var e = [], t = 0; t < arguments.length; t++)\n        e[t] = arguments[t];\n      return Ke(\"verbose\", this._namespace, e);\n    }, r;\n  }()\n);\nfunction Ke(r, e, t) {\n  var n = xe(\"diag\");\n  if (n)\n    return t.unshift(e), n[r].apply(n, gi([], fi(t), !1));\n}\nvar ie;\n(function(r) {\n  r[r.NONE = 0] = \"NONE\", r[r.ERROR = 30] = \"ERROR\", r[r.WARN = 50] = \"WARN\", r[r.INFO = 60] = \"INFO\", r[r.DEBUG = 70] = \"DEBUG\", r[r.VERBOSE = 80] = \"VERBOSE\", r[r.ALL = 9999] = \"ALL\";\n})(ie || (ie = {}));\nfunction mi(r, e) {\n  r < ie.NONE ? r = ie.NONE : r > ie.ALL && (r = ie.ALL), e = e || {};\n  function t(n, a) {\n    var i = e[n];\n    return typeof i == \"function\" && r >= a ? i.bind(e) : function() {\n    };\n  }\n  return {\n    error: t(\"error\", ie.ERROR),\n    warn: t(\"warn\", ie.WARN),\n    info: t(\"info\", ie.INFO),\n    debug: t(\"debug\", ie.DEBUG),\n    verbose: t(\"verbose\", ie.VERBOSE)\n  };\n}\nvar wi = globalThis && globalThis.__read || function(r, e) {\n  var t = typeof Symbol == \"function\" && r[Symbol.iterator];\n  if (!t)\n    return r;\n  var n = t.call(r), a, i = [], o;\n  try {\n    for (; (e === void 0 || e-- > 0) && !(a = n.next()).done; )\n      i.push(a.value);\n  } catch (l) {\n    o = { error: l };\n  } finally {\n    try {\n      a && !a.done && (t = n.return) && t.call(n);\n    } finally {\n      if (o)\n        throw o.error;\n    }\n  }\n  return i;\n}, vi = globalThis && globalThis.__spreadArray || function(r, e, t) {\n  if (t || arguments.length === 2)\n    for (var n = 0, a = e.length, i; n < a; n++)\n      (i || !(n in e)) && (i || (i = Array.prototype.slice.call(e, 0, n)), i[n] = e[n]);\n  return r.concat(i || Array.prototype.slice.call(e));\n}, bi = \"diag\", he = (\n  /** @class */\n  function() {\n    function r() {\n      function e(a) {\n        return function() {\n          for (var i = [], o = 0; o < arguments.length; o++)\n            i[o] = arguments[o];\n          var l = xe(\"diag\");\n          if (l)\n            return l[a].apply(l, vi([], wi(i), !1));\n        };\n      }\n      var t = this, n = function(a, i) {\n        var o, l, u;\n        if (i === void 0 && (i = { logLevel: ie.INFO }), a === t) {\n          var h = new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");\n          return t.error((o = h.stack) !== null && o !== void 0 ? o : h.message), !1;\n        }\n        typeof i == \"number\" && (i = {\n          logLevel: i\n        });\n        var d = xe(\"diag\"), w = mi((l = i.logLevel) !== null && l !== void 0 ? l : ie.INFO, a);\n        if (d && !i.suppressOverrideMessage) {\n          var c = (u = new Error().stack) !== null && u !== void 0 ? u : \"<failed to generate stacktrace>\";\n          d.warn(\"Current logger will be overwritten from \" + c), w.warn(\"Current logger will overwrite one already registered from \" + c);\n        }\n        return nt(\"diag\", w, t, !0);\n      };\n      t.setLogger = n, t.disable = function() {\n        at(bi, t);\n      }, t.createComponentLogger = function(a) {\n        return new yi(a);\n      }, t.verbose = e(\"verbose\"), t.debug = e(\"debug\"), t.info = e(\"info\"), t.warn = e(\"warn\"), t.error = e(\"error\");\n    }\n    return r.instance = function() {\n      return this._instance || (this._instance = new r()), this._instance;\n    }, r;\n  }()\n), _i = globalThis && globalThis.__read || function(r, e) {\n  var t = typeof Symbol == \"function\" && r[Symbol.iterator];\n  if (!t)\n    return r;\n  var n = t.call(r), a, i = [], o;\n  try {\n    for (; (e === void 0 || e-- > 0) && !(a = n.next()).done; )\n      i.push(a.value);\n  } catch (l) {\n    o = { error: l };\n  } finally {\n    try {\n      a && !a.done && (t = n.return) && t.call(n);\n    } finally {\n      if (o)\n        throw o.error;\n    }\n  }\n  return i;\n}, Ei = globalThis && globalThis.__values || function(r) {\n  var e = typeof Symbol == \"function\" && Symbol.iterator, t = e && r[e], n = 0;\n  if (t)\n    return t.call(r);\n  if (r && typeof r.length == \"number\")\n    return {\n      next: function() {\n        return r && n >= r.length && (r = void 0), { value: r && r[n++], done: !r };\n      }\n    };\n  throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Ri = (\n  /** @class */\n  function() {\n    function r(e) {\n      this._entries = e ? new Map(e) : /* @__PURE__ */ new Map();\n    }\n    return r.prototype.getEntry = function(e) {\n      var t = this._entries.get(e);\n      if (t)\n        return Object.assign({}, t);\n    }, r.prototype.getAllEntries = function() {\n      return Array.from(this._entries.entries()).map(function(e) {\n        var t = _i(e, 2), n = t[0], a = t[1];\n        return [n, a];\n      });\n    }, r.prototype.setEntry = function(e, t) {\n      var n = new r(this._entries);\n      return n._entries.set(e, t), n;\n    }, r.prototype.removeEntry = function(e) {\n      var t = new r(this._entries);\n      return t._entries.delete(e), t;\n    }, r.prototype.removeEntries = function() {\n      for (var e, t, n = [], a = 0; a < arguments.length; a++)\n        n[a] = arguments[a];\n      var i = new r(this._entries);\n      try {\n        for (var o = Ei(n), l = o.next(); !l.done; l = o.next()) {\n          var u = l.value;\n          i._entries.delete(u);\n        }\n      } catch (h) {\n        e = { error: h };\n      } finally {\n        try {\n          l && !l.done && (t = o.return) && t.call(o);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return i;\n    }, r.prototype.clear = function() {\n      return new r();\n    }, r;\n  }()\n), Ai = Symbol(\"BaggageEntryMetadata\"), Di = he.instance();\nfunction Oi(r) {\n  return r === void 0 && (r = {}), new Ri(new Map(Object.entries(r)));\n}\nfunction Si(r) {\n  return typeof r != \"string\" && (Di.error(\"Cannot create baggage metadata from unknown type: \" + typeof r), r = \"\"), {\n    __TYPE__: Ai,\n    toString: function() {\n      return r;\n    }\n  };\n}\nfunction er(r) {\n  return Symbol.for(r);\n}\nvar Ti = (\n  /** @class */\n  function() {\n    function r(e) {\n      var t = this;\n      t._currentContext = e ? new Map(e) : /* @__PURE__ */ new Map(), t.getValue = function(n) {\n        return t._currentContext.get(n);\n      }, t.setValue = function(n, a) {\n        var i = new r(t._currentContext);\n        return i._currentContext.set(n, a), i;\n      }, t.deleteValue = function(n) {\n        var a = new r(t._currentContext);\n        return a._currentContext.delete(n), a;\n      };\n    }\n    return r;\n  }()\n), qn = new Ti(), Ot = [\n  { n: \"error\", c: \"error\" },\n  { n: \"warn\", c: \"warn\" },\n  { n: \"info\", c: \"info\" },\n  { n: \"debug\", c: \"debug\" },\n  { n: \"verbose\", c: \"trace\" }\n], Pi = (\n  /** @class */\n  function() {\n    function r() {\n      function e(n) {\n        return function() {\n          for (var a = [], i = 0; i < arguments.length; i++)\n            a[i] = arguments[i];\n          if (console) {\n            var o = console[n];\n            if (typeof o != \"function\" && (o = console.log), typeof o == \"function\")\n              return o.apply(console, a);\n          }\n        };\n      }\n      for (var t = 0; t < Ot.length; t++)\n        this[Ot[t].n] = e(Ot[t].c);\n    }\n    return r;\n  }()\n), He = globalThis && globalThis.__extends || function() {\n  var r = function(e, t) {\n    return r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n, a) {\n      n.__proto__ = a;\n    } || function(n, a) {\n      for (var i in a)\n        Object.prototype.hasOwnProperty.call(a, i) && (n[i] = a[i]);\n    }, r(e, t);\n  };\n  return function(e, t) {\n    if (typeof t != \"function\" && t !== null)\n      throw new TypeError(\"Class extends value \" + String(t) + \" is not a constructor or null\");\n    r(e, t);\n    function n() {\n      this.constructor = e;\n    }\n    e.prototype = t === null ? Object.create(t) : (n.prototype = t.prototype, new n());\n  };\n}(), Ci = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.prototype.createHistogram = function(e, t) {\n      return Mi;\n    }, r.prototype.createCounter = function(e, t) {\n      return Fi;\n    }, r.prototype.createUpDownCounter = function(e, t) {\n      return ki;\n    }, r.prototype.createObservableGauge = function(e, t) {\n      return zi;\n    }, r.prototype.createObservableCounter = function(e, t) {\n      return Hi;\n    }, r.prototype.createObservableUpDownCounter = function(e, t) {\n      return Ui;\n    }, r.prototype.addBatchObservableCallback = function(e, t) {\n    }, r.prototype.removeBatchObservableCallback = function(e) {\n    }, r;\n  }()\n), tr = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r;\n  }()\n), xi = (\n  /** @class */\n  function(r) {\n    He(e, r);\n    function e() {\n      return r !== null && r.apply(this, arguments) || this;\n    }\n    return e.prototype.add = function(t, n) {\n    }, e;\n  }(tr)\n), ji = (\n  /** @class */\n  function(r) {\n    He(e, r);\n    function e() {\n      return r !== null && r.apply(this, arguments) || this;\n    }\n    return e.prototype.add = function(t, n) {\n    }, e;\n  }(tr)\n), Ni = (\n  /** @class */\n  function(r) {\n    He(e, r);\n    function e() {\n      return r !== null && r.apply(this, arguments) || this;\n    }\n    return e.prototype.record = function(t, n) {\n    }, e;\n  }(tr)\n), rr = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.prototype.addCallback = function(e) {\n    }, r.prototype.removeCallback = function(e) {\n    }, r;\n  }()\n), Ii = (\n  /** @class */\n  function(r) {\n    He(e, r);\n    function e() {\n      return r !== null && r.apply(this, arguments) || this;\n    }\n    return e;\n  }(rr)\n), Vi = (\n  /** @class */\n  function(r) {\n    He(e, r);\n    function e() {\n      return r !== null && r.apply(this, arguments) || this;\n    }\n    return e;\n  }(rr)\n), qi = (\n  /** @class */\n  function(r) {\n    He(e, r);\n    function e() {\n      return r !== null && r.apply(this, arguments) || this;\n    }\n    return e;\n  }(rr)\n), Fn = new Ci(), Fi = new xi(), Mi = new Ni(), ki = new ji(), Hi = new Ii(), zi = new Vi(), Ui = new qi();\nfunction Li() {\n  return Fn;\n}\nvar Nt;\n(function(r) {\n  r[r.INT = 0] = \"INT\", r[r.DOUBLE = 1] = \"DOUBLE\";\n})(Nt || (Nt = {}));\nvar Mn = {\n  get: function(r, e) {\n    if (r != null)\n      return r[e];\n  },\n  keys: function(r) {\n    return r == null ? [] : Object.keys(r);\n  }\n}, kn = {\n  set: function(r, e, t) {\n    r != null && (r[e] = t);\n  }\n}, Bi = globalThis && globalThis.__read || function(r, e) {\n  var t = typeof Symbol == \"function\" && r[Symbol.iterator];\n  if (!t)\n    return r;\n  var n = t.call(r), a, i = [], o;\n  try {\n    for (; (e === void 0 || e-- > 0) && !(a = n.next()).done; )\n      i.push(a.value);\n  } catch (l) {\n    o = { error: l };\n  } finally {\n    try {\n      a && !a.done && (t = n.return) && t.call(n);\n    } finally {\n      if (o)\n        throw o.error;\n    }\n  }\n  return i;\n}, Ki = globalThis && globalThis.__spreadArray || function(r, e, t) {\n  if (t || arguments.length === 2)\n    for (var n = 0, a = e.length, i; n < a; n++)\n      (i || !(n in e)) && (i || (i = Array.prototype.slice.call(e, 0, n)), i[n] = e[n]);\n  return r.concat(i || Array.prototype.slice.call(e));\n}, $i = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.prototype.active = function() {\n      return qn;\n    }, r.prototype.with = function(e, t, n) {\n      for (var a = [], i = 3; i < arguments.length; i++)\n        a[i - 3] = arguments[i];\n      return t.call.apply(t, Ki([n], Bi(a), !1));\n    }, r.prototype.bind = function(e, t) {\n      return t;\n    }, r.prototype.enable = function() {\n      return this;\n    }, r.prototype.disable = function() {\n      return this;\n    }, r;\n  }()\n), Wi = globalThis && globalThis.__read || function(r, e) {\n  var t = typeof Symbol == \"function\" && r[Symbol.iterator];\n  if (!t)\n    return r;\n  var n = t.call(r), a, i = [], o;\n  try {\n    for (; (e === void 0 || e-- > 0) && !(a = n.next()).done; )\n      i.push(a.value);\n  } catch (l) {\n    o = { error: l };\n  } finally {\n    try {\n      a && !a.done && (t = n.return) && t.call(n);\n    } finally {\n      if (o)\n        throw o.error;\n    }\n  }\n  return i;\n}, Gi = globalThis && globalThis.__spreadArray || function(r, e, t) {\n  if (t || arguments.length === 2)\n    for (var n = 0, a = e.length, i; n < a; n++)\n      (i || !(n in e)) && (i || (i = Array.prototype.slice.call(e, 0, n)), i[n] = e[n]);\n  return r.concat(i || Array.prototype.slice.call(e));\n}, St = \"context\", Yi = new $i(), wt = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.getInstance = function() {\n      return this._instance || (this._instance = new r()), this._instance;\n    }, r.prototype.setGlobalContextManager = function(e) {\n      return nt(St, e, he.instance());\n    }, r.prototype.active = function() {\n      return this._getContextManager().active();\n    }, r.prototype.with = function(e, t, n) {\n      for (var a, i = [], o = 3; o < arguments.length; o++)\n        i[o - 3] = arguments[o];\n      return (a = this._getContextManager()).with.apply(a, Gi([e, t, n], Wi(i), !1));\n    }, r.prototype.bind = function(e, t) {\n      return this._getContextManager().bind(e, t);\n    }, r.prototype._getContextManager = function() {\n      return xe(St) || Yi;\n    }, r.prototype.disable = function() {\n      this._getContextManager().disable(), at(St, he.instance());\n    }, r;\n  }()\n), ht;\n(function(r) {\n  r[r.NONE = 0] = \"NONE\", r[r.SAMPLED = 1] = \"SAMPLED\";\n})(ht || (ht = {}));\nvar nr = \"0000000000000000\", ar = \"00000000000000000000000000000000\", Hn = {\n  traceId: ar,\n  spanId: nr,\n  traceFlags: ht.NONE\n}, et = (\n  /** @class */\n  function() {\n    function r(e) {\n      e === void 0 && (e = Hn), this._spanContext = e;\n    }\n    return r.prototype.spanContext = function() {\n      return this._spanContext;\n    }, r.prototype.setAttribute = function(e, t) {\n      return this;\n    }, r.prototype.setAttributes = function(e) {\n      return this;\n    }, r.prototype.addEvent = function(e, t) {\n      return this;\n    }, r.prototype.setStatus = function(e) {\n      return this;\n    }, r.prototype.updateName = function(e) {\n      return this;\n    }, r.prototype.end = function(e) {\n    }, r.prototype.isRecording = function() {\n      return !1;\n    }, r.prototype.recordException = function(e, t) {\n    }, r;\n  }()\n), ir = er(\"OpenTelemetry Context Key SPAN\");\nfunction or(r) {\n  return r.getValue(ir) || void 0;\n}\nfunction Xi() {\n  return or(wt.getInstance().active());\n}\nfunction sr(r, e) {\n  return r.setValue(ir, e);\n}\nfunction Qi(r) {\n  return r.deleteValue(ir);\n}\nfunction Ji(r, e) {\n  return sr(r, new et(e));\n}\nfunction zn(r) {\n  var e;\n  return (e = or(r)) === null || e === void 0 ? void 0 : e.spanContext();\n}\nvar Zi = /^([0-9a-f]{32})$/i, eo = /^[0-9a-f]{16}$/i;\nfunction Un(r) {\n  return Zi.test(r) && r !== ar;\n}\nfunction Ln(r) {\n  return eo.test(r) && r !== nr;\n}\nfunction ur(r) {\n  return Un(r.traceId) && Ln(r.spanId);\n}\nfunction to(r) {\n  return new et(r);\n}\nvar Tt = wt.getInstance(), Bn = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.prototype.startSpan = function(e, t, n) {\n      n === void 0 && (n = Tt.active());\n      var a = !!(t != null && t.root);\n      if (a)\n        return new et();\n      var i = n && zn(n);\n      return ro(i) && ur(i) ? new et(i) : new et();\n    }, r.prototype.startActiveSpan = function(e, t, n, a) {\n      var i, o, l;\n      if (!(arguments.length < 2)) {\n        arguments.length === 2 ? l = t : arguments.length === 3 ? (i = t, l = n) : (i = t, o = n, l = a);\n        var u = o ?? Tt.active(), h = this.startSpan(e, i, u), d = sr(u, h);\n        return Tt.with(d, l, void 0, h);\n      }\n    }, r;\n  }()\n);\nfunction ro(r) {\n  return typeof r == \"object\" && typeof r.spanId == \"string\" && typeof r.traceId == \"string\" && typeof r.traceFlags == \"number\";\n}\nvar no = new Bn(), Kn = (\n  /** @class */\n  function() {\n    function r(e, t, n, a) {\n      this._provider = e, this.name = t, this.version = n, this.options = a;\n    }\n    return r.prototype.startSpan = function(e, t, n) {\n      return this._getTracer().startSpan(e, t, n);\n    }, r.prototype.startActiveSpan = function(e, t, n, a) {\n      var i = this._getTracer();\n      return Reflect.apply(i.startActiveSpan, i, arguments);\n    }, r.prototype._getTracer = function() {\n      if (this._delegate)\n        return this._delegate;\n      var e = this._provider.getDelegateTracer(this.name, this.version, this.options);\n      return e ? (this._delegate = e, this._delegate) : no;\n    }, r;\n  }()\n), ao = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.prototype.getTracer = function(e, t, n) {\n      return new Bn();\n    }, r;\n  }()\n), io = new ao(), It = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.prototype.getTracer = function(e, t, n) {\n      var a;\n      return (a = this.getDelegateTracer(e, t, n)) !== null && a !== void 0 ? a : new Kn(this, e, t, n);\n    }, r.prototype.getDelegate = function() {\n      var e;\n      return (e = this._delegate) !== null && e !== void 0 ? e : io;\n    }, r.prototype.setDelegate = function(e) {\n      this._delegate = e;\n    }, r.prototype.getDelegateTracer = function(e, t, n) {\n      var a;\n      return (a = this._delegate) === null || a === void 0 ? void 0 : a.getTracer(e, t, n);\n    }, r;\n  }()\n), Vt;\n(function(r) {\n  r[r.NOT_RECORD = 0] = \"NOT_RECORD\", r[r.RECORD = 1] = \"RECORD\", r[r.RECORD_AND_SAMPLED = 2] = \"RECORD_AND_SAMPLED\";\n})(Vt || (Vt = {}));\nvar qt;\n(function(r) {\n  r[r.INTERNAL = 0] = \"INTERNAL\", r[r.SERVER = 1] = \"SERVER\", r[r.CLIENT = 2] = \"CLIENT\", r[r.PRODUCER = 3] = \"PRODUCER\", r[r.CONSUMER = 4] = \"CONSUMER\";\n})(qt || (qt = {}));\nvar Ft;\n(function(r) {\n  r[r.UNSET = 0] = \"UNSET\", r[r.OK = 1] = \"OK\", r[r.ERROR = 2] = \"ERROR\";\n})(Ft || (Ft = {}));\nvar Mt = \"[_0-9a-z-*/]\", oo = \"[a-z]\" + Mt + \"{0,255}\", so = \"[a-z0-9]\" + Mt + \"{0,240}@[a-z]\" + Mt + \"{0,13}\", uo = new RegExp(\"^(?:\" + oo + \"|\" + so + \")$\"), lo = /^[ -~]{0,255}[!-~]$/, co = /,|=/;\nfunction ho(r) {\n  return uo.test(r);\n}\nfunction po(r) {\n  return lo.test(r) && !co.test(r);\n}\nvar qr = 32, fo = 512, Fr = \",\", Mr = \"=\", go = (\n  /** @class */\n  function() {\n    function r(e) {\n      this._internalState = /* @__PURE__ */ new Map(), e && this._parse(e);\n    }\n    return r.prototype.set = function(e, t) {\n      var n = this._clone();\n      return n._internalState.has(e) && n._internalState.delete(e), n._internalState.set(e, t), n;\n    }, r.prototype.unset = function(e) {\n      var t = this._clone();\n      return t._internalState.delete(e), t;\n    }, r.prototype.get = function(e) {\n      return this._internalState.get(e);\n    }, r.prototype.serialize = function() {\n      var e = this;\n      return this._keys().reduce(function(t, n) {\n        return t.push(n + Mr + e.get(n)), t;\n      }, []).join(Fr);\n    }, r.prototype._parse = function(e) {\n      e.length > fo || (this._internalState = e.split(Fr).reverse().reduce(function(t, n) {\n        var a = n.trim(), i = a.indexOf(Mr);\n        if (i !== -1) {\n          var o = a.slice(0, i), l = a.slice(i + 1, n.length);\n          ho(o) && po(l) && t.set(o, l);\n        }\n        return t;\n      }, /* @__PURE__ */ new Map()), this._internalState.size > qr && (this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, qr))));\n    }, r.prototype._keys = function() {\n      return Array.from(this._internalState.keys()).reverse();\n    }, r.prototype._clone = function() {\n      var e = new r();\n      return e._internalState = new Map(this._internalState), e;\n    }, r;\n  }()\n);\nfunction yo(r) {\n  return new go(r);\n}\nvar $n = wt.getInstance(), Wn = he.instance(), mo = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.prototype.getMeter = function(e, t, n) {\n      return Fn;\n    }, r;\n  }()\n), wo = new mo(), Pt = \"metrics\", vo = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.getInstance = function() {\n      return this._instance || (this._instance = new r()), this._instance;\n    }, r.prototype.setGlobalMeterProvider = function(e) {\n      return nt(Pt, e, he.instance());\n    }, r.prototype.getMeterProvider = function() {\n      return xe(Pt) || wo;\n    }, r.prototype.getMeter = function(e, t, n) {\n      return this.getMeterProvider().getMeter(e, t, n);\n    }, r.prototype.disable = function() {\n      at(Pt, he.instance());\n    }, r;\n  }()\n), Gn = vo.getInstance(), bo = (\n  /** @class */\n  function() {\n    function r() {\n    }\n    return r.prototype.inject = function(e, t) {\n    }, r.prototype.extract = function(e, t) {\n      return e;\n    }, r.prototype.fields = function() {\n      return [];\n    }, r;\n  }()\n), lr = er(\"OpenTelemetry Baggage Key\");\nfunction Yn(r) {\n  return r.getValue(lr) || void 0;\n}\nfunction _o() {\n  return Yn(wt.getInstance().active());\n}\nfunction Eo(r, e) {\n  return r.setValue(lr, e);\n}\nfunction Ro(r) {\n  return r.deleteValue(lr);\n}\nvar Ct = \"propagation\", Ao = new bo(), Do = (\n  /** @class */\n  function() {\n    function r() {\n      this.createBaggage = Oi, this.getBaggage = Yn, this.getActiveBaggage = _o, this.setBaggage = Eo, this.deleteBaggage = Ro;\n    }\n    return r.getInstance = function() {\n      return this._instance || (this._instance = new r()), this._instance;\n    }, r.prototype.setGlobalPropagator = function(e) {\n      return nt(Ct, e, he.instance());\n    }, r.prototype.inject = function(e, t, n) {\n      return n === void 0 && (n = kn), this._getGlobalPropagator().inject(e, t, n);\n    }, r.prototype.extract = function(e, t, n) {\n      return n === void 0 && (n = Mn), this._getGlobalPropagator().extract(e, t, n);\n    }, r.prototype.fields = function() {\n      return this._getGlobalPropagator().fields();\n    }, r.prototype.disable = function() {\n      at(Ct, he.instance());\n    }, r.prototype._getGlobalPropagator = function() {\n      return xe(Ct) || Ao;\n    }, r;\n  }()\n), Xn = Do.getInstance(), xt = \"trace\", Oo = (\n  /** @class */\n  function() {\n    function r() {\n      this._proxyTracerProvider = new It(), this.wrapSpanContext = to, this.isSpanContextValid = ur, this.deleteSpan = Qi, this.getSpan = or, this.getActiveSpan = Xi, this.getSpanContext = zn, this.setSpan = sr, this.setSpanContext = Ji;\n    }\n    return r.getInstance = function() {\n      return this._instance || (this._instance = new r()), this._instance;\n    }, r.prototype.setGlobalTracerProvider = function(e) {\n      var t = nt(xt, this._proxyTracerProvider, he.instance());\n      return t && this._proxyTracerProvider.setDelegate(e), t;\n    }, r.prototype.getTracerProvider = function() {\n      return xe(xt) || this._proxyTracerProvider;\n    }, r.prototype.getTracer = function(e, t) {\n      return this.getTracerProvider().getTracer(e, t);\n    }, r.prototype.disable = function() {\n      at(xt, he.instance()), this._proxyTracerProvider = new It();\n    }, r;\n  }()\n), pt = Oo.getInstance();\nconst So = {\n  context: $n,\n  diag: Wn,\n  metrics: Gn,\n  propagation: Xn,\n  trace: pt\n}, To = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  DiagConsoleLogger: Pi,\n  get DiagLogLevel() {\n    return ie;\n  },\n  INVALID_SPANID: nr,\n  INVALID_SPAN_CONTEXT: Hn,\n  INVALID_TRACEID: ar,\n  ProxyTracer: Kn,\n  ProxyTracerProvider: It,\n  ROOT_CONTEXT: qn,\n  get SamplingDecision() {\n    return Vt;\n  },\n  get SpanKind() {\n    return qt;\n  },\n  get SpanStatusCode() {\n    return Ft;\n  },\n  get TraceFlags() {\n    return ht;\n  },\n  get ValueType() {\n    return Nt;\n  },\n  baggageEntryMetadataFromString: Si,\n  context: $n,\n  createContextKey: er,\n  createNoopMeter: Li,\n  createTraceState: yo,\n  default: So,\n  defaultTextMapGetter: Mn,\n  defaultTextMapSetter: kn,\n  diag: Wn,\n  isSpanContextValid: ur,\n  isValidSpanId: Ln,\n  isValidTraceId: Un,\n  metrics: Gn,\n  propagation: Xn,\n  trace: pt\n}, Symbol.toStringTag, { value: \"Module\" }));\nclass Re {\n  /**\n   * Creates a new DateOnly from the given string.\n   * @returns The new DateOnly\n   * @throws An error if the year is invalid\n   * @throws An error if the month is invalid\n   * @throws An error if the day is invalid\n   */\n  constructor({ year: e = 0, month: t = 1, day: n = 1 }) {\n    this.day = n, this.month = t, this.year = e;\n  }\n  /**\n   * Creates a new DateOnly from the given date.\n   * @param date The date\n   * @returns The new DateOnly\n   * @throws An error if the date is invalid\n   */\n  static fromDate(e) {\n    if (!e)\n      throw new Error(\"Date cannot be undefined\");\n    return new Re({\n      year: e.getFullYear(),\n      month: e.getMonth() + 1,\n      day: e.getDate()\n    });\n  }\n  /**\n   * Parses a string into a DateOnly. The string can be of the ISO 8601 time only format or a number representing the ticks of a Date.\n   * @param value The value to parse\n   * @returns The parsed DateOnly.\n   * @throws An error if the value is invalid\n   */\n  static parse(e) {\n    var t, n, a, i, o, l;\n    if (!e || e.length === 0)\n      return;\n    const u = /^(?<year>\\d{4,})-(?<month>0[1-9]|1[012])-(?<day>0[1-9]|[12]\\d|3[01])$/gi.exec(e);\n    if (u) {\n      const d = parseInt((n = (t = u.groups) === null || t === void 0 ? void 0 : t.year) !== null && n !== void 0 ? n : \"\", 10), w = parseInt((i = (a = u.groups) === null || a === void 0 ? void 0 : a.month) !== null && i !== void 0 ? i : \"\", 10), c = parseInt((l = (o = u.groups) === null || o === void 0 ? void 0 : o.day) !== null && l !== void 0 ? l : \"\", 10);\n      return new Re({ year: d, month: w, day: c });\n    }\n    const h = Date.parse(e);\n    if (!isNaN(h)) {\n      const d = new Date(h);\n      return this.fromDate(d);\n    }\n    throw new Error(`Value is not a valid date-only representation: ${e}`);\n  }\n  /**\n   *  Returns a string representation of the date in the format YYYY-MM-DD\n   * @returns The date in the format YYYY-MM-DD ISO 8601\n   */\n  toString() {\n    return `${_e(this.year, 4)}-${_e(this.month)}-${_e(this.day)}`;\n  }\n}\nfunction _e(r, e = 2) {\n  return r.toString().padStart(e, \"0\");\n}\nvar kt = {};\n(function(r) {\n  Object.defineProperty(r, \"__esModule\", { value: !0 }), r.serialize = r.parse = r.InvalidDurationError = void 0;\n  const e = [\n    { unit: \"years\", symbol: \"Y\" },\n    { unit: \"months\", symbol: \"M\" },\n    { unit: \"weeks\", symbol: \"W\" },\n    { unit: \"days\", symbol: \"D\" },\n    { unit: \"hours\", symbol: \"H\" },\n    { unit: \"minutes\", symbol: \"M\" },\n    { unit: \"seconds\", symbol: \"S\" }\n  ], t = (u, h) => `((?<${u}>-?\\\\d*[\\\\.,]?\\\\d+)${h})?`, n = new RegExp([\n    \"(?<negative>-)?P\",\n    t(\"years\", \"Y\"),\n    t(\"months\", \"M\"),\n    t(\"weeks\", \"W\"),\n    t(\"days\", \"D\"),\n    \"(T\",\n    t(\"hours\", \"H\"),\n    t(\"minutes\", \"M\"),\n    t(\"seconds\", \"S\"),\n    \")?\"\n    // end optional time\n  ].join(\"\"));\n  function a(u) {\n    if (!(u === \"\" || u === void 0 || u === null))\n      return parseFloat(u.replace(\",\", \".\"));\n  }\n  r.InvalidDurationError = new Error(\"Invalid duration\");\n  function i(u) {\n    const h = n.exec(u);\n    if (!h || !h.groups)\n      throw r.InvalidDurationError;\n    let d = !0;\n    const w = {};\n    for (const { unit: g } of e)\n      h.groups[g] && (d = !1, w[g] = a(h.groups[g]));\n    if (d)\n      throw r.InvalidDurationError;\n    const c = w;\n    return h.groups.negative && (c.negative = !0), c;\n  }\n  r.parse = i;\n  const o = (u, h) => {\n    if (!u)\n      return;\n    let d = u.toString();\n    const w = d.indexOf(\"e\");\n    if (w > -1) {\n      const c = parseInt(d.slice(w + 2), 10);\n      d = u.toFixed(c + w - 2);\n    }\n    return d + h;\n  };\n  function l(u) {\n    return !u.years && !u.months && !u.weeks && !u.days && !u.hours && !u.minutes && !u.seconds ? \"PT0S\" : [\n      u.negative && \"-\",\n      \"P\",\n      o(u.years, \"Y\"),\n      o(u.months, \"M\"),\n      o(u.weeks, \"W\"),\n      o(u.days, \"D\"),\n      (u.hours || u.minutes || u.seconds) && \"T\",\n      o(u.hours, \"H\"),\n      o(u.minutes, \"M\"),\n      o(u.seconds, \"S\")\n    ].filter(Boolean).join(\"\");\n  }\n  r.serialize = l;\n})(kt);\nclass je {\n  /**\n   * Creates a new Duration value from the given parameters.\n   * @returns The new Duration\n   * @throws An error if years is invalid\n   * @throws An error if months is invalid\n   * @throws An error if weeks is invalid\n   * @throws An error if days is invalid\n   * @throws An error if hours is invalid\n   * @throws An error if minutes is invalid\n   * @throws An error if seconds is invalid\n   * @throws An error if weeks is used in combination with years or months\n   */\n  constructor({ years: e = 0, months: t = 0, weeks: n = 0, days: a = 0, hours: i = 0, minutes: o = 0, seconds: l = 0, negative: u = !1 }) {\n    if (e < 0 || e > 9999)\n      throw new Error(\"Year must be between 0 and 9999\");\n    if (t < 0 || t > 11)\n      throw new Error(\"Month must be between 0 and 11\");\n    if (n < 0 || n > 53)\n      throw new Error(\"Week must be between 0 and 53\");\n    if (a < 0 || a > 6)\n      throw new Error(\"Day must be between 0 and 6\");\n    if (i < 0 || i > 23)\n      throw new Error(\"Hour must be between 0 and 23\");\n    if (o < 0 || o > 59)\n      throw new Error(\"Minute must be between 0 and 59\");\n    if (l < 0 || l > 59)\n      throw new Error(\"Second must be between 0 and 59\");\n    if ((e > 0 || t > 0) && n > 0)\n      throw new Error(\"Cannot have weeks and months or weeks and years\");\n    this.years = e, this.months = t, this.weeks = n, this.days = a, this.hours = i, this.minutes = o, this.seconds = l, this.negative = u;\n  }\n  /**\n   * Parses a string into a Duration. The string can be of the ISO 8601 duration format.\n   * @param value The value to parse\n   * @returns The parsed Duration.\n   * @throws An error if the value is invalid\n   */\n  static parse(e) {\n    var t, n, a, i, o, l, u, h;\n    if (!e || e.length === 0)\n      return;\n    const d = kt.parse(e);\n    return new je({\n      years: (t = d.years) !== null && t !== void 0 ? t : 0,\n      months: (n = d.months) !== null && n !== void 0 ? n : 0,\n      weeks: (a = d.weeks) !== null && a !== void 0 ? a : 0,\n      days: (i = d.days) !== null && i !== void 0 ? i : 0,\n      hours: (o = d.hours) !== null && o !== void 0 ? o : 0,\n      minutes: (l = d.minutes) !== null && l !== void 0 ? l : 0,\n      seconds: (u = d.seconds) !== null && u !== void 0 ? u : 0,\n      negative: (h = d.negative) !== null && h !== void 0 ? h : !1\n    });\n  }\n  /**\n   * Serializes the duration to a string in the ISO 8601 duration format.\n   * @returns The serialized duration.\n   */\n  toString() {\n    return kt.serialize(this);\n  }\n}\nclass Ae {\n  /**\n   * Creates a new TimeOnly from the given parameters.\n   * @returns The new TimeOnly\n   * @throws An error if the milliseconds are invalid\n   * @throws An error if the seconds are invalid\n   * @throws An error if the minutes are invalid\n   * @throws An error if the hours are invalid\n   * @throws An error if the milliseconds are invalid\n   */\n  constructor({ hours: e = 0, minutes: t = 0, seconds: n = 0, picoseconds: a = 0 }) {\n    if (e < 0 || e > 23)\n      throw new Error(\"Hour must be between 0 and 23\");\n    if (t < 0 || t > 59)\n      throw new Error(\"Minute must be between 0 and 59\");\n    if (n < 0 || n > 59)\n      throw new Error(\"Second must be between 0 and 59\");\n    if (a < 0 || a > 999999999999)\n      throw new Error(\"Millisecond must be between 0 and 999999999999\");\n    this.hours = e, this.minutes = t, this.seconds = n, this.picoseconds = a;\n  }\n  /**\n   * Creates a new TimeOnly from the given date.\n   * @param date The date\n   * @returns The new TimeOnly\n   * @throws An error if the date is invalid\n   */\n  static fromDate(e) {\n    if (!e)\n      throw new Error(\"Date cannot be undefined\");\n    return new Ae({\n      hours: e.getHours(),\n      minutes: e.getMinutes(),\n      seconds: e.getSeconds(),\n      picoseconds: e.getMilliseconds() * 1e9\n    });\n  }\n  /**\n   * Parses a string into a TimeOnly. The string can be of the ISO 8601 time only format or a number representing the ticks of a Date.\n   * @param value The value to parse\n   * @returns The parsed TimeOnly.\n   * @throws An error if the value is invalid\n   */\n  static parse(e) {\n    var t, n, a, i, o, l, u, h;\n    if (!e || e.length === 0)\n      return;\n    const d = Date.parse(e);\n    if (isNaN(d)) {\n      const w = /^(?<hours>[01]\\d|2[0-3]):(?<minutes>[0-5]\\d):(?<seconds>[0-5]\\d)(?:[.](?<milliseconds>\\d{1,12}))?$/gi.exec(e);\n      if (w) {\n        const c = parseInt((n = (t = w.groups) === null || t === void 0 ? void 0 : t.hours) !== null && n !== void 0 ? n : \"\"), g = parseInt((i = (a = w.groups) === null || a === void 0 ? void 0 : a.minutes) !== null && i !== void 0 ? i : \"\"), v = parseInt((l = (o = w.groups) === null || o === void 0 ? void 0 : o.seconds) !== null && l !== void 0 ? l : \"\"), b = parseInt((h = (u = w.groups) === null || u === void 0 ? void 0 : u.milliseconds) !== null && h !== void 0 ? h : \"0\");\n        return new Ae({\n          hours: c,\n          minutes: g,\n          seconds: v,\n          picoseconds: b\n        });\n      } else\n        throw new Error(\"Value is not a valid time-only representation\");\n    } else {\n      const w = new Date(d);\n      return this.fromDate(w);\n    }\n  }\n  /**\n   * Returns a string representation of the time in the format HH:MM:SS.SSSSSSSSSSSSSS\n   * @returns The time in the format HH:MM:SS.SSSSSSSSSSSSSS\n   * @throws An error if the time is invalid\n   */\n  toString() {\n    return `${_e(this.hours, 2)}:${_e(this.minutes, 2)}:${_e(this.seconds, 2)}.${_e(this.picoseconds, 12)}`;\n  }\n}\nclass L {\n  constructor() {\n    this.pathParameters = {}, this.queryParameters = {}, this.headers = {}, this._requestOptions = {}, this.setContentFromParsable = (e, t, n) => {\n      pt.getTracer(L.tracerKey).startActiveSpan(\"setContentFromParsable\", (a) => {\n        try {\n          const i = this.getSerializationWriter(e, t, n);\n          this.headers || (this.headers = {}), Array.isArray(n) ? (a.setAttribute(L.requestTypeKey, \"object[]\"), i.writeCollectionOfObjectValues(void 0, n)) : (a.setAttribute(L.requestTypeKey, \"object\"), i.writeObjectValue(void 0, n)), this.setContentAndContentType(i, t);\n        } finally {\n          a.end();\n        }\n      });\n    }, this.setContentAndContentType = (e, t) => {\n      t && (this.headers[L.contentTypeHeader] = [t]), this.content = e.getSerializedContent();\n    }, this.getSerializationWriter = (e, t, ...n) => {\n      if (!e)\n        throw new Error(\"httpCore cannot be undefined\");\n      if (!t)\n        throw new Error(\"contentType cannot be undefined\");\n      if (!n || n.length === 0)\n        throw new Error(\"values cannot be undefined or empty\");\n      return e.getSerializationWriterFactory().getSerializationWriter(t);\n    }, this.setContentFromScalar = (e, t, n) => {\n      pt.getTracer(L.tracerKey).startActiveSpan(\"setContentFromScalar\", (a) => {\n        try {\n          const i = this.getSerializationWriter(e, t, n);\n          if (this.headers || (this.headers = {}), Array.isArray(n))\n            a.setAttribute(L.requestTypeKey, \"[]\"), i.writeCollectionOfPrimitiveValues(void 0, n);\n          else {\n            const o = typeof n;\n            if (a.setAttribute(L.requestTypeKey, o), !n)\n              i.writeNullValue(void 0);\n            else if (o === \"boolean\")\n              i.writeBooleanValue(void 0, n);\n            else if (o === \"string\")\n              i.writeStringValue(void 0, n);\n            else if (n instanceof Date)\n              i.writeDateValue(void 0, n);\n            else if (n instanceof Re)\n              i.writeDateOnlyValue(void 0, n);\n            else if (n instanceof Ae)\n              i.writeTimeOnlyValue(void 0, n);\n            else if (n instanceof je)\n              i.writeDurationValue(void 0, n);\n            else if (o === \"number\")\n              i.writeNumberValue(void 0, n);\n            else if (Array.isArray(n))\n              i.writeCollectionOfPrimitiveValues(void 0, n);\n            else\n              throw new Error(`encountered unknown value type during serialization ${o}`);\n          }\n          this.setContentAndContentType(i, t);\n        } finally {\n          a.end();\n        }\n      });\n    }, this.setStreamContent = (e) => {\n      this.headers[L.contentTypeHeader] = [\n        L.binaryContentType\n      ], this.content = e;\n    }, this.setQueryStringParametersFromRawObject = (e) => {\n      e && Object.entries(e).forEach(([t, n]) => {\n        let a = t;\n        if (e.getQueryParameter) {\n          const i = e.getQueryParameter(a);\n          i && (a = i);\n        }\n        this.queryParameters[a] = n;\n      });\n    };\n  }\n  /** Gets the URL of the request  */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  get URL() {\n    const e = this.pathParameters[L.raw_url_key];\n    if (this.uri)\n      return this.uri;\n    if (e)\n      return this.URL = e, e;\n    if (this.queryParameters)\n      if (this.pathParameters)\n        if (this.urlTemplate) {\n          const t = new Ba.URI.Template(this.urlTemplate), n = {};\n          for (const a in this.queryParameters)\n            this.queryParameters[a] && (n[a] = this.queryParameters[a]);\n          for (const a in this.pathParameters)\n            this.pathParameters[a] && (n[a] = this.pathParameters[a]);\n          return t.expand(n);\n        } else\n          throw new Error(\"urlTemplate cannot be undefined\");\n      else\n        throw new Error(\"pathParameters cannot be undefined\");\n    else\n      throw new Error(\"queryParameters cannot be undefined\");\n  }\n  /** Sets the URL of the request */\n  set URL(e) {\n    if (!e)\n      throw new Error(\"URL cannot be undefined\");\n    this.uri = e, this.queryParameters = {}, this.pathParameters = {};\n  }\n  /** Gets the request options for the request. */\n  getRequestOptions() {\n    return this._requestOptions;\n  }\n  /** Adds the headers for the request. */\n  addRequestHeaders(e) {\n    if (e)\n      for (const t in e)\n        this.headers[t] = e[t];\n  }\n  /** Adds the request options for the request. */\n  addRequestOptions(e) {\n    !e || e.length === 0 || e.forEach((t) => {\n      this._requestOptions[t.getKey()] = t;\n    });\n  }\n  /** Removes the request options for the request. */\n  removeRequestOptions(...e) {\n    !e || e.length === 0 || e.forEach((t) => {\n      delete this._requestOptions[t.getKey()];\n    });\n  }\n}\nL.raw_url_key = \"request-raw-url\";\nL.binaryContentType = \"application/octet-stream\";\nL.contentTypeHeader = \"Content-Type\";\nL.tracerKey = \"@microsoft/kiota-abstractions\";\nL.requestTypeKey = \"com.microsoft.kiota.request.type\";\nfunction Z(r) {\n  const e = {};\n  if (typeof r == \"string\")\n    e[L.raw_url_key] = r;\n  else if (r)\n    for (const t in r)\n      e[t] = r[t];\n  return e;\n}\nclass Po {\n  constructor(e, t, n) {\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    if (n === void 0)\n      throw new Error(\"urlTemplate cannot be undefined\");\n    this.pathParameters = Z(e), this.requestAdapter = t, this.urlTemplate = n;\n  }\n}\nvar oe;\n(function(r) {\n  r.GET = \"GET\", r.POST = \"POST\", r.PATCH = \"PATCH\", r.DELETE = \"DELETE\", r.OPTIONS = \"OPTIONS\", r.CONNECT = \"CONNECT\", r.TRACE = \"TRACE\", r.HEAD = \"HEAD\", r.PUT = \"PUT\";\n})(oe || (oe = {}));\nclass cr {\n  handleResponseAsync(e, t) {\n    return this.value = e, this.errorMappings = t, Promise.resolve(void 0);\n  }\n}\nclass dr {\n}\ndr.CallAndGetNative = async (r, e, t, n) => {\n  const a = new cr();\n  return await r(e, t, n, a), a.value;\n};\ndr.CallAndGetNativeWithBody = async (r, e, t, n, a) => {\n  const i = new cr();\n  return await r(e, t, n, a, i), i.value;\n};\nfunction Qn(r) {\n  return r && r.length > 0 ? r.substring(0, 1).toLocaleUpperCase() + r.substring(1) : \"\";\n}\nconst Co = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  AllowedHostsValidator: Zt,\n  AnonymousAuthenticationProvider: Vn,\n  ApiError: ee,\n  ApiKeyAuthenticationProvider: li,\n  get ApiKeyLocation() {\n    return Te;\n  },\n  BackingStoreFactorySingleton: Nn,\n  BackingStoreParseNodeFactory: ct,\n  BackingStoreSerializationWriterProxyFactory: dt,\n  BaseBearerTokenAuthenticationProvider: be,\n  BaseRequestBuilder: Po,\n  DateOnly: Re,\n  Duration: je,\n  get HttpMethod() {\n    return oe;\n  },\n  InMemoryBackingStore: xn,\n  InMemoryBackingStoreFactory: jn,\n  NativeResponseHandler: cr,\n  NativeResponseWrapper: dr,\n  ParseNodeFactoryRegistry: Ee,\n  ParseNodeProxyFactory: Pn,\n  RequestInformation: L,\n  SerializationWriterFactoryRegistry: Ce,\n  SerializationWriterProxyFactory: Cn,\n  TimeOnly: Ae,\n  enableBackingStoreForParseNodeFactory: si,\n  enableBackingStoreForSerializationWriterFactory: oi,\n  formatSegment: _e,\n  getPathParameters: Z,\n  registerDefaultDeserializer: Jt,\n  registerDefaultSerializer: Qt,\n  toFirstCharacterUpper: Qn,\n  validateProtocol: In\n}, Symbol.toStringTag, { value: \"Module\" })), hr = /* @__PURE__ */ Tn(Co), ze = /* @__PURE__ */ Tn(To);\nvar $e = {}, We = {}, kr;\nfunction pr() {\n  if (kr)\n    return We;\n  kr = 1, Object.defineProperty(We, \"__esModule\", { value: !0 }), We.CustomFetchHandler = void 0;\n  const r = ve;\n  class e {\n    constructor(n) {\n      this.customFetch = n;\n    }\n    /**\n     * @public\n     * @async\n     * To execute the current middleware\n     * @param {Context} context - The request context object\n     * @returns A promise that resolves to nothing\n     */\n    execute(n, a) {\n      return r.__awaiter(this, void 0, void 0, function* () {\n        return yield this.customFetch(n, a);\n      });\n    }\n  }\n  return We.CustomFetchHandler = e, We;\n}\nvar Ge = {}, ft = {}, xo = {\n  get exports() {\n    return ft;\n  },\n  set exports(r) {\n    ft = r;\n  }\n}, Hr;\nfunction jo() {\n  return Hr || (Hr = 1, function(r, e) {\n    var t = function() {\n      if (typeof self < \"u\")\n        return self;\n      if (typeof window < \"u\")\n        return window;\n      if (typeof n < \"u\")\n        return n;\n      throw new Error(\"unable to locate global object\");\n    }, n = t();\n    r.exports = e = n.fetch, n.fetch && (e.default = n.fetch.bind(n)), e.Headers = n.Headers, e.Request = n.Request, e.Response = n.Response;\n  }(xo, ft)), ft;\n}\nvar Ye = {}, zr = {}, Ur;\nfunction Ue() {\n  return Ur || (Ur = 1, function(r) {\n    Object.defineProperty(r, \"__esModule\", { value: !0 }), r.getObservabilityOptionsFromRequest = r.ObservabilityOptionsImpl = r.ObservabilityOptionKey = void 0, r.ObservabilityOptionKey = \"ObservabilityOptionKey\";\n    class e {\n      constructor(a) {\n        this._originalOptions = a ?? {};\n      }\n      getKey() {\n        return r.ObservabilityOptionKey;\n      }\n      get includeEUIIAttributes() {\n        return this._originalOptions.includeEUIIAttributes;\n      }\n      set includeEUIIAttributes(a) {\n        this._originalOptions.includeEUIIAttributes = a;\n      }\n      getTracerInstrumentationName() {\n        return \"@microsoft/kiota-http-fetchlibrary\";\n      }\n    }\n    r.ObservabilityOptionsImpl = e;\n    function t(n) {\n      if (n) {\n        const a = n[r.ObservabilityOptionKey];\n        if (a instanceof e)\n          return a;\n      }\n    }\n    r.getObservabilityOptionsFromRequest = t;\n  }(zr)), zr;\n}\nvar Lr = {}, Br;\nfunction Jn() {\n  return Br || (Br = 1, function(r) {\n    Object.defineProperty(r, \"__esModule\", { value: !0 }), r.ParametersNameDecodingHandlerOptions = r.ParametersNameDecodingHandlerOptionsKey = void 0, r.ParametersNameDecodingHandlerOptionsKey = \"RetryHandlerOptionKey\";\n    class e {\n      getKey() {\n        return r.ParametersNameDecodingHandlerOptionsKey;\n      }\n      /**\n       * @public\n       * @constructor\n       * To create an instance of ParametersNameDecodingHandlerOptions\n       * @param {boolean} [enable = true] - Whether to decode the specified characters in the request query parameters names\n       * @param {string[]} [charactersToDecode = [\".\", \"-\", \"~\", \"$\"]] - The characters to decode\n       */\n      constructor(n = !0, a = [\".\", \"-\", \"~\", \"$\"]) {\n        this.enable = n, this.charactersToDecode = a;\n      }\n    }\n    r.ParametersNameDecodingHandlerOptions = e;\n  }(Lr)), Lr;\n}\nvar Kr;\nfunction Zn() {\n  if (Kr)\n    return Ye;\n  Kr = 1, Object.defineProperty(Ye, \"__esModule\", { value: !0 }), Ye.ParametersNameDecodingHandler = void 0;\n  const r = ze, e = Ue(), t = Jn();\n  class n {\n    /**\n     * @public\n     * @constructor\n     * To create an instance of ParametersNameDecodingHandler\n     * @param {ParametersNameDecodingHandlerOptions} [options = new ParametersNameDecodingHandlerOptions()] - The parameters name decoding handler options value\n     */\n    constructor(i = new t.ParametersNameDecodingHandlerOptions()) {\n      if (this.options = i, !i)\n        throw new Error(\"The options parameter is required.\");\n    }\n    /**\n     * @public\n     * @async\n     * To execute the current middleware\n     * @param {string} url - The url to be fetched\n     * @param {FetchRequestInit} requestInit - The request init object\n     * @param {Record<string, RequestOption>} [requestOptions] - The request options\n     * @returns A Promise that resolves to nothing\n     */\n    execute(i, o, l) {\n      let u = this.options;\n      l && l[t.ParametersNameDecodingHandlerOptionsKey] && (u = l[t.ParametersNameDecodingHandlerOptionsKey]);\n      const h = (0, e.getObservabilityOptionsFromRequest)(l);\n      return h ? r.trace.getTracer(h.getTracerInstrumentationName()).startActiveSpan(\"parametersNameDecodingHandler - execute\", (d) => {\n        try {\n          return d.setAttribute(\"com.microsoft.kiota.handler.parameters_name_decoding.enable\", u.enable), this.decodeParameters(i, o, u, l);\n        } finally {\n          d.end();\n        }\n      }) : this.decodeParameters(i, o, u, l);\n    }\n    decodeParameters(i, o, l, u) {\n      var h, d;\n      let w = i;\n      return l && l.enable && i.indexOf(\"%\") > -1 && l.charactersToDecode && l.charactersToDecode.length > 0 && l.charactersToDecode.forEach((c) => {\n        w = w.replace(new RegExp(`%${c.charCodeAt(0).toString(16)}`, \"gi\"), c);\n      }), (d = (h = this.next) === null || h === void 0 ? void 0 : h.execute(w, o, u)) !== null && d !== void 0 ? d : Promise.reject(new Error(\"The next middleware is not set.\"));\n    }\n  }\n  return Ye.ParametersNameDecodingHandler = n, Ye;\n}\nvar Xe = {}, $r = {}, Wr;\nfunction ea() {\n  return Wr || (Wr = 1, function(r) {\n    Object.defineProperty(r, \"__esModule\", { value: !0 }), r.RedirectHandlerOptions = r.RedirectHandlerOptionKey = void 0, r.RedirectHandlerOptionKey = \"RedirectHandlerOption\";\n    class e {\n      /**\n       * @public\n       * @constructor\n       * To create an instance of RedirectHandlerOptions\n       * @param {number} [maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS] - The max redirects value\n       * @param {ShouldRedirect} [shouldRedirect = RedirectHandlerOptions.DEFAULT_SHOULD_RETRY] - The should redirect callback\n       * @returns An instance of RedirectHandlerOptions\n       */\n      constructor(n = e.DEFAULT_MAX_REDIRECTS, a = e.defaultShouldRetry) {\n        if (this.maxRedirects = n, this.shouldRedirect = a, n > e.MAX_MAX_REDIRECTS) {\n          const i = new Error(`MaxRedirects should not be more than ${e.MAX_MAX_REDIRECTS}`);\n          throw i.name = \"MaxLimitExceeded\", i;\n        }\n        if (n < 0) {\n          const i = new Error(\"MaxRedirects should not be negative\");\n          throw i.name = \"MinExpectationNotMet\", i;\n        }\n        this.maxRedirects = n, this.shouldRedirect = a;\n      }\n      getKey() {\n        return r.RedirectHandlerOptionKey;\n      }\n    }\n    r.RedirectHandlerOptions = e, e.DEFAULT_MAX_REDIRECTS = 5, e.MAX_MAX_REDIRECTS = 20, e.defaultShouldRetry = () => !0;\n  }($r)), $r;\n}\nvar Gr;\nfunction ta() {\n  if (Gr)\n    return Xe;\n  Gr = 1, Object.defineProperty(Xe, \"__esModule\", { value: !0 }), Xe.RedirectHandler = void 0;\n  const r = ve, e = hr, t = ze, n = Ue(), a = ea();\n  class i {\n    /**\n     *\n     * @public\n     * @constructor\n     * To create an instance of RedirectHandler\n     * @param {RedirectHandlerOptions} [options = new RedirectHandlerOptions()] - The redirect handler options instance\n     * @returns An instance of RedirectHandler\n     */\n    constructor(l = new a.RedirectHandlerOptions()) {\n      if (this.options = l, !l)\n        throw new Error(\"The options parameter is required.\");\n    }\n    /**\n     * @private\n     * To check whether the response has the redirect status code or not\n     * @param {Response} response - The response object\n     * @returns A boolean representing whether the response contains the redirect status code or not\n     */\n    isRedirect(l) {\n      return i.REDIRECT_STATUS_CODES.has(l.status);\n    }\n    /**\n     * @private\n     * To check whether the response has location header or not\n     * @param {Response} response - The response object\n     * @returns A boolean representing the whether the response has location header or not\n     */\n    hasLocationHeader(l) {\n      return l.headers.has(i.LOCATION_HEADER);\n    }\n    /**\n     * @private\n     * To get the redirect url from location header in response object\n     * @param {Response} response - The response object\n     * @returns A redirect url from location header\n     */\n    getLocationHeader(l) {\n      return l.headers.get(i.LOCATION_HEADER);\n    }\n    /**\n     * @private\n     * To check whether the given url is a relative url or not\n     * @param {string} url - The url string value\n     * @returns A boolean representing whether the given url is a relative url or not\n     */\n    isRelativeURL(l) {\n      return l.indexOf(\"://\") === -1;\n    }\n    /**\n     * @private\n     * To check whether the authorization header in the request should be dropped for consequent redirected requests\n     * @param {string} requestUrl - The request url value\n     * @param {string} redirectUrl - The redirect url value\n     * @returns A boolean representing whether the authorization header in the request should be dropped for consequent redirected requests\n     */\n    shouldDropAuthorizationHeader(l, u) {\n      const h = /^[A-Za-z].+?:\\/\\/.+?(?=\\/|$)/, d = h.exec(l);\n      let w, c;\n      d !== null && (w = d[0]);\n      const g = h.exec(u);\n      return g !== null && (c = g[0]), typeof w < \"u\" && typeof c < \"u\" && w !== c;\n    }\n    /**\n     * @private\n     * @async\n     * To execute the next middleware and to handle in case of redirect response returned by the server\n     * @param {Context} context - The context object\n     * @param {number} redirectCount - The redirect count value\n     * @param {Record<string, RequestOption>} [requestOptions = {}] - The request options\n     * @param {RedirectHandlerOptions} currentOptions - The redirect handler options instance\n     * @param {string} tracerName - The name to use for the tracer\n     * @returns A promise that resolves to nothing\n     */\n    executeWithRedirect(l, u, h, d, w, c) {\n      var g;\n      return r.__awaiter(this, void 0, void 0, function* () {\n        const v = yield (g = this.next) === null || g === void 0 ? void 0 : g.execute(l, u, w);\n        if (!v)\n          throw new Error(\"Response is undefined\");\n        if (h < d.maxRedirects && this.isRedirect(v) && this.hasLocationHeader(v) && d.shouldRedirect(v)) {\n          if (++h, v.status === i.STATUS_CODE_SEE_OTHER)\n            u.method = e.HttpMethod.GET, delete u.body;\n          else {\n            const b = this.getLocationHeader(v);\n            b && (u.headers && !this.isRelativeURL(b) && this.shouldDropAuthorizationHeader(l, b) && delete u.headers[i.AUTHORIZATION_HEADER], l = b);\n          }\n          return c ? t.trace.getTracer(c).startActiveSpan(`redirectHandler - redirect ${h}`, (b) => {\n            try {\n              return b.setAttribute(\"com.microsoft.kiota.handler.redirect.count\", h), b.setAttribute(\"http.status_code\", v.status), this.executeWithRedirect(l, u, h, d, w);\n            } finally {\n              b.end();\n            }\n          }) : yield this.executeWithRedirect(l, u, h, d, w);\n        } else\n          return v;\n      });\n    }\n    /**\n     * @public\n     * @async\n     * To execute the current middleware\n     * @param {Context} context - The context object of the request\n     * @returns A Promise that resolves to nothing\n     */\n    execute(l, u, h) {\n      let d = this.options;\n      h && h[a.RedirectHandlerOptionKey] && (d = h[a.RedirectHandlerOptionKey]), u.redirect = i.MANUAL_REDIRECT;\n      const w = (0, n.getObservabilityOptionsFromRequest)(h);\n      return w ? t.trace.getTracer(w.getTracerInstrumentationName()).startActiveSpan(\"redirectHandler - execute\", (c) => {\n        try {\n          return c.setAttribute(\"com.microsoft.kiota.handler.redirect.enable\", !0), this.executeWithRedirect(l, u, 0, d, h, w.getTracerInstrumentationName());\n        } finally {\n          c.end();\n        }\n      }) : this.executeWithRedirect(l, u, 0, d, h);\n    }\n  }\n  return Xe.RedirectHandler = i, i.REDIRECT_STATUS_CODES = /* @__PURE__ */ new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n    // Moved Permanently\n  ]), i.STATUS_CODE_SEE_OTHER = 303, i.LOCATION_HEADER = \"Location\", i.AUTHORIZATION_HEADER = \"Authorization\", i.MANUAL_REDIRECT = \"manual\", Xe;\n}\nvar Qe = {}, me = {}, Yr;\nfunction fr() {\n  if (Yr)\n    return me;\n  Yr = 1, Object.defineProperty(me, \"__esModule\", { value: !0 }), me.appendRequestHeader = me.setRequestHeader = me.getRequestHeader = void 0;\n  const r = (n, a) => {\n    if (n && n.headers)\n      return n.headers[a];\n  };\n  me.getRequestHeader = r;\n  const e = (n, a, i) => {\n    n && (n.headers || (n.headers = {}), n.headers[a] = i);\n  };\n  me.setRequestHeader = e;\n  const t = (n, a, i, o = \", \") => {\n    n && (n.headers || (n.headers = {}), n.headers[a] ? n.headers[a] += `${o}${i}` : n.headers[a] = i);\n  };\n  return me.appendRequestHeader = t, me;\n}\nvar Xr = {}, Qr;\nfunction ra() {\n  return Qr || (Qr = 1, function(r) {\n    Object.defineProperty(r, \"__esModule\", { value: !0 }), r.RetryHandlerOptions = r.RetryHandlerOptionKey = void 0, r.RetryHandlerOptionKey = \"RetryHandlerOptionKey\";\n    class e {\n      /**\n       * @public\n       * @constructor\n       * To create an instance of RetryHandlerOptions\n       * @param {number} [delay = RetryHandlerOptions.DEFAULT_DELAY] - The delay value in seconds\n       * @param {number} [maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES] - The maxRetries value\n       * @param {ShouldRetry} [shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY] - The shouldRetry callback function\n       * @returns An instance of RetryHandlerOptions\n       */\n      constructor(n = e.DEFAULT_DELAY, a = e.DEFAULT_MAX_RETRIES, i = e.defaultShouldRetry) {\n        if (this.delay = n, this.maxRetries = a, this.shouldRetry = i, n > e.MAX_DELAY && a > e.MAX_MAX_RETRIES) {\n          const o = new Error(`Delay and MaxRetries should not be more than ${e.MAX_DELAY} and ${e.MAX_MAX_RETRIES}`);\n          throw o.name = \"MaxLimitExceeded\", o;\n        } else if (n > e.MAX_DELAY) {\n          const o = new Error(`Delay should not be more than ${e.MAX_DELAY}`);\n          throw o.name = \"MaxLimitExceeded\", o;\n        } else if (a > e.MAX_MAX_RETRIES) {\n          const o = new Error(`MaxRetries should not be more than ${e.MAX_MAX_RETRIES}`);\n          throw o.name = \"MaxLimitExceeded\", o;\n        } else if (n < 0 && a < 0) {\n          const o = new Error(\"Delay and MaxRetries should not be negative\");\n          throw o.name = \"MinExpectationNotMet\", o;\n        } else if (n < 0) {\n          const o = new Error(\"Delay should not be negative\");\n          throw o.name = \"MinExpectationNotMet\", o;\n        } else if (a < 0) {\n          const o = new Error(\"MaxRetries should not be negative\");\n          throw o.name = \"MinExpectationNotMet\", o;\n        }\n        this.delay = Math.min(n, e.MAX_DELAY), this.maxRetries = Math.min(a, e.MAX_MAX_RETRIES), this.shouldRetry = i;\n      }\n      /**\n       * @public\n       * To get the maximum delay\n       * @returns A maximum delay\n       */\n      getMaxDelay() {\n        return e.MAX_DELAY;\n      }\n      getKey() {\n        return r.RetryHandlerOptionKey;\n      }\n    }\n    r.RetryHandlerOptions = e, e.DEFAULT_DELAY = 3, e.DEFAULT_MAX_RETRIES = 3, e.MAX_DELAY = 180, e.MAX_MAX_RETRIES = 10, e.defaultShouldRetry = () => !0;\n  }(Xr)), Xr;\n}\nvar Jr;\nfunction na() {\n  if (Jr)\n    return Qe;\n  Jr = 1, Object.defineProperty(Qe, \"__esModule\", { value: !0 }), Qe.RetryHandler = void 0;\n  const r = ve, e = hr, t = ze, n = Ue(), a = fr(), i = ra();\n  class o {\n    /**\n     * @public\n     * @constructor\n     * To create an instance of RetryHandler\n     * @param {RetryHandlerOptions} [options = new RetryHandlerOptions()] - The retry handler options value\n     * @returns An instance of RetryHandler\n     */\n    constructor(u = new i.RetryHandlerOptions()) {\n      if (this.options = u, !u)\n        throw new Error(\"The options parameter is required.\");\n    }\n    /**\n     *\n     * @private\n     * To check whether the response has the retry status code\n     * @param {Response} response - The response object\n     * @returns Whether the response has retry status code or not\n     */\n    isRetry(u) {\n      return o.RETRY_STATUS_CODES.has(u.status);\n    }\n    /**\n     * @private\n     * To check whether the payload is buffered or not\n     * @param {RequestInit} options - The options of a request\n     * @returns Whether the payload is buffered or not\n     */\n    isBuffered(u) {\n      var h;\n      const d = u.method;\n      return !((d === e.HttpMethod.PUT || d === e.HttpMethod.PATCH || d === e.HttpMethod.POST) && ((h = (0, a.getRequestHeader)(u, \"content-type\")) === null || h === void 0 ? void 0 : h.toLowerCase()) === \"application/octet-stream\");\n    }\n    /**\n     * @private\n     * To get the delay for a retry\n     * @param {Response} response - The response object\n     * @param {number} retryAttempts - The current attempt count\n     * @param {number} delay - The delay value in seconds\n     * @returns A delay for a retry\n     */\n    getDelay(u, h, d) {\n      const w = () => Number(Math.random().toFixed(3)), c = u.headers !== void 0 ? u.headers.get(o.RETRY_AFTER_HEADER) : null;\n      let g;\n      return c !== null ? Number.isNaN(Number(c)) ? g = Math.round((new Date(c).getTime() - Date.now()) / 1e3) : g = Number(c) : g = h >= 2 ? this.getExponentialBackOffTime(h) + d + w() : d + w(), Math.min(g, this.options.getMaxDelay() + w());\n    }\n    /**\n     * @private\n     * To get an exponential back off value\n     * @param {number} attempts - The current attempt count\n     * @returns An exponential back off value\n     */\n    getExponentialBackOffTime(u) {\n      return Math.round(1 / 2 * (Math.pow(2, u) - 1));\n    }\n    /**\n     * @private\n     * @async\n     * To add delay for the execution\n     * @param {number} delaySeconds - The delay value in seconds\n     * @returns Nothing\n     */\n    sleep(u) {\n      return r.__awaiter(this, void 0, void 0, function* () {\n        const h = u * 1e3;\n        return new Promise((d) => setTimeout(d, h));\n      });\n    }\n    /**\n     * @private\n     * @async\n     * To execute the middleware with retries\n     * @param {Context} context - The context object\n     * @param {number} retryAttempts - The current attempt count\n     * @param {Record<string, RequestOption>} [requestOptions = {}] - The request options\n     * @param {RetryHandlerOptions} currentOptions - The retry middleware options instance\n     * @param {string} tracerName - The name to use for the tracer\n     * @returns A Promise that resolves to nothing\n     */\n    executeWithRetry(u, h, d, w, c, g) {\n      var v;\n      return r.__awaiter(this, void 0, void 0, function* () {\n        const b = yield (v = this.next) === null || v === void 0 ? void 0 : v.execute(u, h, c);\n        if (!b)\n          throw new Error(\"Response is undefined\");\n        if (d < w.maxRetries && this.isRetry(b) && this.isBuffered(h) && w.shouldRetry(w.delay, d, u, h, b)) {\n          if (++d, (0, a.setRequestHeader)(h, o.RETRY_ATTEMPT_HEADER, d.toString()), b) {\n            const O = this.getDelay(b, d, w.delay);\n            yield this.sleep(O);\n          }\n          return g ? yield t.trace.getTracer(g).startActiveSpan(`retryHandler - attempt ${d}`, (O) => {\n            try {\n              return O.setAttribute(\"http.retry_count\", d), O.setAttribute(\"http.status_code\", b.status), this.executeWithRetry(u, h, d, w, c);\n            } finally {\n              O.end();\n            }\n          }) : yield this.executeWithRetry(u, h, d, w, c);\n        } else\n          return b;\n      });\n    }\n    /**\n     * @public\n     * @async\n     * To execute the current middleware\n     * @param {Context} context - The context object of the request\n     * @returns A Promise that resolves to nothing\n     */\n    execute(u, h, d) {\n      let w = this.options;\n      d && d[i.RetryHandlerOptionKey] && (w = d[i.RetryHandlerOptionKey]);\n      const c = (0, n.getObservabilityOptionsFromRequest)(d);\n      return c ? t.trace.getTracer(c.getTracerInstrumentationName()).startActiveSpan(\"retryHandler - execute\", (g) => {\n        try {\n          return g.setAttribute(\"com.microsoft.kiota.handler.retry.enable\", !0), this.executeWithRetry(u, h, 0, w, d, c.getTracerInstrumentationName());\n        } finally {\n          g.end();\n        }\n      }) : this.executeWithRetry(u, h, 0, w, d);\n    }\n  }\n  return Qe.RetryHandler = o, o.RETRY_STATUS_CODES = /* @__PURE__ */ new Set([\n    429,\n    503,\n    504\n    // Gateway timeout\n  ]), o.RETRY_ATTEMPT_HEADER = \"Retry-Attempt\", o.RETRY_AFTER_HEADER = \"Retry-After\", Qe;\n}\nvar Je = {}, Zr = {}, ut = {}, en;\nfunction No() {\n  return en || (en = 1, Object.defineProperty(ut, \"__esModule\", { value: !0 }), ut.libraryVersion = void 0, ut.libraryVersion = \"1.0.0-preview.12\"), ut;\n}\nvar tn;\nfunction aa() {\n  return tn || (tn = 1, function(r) {\n    Object.defineProperty(r, \"__esModule\", { value: !0 }), r.UserAgentHandlerOptions = r.UserAgentHandlerOptionsKey = void 0;\n    const e = No();\n    r.UserAgentHandlerOptionsKey = \"UserAgentHandlerOptionKey\";\n    class t {\n      getKey() {\n        return r.UserAgentHandlerOptionsKey;\n      }\n      /**\n       * @public\n       * @constructor\n       * To create an instance of UserAgentHandlerOption\n       * @param {boolean} [enable = true] - Whether to add the user agent header to the request\n       * @param {string} [productName = \"kiota-typescript\"] - The product name to be added to the user agent header\n       * @param {string} [productVersion = \"1.0.0-preview.12\"] - The product version to be added to the user agent header\n       */\n      constructor(a = !0, i = \"kiota-typescript\", o = e.libraryVersion) {\n        this.enable = a, this.productName = i, this.productVersion = o;\n      }\n    }\n    r.UserAgentHandlerOptions = t;\n  }(Zr)), Zr;\n}\nvar rn;\nfunction ia() {\n  if (rn)\n    return Je;\n  rn = 1, Object.defineProperty(Je, \"__esModule\", { value: !0 }), Je.UserAgentHandler = void 0;\n  const r = ve, e = ze, t = Ue(), n = fr(), a = aa(), i = \"User-Agent\";\n  class o {\n    /**\n     * @public\n     * @constructor\n     * To create an instance of UserAgentHandler\n     * @param {UserAgentHandlerOption} [options = new UserAgentHandlerOption()] - The options for the middleware\n     */\n    constructor(u = new a.UserAgentHandlerOptions()) {\n      this._options = u;\n    }\n    /** @inheritdoc */\n    execute(u, h, d) {\n      const w = (0, t.getObservabilityOptionsFromRequest)(d);\n      return w ? e.trace.getTracer(w.getTracerInstrumentationName()).startActiveSpan(\"userAgentHandler - execute\", (c) => {\n        try {\n          return c.setAttribute(\"com.microsoft.kiota.handler.useragent.enable\", !0), this.addValue(u, h, d);\n        } finally {\n          c.end();\n        }\n      }) : this.addValue(u, h, d);\n    }\n    addValue(u, h, d) {\n      var w;\n      return r.__awaiter(this, void 0, void 0, function* () {\n        let c = this._options;\n        if (d && d[a.UserAgentHandlerOptionsKey] && (c = d[a.UserAgentHandlerOptionsKey]), c.enable) {\n          const v = `${c.productName}/${c.productVersion}`, b = (0, n.getRequestHeader)(h, i);\n          (!b || b.indexOf(v) === -1) && (0, n.appendRequestHeader)(h, i, v, \" \");\n        }\n        const g = yield (w = this.next) === null || w === void 0 ? void 0 : w.execute(u, h, d);\n        if (!g)\n          throw new Error(\"No response returned by the next middleware\");\n        return g;\n      });\n    }\n  }\n  return Je.UserAgentHandler = o, Je;\n}\nvar nn;\nfunction oa() {\n  if (nn)\n    return Ge;\n  nn = 1, Object.defineProperty(Ge, \"__esModule\", { value: !0 }), Ge.MiddlewareFactory = void 0;\n  const r = jo(), e = pr(), t = Zn(), n = ta(), a = na(), i = ia();\n  class o {\n    /**\n     * @public\n     * @static\n     * Returns the default middleware chain an array with the  middleware handlers\n     * @param {AuthenticationProvider} authProvider - The authentication provider instance\n     * @returns an array of the middleware handlers of the default middleware chain\n     */\n    static getDefaultMiddlewareChain(u = r.default) {\n      return [new a.RetryHandler(), new n.RedirectHandler(), new t.ParametersNameDecodingHandler(), new i.UserAgentHandler(), new e.CustomFetchHandler(u)];\n    }\n  }\n  return Ge.MiddlewareFactory = o, Ge;\n}\nvar an;\nfunction sa() {\n  if (an)\n    return $e;\n  an = 1, Object.defineProperty($e, \"__esModule\", { value: !0 }), $e.HttpClient = void 0;\n  const r = ve, e = pr(), t = oa();\n  class n {\n    /**\n     * @public\n     * @constructor\n     * Creates an instance of a HttpClient which contains the middlewares and fetch implementation for request execution.\n     * @param {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers\n     * If middlewares param is undefined, the httpClient instance will use the default array of middlewares.\n     * Set middlewares to `null` if you do not wish to use middlewares.\n     * If custom fetch is undefined, the httpClient instance uses the `DefaultFetchHandler`\n     * @param {(request: string, init?: RequestInit) => Promise < Response >} custom fetch function - a Fetch API implementation\n     *\n     */\n    constructor(i, ...o) {\n      this.customFetch = i, !o.length || !o[0] ? this.setMiddleware(...t.MiddlewareFactory.getDefaultMiddlewareChain(i)) : this.customFetch ? this.setMiddleware(...o, new e.CustomFetchHandler(i)) : this.setMiddleware(...o);\n    }\n    /**\n     * @private\n     * Processes the middleware parameter passed to set this.middleware property\n     * The calling function should validate if middleware is not undefined or not empty.\n     * @param {...Middleware} middleware - The middleware passed\n     * @returns Nothing\n     */\n    setMiddleware(...i) {\n      i.forEach((o, l) => {\n        l < i.length - 1 && (o.next = i[l + 1]);\n      }), this.middleware = i[0];\n    }\n    /**\n     * Executes a request and returns a promise resolving the response.\n     * @param url the request url.\n     * @param options request options.\n     * @returns the promise resolving the response.\n     */\n    executeFetch(i, o, l) {\n      return r.__awaiter(this, void 0, void 0, function* () {\n        if (this.customFetch && !this.middleware)\n          return this.customFetch(i, o);\n        if (this.middleware)\n          return yield this.middleware.execute(i, o, l);\n        throw new Error(\"Please provide middlewares or a custom fetch function to execute the request\");\n      });\n    }\n  }\n  return $e.HttpClient = n, $e;\n}\nvar on;\nfunction Io() {\n  if (on)\n    return Be;\n  on = 1, Object.defineProperty(Be, \"__esModule\", { value: !0 }), Be.FetchRequestAdapter = void 0;\n  const r = ve, e = hr, t = ze, n = sa(), a = Ue();\n  class i {\n    getSerializationWriterFactory() {\n      return this.serializationWriterFactory;\n    }\n    /**\n     * Instantiates a new http core service\n     * @param authenticationProvider the authentication provider to use.\n     * @param parseNodeFactory the parse node factory to deserialize responses.\n     * @param serializationWriterFactory the serialization writer factory to use to serialize request bodies.\n     * @param httpClient the http client to use to execute requests.\n     * @param observabilityOptions the observability options to use.\n     */\n    constructor(l, u = e.ParseNodeFactoryRegistry.defaultInstance, h = e.SerializationWriterFactoryRegistry.defaultInstance, d = new n.HttpClient(), w = new a.ObservabilityOptionsImpl()) {\n      if (this.authenticationProvider = l, this.parseNodeFactory = u, this.serializationWriterFactory = h, this.httpClient = d, this.baseUrl = \"\", this.getResponseContentType = (c) => {\n        var g;\n        const v = (g = c.headers.get(\"content-type\")) === null || g === void 0 ? void 0 : g.toLowerCase();\n        if (!v)\n          return;\n        const b = v.split(\";\");\n        if (b.length !== 0)\n          return b[0];\n      }, this.sendCollectionOfPrimitiveAsync = (c, g, v, b) => {\n        if (!c)\n          throw new Error(\"requestInfo cannot be null\");\n        return this.startTracingSpan(c, \"sendCollectionOfPrimitiveAsync\", (O) => r.__awaiter(this, void 0, void 0, function* () {\n          try {\n            const T = yield this.getHttpResponseMessage(c, O);\n            if (v)\n              return O.addEvent(i.eventResponseHandlerInvokedKey), yield v.handleResponseAsync(T, b);\n            try {\n              if (yield this.throwIfFailedResponse(T, b, O), this.shouldReturnUndefined(T))\n                return;\n              switch (g) {\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"Date\":\n                  const P = yield this.getRootParseNode(T);\n                  return t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(`getCollectionOf${g}Value`, (x) => {\n                    try {\n                      if (O.setAttribute(i.responseTypeAttributeKey, g), g === \"string\" || g === \"number\" || g === \"boolean\" || g === \"Date\" || g === \"Duration\" || g === \"DateOnly\" || g === \"TimeOnly\")\n                        return P.getCollectionOfPrimitiveValues();\n                      throw new Error(\"unexpected type to deserialize\");\n                    } finally {\n                      x.end();\n                    }\n                  });\n              }\n            } finally {\n              yield this.purgeResponseBody(T);\n            }\n          } finally {\n            O.end();\n          }\n        }));\n      }, this.sendCollectionAsync = (c, g, v, b) => {\n        if (!c)\n          throw new Error(\"requestInfo cannot be null\");\n        return this.startTracingSpan(c, \"sendCollectionAsync\", (O) => r.__awaiter(this, void 0, void 0, function* () {\n          try {\n            const T = yield this.getHttpResponseMessage(c, O);\n            if (v)\n              return O.addEvent(i.eventResponseHandlerInvokedKey), yield v.handleResponseAsync(T, b);\n            try {\n              if (yield this.throwIfFailedResponse(T, b, O), this.shouldReturnUndefined(T))\n                return;\n              const P = yield this.getRootParseNode(T);\n              return t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getCollectionOfObjectValues\", (x) => {\n                try {\n                  const V = P.getCollectionOfObjectValues(g);\n                  return O.setAttribute(i.responseTypeAttributeKey, \"object[]\"), V;\n                } finally {\n                  x.end();\n                }\n              });\n            } finally {\n              yield this.purgeResponseBody(T);\n            }\n          } finally {\n            O.end();\n          }\n        }));\n      }, this.startTracingSpan = (c, g, v) => {\n        var b;\n        const O = decodeURIComponent((b = c.urlTemplate) !== null && b !== void 0 ? b : \"\"), T = O.replace(/\\{\\?[^}]+\\}/gi, \"\");\n        return t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(`${g} - ${T}`, (P) => r.__awaiter(this, void 0, void 0, function* () {\n          try {\n            return P.setAttribute(\"http.uri_template\", O), yield v(P);\n          } finally {\n            P.end();\n          }\n        }));\n      }, this.sendAsync = (c, g, v, b) => {\n        if (!c)\n          throw new Error(\"requestInfo cannot be null\");\n        return this.startTracingSpan(c, \"sendAsync\", (O) => r.__awaiter(this, void 0, void 0, function* () {\n          try {\n            const T = yield this.getHttpResponseMessage(c, O);\n            if (v)\n              return O.addEvent(i.eventResponseHandlerInvokedKey), yield v.handleResponseAsync(T, b);\n            try {\n              if (yield this.throwIfFailedResponse(T, b, O), this.shouldReturnUndefined(T))\n                return;\n              const P = yield this.getRootParseNode(T);\n              return t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getObjectValue\", (x) => {\n                try {\n                  return O.setAttribute(i.responseTypeAttributeKey, \"object\"), P.getObjectValue(g);\n                } finally {\n                  x.end();\n                }\n              });\n            } finally {\n              yield this.purgeResponseBody(T);\n            }\n          } finally {\n            O.end();\n          }\n        }));\n      }, this.sendPrimitiveAsync = (c, g, v, b) => {\n        if (!c)\n          throw new Error(\"requestInfo cannot be null\");\n        return this.startTracingSpan(c, \"sendPrimitiveAsync\", (O) => r.__awaiter(this, void 0, void 0, function* () {\n          try {\n            const T = yield this.getHttpResponseMessage(c, O);\n            if (v)\n              return O.addEvent(i.eventResponseHandlerInvokedKey), yield v.handleResponseAsync(T, b);\n            try {\n              if (yield this.throwIfFailedResponse(T, b, O), this.shouldReturnUndefined(T))\n                return;\n              switch (g) {\n                case \"ArrayBuffer\":\n                  return T.body ? yield T.arrayBuffer() : void 0;\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"Date\":\n                  const P = yield this.getRootParseNode(T);\n                  return O.setAttribute(i.responseTypeAttributeKey, g), t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(`get${g}Value`, (x) => {\n                    try {\n                      if (g === \"string\")\n                        return P.getStringValue();\n                      if (g === \"number\")\n                        return P.getNumberValue();\n                      if (g === \"boolean\")\n                        return P.getBooleanValue();\n                      if (g === \"Date\")\n                        return P.getDateValue();\n                      if (g === \"Duration\")\n                        return P.getDurationValue();\n                      if (g === \"DateOnly\")\n                        return P.getDateOnlyValue();\n                      if (g === \"TimeOnly\")\n                        return P.getTimeOnlyValue();\n                      throw new Error(\"unexpected type to deserialize\");\n                    } finally {\n                      x.end();\n                    }\n                  });\n              }\n            } finally {\n              yield this.purgeResponseBody(T);\n            }\n          } finally {\n            O.end();\n          }\n        }));\n      }, this.sendNoResponseContentAsync = (c, g, v) => {\n        if (!c)\n          throw new Error(\"requestInfo cannot be null\");\n        return this.startTracingSpan(c, \"sendNoResponseContentAsync\", (b) => r.__awaiter(this, void 0, void 0, function* () {\n          try {\n            const O = yield this.getHttpResponseMessage(c, b);\n            if (g)\n              return b.addEvent(i.eventResponseHandlerInvokedKey), yield g.handleResponseAsync(O, v);\n            try {\n              yield this.throwIfFailedResponse(O, v, b);\n            } finally {\n              yield this.purgeResponseBody(O);\n            }\n          } finally {\n            b.end();\n          }\n        }));\n      }, this.enableBackingStore = (c) => {\n        if (this.parseNodeFactory = (0, e.enableBackingStoreForParseNodeFactory)(this.parseNodeFactory), this.serializationWriterFactory = (0, e.enableBackingStoreForSerializationWriterFactory)(this.serializationWriterFactory), !this.serializationWriterFactory || !this.parseNodeFactory)\n          throw new Error(\"unable to enable backing store\");\n        c && (e.BackingStoreFactorySingleton.instance = c);\n      }, this.getRootParseNode = (c) => t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getRootParseNode\", (g) => r.__awaiter(this, void 0, void 0, function* () {\n        try {\n          const v = yield c.arrayBuffer(), b = this.getResponseContentType(c);\n          if (!b)\n            throw new Error(\"no response content type found for deserialization\");\n          return this.parseNodeFactory.getRootParseNode(b, v);\n        } finally {\n          g.end();\n        }\n      })), this.shouldReturnUndefined = (c) => c.status === 204 || !c.body, this.purgeResponseBody = (c) => r.__awaiter(this, void 0, void 0, function* () {\n        !c.bodyUsed && c.body && (yield c.arrayBuffer());\n      }), this.throwIfFailedResponse = (c, g, v) => t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"throwIfFailedResponse\", (b) => r.__awaiter(this, void 0, void 0, function* () {\n        var O, T;\n        try {\n          if (c.ok)\n            return;\n          v.setStatus({\n            code: t.SpanStatusCode.ERROR,\n            message: \"received_error_response\"\n          });\n          const P = c.status, x = P.toString();\n          if (!g || !g[x] && !(P >= 400 && P < 500 && g[\"4XX\"]) && !(P >= 500 && P < 600 && g[\"5XX\"])) {\n            v.setAttribute(i.errorMappingFoundAttributeName, !1);\n            const K = new e.ApiError(\"the server returned an unexpected status code and no error class is registered for this code \" + P);\n            throw v.recordException(K), K;\n          }\n          v.setAttribute(i.errorMappingFoundAttributeName, !0);\n          const V = (T = (O = g[x]) !== null && O !== void 0 ? O : P >= 400 && P < 500 ? g[\"4XX\"] : void 0) !== null && T !== void 0 ? T : P >= 500 && P < 600 ? g[\"5XX\"] : void 0, k = yield this.getRootParseNode(c);\n          let B = t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getObjectValue\", (K) => {\n            try {\n              return k.getObjectValue(V);\n            } finally {\n              K.end();\n            }\n          });\n          throw v.setAttribute(i.errorBodyFoundAttributeName, !!B), B || (B = new e.ApiError(\"unexpected error type\" + typeof B)), v.recordException(B), B;\n        } finally {\n          b.end();\n        }\n      })), this.getHttpResponseMessage = (c, g, v) => t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getHttpResponseMessage\", (b) => r.__awaiter(this, void 0, void 0, function* () {\n        try {\n          if (!c)\n            throw new Error(\"requestInfo cannot be null\");\n          this.setBaseUrlForRequestInformation(c);\n          const O = {};\n          v && (O.claims = v), yield this.authenticationProvider.authenticateRequest(c, O);\n          const T = yield this.getRequestFromRequestInformation(c, g);\n          this.observabilityOptions && c.addRequestOptions([this.observabilityOptions]);\n          let P = yield this.httpClient.executeFetch(c.URL, T, c.getRequestOptions());\n          if (P = yield this.retryCAEResponseIfRequired(c, P, g, v), P) {\n            const x = P.headers.get(\"Content-Length\");\n            x && g.setAttribute(\"http.response_content_length\", parseInt(x));\n            const V = P.headers.get(\"Content-Type\");\n            V && g.setAttribute(\"http.response_content_type\", V), g.setAttribute(\"http.status_code\", P.status);\n          }\n          return P;\n        } finally {\n          b.end();\n        }\n      })), this.retryCAEResponseIfRequired = (c, g, v, b) => r.__awaiter(this, void 0, void 0, function* () {\n        return t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"retryCAEResponseIfRequired\", (O) => r.__awaiter(this, void 0, void 0, function* () {\n          try {\n            const T = this.getClaimsFromResponse(g, b);\n            return T ? (O.addEvent(i.authenticateChallengedEventKey), v.setAttribute(\"http.retry_count\", 1), yield this.purgeResponseBody(g), yield this.getHttpResponseMessage(c, v, T)) : g;\n          } finally {\n            O.end();\n          }\n        }));\n      }), this.getClaimsFromResponse = (c, g) => {\n        if (c.status === 401 && !g) {\n          const v = c.headers.get(\"WWW-Authenticate\");\n          if (v && /^Bearer /gi.test(v)) {\n            const b = v.replace(/^Bearer /gi, \"\").split(\",\");\n            for (const O of b) {\n              const T = O.trim();\n              if (/claims=\"[^\"]+\"/gi.test(T))\n                return T.replace(/claims=\"([^\"]+)\"/gi, \"$1\");\n            }\n          }\n        }\n      }, this.setBaseUrlForRequestInformation = (c) => {\n        c.pathParameters.baseurl = this.baseUrl;\n      }, this.getRequestFromRequestInformation = (c, g) => t.trace.getTracer(this.observabilityOptions.getTracerInstrumentationName()).startActiveSpan(\"getRequestFromRequestInformation\", (v) => r.__awaiter(this, void 0, void 0, function* () {\n        var b;\n        try {\n          const O = (b = c.httpMethod) === null || b === void 0 ? void 0 : b.toString(), T = c.URL;\n          g.setAttribute(\"http.method\", O ?? \"\");\n          const P = T.indexOf(\"://\") > -1, x = T.split(\"://\");\n          P && g.setAttribute(\"http.scheme\", x[0]);\n          const V = P ? x[1] : T;\n          g.setAttribute(\"http.host\", V.split(\"/\")[0]), this.observabilityOptions.includeEUIIAttributes && g.setAttribute(\"http.uri\", decodeURIComponent(T));\n          const k = c.headers[\"Content-Length\"];\n          k && g.setAttribute(\"http.request_content_length\", parseInt(k[0]));\n          const B = c.headers[\"Content-Type\"];\n          B && g.setAttribute(\"http.request_content_type\", B);\n          const K = c.headers ? Object.entries(c.headers).map(([M, se]) => [M.toLocaleLowerCase(), this.foldHeaderValue(se)]) : void 0;\n          return {\n            method: O,\n            headers: K,\n            body: c.content\n          };\n        } finally {\n          v.end();\n        }\n      })), this.foldHeaderValue = (c) => c.length < 1 ? \"\" : c.length === 1 ? c[0] : c.reduce((g, v) => g + v, \",\"), this.convertToNativeRequestAsync = (c) => r.__awaiter(this, void 0, void 0, function* () {\n        if (!c)\n          throw new Error(\"requestInfo cannot be null\");\n        return yield this.authenticationProvider.authenticateRequest(c, void 0), this.startTracingSpan(c, \"convertToNativeRequestAsync\", (g) => r.__awaiter(this, void 0, void 0, function* () {\n          return yield this.getRequestFromRequestInformation(c, g);\n        }));\n      }), !l)\n        throw new Error(\"authentication provider cannot be null\");\n      if (!u)\n        throw new Error(\"parse node factory cannot be null\");\n      if (!h)\n        throw new Error(\"serialization writer factory cannot be null\");\n      if (!d)\n        throw new Error(\"http client cannot be null\");\n      if (w)\n        this.observabilityOptions = new a.ObservabilityOptionsImpl(w);\n      else\n        throw new Error(\"observability options cannot be null\");\n    }\n  }\n  return Be.FetchRequestAdapter = i, i.responseTypeAttributeKey = \"com.microsoft.kiota.response.type\", i.eventResponseHandlerInvokedKey = \"com.microsoft.kiota.response_handler_invoked\", i.errorMappingFoundAttributeName = \"com.microsoft.kiota.error.mapping_found\", i.errorBodyFoundAttributeName = \"com.microsoft.kiota.error.body_found\", i.authenticateChallengedEventKey = \"com.microsoft.kiota.authenticate_challenge_received\", Be;\n}\nvar sn = {}, un;\nfunction Vo() {\n  return un || (un = 1, Object.defineProperty(sn, \"__esModule\", { value: !0 })), sn;\n}\nvar Ze = {}, qe = {}, ln;\nfunction qo() {\n  return ln || (ln = 1, Object.defineProperty(qe, \"__esModule\", { value: !0 }), qe.httpStatusCode = qe.methodStatusCode = void 0, qe.methodStatusCode = {\n    GET: [429, 500, 502, 503, 504],\n    POST: [429, 500, 502, 503, 504, 507],\n    PUT: [429, 500, 502, 503, 504, 507],\n    PATCH: [429, 500, 502, 503, 504],\n    DELETE: [429, 500, 502, 503, 504, 507]\n  }, qe.httpStatusCode = {\n    100: \"Continue\",\n    101: \"Switching Protocols\",\n    102: \"Processing\",\n    103: \"Early Hints\",\n    200: \"OK\",\n    201: \"Created\",\n    202: \"Accepted\",\n    203: \"Non-Authoritative Information\",\n    204: \"No Content\",\n    205: \"Reset Content\",\n    206: \"Partial Content\",\n    207: \"Multi-Status\",\n    208: \"Already Reported\",\n    226: \"IM Used\",\n    300: \"Multiple Choices\",\n    301: \"Moved Permanently\",\n    302: \"Found\",\n    303: \"See Other\",\n    304: \"Not Modified\",\n    305: \"Use Proxy\",\n    307: \"Temporary Redirect\",\n    308: \"Permanent Redirect\",\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    402: \"Payment Required\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    405: \"Method Not Allowed\",\n    406: \"Not Acceptable\",\n    407: \"Proxy Authentication Required\",\n    408: \"Request Timeout\",\n    409: \"Conflict\",\n    410: \"Gone\",\n    411: \"Length Required\",\n    412: \"Precondition Failed\",\n    413: \"Payload Too Large\",\n    414: \"URI Too Long\",\n    415: \"Unsupported Media Type\",\n    416: \"Range Not Satisfiable\",\n    417: \"Expectation Failed\",\n    421: \"Misdirected Request\",\n    422: \"Unprocessable Entity\",\n    423: \"Locked\",\n    424: \"Failed Dependency\",\n    425: \"Too Early\",\n    426: \"Upgrade Required\",\n    428: \"Precondition Required\",\n    429: \"Too Many Requests\",\n    431: \"Request Header Fields Too Large\",\n    451: \"Unavailable For Legal Reasons\",\n    500: \"Internal Server Error\",\n    501: \"Not Implemented\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    504: \"Gateway Timeout\",\n    505: \"HTTP Version Not Supported\",\n    506: \"Variant Also Negotiates\",\n    507: \"Insufficient Storage\",\n    508: \"Loop Detected\",\n    510: \"Not Extended\",\n    511: \"Network Authentication Required\"\n  }), qe;\n}\nvar cn = {}, dn;\nfunction ua() {\n  return dn || (dn = 1, function(r) {\n    Object.defineProperty(r, \"__esModule\", { value: !0 }), r.ChaosStrategy = void 0, function(e) {\n      e[e.MANUAL = 0] = \"MANUAL\", e[e.RANDOM = 1] = \"RANDOM\";\n    }(r.ChaosStrategy || (r.ChaosStrategy = {}));\n  }(cn)), cn;\n}\nvar hn;\nfunction Fo() {\n  if (hn)\n    return Ze;\n  hn = 1, Object.defineProperty(Ze, \"__esModule\", { value: !0 }), Ze.ChaosHandler = void 0;\n  const r = ze, e = Ue(), t = qo(), n = ua();\n  class a {\n    /**\n     * @public\n     * @constructor\n     * To create an instance of ChaosHandler\n     * @param {ChaosHandlerOptions} [options = new ChaosHandlerOptions()] - The chaos handler options instance\n     * @param manualMap - The Map passed by user containing url-statusCode info\n     */\n    constructor(o, l) {\n      this.options = {\n        chaosStrategy: n.ChaosStrategy.RANDOM,\n        statusMessage: \"A random status message\",\n        chaosPercentage: 10\n      };\n      const u = Object.assign(this.options, o);\n      if (u.chaosPercentage > 100 || u.chaosPercentage < 0)\n        throw new Error(\"Chaos Percentage must be set to a value between 0 and 100.\");\n      this.options = u, this.manualMap = l ?? /* @__PURE__ */ new Map();\n    }\n    /**\n     * Fetches a random status code for the RANDOM mode from the predefined array\n     * @private\n     * @param {string} requestMethod - the API method for the request\n     * @returns a random status code from a given set of status codes\n     */\n    generateRandomStatusCode(o) {\n      const l = t.methodStatusCode[o];\n      return l[Math.floor(Math.random() * l.length)];\n    }\n    /**\n     * Strips out the host url and returns the relative url only\n     * @private\n     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object\n     * @param {string} urlMethod - the complete URL\n     * @returns the string as relative URL\n     */\n    getRelativeURL(o, l) {\n      const u = o.baseUrl;\n      return u === void 0 ? l : l.replace(u, \"\").trim();\n    }\n    /**\n     * Gets a status code from the options or a randomly generated status code\n     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object\n     * @param {string} requestURL - the URL for the request\n     * @param {HttpMethod} requestMethod - the API method for the request\n     * @returns {number} generated statusCode\n     */\n    getStatusCode(o, l, u) {\n      if (o.chaosStrategy === n.ChaosStrategy.MANUAL) {\n        if (o.statusCode !== void 0)\n          return o.statusCode;\n        {\n          const h = this.getRelativeURL(o, l), d = this.manualMap.get(h);\n          if (d !== void 0) {\n            const w = d.get(u);\n            if (w !== void 0)\n              return w;\n          } else\n            this.manualMap.forEach((w, c) => {\n              var g;\n              if (new RegExp(c + \"$\").test(h)) {\n                const v = (g = this.manualMap.get(c)) === null || g === void 0 ? void 0 : g.get(u);\n                if (v !== void 0)\n                  return v;\n              }\n            });\n        }\n      }\n      return this.generateRandomStatusCode(u);\n    }\n    /**\n     * Generates a respondy for the chaoe response\n     * @private\n     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object\n     * @param {string} requestID - request id\n     * @param {string} requestDate - date of the request\n     *  * @returns response body\n     */\n    createResponseBody(o, l) {\n      if (o.responseBody)\n        return o.responseBody;\n      let u;\n      if (l >= 400) {\n        const h = t.httpStatusCode[l], d = o.statusMessage;\n        u = {\n          error: {\n            code: h,\n            message: d\n          }\n        };\n      } else\n        u = {};\n      return u;\n    }\n    /**\n     * Composes a new chaotic response code with the configured parameters\n     * @param {string} url\n     * @param {FetchRequestInit} fetchRequestInit\n     * @returns {Response}\n     */\n    createChaosResponse(o, l) {\n      var u;\n      if (l.method === void 0)\n        throw new Error(\"Request method must be defined.\");\n      const h = l.method, d = this.getStatusCode(this.options, o, h), w = this.createResponseBody(this.options, d), c = typeof w == \"string\" ? w : JSON.stringify(w);\n      return {\n        url: o,\n        body: c,\n        status: d,\n        statusText: this.options.statusMessage,\n        headers: (u = this.options.headers) !== null && u !== void 0 ? u : {}\n      };\n    }\n    execute(o, l, u) {\n      const h = (0, e.getObservabilityOptionsFromRequest)(u);\n      return h ? r.trace.getTracer(h.getTracerInstrumentationName()).startActiveSpan(\"chaosHandler - execute\", (d) => {\n        try {\n          return d.setAttribute(\"com.microsoft.kiota.handler.chaos.enable\", !0), this.runChaos(o, l, u);\n        } finally {\n          d.end();\n        }\n      }) : this.runChaos(o, l, u);\n    }\n    runChaos(o, l, u, h) {\n      if (Math.floor(Math.random() * 100) < this.options.chaosPercentage)\n        return h == null || h.addEvent(a.chaosHandlerTriggeredEventKey), Promise.resolve(this.createChaosResponse(o, l));\n      if (!this.next)\n        throw new Error(\"Please set the next middleware to continue the request\");\n      return this.next.execute(o, l, u);\n    }\n  }\n  return Ze.ChaosHandler = a, a.chaosHandlerTriggeredEventKey = \"com.microsoft.kiota.chaos_handler_triggered\", Ze;\n}\nvar lt = {}, pn;\nfunction Mo() {\n  return pn || (pn = 1, Object.defineProperty(lt, \"__esModule\", { value: !0 }), lt.ChaosHandlerOptionsKey = void 0, lt.ChaosHandlerOptionsKey = \"ChaosHandlerOptionsKey\"), lt;\n}\nvar fn = {}, gn;\nfunction ko() {\n  return gn || (gn = 1, Object.defineProperty(fn, \"__esModule\", { value: !0 })), fn;\n}\nvar yn = {}, mn;\nfunction Ho() {\n  return mn || (mn = 1, function(r) {\n    Object.defineProperty(r, \"__esModule\", { value: !0 }), r.TelemetryHandler = r.TelemetryHandlerOptionsKey = void 0, r.TelemetryHandlerOptionsKey = \"TelemetryHandlerOptionsKey\";\n    class e {\n      constructor(n) {\n        this.telemetryHandlerOptions = n;\n      }\n      execute(n, a, i) {\n        if (this.telemetryHandlerOptions && this.telemetryHandlerOptions.telemetryConfigurator ? this.telemetryHandlerOptions.telemetryConfigurator(n, a, i, this.telemetryHandlerOptions.telemetryInfomation) : i && i[r.TelemetryHandlerOptionsKey] && i[r.TelemetryHandlerOptionsKey].telemetryConfigurator(n, a, i), !this.next)\n          throw new Error(\"Please set the next middleware to continue the request\");\n        return this.next.execute(n, a, i);\n      }\n    }\n    r.TelemetryHandler = e;\n  }(yn)), yn;\n}\nvar wn = {}, vn;\nfunction zo() {\n  return vn || (vn = 1, Object.defineProperty(wn, \"__esModule\", { value: !0 })), wn;\n}\n(function(r) {\n  Object.defineProperty(r, \"__esModule\", { value: !0 });\n  const e = ve;\n  e.__exportStar(Io(), r), e.__exportStar(sa(), r), e.__exportStar(Vo(), r), e.__exportStar(Fo(), r), e.__exportStar(pr(), r), e.__exportStar(Zn(), r), e.__exportStar(ta(), r), e.__exportStar(na(), r), e.__exportStar(ia(), r), e.__exportStar(Mo(), r), e.__exportStar(ua(), r), e.__exportStar(Jn(), r), e.__exportStar(ea(), r), e.__exportStar(ra(), r), e.__exportStar(ko(), r), e.__exportStar(aa(), r), e.__exportStar(Ho(), r), e.__exportStar(oa(), r), e.__exportStar(fr(), r), e.__exportStar(zo(), r);\n})(Xt);\nclass Uo {\n  constructor() {\n    /** Request headers */\n    m(this, \"headers\");\n    /** Request options */\n    m(this, \"options\");\n  }\n}\nclass bn {\n  /**\n   * Instantiates a new Licenses_serviceId_body and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** User IDs to assign to the license. */\n    m(this, \"_assign\");\n    /** User IDs to remove from the license. */\n    m(this, \"_unassign\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * Gets the assign property value. User IDs to assign to the license.\n   * @returns a string\n   */\n  get assign() {\n    return this._assign;\n  }\n  /**\n   * Sets the assign property value. User IDs to assign to the license.\n   * @param value Value to set for the assign property.\n   */\n  set assign(e) {\n    this._assign = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      assign: (e) => {\n        this.assign = e.getCollectionOfPrimitiveValues();\n      },\n      unassign: (e) => {\n        this.unassign = e.getCollectionOfPrimitiveValues();\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeCollectionOfPrimitiveValues(\"assign\", this.assign), e.writeCollectionOfPrimitiveValues(\"unassign\", this.unassign), e.writeAdditionalData(this.additionalData);\n  }\n  /**\n   * Gets the unassign property value. User IDs to remove from the license.\n   * @returns a string\n   */\n  get unassign() {\n    return this._unassign;\n  }\n  /**\n   * Sets the unassign property value. User IDs to remove from the license.\n   * @param value Value to set for the unassign property.\n   */\n  set unassign(e) {\n    this._unassign = e;\n  }\n}\nclass Lo {\n  /**\n   * Instantiates a new V1alphaCheckPermissionResponse and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The description property */\n    m(this, \"_description\");\n    /** The result property */\n    m(this, \"_result\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * Gets the description property value. The description property\n   * @returns a string\n   */\n  get description() {\n    return this._description;\n  }\n  /**\n   * Sets the description property value. The description property\n   * @param value Value to set for the description property.\n   */\n  set description(e) {\n    this._description = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      description: (e) => {\n        this.description = e.getStringValue();\n      },\n      result: (e) => {\n        this.result = e.getBooleanValue();\n      }\n    };\n  }\n  /**\n   * Gets the result property value. The result property\n   * @returns a boolean\n   */\n  get result() {\n    return this._result;\n  }\n  /**\n   * Sets the result property value. The result property\n   * @param value Value to set for the result property.\n   */\n  set result(e) {\n    this._result = e;\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeStringValue(\"description\", this.description), e.writeBooleanValue(\"result\", this.result), e.writeAdditionalData(this.additionalData);\n  }\n}\nclass Bo {\n  /**\n   * Instantiates a new V1alphaGetLicenseResponse and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** Current number of available seats which can be assigned. */\n    m(this, \"_seatsAvailable\");\n    /** Total number of seats assignable. */\n    m(this, \"_seatsTotal\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      seatsAvailable: (e) => {\n        this.seatsAvailable = e.getNumberValue();\n      },\n      seatsTotal: (e) => {\n        this.seatsTotal = e.getNumberValue();\n      }\n    };\n  }\n  /**\n   * Gets the seatsAvailable property value. Current number of available seats which can be assigned.\n   * @returns a integer\n   */\n  get seatsAvailable() {\n    return this._seatsAvailable;\n  }\n  /**\n   * Sets the seatsAvailable property value. Current number of available seats which can be assigned.\n   * @param value Value to set for the seatsAvailable property.\n   */\n  set seatsAvailable(e) {\n    this._seatsAvailable = e;\n  }\n  /**\n   * Gets the seatsTotal property value. Total number of seats assignable.\n   * @returns a integer\n   */\n  get seatsTotal() {\n    return this._seatsTotal;\n  }\n  /**\n   * Sets the seatsTotal property value. Total number of seats assignable.\n   * @param value Value to set for the seatsTotal property.\n   */\n  set seatsTotal(e) {\n    this._seatsTotal = e;\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeNumberValue(\"seatsAvailable\", this.seatsAvailable), e.writeNumberValue(\"seatsTotal\", this.seatsTotal), e.writeAdditionalData(this.additionalData);\n  }\n}\nfunction Ko(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Wo();\n}\nclass $o {\n  /**\n   * Instantiates a new V1alphaGetSeatsResponse and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** Just user IDs, unless \"includeUsers\" = true. */\n    m(this, \"_users\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      users: (e) => {\n        this.users = e.getCollectionOfObjectValues(Ko);\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeCollectionOfObjectValues(\"users\", this.users), e.writeAdditionalData(this.additionalData);\n  }\n  /**\n   * Gets the users property value. Just user IDs, unless \"includeUsers\" = true.\n   * @returns a v1alphaGetSeatsUserRepresentation\n   */\n  get users() {\n    return this._users;\n  }\n  /**\n   * Sets the users property value. Just user IDs, unless \"includeUsers\" = true.\n   * @param value Value to set for the users property.\n   */\n  set users(e) {\n    this._users = e;\n  }\n}\nclass Wo {\n  /**\n   * Instantiates a new v1alphaGetSeatsUserRepresentation and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The assigned property */\n    m(this, \"_assigned\");\n    /** The displayName property */\n    m(this, \"_displayName\");\n    /** The id property */\n    m(this, \"_id\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * Gets the assigned property value. The assigned property\n   * @returns a boolean\n   */\n  get assigned() {\n    return this._assigned;\n  }\n  /**\n   * Sets the assigned property value. The assigned property\n   * @param value Value to set for the assigned property.\n   */\n  set assigned(e) {\n    this._assigned = e;\n  }\n  /**\n   * Gets the displayName property value. The displayName property\n   * @returns a string\n   */\n  get displayName() {\n    return this._displayName;\n  }\n  /**\n   * Sets the displayName property value. The displayName property\n   * @param value Value to set for the displayName property.\n   */\n  set displayName(e) {\n    this._displayName = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      assigned: (e) => {\n        this.assigned = e.getBooleanValue();\n      },\n      displayName: (e) => {\n        this.displayName = e.getStringValue();\n      },\n      id: (e) => {\n        this.id = e.getStringValue();\n      }\n    };\n  }\n  /**\n   * Gets the id property value. The id property\n   * @returns a string\n   */\n  get id() {\n    return this._id;\n  }\n  /**\n   * Sets the id property value. The id property\n   * @param value Value to set for the id property.\n   */\n  set id(e) {\n    this._id = e;\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeBooleanValue(\"assigned\", this.assigned), e.writeStringValue(\"displayName\", this.displayName), e.writeStringValue(\"id\", this.id), e.writeAdditionalData(this.additionalData);\n  }\n}\nclass Go {\n  /**\n   * Instantiates a new V1alphaModifySeatsResponse and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeAdditionalData(this.additionalData);\n  }\n}\nfunction Yo(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Lo();\n}\nclass Xo extends ee {\n  /**\n   * Instantiates a new V1alphaCheckPermissionResponse401Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass Qo extends ee {\n  /**\n   * Instantiates a new V1alphaCheckPermissionResponse403Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass Jo extends ee {\n  /**\n   * Instantiates a new V1alphaCheckPermissionResponse500Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nfunction Zo(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Xo();\n}\nfunction es(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Qo();\n}\nfunction ts(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Jo();\n}\nclass rs {\n  /**\n   * Instantiates a new CheckRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/v1alpha/check\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n  /**\n   * CheckPermission endpoint is used by the clients to determine if the given \"subject\" has the given permission \"Operation\" on a given \"Resource\"\n   * @param body The request body\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   * @returns a Promise of V1alphaCheckPermissionResponse\n   */\n  post(e, t, n) {\n    var o;\n    if (!e)\n      throw new Error(\"body cannot be undefined\");\n    const a = this.toPostRequestInformation(\n      e,\n      t\n    ), i = {\n      401: Zo,\n      403: es,\n      500: ts\n    };\n    return ((o = this.requestAdapter) == null ? void 0 : o.sendAsync(a, Yo, n, i)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * CheckPermission endpoint is used by the clients to determine if the given \"subject\" has the given permission \"Operation\" on a given \"Resource\"\n   * @param body The request body\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toPostRequestInformation(e, t) {\n    if (!e)\n      throw new Error(\"body cannot be undefined\");\n    const n = new L();\n    return n.urlTemplate = this.urlTemplate, n.pathParameters = this.pathParameters, n.httpMethod = oe.POST, n.headers.Accept = [\"application/json\"], t && (n.addRequestHeaders(t.headers), n.addRequestOptions(t.options)), n.setContentFromParsable(this.requestAdapter, \"application/json\", e), n;\n  }\n}\nfunction ns(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Bo();\n}\nfunction as(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Go();\n}\nclass is extends ee {\n  /**\n   * Instantiates a new V1alphaGetLicenseResponse401Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass os extends ee {\n  /**\n   * Instantiates a new V1alphaGetLicenseResponse403Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass ss extends ee {\n  /**\n   * Instantiates a new V1alphaGetLicenseResponse500Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass us extends ee {\n  /**\n   * Instantiates a new V1alphaModifySeatsResponse401Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass ls extends ee {\n  /**\n   * Instantiates a new V1alphaModifySeatsResponse403Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass cs extends ee {\n  /**\n   * Instantiates a new V1alphaModifySeatsResponse500Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nfunction ds(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new is();\n}\nfunction hs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new os();\n}\nfunction ps(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new ss();\n}\nfunction fs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new us();\n}\nfunction gs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new ls();\n}\nfunction ys(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new cs();\n}\nfunction ms(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new $o();\n}\nclass ws extends ee {\n  /**\n   * Instantiates a new V1alphaGetSeatsResponse401Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass vs extends ee {\n  /**\n   * Instantiates a new V1alphaGetSeatsResponse403Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nclass bs extends ee {\n  /**\n   * Instantiates a new V1alphaGetSeatsResponse500Error and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeAdditionalData(this.additionalData);\n  }\n}\nfunction _s(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new ws();\n}\nfunction Es(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new vs();\n}\nfunction Rs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new bs();\n}\nlet As = class {\n  /**\n   * Instantiates a new SeatsRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(r, e) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!r)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!e)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/v1alpha/orgs/{orgId}/licenses/{serviceId}/seats{?includeUsers*,filter*}\";\n    const t = Z(r);\n    this.pathParameters = t, this.requestAdapter = e;\n  }\n  /**\n   * Get details of users who are assigned to the license or available to be assigned.\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   * @returns a Promise of V1alphaGetSeatsResponse\n   */\n  get(r, e) {\n    var a;\n    const t = this.toGetRequestInformation(\n      r\n    ), n = {\n      401: _s,\n      403: Es,\n      500: Rs\n    };\n    return ((a = this.requestAdapter) == null ? void 0 : a.sendAsync(t, ms, e, n)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * Get details of users who are assigned to the license or available to be assigned.\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toGetRequestInformation(r) {\n    const e = new L();\n    return e.urlTemplate = this.urlTemplate, e.pathParameters = this.pathParameters, e.httpMethod = oe.GET, e.headers.Accept = [\"application/json\"], r && (e.addRequestHeaders(r.headers), e.setQueryStringParametersFromRawObject(r.queryParameters), e.addRequestOptions(r.options)), e;\n  }\n};\nclass Ds {\n  /**\n   * Instantiates a new WithServiceItemRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/v1alpha/orgs/{orgId}/licenses/{serviceId}\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n  /** The seats property */\n  get seats() {\n    return new As(this.pathParameters, this.requestAdapter);\n  }\n  /**\n   * Returns information about the license,  including the number of entitled seats (maximum assignable) and the current number of available seats.\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   * @returns a Promise of V1alphaGetLicenseResponse\n   */\n  get(e, t) {\n    var i;\n    const n = this.toGetRequestInformation(\n      e\n    ), a = {\n      401: ds,\n      403: hs,\n      500: ps\n    };\n    return ((i = this.requestAdapter) == null ? void 0 : i.sendAsync(n, ns, t, a)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * Assign or unassign users to or from the license.  Users assigned may access the service identified by serviceId as contracted with an organization (identified by orgId). Assigned users consume a limited number of seats in a license.\n   * @param body ModifySeatsRequest assuming we get the userId etc from the requester in the authorization header to validate if an \"admin\" can actually add licenses.\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   * @returns a Promise of V1alphaModifySeatsResponse\n   */\n  post(e, t, n) {\n    var o;\n    if (!e)\n      throw new Error(\"body cannot be undefined\");\n    const a = this.toPostRequestInformation(\n      e,\n      t\n    ), i = {\n      401: fs,\n      403: gs,\n      500: ys\n    };\n    return ((o = this.requestAdapter) == null ? void 0 : o.sendAsync(a, as, n, i)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * Returns information about the license,  including the number of entitled seats (maximum assignable) and the current number of available seats.\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toGetRequestInformation(e) {\n    const t = new L();\n    return t.urlTemplate = this.urlTemplate, t.pathParameters = this.pathParameters, t.httpMethod = oe.GET, t.headers.Accept = [\"application/json\"], e && (t.addRequestHeaders(e.headers), t.addRequestOptions(e.options)), t;\n  }\n  /**\n   * Assign or unassign users to or from the license.  Users assigned may access the service identified by serviceId as contracted with an organization (identified by orgId). Assigned users consume a limited number of seats in a license.\n   * @param body ModifySeatsRequest assuming we get the userId etc from the requester in the authorization header to validate if an \"admin\" can actually add licenses.\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toPostRequestInformation(e, t) {\n    if (!e)\n      throw new Error(\"body cannot be undefined\");\n    const n = new L();\n    return n.urlTemplate = this.urlTemplate, n.pathParameters = this.pathParameters, n.httpMethod = oe.POST, n.headers.Accept = [\"application/json\"], t && (n.addRequestHeaders(t.headers), n.addRequestOptions(t.options)), n.setContentFromParsable(this.requestAdapter, \"application/json\", e), n;\n  }\n}\nclass Os {\n  /**\n   * Instantiates a new LicensesRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/v1alpha/orgs/{orgId}/licenses\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n}\nclass Ss {\n  /**\n   * Instantiates a new WithOrgItemRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/v1alpha/orgs/{orgId}\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n  /** The licenses property */\n  get licenses() {\n    return new Os(this.pathParameters, this.requestAdapter);\n  }\n  /**\n   * Gets an item from the ApiSdk.v1alpha.orgs.item.licenses.item collection\n   * @param id Unique identifier of the item\n   * @returns a WithServiceItemRequestBuilder\n   */\n  licensesById(e) {\n    if (!e)\n      throw new Error(\"id cannot be undefined\");\n    const t = Z(this.pathParameters);\n    return t.serviceId = e, new Ds(t, this.requestAdapter);\n  }\n}\nclass Ts {\n  /**\n   * Instantiates a new OrgsRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/v1alpha/orgs\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n}\nclass Ps {\n  /**\n   * Instantiates a new V1alphaRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/v1alpha\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n  /** The check property */\n  get check() {\n    return new rs(this.pathParameters, this.requestAdapter);\n  }\n  /** The orgs property */\n  get orgs() {\n    return new Ts(this.pathParameters, this.requestAdapter);\n  }\n  /**\n   * Gets an item from the ApiSdk.v1alpha.orgs.item collection\n   * @param id Unique identifier of the item\n   * @returns a WithOrgItemRequestBuilder\n   */\n  orgsById(e) {\n    if (!e)\n      throw new Error(\"id cannot be undefined\");\n    const t = Z(this.pathParameters);\n    return t.orgId = e, new Ss(t, this.requestAdapter);\n  }\n}\nclass Fe {\n  /**\n   *\n   */\n  constructor(e) {\n    this._jsonNode = e, this.getStringValue = () => this._jsonNode, this.getChildNode = (t) => new Fe(this._jsonNode[t]), this.getBooleanValue = () => this._jsonNode, this.getNumberValue = () => this._jsonNode, this.getGuidValue = () => this._jsonNode, this.getDateValue = () => this._jsonNode, this.getDateOnlyValue = () => Re.parse(this.getStringValue()), this.getTimeOnlyValue = () => Ae.parse(this.getStringValue()), this.getDurationValue = () => je.parse(this.getStringValue()), this.getCollectionOfPrimitiveValues = () => this._jsonNode.map((t) => {\n      const n = new Fe(t), a = typeof t;\n      if (a === \"boolean\")\n        return n.getBooleanValue();\n      if (a === \"string\")\n        return n.getStringValue();\n      if (a === \"number\")\n        return n.getNumberValue();\n      if (t instanceof Date || t instanceof Re || t instanceof Ae || t instanceof je)\n        return n.getDateValue();\n      throw new Error(`encountered an unknown type during deserialization ${typeof t}`);\n    }), this.getCollectionOfObjectValues = (t) => this._jsonNode.map((n) => new Fe(n)).map((n) => n.getObjectValue(t)), this.getObjectValue = (t) => {\n      const n = t(this);\n      return this.onBeforeAssignFieldValues && this.onBeforeAssignFieldValues(n), this.assignFieldValues(n), this.onAfterAssignFieldValues && this.onAfterAssignFieldValues(n), n;\n    }, this.getEnumValues = (t) => {\n      const n = this.getStringValue();\n      return n ? n.split(\",\").map((a) => t[Qn(a)]) : [];\n    }, this.getEnumValue = (t) => {\n      const n = this.getEnumValues(t);\n      if (n.length > 0)\n        return n[0];\n    }, this.assignFieldValues = (t) => {\n      const n = t.getFieldDeserializers();\n      let a;\n      const i = t;\n      i && i.additionalData && (a = i.additionalData), this._jsonNode && Object.entries(this._jsonNode).forEach(([o, l]) => {\n        const u = n[o];\n        u ? u(new Fe(l)) : a && (a[o] = l);\n      });\n    };\n  }\n}\nclass Q {\n  constructor() {\n    this.writer = [], this.writeStringValue = (e, t) => {\n      e && t && this.writePropertyName(e), t && this.writer.push(`\"${t}\"`), e && t && this.writer.push(Q.propertySeparator);\n    }, this.writePropertyName = (e) => {\n      this.writer.push(`\"${e}\":`);\n    }, this.writeBooleanValue = (e, t) => {\n      const n = t != null;\n      e && n && this.writePropertyName(e), n && this.writer.push(`${t}`), e && n && this.writer.push(Q.propertySeparator);\n    }, this.writeNumberValue = (e, t) => {\n      e && t && this.writePropertyName(e), t && this.writer.push(`${t}`), e && t && this.writer.push(Q.propertySeparator);\n    }, this.writeGuidValue = (e, t) => {\n      e && t && this.writePropertyName(e), t && this.writer.push(`\"${t}\"`), e && t && this.writer.push(Q.propertySeparator);\n    }, this.writeDateValue = (e, t) => {\n      e && t && this.writePropertyName(e), t && this.writer.push(`\"${t.toISOString()}\"`), e && t && this.writer.push(Q.propertySeparator);\n    }, this.writeDateOnlyValue = (e, t) => {\n      e && t && this.writePropertyName(e), t && this.writer.push(`\"${t.toString()}\"`), e && t && this.writer.push(Q.propertySeparator);\n    }, this.writeTimeOnlyValue = (e, t) => {\n      e && t && this.writePropertyName(e), t && this.writer.push(`\"${t.toString()}\"`), e && t && this.writer.push(Q.propertySeparator);\n    }, this.writeDurationValue = (e, t) => {\n      e && t && this.writePropertyName(e), t && this.writer.push(`\"${t.toString()}\"`), e && t && this.writer.push(Q.propertySeparator);\n    }, this.writeNullValue = (e) => {\n      e && this.writePropertyName(e), this.writer.push(\"null\"), e && this.writer.push(Q.propertySeparator);\n    }, this.writeCollectionOfPrimitiveValues = (e, t) => {\n      t && (e && this.writePropertyName(e), this.writer.push(\"[\"), t.forEach((n, a) => {\n        this.writeAnyValue(void 0, n), a + 1 < t.length && this.writer.push(Q.propertySeparator);\n      }), this.writer.push(\"]\"), e && this.writer.push(Q.propertySeparator));\n    }, this.writeCollectionOfObjectValues = (e, t) => {\n      t && (e && this.writePropertyName(e), this.writer.push(\"[\"), t.forEach((n) => {\n        this.writeObjectValue(void 0, n), this.writer.push(Q.propertySeparator);\n      }), t.length > 0 && this.writer.pop(), this.writer.push(\"]\"), e && this.writer.push(Q.propertySeparator));\n    }, this.writeObjectValue = (e, t) => {\n      t && (e && this.writePropertyName(e), this.onBeforeObjectSerialization && this.onBeforeObjectSerialization(t), this.writer.push(\"{\"), this.onStartObjectSerialization && this.onStartObjectSerialization(t, this), t.serialize(this), this.onAfterObjectSerialization && this.onAfterObjectSerialization(t), this.writer.length > 0 && this.writer[this.writer.length - 1] === Q.propertySeparator && this.writer.pop(), this.writer.push(\"}\"), e && this.writer.push(Q.propertySeparator));\n    }, this.writeEnumValue = (e, ...t) => {\n      if (t.length > 0) {\n        const n = t.filter((a) => a !== void 0).map((a) => `${a}`);\n        n.length > 0 && this.writeStringValue(e, n.reduce((a, i) => `${a}, ${i}`));\n      }\n    }, this.getSerializedContent = () => this.convertStringToArrayBuffer(this.writer.join(\"\")), this.convertStringToArrayBuffer = (e) => {\n      const t = new ArrayBuffer(e.length), n = new Uint8Array(t);\n      for (let a = 0; a < e.length; a++)\n        n[a] = e.charCodeAt(a);\n      return t;\n    }, this.writeAdditionalData = (e) => {\n      if (e)\n        for (const t in e)\n          this.writeAnyValue(t, e[t]);\n    }, this.writeNonParsableObjectValue = (e, t) => {\n      e && this.writePropertyName(e), this.writer.push(JSON.stringify(t), Q.propertySeparator);\n    }, this.writeAnyValue = (e, t) => {\n      if (t != null) {\n        const n = typeof t;\n        if (n === \"boolean\")\n          this.writeBooleanValue(e, t);\n        else if (n === \"string\")\n          this.writeStringValue(e, t);\n        else if (t instanceof Date)\n          this.writeDateValue(e, t);\n        else if (t instanceof Re)\n          this.writeDateOnlyValue(e, t);\n        else if (t instanceof Ae)\n          this.writeTimeOnlyValue(e, t);\n        else if (t instanceof je)\n          this.writeDurationValue(e, t);\n        else if (n === \"number\")\n          this.writeNumberValue(e, t);\n        else if (Array.isArray(t))\n          this.writeCollectionOfPrimitiveValues(e, t);\n        else if (n === \"object\")\n          this.writeNonParsableObjectValue(e, t);\n        else\n          throw new Error(`encountered unknown value type during serialization ${n}`);\n      } else\n        this.writeNullValue(e);\n    };\n  }\n}\nQ.propertySeparator = \",\";\nclass la {\n  getValidContentType() {\n    return \"application/json\";\n  }\n  getRootParseNode(e, t) {\n    if (t)\n      if (e) {\n        if (this.getValidContentType() !== e)\n          throw new Error(`expected a ${this.getValidContentType()} content type`);\n      } else\n        throw new Error(\"content type cannot be undefined or empty\");\n    else\n      throw new Error(\"content cannot be undefined of empty\");\n    return new Fe(this.convertArrayBufferToJson(t));\n  }\n  convertArrayBufferToJson(e) {\n    const t = new TextDecoder().decode(e);\n    return JSON.parse(t);\n  }\n}\nclass ca {\n  getValidContentType() {\n    return \"application/json\";\n  }\n  getSerializationWriter(e) {\n    if (e) {\n      if (this.getValidContentType() !== e)\n        throw new Error(`expected a ${this.getValidContentType()} content type`);\n    } else\n      throw new Error(\"content type cannot be undefined or empty\");\n    return new Q();\n  }\n}\nclass Cs {\n  /**\n   * Instantiates a new Authz and sets the default values.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.pathParameters = {}, this.urlTemplate = \"{+baseurl}\", this.requestAdapter = e, Qt(ca), Jt(la), this.pathParameters.baseurl = \"\";\n  }\n  /** The v1alpha property */\n  get v1alpha() {\n    return new Ps(this.pathParameters, this.requestAdapter);\n  }\n}\nclass xs {\n  constructor(e) {\n    m(this, \"client\");\n    m(this, \"requestConfiguration\");\n    const t = new Xt.FetchRequestAdapter(\n      new Vn()\n    );\n    t.baseUrl = e || \"\", this.client = new Cs(t), this.requestConfiguration = new Uo(), this.requestConfiguration.headers = { Authorization: [\"token\"] };\n  }\n  async get(e, t) {\n    const n = await this.client.v1alpha.orgsById(e).licensesById(t).get(this.requestConfiguration);\n    return {\n      available: (n == null ? void 0 : n.seatsAvailable) || 0,\n      total: (n == null ? void 0 : n.seatsTotal) || 0\n    };\n  }\n  async seats(e, t, n = !0) {\n    var a, i;\n    return ((i = (a = await this.client.v1alpha.orgsById(e).licensesById(t).seats.get({\n      headers: this.requestConfiguration.headers,\n      queryParameters: { filter: n ? \"assigned\" : \"assignable\" }\n    })) == null ? void 0 : a.users) == null ? void 0 : i.map(({ id: o, displayName: l, assigned: u }) => ({\n      id: o || \"\",\n      name: l || \"\",\n      assigned: !!u\n    }))) || [];\n  }\n  async assign(e, t, n) {\n    const a = new bn();\n    a.assign = n, await this.modify(e, t, a);\n  }\n  async unAssign(e, t, n) {\n    const a = new bn();\n    a.unassign = n, await this.modify(e, t, a);\n  }\n  async modify(e, t, n) {\n    this.client.v1alpha.orgsById(e).licensesById(t).post(n, this.requestConfiguration);\n  }\n}\nfunction js(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Is();\n}\nclass Ns extends ee {\n  /**\n   * Instantiates a new ComplianceScreeningErrorResponse and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The errors property */\n    m(this, \"_errors\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * Gets the errors property value. The errors property\n   * @returns a ComplianceScreeningErrorResponse_errors\n   */\n  get errors() {\n    return this._errors;\n  }\n  /**\n   * Sets the errors property value. The errors property\n   * @param value Value to set for the errors property.\n   */\n  set errors(t) {\n    this._errors = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      errors: (t) => {\n        this.errors = t.getCollectionOfObjectValues(js);\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeCollectionOfObjectValues(\"errors\", this.errors), t.writeAdditionalData(this.additionalData);\n  }\n}\nclass Is {\n  /**\n   * Instantiates a new ComplianceScreeningErrorResponse_errors and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The error property */\n    m(this, \"_errorEscaped\");\n    /** The identity property */\n    m(this, \"_identity\");\n    /** The identityType property */\n    m(this, \"_identityType\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * Gets the error property value. The error property\n   * @returns a string\n   */\n  get errorEscaped() {\n    return this._errorEscaped;\n  }\n  /**\n   * Sets the error property value. The error property\n   * @param value Value to set for the errorEscaped property.\n   */\n  set errorEscaped(e) {\n    this._errorEscaped = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      error: (e) => {\n        this.errorEscaped = e.getStringValue();\n      },\n      identity: (e) => {\n        this.identity = e.getStringValue();\n      },\n      identityType: (e) => {\n        this.identityType = e.getStringValue();\n      }\n    };\n  }\n  /**\n   * Gets the identity property value. The identity property\n   * @returns a string\n   */\n  get identity() {\n    return this._identity;\n  }\n  /**\n   * Sets the identity property value. The identity property\n   * @param value Value to set for the identity property.\n   */\n  set identity(e) {\n    this._identity = e;\n  }\n  /**\n   * Gets the identityType property value. The identityType property\n   * @returns a string\n   */\n  get identityType() {\n    return this._identityType;\n  }\n  /**\n   * Sets the identityType property value. The identityType property\n   * @param value Value to set for the identityType property.\n   */\n  set identityType(e) {\n    this._identityType = e;\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeStringValue(\"error\", this.errorEscaped), e.writeStringValue(\"identity\", this.identity), e.writeStringValue(\"identityType\", this.identityType), e.writeAdditionalData(this.additionalData);\n  }\n}\nvar da = /* @__PURE__ */ ((r) => (r.OK = \"OK\", r.ERROR_T5 = \"ERROR_T5\", r.ERROR_OFAC = \"ERROR_OFAC\", r.ERROR_EXPORT_CONTROL = \"ERROR_EXPORT_CONTROL\", r))(da || {});\nclass Vs {\n  /**\n   * Instantiates a new ComplianceScreeningResponse and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The description property */\n    m(this, \"_description\");\n    /** The result property */\n    m(this, \"_result\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * Gets the description property value. The description property\n   * @returns a string\n   */\n  get description() {\n    return this._description;\n  }\n  /**\n   * Sets the description property value. The description property\n   * @param value Value to set for the description property.\n   */\n  set description(e) {\n    this._description = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      description: (e) => {\n        this.description = e.getStringValue();\n      },\n      result: (e) => {\n        this.result = e.getEnumValue(da);\n      }\n    };\n  }\n  /**\n   * Gets the result property value. The result property\n   * @returns a ComplianceScreeningResponse_result\n   */\n  get result() {\n    return this._result;\n  }\n  /**\n   * Sets the result property value. The result property\n   * @param value Value to set for the result property.\n   */\n  set result(e) {\n    this._result = e;\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeStringValue(\"description\", this.description), e.writeEnumValue(\"result\", this.result), e.writeAdditionalData(this.additionalData);\n  }\n}\nfunction qs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Ms();\n}\nclass Fs extends ee {\n  /**\n   * Instantiates a new DependencyErrorResponse and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The error property */\n    m(this, \"_errorEscaped\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * Gets the error property value. The error property\n   * @returns a DependencyErrorResponse_error\n   */\n  get errorEscaped() {\n    return this._errorEscaped;\n  }\n  /**\n   * Sets the error property value. The error property\n   * @param value Value to set for the errorEscaped property.\n   */\n  set errorEscaped(t) {\n    this._errorEscaped = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      error: (t) => {\n        this.errorEscaped = t.getObjectValue(qs);\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeObjectValue(\"error\", this.errorEscaped), t.writeAdditionalData(this.additionalData);\n  }\n}\nclass Ms {\n  /**\n   * Instantiates a new DependencyErrorResponse_error and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeAdditionalData(this.additionalData);\n  }\n}\nclass ks extends ee {\n  /**\n   * Instantiates a new ErrorEscaped and sets the default values.\n   */\n  constructor() {\n    super();\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The error property */\n    m(this, \"_errorEscaped\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(t) {\n    this._additionalData = t;\n  }\n  /**\n   * Gets the error property value. The error property\n   * @returns a string\n   */\n  get errorEscaped() {\n    return this._errorEscaped;\n  }\n  /**\n   * Sets the error property value. The error property\n   * @param value Value to set for the errorEscaped property.\n   */\n  set errorEscaped(t) {\n    this._errorEscaped = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      error: (t) => {\n        this.errorEscaped = t.getStringValue();\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    t.writeStringValue(\"error\", this.errorEscaped), t.writeAdditionalData(this.additionalData);\n  }\n}\nfunction Hs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Ls();\n}\nfunction zs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Bs();\n}\nclass Us {\n  /**\n   * Instantiates a new ListPagination and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The links property */\n    m(this, \"_links\");\n    /** The meta property */\n    m(this, \"_meta\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      links: (e) => {\n        this.links = e.getObjectValue(Hs);\n      },\n      meta: (e) => {\n        this.meta = e.getObjectValue(zs);\n      }\n    };\n  }\n  /**\n   * Gets the links property value. The links property\n   * @returns a PaginationLinks\n   */\n  get links() {\n    return this._links;\n  }\n  /**\n   * Sets the links property value. The links property\n   * @param value Value to set for the links property.\n   */\n  set links(e) {\n    this._links = e;\n  }\n  /**\n   * Gets the meta property value. The meta property\n   * @returns a PaginationMeta\n   */\n  get meta() {\n    return this._meta;\n  }\n  /**\n   * Sets the meta property value. The meta property\n   * @param value Value to set for the meta property.\n   */\n  set meta(e) {\n    this._meta = e;\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeObjectValue(\"links\", this.links), e.writeObjectValue(\"meta\", this.meta), e.writeAdditionalData(this.additionalData);\n  }\n}\nclass Ls {\n  /**\n   * Instantiates a new PaginationLinks and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The first property */\n    m(this, \"_first\");\n    /** The last property */\n    m(this, \"_last\");\n    /** The next property */\n    m(this, \"_next\");\n    /** The previous property */\n    m(this, \"_previous\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * Gets the first property value. The first property\n   * @returns a string\n   */\n  get first() {\n    return this._first;\n  }\n  /**\n   * Sets the first property value. The first property\n   * @param value Value to set for the first property.\n   */\n  set first(e) {\n    this._first = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      first: (e) => {\n        this.first = e.getStringValue();\n      },\n      last: (e) => {\n        this.last = e.getStringValue();\n      },\n      next: (e) => {\n        this.next = e.getStringValue();\n      },\n      previous: (e) => {\n        this.previous = e.getStringValue();\n      }\n    };\n  }\n  /**\n   * Gets the last property value. The last property\n   * @returns a string\n   */\n  get last() {\n    return this._last;\n  }\n  /**\n   * Sets the last property value. The last property\n   * @param value Value to set for the last property.\n   */\n  set last(e) {\n    this._last = e;\n  }\n  /**\n   * Gets the next property value. The next property\n   * @returns a string\n   */\n  get next() {\n    return this._next;\n  }\n  /**\n   * Sets the next property value. The next property\n   * @param value Value to set for the next property.\n   */\n  set next(e) {\n    this._next = e;\n  }\n  /**\n   * Gets the previous property value. The previous property\n   * @returns a string\n   */\n  get previous() {\n    return this._previous;\n  }\n  /**\n   * Sets the previous property value. The previous property\n   * @param value Value to set for the previous property.\n   */\n  set previous(e) {\n    this._previous = e;\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeStringValue(\"first\", this.first), e.writeStringValue(\"last\", this.last), e.writeStringValue(\"next\", this.next), e.writeStringValue(\"previous\", this.previous), e.writeAdditionalData(this.additionalData);\n  }\n}\nclass Bs {\n  /**\n   * Instantiates a new PaginationMeta and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The count property */\n    m(this, \"_count\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * Gets the count property value. The count property\n   * @returns a int64\n   */\n  get count() {\n    return this._count;\n  }\n  /**\n   * Sets the count property value. The count property\n   * @param value Value to set for the count property.\n   */\n  set count(e) {\n    this._count = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      count: (e) => {\n        this.count = e.getNumberValue();\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeNumberValue(\"count\", this.count), e.writeAdditionalData(this.additionalData);\n  }\n}\nclass Ks {\n  /**\n   * Instantiates a new Seat and sets the default values.\n   */\n  constructor() {\n    /** The account_username property */\n    m(this, \"_account_username\");\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    /** The subscription_id property */\n    m(this, \"_subscription_id\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the account_username property value. The account_username property\n   * @returns a string\n   */\n  get account_username() {\n    return this._account_username;\n  }\n  /**\n   * Sets the account_username property value. The account_username property\n   * @param value Value to set for the account_username property.\n   */\n  set account_username(e) {\n    this._account_username = e;\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      account_username: (e) => {\n        this.account_username = e.getStringValue();\n      },\n      subscription_id: (e) => {\n        this.subscription_id = e.getStringValue();\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeStringValue(\"account_username\", this.account_username), e.writeStringValue(\"subscription_id\", this.subscription_id), e.writeAdditionalData(this.additionalData);\n  }\n  /**\n   * Gets the subscription_id property value. The subscription_id property\n   * @returns a string\n   */\n  get subscription_id() {\n    return this._subscription_id;\n  }\n  /**\n   * Sets the subscription_id property value. The subscription_id property\n   * @param value Value to set for the subscription_id property.\n   */\n  set subscription_id(e) {\n    this._subscription_id = e;\n  }\n}\nclass $s {\n  /**\n   * Instantiates a new SeatRequest and sets the default values.\n   */\n  constructor() {\n    /** The account_username property */\n    m(this, \"_account_username\");\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the account_username property value. The account_username property\n   * @returns a string\n   */\n  get account_username() {\n    return this._account_username;\n  }\n  /**\n   * Sets the account_username property value. The account_username property\n   * @param value Value to set for the account_username property.\n   */\n  set account_username(e) {\n    this._account_username = e;\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      account_username: (e) => {\n        this.account_username = e.getStringValue();\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeStringValue(\"account_username\", this.account_username), e.writeAdditionalData(this.additionalData);\n  }\n}\nclass Ws {\n  /**\n   * Instantiates a new Service and sets the default values.\n   */\n  constructor() {\n    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */\n    m(this, \"_additionalData\");\n    this._additionalData = {};\n  }\n  /**\n   * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @returns a Record<string, unknown>\n   */\n  get additionalData() {\n    return this._additionalData;\n  }\n  /**\n   * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.\n   * @param value Value to set for the AdditionalData property.\n   */\n  set additionalData(e) {\n    this._additionalData = e;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {};\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(e) {\n    if (!e)\n      throw new Error(\"writer cannot be undefined\");\n    e.writeAdditionalData(this.additionalData);\n  }\n}\nfunction ha(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Ks();\n}\nclass Gs extends Us {\n  /**\n   * Instantiates a new ListSeatsResponsePagination and sets the default values.\n   */\n  constructor() {\n    super();\n    /** The allowed property */\n    m(this, \"_allowed\");\n    /** The consumed property */\n    m(this, \"_consumed\");\n    /** The data property */\n    m(this, \"_data\");\n  }\n  /**\n   * Gets the allowed property value. The allowed property\n   * @returns a int64\n   */\n  get allowed() {\n    return this._allowed;\n  }\n  /**\n   * Sets the allowed property value. The allowed property\n   * @param value Value to set for the allowed property.\n   */\n  set allowed(t) {\n    this._allowed = t;\n  }\n  /**\n   * Gets the consumed property value. The consumed property\n   * @returns a int64\n   */\n  get consumed() {\n    return this._consumed;\n  }\n  /**\n   * Sets the consumed property value. The consumed property\n   * @param value Value to set for the consumed property.\n   */\n  set consumed(t) {\n    this._consumed = t;\n  }\n  /**\n   * Gets the data property value. The data property\n   * @returns a Seat\n   */\n  get data() {\n    return this._data;\n  }\n  /**\n   * Sets the data property value. The data property\n   * @param value Value to set for the data property.\n   */\n  set data(t) {\n    this._data = t;\n  }\n  /**\n   * The deserialization information for the current model\n   * @returns a Record<string, (node: ParseNode) => void>\n   */\n  getFieldDeserializers() {\n    return {\n      ...super.getFieldDeserializers(),\n      allowed: (t) => {\n        this.allowed = t.getNumberValue();\n      },\n      consumed: (t) => {\n        this.consumed = t.getNumberValue();\n      },\n      data: (t) => {\n        this.data = t.getCollectionOfObjectValues(ha);\n      }\n    };\n  }\n  /**\n   * Serializes information the current object\n   * @param writer Serialization writer to use to serialize this model\n   */\n  serialize(t) {\n    if (!t)\n      throw new Error(\"writer cannot be undefined\");\n    super.serialize(t), t.writeNumberValue(\"allowed\", this.allowed), t.writeNumberValue(\"consumed\", this.consumed), t.writeCollectionOfObjectValues(\"data\", this.data);\n  }\n}\nfunction Ys(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Ns();\n}\nfunction Xs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Vs();\n}\nfunction Qs(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Fs();\n}\nclass Js {\n  /**\n   * Instantiates a new ComplianceRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/compliance\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n  /**\n   * verify exports compliance for a given user\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   * @returns a Promise of ComplianceScreeningResponse\n   */\n  get(e, t) {\n    var i;\n    const n = this.toGetRequestInformation(\n      e\n    ), a = {\n      400: Ys,\n      500: Qs\n    };\n    return ((i = this.requestAdapter) == null ? void 0 : i.sendAsync(n, Xs, t, a)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * verify exports compliance for a given user\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toGetRequestInformation(e) {\n    const t = new L();\n    return t.urlTemplate = this.urlTemplate, t.pathParameters = this.pathParameters, t.httpMethod = oe.GET, t.headers.Accept = [\"application/json\"], e && (t.addRequestHeaders(e.headers), t.addRequestOptions(e.options)), t;\n  }\n}\nfunction gt(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new ks();\n}\nclass Zs {\n  /**\n   * Instantiates a new SeatsItemRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/seats/{id}\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n  /**\n   * remove a user from a seat\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   */\n  delete(e, t) {\n    var i;\n    const n = this.toDeleteRequestInformation(\n      e\n    ), a = {\n      400: gt,\n      403: gt\n    };\n    return ((i = this.requestAdapter) == null ? void 0 : i.sendNoResponseContentAsync(n, t, a)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * remove a user from a seat\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toDeleteRequestInformation(e) {\n    const t = new L();\n    return t.urlTemplate = this.urlTemplate, t.pathParameters = this.pathParameters, t.httpMethod = oe.DELETE, e && (t.addRequestHeaders(e.headers), t.addRequestOptions(e.options)), t;\n  }\n}\nfunction eu(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Gs();\n}\nclass tu {\n  /**\n   * Instantiates a new SeatsRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/seats{?limit*,offset*}\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n  /**\n   * returns list of users occupying seats\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   * @returns a Promise of ListSeatsResponsePagination\n   */\n  get(e, t) {\n    var i;\n    const n = this.toGetRequestInformation(\n      e\n    ), a = {\n      500: gt\n    };\n    return ((i = this.requestAdapter) == null ? void 0 : i.sendAsync(n, eu, t, a)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * assign a user to a seat\n   * @param body The request body\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   * @returns a Promise of Seat\n   */\n  post(e, t, n) {\n    var o;\n    if (!e)\n      throw new Error(\"body cannot be undefined\");\n    const a = this.toPostRequestInformation(\n      e,\n      t\n    ), i = {\n      400: gt\n    };\n    return ((o = this.requestAdapter) == null ? void 0 : o.sendAsync(a, ha, n, i)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * returns list of users occupying seats\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toGetRequestInformation(e) {\n    const t = new L();\n    return t.urlTemplate = this.urlTemplate, t.pathParameters = this.pathParameters, t.httpMethod = oe.GET, t.headers.Accept = [\"application/json\"], e && (t.addRequestHeaders(e.headers), t.setQueryStringParametersFromRawObject(e.queryParameters), t.addRequestOptions(e.options)), t;\n  }\n  /**\n   * assign a user to a seat\n   * @param body The request body\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toPostRequestInformation(e, t) {\n    if (!e)\n      throw new Error(\"body cannot be undefined\");\n    const n = new L();\n    return n.urlTemplate = this.urlTemplate, n.pathParameters = this.pathParameters, n.httpMethod = oe.POST, n.headers.Accept = [\"application/json\"], t && (n.addRequestHeaders(t.headers), n.addRequestOptions(t.options)), n.setContentFromParsable(this.requestAdapter, \"application/json\", e), n;\n  }\n}\nfunction ru(r) {\n  if (!r)\n    throw new Error(\"parseNode cannot be undefined\");\n  return new Ws();\n}\nclass nu {\n  /**\n   * Instantiates a new ServicesRequestBuilder and sets the default values.\n   * @param pathParameters The raw url or the Url template parameters for the request.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e, t) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"pathParameters cannot be undefined\");\n    if (!t)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.urlTemplate = \"{+baseurl}/services\";\n    const n = Z(e);\n    this.pathParameters = n, this.requestAdapter = t;\n  }\n  /**\n   * get a list of services a user is entitled to\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @param responseHandler Response handler to use in place of the default response handling provided by the core service\n   * @returns a Promise of Service\n   */\n  get(e, t) {\n    var a;\n    const n = this.toGetRequestInformation(\n      e\n    );\n    return ((a = this.requestAdapter) == null ? void 0 : a.sendAsync(n, ru, t, void 0)) ?? Promise.reject(new Error(\"request adapter is null\"));\n  }\n  /**\n   * get a list of services a user is entitled to\n   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.\n   * @returns a RequestInformation\n   */\n  toGetRequestInformation(e) {\n    const t = new L();\n    return t.urlTemplate = this.urlTemplate, t.pathParameters = this.pathParameters, t.httpMethod = oe.GET, t.headers.Accept = [\"application/json\"], e && (t.addRequestHeaders(e.headers), t.addRequestOptions(e.options)), t;\n  }\n}\nclass au {\n  /**\n   * Instantiates a new Entitlements and sets the default values.\n   * @param requestAdapter The request adapter to use to execute the requests.\n   */\n  constructor(e) {\n    /** Path parameters for the request */\n    m(this, \"pathParameters\");\n    /** The request adapter to use to execute the requests. */\n    m(this, \"requestAdapter\");\n    /** Url template to use to build the URL for the current request builder */\n    m(this, \"urlTemplate\");\n    if (!e)\n      throw new Error(\"requestAdapter cannot be undefined\");\n    this.pathParameters = {}, this.urlTemplate = \"{+baseurl}\", this.requestAdapter = e, Qt(ca), Jt(la), (e.baseUrl === void 0 || e.baseUrl === \"\") && (e.baseUrl = \"/api/entitlements/v1\"), this.pathParameters.baseurl = e.baseUrl;\n  }\n  /** The compliance property */\n  get compliance() {\n    return new Js(this.pathParameters, this.requestAdapter);\n  }\n  /** The seats property */\n  get seats() {\n    return new tu(this.pathParameters, this.requestAdapter);\n  }\n  /** The services property */\n  get services() {\n    return new nu(this.pathParameters, this.requestAdapter);\n  }\n  /**\n   * Gets an item from the ApiSdk.seats.item collection\n   * @param id Unique identifier of the item\n   * @returns a SeatsItemRequestBuilder\n   */\n  seatsById(e) {\n    if (!e)\n      throw new Error(\"id cannot be undefined\");\n    const t = Z(this.pathParameters);\n    return t.id = e, new Zs(t, this.requestAdapter);\n  }\n}\nclass iu {\n  constructor(e) {\n    m(this, \"client\");\n    m(this, \"accessTokenProvider\");\n    this.accessTokenProvider = new ou();\n    const t = new Xt.FetchRequestAdapter(\n      new be(this.accessTokenProvider)\n    );\n    t.baseUrl = e || \"\", this.client = new au(t);\n  }\n  async get(e, t) {\n    const n = await this.client.seats.get();\n    return { total: (n == null ? void 0 : n.consumed) || 0, available: (n == null ? void 0 : n.allowed) || 0 };\n  }\n  async seats(e, t, n) {\n    const a = await this.client.seats.get();\n    return a != null && a.data ? a.data.map(({ subscription_id: i, account_username: o }) => ({\n      id: i,\n      name: o,\n      assigned: !0\n    })) : [];\n  }\n  async assign(e, t, n) {\n    const a = new $s();\n    a.account_username = n[0], await this.client.seats.post(a);\n  }\n  async unAssign(e, t, n) {\n    await this.client.seatsById(n[0]).delete();\n  }\n}\nclass ou {\n  getAuthorizationToken(e, t) {\n    return Promise.resolve(\"dummy\");\n  }\n  getAllowedHostsValidator() {\n    return new Zt(/* @__PURE__ */ new Set());\n  }\n}\nfunction su(r, e) {\n  switch (r) {\n    case \"CIAM_Authz\":\n      return new xs(e);\n    case \"entitlements\":\n      return new iu(e);\n    case \"mock\":\n      return new Za();\n    default:\n      throw new Error(\"no implementation found for \" + r);\n  }\n}\nconst pa = Va(\n  void 0\n);\nfunction uu(r) {\n  const e = qa(r);\n  if (e != null)\n    return e;\n  throw new Error(\n    \"No provider found for context, make sure it is included in your component hierarchy.\"\n  );\n}\nconst gr = () => uu(pa), Su = ({\n  serviceName: r,\n  baseUrl: e,\n  children: t\n}) => /* @__PURE__ */ A.jsx(pa.Provider, { value: su(r, e), children: t }), fa = ({ onClearAllFilters: r }) => /* @__PURE__ */ A.jsxs(zt, { variant: Fa.xs, children: [\n  /* @__PURE__ */ A.jsx(Ut, { icon: Ka }),\n  /* @__PURE__ */ A.jsx(yt, { headingLevel: \"h2\", size: \"lg\", children: \"No results found\" }),\n  /* @__PURE__ */ A.jsxs(Lt, { children: [\n    \"Adjust your filters and try again, or \",\n    /* @__PURE__ */ A.jsx(\"a\", { onClick: r, children: \"clear all filters\" }),\n    \".\"\n  ] })\n] }), lu = [\"name\"], _n = {\n  name: \"Display name\"\n}, ga = ({\n  users: r,\n  itemCount: e,\n  page: t,\n  perPage: n,\n  usernames: a,\n  isColumnSortable: i,\n  isUserChecked: o,\n  onPageChange: l,\n  onSearchUsername: u,\n  onRemoveUsernameChip: h,\n  onRemoveUsernameChips: d,\n  onClearAllFilters: w,\n  onCheckUser: c\n}) => {\n  const g = \"lg\", v = a.length > 0;\n  return /* @__PURE__ */ A.jsx(\n    Kt,\n    {\n      data: r,\n      columns: lu,\n      renderHeader: ({ column: b, Th: O, key: T }) => /* @__PURE__ */ A.jsx(O, { children: _n[b] }, T),\n      renderCell: ({ column: b, row: O, Td: T, key: P }) => /* @__PURE__ */ A.jsx(T, { dataLabel: _n[b], children: O[b] }, P),\n      isColumnSortable: i,\n      isRowChecked: ({ row: b }) => o(b),\n      onCheck: ({ row: b }, O) => c(b, O),\n      toolbarBreakpoint: g,\n      filters: {\n        Username: {\n          type: \"search\",\n          chips: a,\n          onSearch: u,\n          onRemoveChip: h,\n          onRemoveGroup: d,\n          validate: (b) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(b),\n          errorMessage: \"Invalid string\"\n        }\n      },\n      itemCount: e,\n      page: t,\n      perPage: n,\n      onPageChange: l,\n      onClearAllFilters: w,\n      ariaLabel: \"Seats Administration users\",\n      isFiltered: v,\n      emptyStateNoData: /* @__PURE__ */ A.jsx(A.Fragment, {}),\n      emptyStateNoResults: /* @__PURE__ */ A.jsx(fa, { onClearAllFilters: w })\n    }\n  );\n}, Tu = ({ onSuccess: r, onError: e }) => {\n  var x, V, k, B, K;\n  const t = Yt(), n = gr(), a = () => t.push(\"/\"), i = ke({\n    queryKey: [\"subscriptions\"],\n    queryFn: () => n.get(\"o1\", \"smarts\")\n  }), { page: o, perPage: l, setPagination: u, setPaginationQuery: h } = $t(), d = Ht(\n    () => h(1, l),\n    [l, h]\n  ), w = Wt(\"name\", d), c = ke({\n    queryKey: [\"users\", { page: o, perPage: l, usernames: w.chips }],\n    queryFn: () => n.seats(\"o1\", \"smarts\", !1)\n  }), { mutate: g, isLoading: v } = Gt(\n    () => n.assign(\"o1\", \"smarts\", b),\n    {\n      onSuccess: () => {\n        a(), r(\"Successfully assigned users\");\n      },\n      onError: (M) => {\n        e(\"there was an error: \" + M);\n      }\n    }\n  ), [b, O] = Me([]), T = (((x = i.data) == null ? void 0 : x.total) || 0) - (((V = i.data) == null ? void 0 : V.available) || 0), P = ((k = i.data) == null ? void 0 : k.total) === void 0 ? !0 : b.length > 0 ? b.length + T > i.data.total : !0;\n  return /* @__PURE__ */ A.jsxs(\n    mt,\n    {\n      isOpen: !0,\n      title: \"Assign users\",\n      variant: \"medium\",\n      onClose: a,\n      actions: [\n        /* @__PURE__ */ A.jsx(\n          we,\n          {\n            onClick: () => g(),\n            isDisabled: P,\n            isLoading: v,\n            children: \"Assign\"\n          },\n          \"assign\"\n        ),\n        /* @__PURE__ */ A.jsx(we, { onClick: a, variant: Bt.link, children: \"Cancel\" }, \"cancel\")\n      ],\n      children: [\n        b.length + T > (((B = i.data) == null ? void 0 : B.total) || 0) && /* @__PURE__ */ A.jsx(\n          Dn,\n          {\n            variant: \"warning\",\n            isInline: !0,\n            title: \"Your organization does not have enough Project Wisdom seats for the assignments below\"\n          }\n        ),\n        /* @__PURE__ */ A.jsx(\n          ga,\n          {\n            users: c.data,\n            itemCount: (K = c.data) == null ? void 0 : K.length,\n            page: o,\n            perPage: l,\n            onPageChange: u,\n            usernames: w.chips,\n            onSearchUsername: w.add,\n            onRemoveUsernameChip: w.remove,\n            onRemoveUsernameChips: w.clear,\n            onClearAllFilters: w.clear,\n            isUserChecked: (M) => b.includes(M.id),\n            onCheckUser: (M, se) => {\n              O(\n                se ? [...b, M.id] : b.filter((pe) => pe !== M.id)\n              );\n            }\n          }\n        )\n      ]\n    }\n  );\n}, cu = () => /* @__PURE__ */ A.jsx(Ma, { status: \"danger\", size: \"xl\", children: /* @__PURE__ */ A.jsx($a, {}) }), du = () => /* @__PURE__ */ A.jsxs(zt, { isFullHeight: !0, children: [\n  /* @__PURE__ */ A.jsx(Ut, { component: cu, variant: \"container\" }),\n  /* @__PURE__ */ A.jsx(yt, { headingLevel: \"h2\", size: \"lg\", children: \"Your organization no longer has an Seats Administration subscription.\" }),\n  /* @__PURE__ */ A.jsx(Lt, { children: \"Please contact Red Hat if there is an issue with your subscription or if you wish to continue.\" })\n] }), hu = ({\n  usersToRemove: r,\n  onOk: e\n}) => /* @__PURE__ */ A.jsxs(\n  mt,\n  {\n    id: \"remove-users-modal\",\n    variant: ka.small,\n    isOpen: !0,\n    \"aria-label\": \"Remove users from seats\",\n    title: \"Remove users from seats\",\n    titleIconVariant: \"warning\",\n    showClose: !1,\n    \"aria-describedby\": \"modal-message\",\n    actions: [\n      /* @__PURE__ */ A.jsx(we, { onClick: e, variant: Bt.primary, children: \"Ok\" }, 1)\n    ],\n    children: [\n      \"Your organization has decreased the amount of seats available. Please remove \",\n      r,\n      \" users from their seats to continue the subscription.\"\n    ]\n  }\n), pu = ({\n  availableSeats: r,\n  totalSeats: e\n}) => /* @__PURE__ */ A.jsx(On, { variant: \"light\", hasShadowBottom: !0, children: /* @__PURE__ */ A.jsxs(Ha, { children: [\n  /* @__PURE__ */ A.jsx(yt, { headingLevel: \"h1\", children: \"Seats Administration\" }),\n  /* @__PURE__ */ A.jsxs(za, { children: [\n    /* @__PURE__ */ A.jsx(Sr, { children: /* @__PURE__ */ A.jsx(Tr, { children: \"This group contains all users assigned seats within your organization.\" }) }),\n    e > 0 && /* @__PURE__ */ A.jsx(Sr, { children: /* @__PURE__ */ A.jsxs(Tr, { children: [\n      \"Seats available: \",\n      /* @__PURE__ */ A.jsxs(Ua, { isCompact: !0, children: [\n        r,\n        \" of \",\n        e\n      ] })\n    ] }) })\n  ] })\n] }) }), fu = ({ totalSeats: r, onAddUsers: e }) => /* @__PURE__ */ A.jsxs(zt, { isFullHeight: !0, children: [\n  /* @__PURE__ */ A.jsx(Ut, { icon: Wa }),\n  /* @__PURE__ */ A.jsxs(yt, { headingLevel: \"h2\", size: \"lg\", children: [\n    \"There are currently no users in your organization assigned seats.\",\n    /* @__PURE__ */ A.jsx(\"br\", {}),\n    \"Your organization has \",\n    r,\n    \" seats available.\"\n  ] }),\n  /* @__PURE__ */ A.jsx(Lt, { children: \"Please add users by using the button below.\" }),\n  /* @__PURE__ */ A.jsx(\n    we,\n    {\n      ouiaId: \"button-create\",\n      variant: \"primary\",\n      onClick: () => e(),\n      children: \"Add users\"\n    }\n  )\n] }), gu = [\"name\"], En = {\n  name: \"Username\"\n}, yu = ({\n  users: r,\n  itemCount: e,\n  page: t,\n  perPage: n,\n  usernames: a,\n  totalSeats: i,\n  getUrlForUser: o,\n  isColumnSortable: l,\n  canAddUser: u,\n  isUserChecked: h,\n  onCheckUser: d,\n  onPageChange: w,\n  onRemoveSeat: c,\n  onAddUser: g,\n  onSearchUsername: v,\n  onRemoveUsernameChip: b,\n  onRemoveUsernameChips: O,\n  onClearAllFilters: T\n}) => {\n  const P = \"lg\", x = a.length > 0;\n  return /* @__PURE__ */ A.jsx(\n    Kt,\n    {\n      data: r,\n      columns: gu,\n      renderHeader: ({ column: V, Th: k, key: B }) => /* @__PURE__ */ A.jsx(k, { children: En[V] }, B),\n      renderCell: ({ column: V, row: k, Td: B, key: K }) => /* @__PURE__ */ A.jsx(B, { dataLabel: En[V], children: (() => {\n        switch (V) {\n          case \"name\":\n            return /* @__PURE__ */ A.jsx(\n              we,\n              {\n                variant: \"link\",\n                component: (M) => /* @__PURE__ */ A.jsx(Ga, { to: o(k), ...M, children: k.name }),\n                isInline: !0\n              }\n            );\n          default:\n            return k[V];\n        }\n      })() }, K),\n      renderActions: ({ row: V }) => /* @__PURE__ */ A.jsx(\n        Ya,\n        {\n          rowData: mu,\n          items: [\n            {\n              title: \"Remove seat\",\n              onClick: () => c(V)\n            }\n          ]\n        }\n      ),\n      isColumnSortable: l,\n      toolbarBreakpoint: P,\n      filters: {\n        Username: {\n          type: \"search\",\n          chips: a,\n          onSearch: v,\n          onRemoveChip: b,\n          onRemoveGroup: O,\n          validate: (V) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(V),\n          errorMessage: \"Invalid string\"\n        }\n      },\n      actions: [\n        ...u ? [\n          {\n            label: \"Assign user(s)\",\n            onClick: g,\n            isPrimary: !0\n          }\n        ] : [],\n        {\n          label: \"Remove user(s)\",\n          onClick: () => c(),\n          isPrimary: !1\n        }\n      ],\n      itemCount: e,\n      page: t,\n      perPage: n,\n      onPageChange: w,\n      onClearAllFilters: T,\n      ariaLabel: \"Seats Administration users\",\n      isFiltered: x,\n      isRowChecked: ({ row: V }) => h(V),\n      onCheck: ({ row: V }, k) => d(V, k),\n      emptyStateNoData: /* @__PURE__ */ A.jsx(\n        fu,\n        {\n          totalSeats: i || 0,\n          onAddUsers: g\n        }\n      ),\n      emptyStateNoResults: /* @__PURE__ */ A.jsx(fa, { onClearAllFilters: T })\n    }\n  );\n}, mu = {\n  actionProps: {\n    style: { zIndex: 9999 }\n  }\n}, Rn = 5, wu = ({\n  users: r,\n  onConfirm: e,\n  onCancel: t\n}) => {\n  const [n, a] = Me(r.slice(0, Rn)), [i, o] = Me(1);\n  return /* @__PURE__ */ A.jsxs(\n    mt,\n    {\n      title: \"Remove users\",\n      titleIconVariant: \"warning\",\n      isOpen: !0,\n      variant: r.length > 5 ? \"medium\" : \"small\",\n      actions: [\n        /* @__PURE__ */ A.jsx(we, { variant: \"danger\", onClick: () => e(), children: \"Remove user(s)\" }),\n        /* @__PURE__ */ A.jsx(we, { variant: \"link\", onClick: () => t(), children: \"Cancel\" })\n      ],\n      onClose: t,\n      children: [\n        \"Are you sure you want to remove the user(s) below from Project Wisdom\",\n        r.length > 5 ? /* @__PURE__ */ A.jsx(\n          Kt,\n          {\n            data: n,\n            columns: [\"name\"],\n            itemCount: r.length,\n            perPage: Rn,\n            page: i,\n            onPageChange: (l, u) => {\n              o(l), a(r.slice((l - 1) * u, l * u));\n            },\n            emptyStateNoData: /* @__PURE__ */ A.jsx(A.Fragment, {}),\n            emptyStateNoResults: /* @__PURE__ */ A.jsx(A.Fragment, {}),\n            ariaLabel: \"\",\n            renderHeader: ({ Th: l, key: u }) => /* @__PURE__ */ A.jsx(l, { children: \"Name\" }, u),\n            renderCell: ({ row: l, Td: u, key: h }) => /* @__PURE__ */ A.jsx(u, { dataLabel: \"Name\", children: l.name }, h)\n          }\n        ) : /* @__PURE__ */ A.jsx(\"p\", { className: \"pf-u-pt-md\", children: r.map((l, u) => /* @__PURE__ */ A.jsxs(A.Fragment, { children: [\n          /* @__PURE__ */ A.jsx(\"b\", { children: l.name }),\n          u !== r.length - 1 ? \", \" : \"\"\n        ] })) })\n      ]\n    }\n  );\n}, Pu = ({ onSuccess: r, onError: e }) => {\n  var V, k, B, K, M, se, pe, De, Oe, le;\n  const t = Yt(), [n, a] = Me([]), [i, o] = Me(!1), { page: l, perPage: u, setPagination: h, setPaginationQuery: d } = $t(), w = Ht(\n    () => d(1, u),\n    [u, d]\n  ), c = Wt(\n    \"username\",\n    w\n  ), g = gr(), v = ke({\n    queryKey: [\"subscriptions\"],\n    queryFn: () => g.get(\"o1\", \"smarts\")\n  }), b = ke({\n    queryKey: [\"users\", { page: l, perPage: u, usernames: c.chips }],\n    queryFn: () => g.seats(\"o1\", \"smarts\")\n  }), O = (((V = v.data) == null ? void 0 : V.available) || 0) < 0, T = Math.abs(((k = v.data) == null ? void 0 : k.available) || 0), P = (((B = v.data) == null ? void 0 : B.total) || 0) > 0 && ((K = v.data) == null ? void 0 : K.available) === 0, { mutate: x } = Gt(\n    async (C) => {\n      await g.unAssign(\n        \"o1\",\n        \"smarts\",\n        C.map(({ id: ne }) => ne)\n      ), o(!1), a([]);\n    },\n    {\n      onSuccess: () => {\n        r && r(\"Successfully removed users\");\n      },\n      onError: (C) => {\n        e && e(\"there was an error: \" + C);\n      }\n    }\n  );\n  return /* @__PURE__ */ A.jsxs(La, { children: [\n    /* @__PURE__ */ A.jsx(\n      pu,\n      {\n        totalSeats: ((M = v.data) == null ? void 0 : M.total) || 0,\n        availableSeats: ((se = v.data) == null ? void 0 : se.available) || 0\n      }\n    ),\n    ((pe = v.data) == null ? void 0 : pe.total) === 0 && /* @__PURE__ */ A.jsx(du, {}),\n    O && T && /* @__PURE__ */ A.jsx(\n      hu,\n      {\n        usersToRemove: T,\n        onOk: () => t.push(\"/remove-users\")\n      }\n    ),\n    i && /* @__PURE__ */ A.jsx(\n      wu,\n      {\n        users: n,\n        onConfirm: () => x(n),\n        onCancel: () => o(!1)\n      }\n    ),\n    /* @__PURE__ */ A.jsxs(On, { isFilled: !0, children: [\n      P ? /* @__PURE__ */ A.jsx(\n        Dn,\n        {\n          title: \"There are 0 seats left in your organization's subscription. Contact Red Hat to manage your Seats Administration license.\",\n          variant: \"warning\",\n          isInline: !0\n        }\n      ) : null,\n      ((De = v.data) == null ? void 0 : De.total) !== 0 && /* @__PURE__ */ A.jsx(\n        yu,\n        {\n          totalSeats: (Oe = v.data) == null ? void 0 : Oe.total,\n          users: b.data,\n          itemCount: (le = b.data) == null ? void 0 : le.length,\n          canAddUser: !P,\n          page: l,\n          perPage: u,\n          onPageChange: h,\n          usernames: c.chips,\n          onSearchUsername: c.add,\n          onRemoveUsernameChip: c.remove,\n          onRemoveUsernameChips: c.clear,\n          onClearAllFilters: c.clear,\n          getUrlForUser: (C) => `#${C.name}`,\n          onAddUser: () => {\n            t.push(\"/add-users\");\n          },\n          isUserChecked: (C) => n.includes(C),\n          onCheckUser: (C, ne) => {\n            a(\n              ne ? [...n, C] : n.filter((fe) => fe !== C)\n            );\n          },\n          onRemoveSeat: (C) => {\n            C && a([C]), o(!0);\n          }\n        }\n      )\n    ] })\n  ] });\n}, Cu = ({ onSuccess: r, onError: e }) => {\n  var P, x, V;\n  const t = Yt(), n = gr(), a = ke({\n    queryKey: [\"subscriptions\"],\n    queryFn: async () => await n.get(\"o1\", \"smarts\")\n  }), { page: i, perPage: o, setPagination: l, setPaginationQuery: u } = $t(), h = Ht(\n    () => u(1, o),\n    [o, u]\n  ), d = Wt(\n    \"username\",\n    h\n  ), w = ke({\n    queryKey: [\"users\", { page: i, perPage: o, usernames: d.chips }],\n    queryFn: () => n.seats(\"o1\", \"smarts\")\n  }), [c, g] = Me([]), v = (((P = a.data) == null ? void 0 : P.total) || 0) - (((x = a.data) == null ? void 0 : x.available) || 0), { mutate: b, isLoading: O } = Gt(\n    () => (g([]), n.unAssign(\"o1\", \"smarts\", c)),\n    {\n      onSuccess: () => {\n        r(\"Successfully removed users\");\n      },\n      onError: (k) => {\n        e(\"there was an error: \" + k);\n      }\n    }\n  ), T = () => t.push(\"/\");\n  return /* @__PURE__ */ A.jsx(\n    mt,\n    {\n      isOpen: !0,\n      title: `Remove ${v} users from their assigned seats`,\n      variant: \"medium\",\n      onClose: T,\n      actions: [\n        /* @__PURE__ */ A.jsx(\n          we,\n          {\n            onClick: () => b(),\n            isDisabled: c.length > v,\n            isLoading: O,\n            children: \"Remove\"\n          }\n        ),\n        /* @__PURE__ */ A.jsx(\n          we,\n          {\n            onClick: T,\n            variant: Bt.link,\n            isDisabled: O,\n            children: \"Cancel\"\n          }\n        )\n      ],\n      children: /* @__PURE__ */ A.jsx(\n        ga,\n        {\n          users: w.data,\n          itemCount: (V = w.data) == null ? void 0 : V.length,\n          page: i,\n          perPage: o,\n          onPageChange: l,\n          usernames: d.chips,\n          onSearchUsername: d.add,\n          onRemoveUsernameChip: d.remove,\n          onRemoveUsernameChips: d.clear,\n          onClearAllFilters: d.clear,\n          isUserChecked: (k) => c.includes(k.id),\n          onCheckUser: (k, B) => {\n            g(\n              B ? [...c, k.id] : c.filter((K) => K !== k.id)\n            );\n          }\n        }\n      )\n    }\n  );\n};\nexport {\n  Tu as AddUsersPage,\n  Cu as RemoveUsersPage,\n  Su as ServiceContextProvider,\n  Pu as UsersPage\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIi4uLy4uL2NsaWVudC9kaXN0L2NsaWVudC5qcyIsIi4uL3NyYy9Db21wb25lbnRzL1NlcnZpY2VQcm92aWRlci50c3giLCIuLi9zcmMvQ29tcG9uZW50cy9FbXB0eVN0YXRlTm9SZXN1bHRzLnRzeCIsIi4uL3NyYy9Db21wb25lbnRzL1VzZXJzUGlja2VyVGFibGUudHN4IiwiLi4vc3JjL1BhZ2VzL0FkZFVzZXJzUGFnZS50c3giLCIuLi9zcmMvQ29tcG9uZW50cy9FbXB0eVN0YXRlTm9TdWJzY3JpcHRpb24udHN4IiwiLi4vc3JjL0NvbXBvbmVudHMvUmVtb3ZlVXNlcnNNb2RhbC50c3giLCIuLi9zcmMvQ29tcG9uZW50cy9TZWF0c0hlYWRlci50c3giLCIuLi9zcmMvQ29tcG9uZW50cy9FbXB0eVN0YXRlTm9Bc3NpZ25lZFNlYXQudHN4IiwiLi4vc3JjL0NvbXBvbmVudHMvVXNlcnNXaXRoU2VhdFRhYmxlLnRzeCIsIi4uL3NyYy9Db21wb25lbnRzL0NvbmZpcm1SZW1vdmVEaWFsb2cudHN4IiwiLi4vc3JjL1BhZ2VzL1VzZXJzUGFnZS50c3giLCIuLi9zcmMvUGFnZXMvUmVtb3ZlVXNlcnNQYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztyZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKTt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksZz02MDEwMztleHBvcnRzLkZyYWdtZW50PTYwMTA3O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBoPVN5bWJvbC5mb3I7Zz1oKFwicmVhY3QuZWxlbWVudFwiKTtleHBvcnRzLkZyYWdtZW50PWgoXCJyZWFjdC5mcmFnbWVudFwiKX12YXIgbT1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLG49T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxrKXt2YXIgYixkPXt9LGU9bnVsbCxsPW51bGw7dm9pZCAwIT09ayYmKGU9XCJcIitrKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihsPWEucmVmKTtmb3IoYiBpbiBhKW4uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjpnLHR5cGU6YyxrZXk6ZSxyZWY6bCxwcm9wczpkLF9vd25lcjptLmN1cnJlbnR9fWV4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbi8vIEFUVEVOVElPTlxuLy8gV2hlbiBhZGRpbmcgbmV3IHN5bWJvbHMgdG8gdGhpcyBmaWxlLFxuLy8gUGxlYXNlIGNvbnNpZGVyIGFsc28gYWRkaW5nIHRvICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvUmVhY3RTeW1ib2xzJ1xuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAweGVhYzc7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSAweGVhY2E7XG5leHBvcnRzLkZyYWdtZW50ID0gMHhlYWNiO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSAweGVhY2M7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IDB4ZWFkMjtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gMHhlYWNkO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IDB4ZWFjZTtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gMHhlYWQwO1xudmFyIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSAweGVhZDE7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gMHhlYWQ4O1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IDB4ZWFkMztcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSAweGVhZDQ7XG52YXIgUkVBQ1RfQkxPQ0tfVFlQRSA9IDB4ZWFkOTtcbnZhciBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSA9IDB4ZWFkYTtcbnZhciBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gMHhlYWQ1O1xudmFyIFJFQUNUX1NDT1BFX1RZUEUgPSAweGVhZDc7XG52YXIgUkVBQ1RfT1BBUVVFX0lEX1RZUEUgPSAweGVhZTA7XG52YXIgUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUgPSAweGVhZTE7XG52YXIgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSAweGVhZTI7XG52YXIgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gMHhlYWUzO1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yKSB7XG4gIHZhciBzeW1ib2xGb3IgPSBTeW1ib2wuZm9yO1xuICBSRUFDVF9FTEVNRU5UX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmVsZW1lbnQnKTtcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnBvcnRhbCcpO1xuICBleHBvcnRzLkZyYWdtZW50ID0gc3ltYm9sRm9yKCdyZWFjdC5mcmFnbWVudCcpO1xuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpO1xuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wcm9maWxlcicpO1xuICBSRUFDVF9QUk9WSURFUl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wcm92aWRlcicpO1xuICBSRUFDVF9DT05URVhUX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmNvbnRleHQnKTtcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuZm9yd2FyZF9yZWYnKTtcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Quc3VzcGVuc2UnKTtcbiAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0Jyk7XG4gIFJFQUNUX01FTU9fVFlQRSA9IHN5bWJvbEZvcigncmVhY3QubWVtbycpO1xuICBSRUFDVF9MQVpZX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmxhenknKTtcbiAgUkVBQ1RfQkxPQ0tfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuYmxvY2snKTtcbiAgUkVBQ1RfU0VSVkVSX0JMT0NLX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnNlcnZlci5ibG9jaycpO1xuICBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mdW5kYW1lbnRhbCcpO1xuICBSRUFDVF9TQ09QRV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zY29wZScpO1xuICBSRUFDVF9PUEFRVUVfSURfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Qub3BhcXVlLmlkJyk7XG4gIFJFQUNUX0RFQlVHX1RSQUNJTkdfTU9ERV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5kZWJ1Z190cmFjZV9tb2RlJyk7XG4gIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5vZmZzY3JlZW4nKTtcbiAgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5sZWdhY3lfaGlkZGVuJyk7XG59XG5cbnZhciBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYXliZUl0ZXJhdG9yID0gTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTtcblxuICBpZiAodHlwZW9mIG1heWJlSXRlcmF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcblxuZnVuY3Rpb24gZXJyb3IoZm9ybWF0KSB7XG4gIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBwcmludFdhcm5pbmcoJ2Vycm9yJywgZm9ybWF0LCBhcmdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmludFdhcm5pbmcobGV2ZWwsIGZvcm1hdCwgYXJncykge1xuICAvLyBXaGVuIGNoYW5naW5nIHRoaXMgbG9naWMsIHlvdSBtaWdodCB3YW50IHRvIGFsc29cbiAgLy8gdXBkYXRlIGNvbnNvbGVXaXRoU3RhY2tEZXYud3d3LmpzIGFzIHdlbGwuXG4gIHtcbiAgICB2YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG4gICAgdmFyIHN0YWNrID0gUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtKCk7XG5cbiAgICBpZiAoc3RhY2sgIT09ICcnKSB7XG4gICAgICBmb3JtYXQgKz0gJyVzJztcbiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbc3RhY2tdKTtcbiAgICB9XG5cbiAgICB2YXIgYXJnc1dpdGhGb3JtYXQgPSBhcmdzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuICcnICsgaXRlbTtcbiAgICB9KTsgLy8gQ2FyZWZ1bDogUk4gY3VycmVudGx5IGRlcGVuZHMgb24gdGhpcyBwcmVmaXhcblxuICAgIGFyZ3NXaXRoRm9ybWF0LnVuc2hpZnQoJ1dhcm5pbmc6ICcgKyBmb3JtYXQpOyAvLyBXZSBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBzcHJlYWQgKG9yIC5hcHBseSkgZGlyZWN0bHkgYmVjYXVzZSBpdFxuICAgIC8vIGJyZWFrcyBJRTk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTM2MTBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nXG5cbiAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlW2xldmVsXSwgY29uc29sZSwgYXJnc1dpdGhGb3JtYXQpO1xuICB9XG59XG5cbi8vIEZpbHRlciBjZXJ0YWluIERPTSBhdHRyaWJ1dGVzIChlLmcuIHNyYywgaHJlZikgaWYgdGhlaXIgdmFsdWVzIGFyZSBlbXB0eSBzdHJpbmdzLlxuXG52YXIgZW5hYmxlU2NvcGVBUEkgPSBmYWxzZTsgLy8gRXhwZXJpbWVudGFsIENyZWF0ZSBFdmVudCBIYW5kbGUgQVBJLlxuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gTm90ZTogdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgKGUuZy4gaWYgaXQncyBhIHBvbHlmaWxsKS5cblxuXG4gIGlmICh0eXBlID09PSBleHBvcnRzLkZyYWdtZW50IHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9MRUdBQ1lfSElEREVOX1RZUEUgfHwgZW5hYmxlU2NvcGVBUEkgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQkxPQ0tfVFlQRSB8fCB0eXBlWzBdID09PSBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZShvdXRlclR5cGUsIGlubmVyVHlwZSwgd3JhcHBlck5hbWUpIHtcbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCAnJztcbiAgcmV0dXJuIG91dGVyVHlwZS5kaXNwbGF5TmFtZSB8fCAoZnVuY3Rpb25OYW1lICE9PSAnJyA/IHdyYXBwZXJOYW1lICsgXCIoXCIgKyBmdW5jdGlvbk5hbWUgKyBcIilcIiA6IHdyYXBwZXJOYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dE5hbWUodHlwZSkge1xuICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCAnQ29udGV4dCc7XG59XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUodHlwZSkge1xuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgLy8gSG9zdCByb290LCB0ZXh0IG5vZGUgb3IganVzdCBpbnZhbGlkIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB7XG4gICAgaWYgKHR5cGVvZiB0eXBlLnRhZyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGVycm9yKCdSZWNlaXZlZCBhbiB1bmV4cGVjdGVkIG9iamVjdCBpbiBnZXRDb21wb25lbnROYW1lKCkuICcgKyAnVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBleHBvcnRzLkZyYWdtZW50OlxuICAgICAgcmV0dXJuICdGcmFnbWVudCc7XG5cbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuICdQb3J0YWwnO1xuXG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuICdQcm9maWxlcic7XG5cbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N0cmljdE1vZGUnO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZSc7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2VMaXN0JztcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICB2YXIgY29udGV4dCA9IHR5cGU7XG4gICAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZShjb250ZXh0KSArICcuQ29uc3VtZXInO1xuXG4gICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgIHZhciBwcm92aWRlciA9IHR5cGU7XG4gICAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZShwcm92aWRlci5fY29udGV4dCkgKyAnLlByb3ZpZGVyJztcblxuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpO1xuXG4gICAgICBjYXNlIFJFQUNUX0JMT0NLX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lKHR5cGUuX3JlbmRlcik7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGxhenlDb21wb25lbnQgPSB0eXBlO1xuICAgICAgICAgIHZhciBwYXlsb2FkID0gbGF6eUNvbXBvbmVudC5fcGF5bG9hZDtcbiAgICAgICAgICB2YXIgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUoaW5pdChwYXlsb2FkKSk7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIEhlbHBlcnMgdG8gcGF0Y2ggY29uc29sZS5sb2dzIHRvIGF2b2lkIGxvZ2dpbmcgZHVyaW5nIHNpZGUtZWZmZWN0IGZyZWVcbi8vIHJlcGxheWluZyBvbiByZW5kZXIgZnVuY3Rpb24uIFRoaXMgY3VycmVudGx5IG9ubHkgcGF0Y2hlcyB0aGUgb2JqZWN0XG4vLyBsYXppbHkgd2hpY2ggd29uJ3QgY292ZXIgaWYgdGhlIGxvZyBmdW5jdGlvbiB3YXMgZXh0cmFjdGVkIGVhZ2VybHkuXG4vLyBXZSBjb3VsZCBhbHNvIGVhZ2VybHkgcGF0Y2ggdGhlIG1ldGhvZC5cbnZhciBkaXNhYmxlZERlcHRoID0gMDtcbnZhciBwcmV2TG9nO1xudmFyIHByZXZJbmZvO1xudmFyIHByZXZXYXJuO1xudmFyIHByZXZFcnJvcjtcbnZhciBwcmV2R3JvdXA7XG52YXIgcHJldkdyb3VwQ29sbGFwc2VkO1xudmFyIHByZXZHcm91cEVuZDtcblxuZnVuY3Rpb24gZGlzYWJsZWRMb2coKSB7fVxuXG5kaXNhYmxlZExvZy5fX3JlYWN0RGlzYWJsZWRMb2cgPSB0cnVlO1xuZnVuY3Rpb24gZGlzYWJsZUxvZ3MoKSB7XG4gIHtcbiAgICBpZiAoZGlzYWJsZWREZXB0aCA9PT0gMCkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgICBwcmV2TG9nID0gY29uc29sZS5sb2c7XG4gICAgICBwcmV2SW5mbyA9IGNvbnNvbGUuaW5mbztcbiAgICAgIHByZXZXYXJuID0gY29uc29sZS53YXJuO1xuICAgICAgcHJldkVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICAgIHByZXZHcm91cCA9IGNvbnNvbGUuZ3JvdXA7XG4gICAgICBwcmV2R3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkO1xuICAgICAgcHJldkdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZDsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xOTA5OVxuXG4gICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGRpc2FibGVkTG9nLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfTsgLy8gJEZsb3dGaXhNZSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgICBpbmZvOiBwcm9wcyxcbiAgICAgICAgbG9nOiBwcm9wcyxcbiAgICAgICAgd2FybjogcHJvcHMsXG4gICAgICAgIGVycm9yOiBwcm9wcyxcbiAgICAgICAgZ3JvdXA6IHByb3BzLFxuICAgICAgICBncm91cENvbGxhcHNlZDogcHJvcHMsXG4gICAgICAgIGdyb3VwRW5kOiBwcm9wc1xuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgIH1cblxuICAgIGRpc2FibGVkRGVwdGgrKztcbiAgfVxufVxuZnVuY3Rpb24gcmVlbmFibGVMb2dzKCkge1xuICB7XG4gICAgZGlzYWJsZWREZXB0aC0tO1xuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9OyAvLyAkRmxvd0ZpeE1lIEZsb3cgdGhpbmtzIGNvbnNvbGUgaXMgaW1tdXRhYmxlLlxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb25zb2xlLCB7XG4gICAgICAgIGxvZzogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkxvZ1xuICAgICAgICB9KSxcbiAgICAgICAgaW5mbzogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkluZm9cbiAgICAgICAgfSksXG4gICAgICAgIHdhcm46IF9hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZXYXJuXG4gICAgICAgIH0pLFxuICAgICAgICBlcnJvcjogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkVycm9yXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cDogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cENvbGxhcHNlZDogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwQ29sbGFwc2VkXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cEVuZDogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwRW5kXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7XG4gICAgICBlcnJvcignZGlzYWJsZWREZXB0aCBmZWxsIGJlbG93IHplcm8uICcgKyAnVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBwcmVmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRXh0cmFjdCB0aGUgVk0gc3BlY2lmaWMgcHJlZml4IHVzZWQgYnkgZWFjaCBsaW5lLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgICAgcHJlZml4ID0gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG4gICAgICB9XG4gICAgfSAvLyBXZSB1c2UgdGhlIHByZWZpeCB0byBlbnN1cmUgb3VyIHN0YWNrcyBsaW5lIHVwIHdpdGggbmF0aXZlIHN0YWNrIGZyYW1lcy5cblxuXG4gICAgcmV0dXJuICdcXG4nICsgcHJlZml4ICsgbmFtZTtcbiAgfVxufVxudmFyIHJlZW50cnkgPSBmYWxzZTtcbnZhciBjb21wb25lbnRGcmFtZUNhY2hlO1xuXG57XG4gIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbXBvbmVudEZyYW1lQ2FjaGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICAvLyBJZiBzb21ldGhpbmcgYXNrZWQgZm9yIGEgc3RhY2sgaW5zaWRlIGEgZmFrZSByZW5kZXIsIGl0IHNob3VsZCBnZXQgaWdub3JlZC5cbiAgaWYgKCFmbiB8fCByZWVudHJ5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAge1xuICAgIHZhciBmcmFtZSA9IGNvbXBvbmVudEZyYW1lQ2FjaGUuZ2V0KGZuKTtcblxuICAgIGlmIChmcmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbnRyb2w7XG4gIHJlZW50cnkgPSB0cnVlO1xuICB2YXIgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlOyAvLyAkRmxvd0ZpeE1lIEl0IGRvZXMgYWNjZXB0IHVuZGVmaW5lZC5cblxuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHVuZGVmaW5lZDtcbiAgdmFyIHByZXZpb3VzRGlzcGF0Y2hlcjtcblxuICB7XG4gICAgcHJldmlvdXNEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50OyAvLyBTZXQgdGhlIGRpc3BhdGNoZXIgaW4gREVWIGJlY2F1c2UgdGhpcyBtaWdodCBiZSBjYWxsIGluIHRoZSByZW5kZXIgZnVuY3Rpb25cbiAgICAvLyBmb3Igd2FybmluZ3MuXG5cbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBudWxsO1xuICAgIGRpc2FibGVMb2dzKCk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIFRoaXMgc2hvdWxkIHRocm93LlxuICAgIGlmIChjb25zdHJ1Y3QpIHtcbiAgICAgIC8vIFNvbWV0aGluZyBzaG91bGQgYmUgc2V0dGluZyB0aGUgcHJvcHMgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgdmFyIEZha2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICB9OyAvLyAkRmxvd0ZpeE1lXG5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZha2UucHJvdG90eXBlLCAncHJvcHMnLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIFdlIHVzZSBhIHRocm93aW5nIHNldHRlciBpbnN0ZWFkIG9mIGZyb3plbiBvciBub24td3JpdGFibGUgcHJvcHNcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoYXQgd29uJ3QgdGhyb3cgaW4gYSBub24tc3RyaWN0IG1vZGUgZnVuY3Rpb24uXG4gICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgICAgICAgLy8gV2UgY29uc3RydWN0IGEgZGlmZmVyZW50IGNvbnRyb2wgZm9yIHRoaXMgY2FzZSB0byBpbmNsdWRlIGFueSBleHRyYVxuICAgICAgICAvLyBmcmFtZXMgYWRkZWQgYnkgdGhlIGNvbnN0cnVjdCBjYWxsLlxuICAgICAgICB0cnkge1xuICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgIGNvbnRyb2wgPSB4O1xuICAgICAgICB9XG5cbiAgICAgICAgUmVmbGVjdC5jb25zdHJ1Y3QoZm4sIFtdLCBGYWtlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgRmFrZS5jYWxsKCk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICBjb250cm9sID0geDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZuLmNhbGwoRmFrZS5wcm90b3R5cGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICBjb250cm9sID0geDtcbiAgICAgIH1cblxuICAgICAgZm4oKTtcbiAgICB9XG4gIH0gY2F0Y2ggKHNhbXBsZSkge1xuICAgIC8vIFRoaXMgaXMgaW5saW5lZCBtYW51YWxseSBiZWNhdXNlIGNsb3N1cmUgZG9lc24ndCBkbyBpdCBmb3IgdXMuXG4gICAgaWYgKHNhbXBsZSAmJiBjb250cm9sICYmIHR5cGVvZiBzYW1wbGUuc3RhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBUaGlzIGV4dHJhY3RzIHRoZSBmaXJzdCBmcmFtZSBmcm9tIHRoZSBzYW1wbGUgdGhhdCBpc24ndCBhbHNvIGluIHRoZSBjb250cm9sLlxuICAgICAgLy8gU2tpcHBpbmcgb25lIGZyYW1lIHRoYXQgd2UgYXNzdW1lIGlzIHRoZSBmcmFtZSB0aGF0IGNhbGxzIHRoZSB0d28uXG4gICAgICB2YXIgc2FtcGxlTGluZXMgPSBzYW1wbGUuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIGNvbnRyb2xMaW5lcyA9IGNvbnRyb2wuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIHMgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGMgPSBjb250cm9sTGluZXMubGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKHMgPj0gMSAmJiBjID49IDAgJiYgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAvLyBXZSBleHBlY3QgYXQgbGVhc3Qgb25lIHN0YWNrIGZyYW1lIHRvIGJlIHNoYXJlZC5cbiAgICAgICAgLy8gVHlwaWNhbGx5IHRoaXMgd2lsbCBiZSB0aGUgcm9vdCBtb3N0IG9uZS4gSG93ZXZlciwgc3RhY2sgZnJhbWVzIG1heSBiZVxuICAgICAgICAvLyBjdXQgb2ZmIGR1ZSB0byBtYXhpbXVtIHN0YWNrIGxpbWl0cy4gSW4gdGhpcyBjYXNlLCBvbmUgbWF5YmUgY3V0IG9mZlxuICAgICAgICAvLyBlYXJsaWVyIHRoYW4gdGhlIG90aGVyLiBXZSBhc3N1bWUgdGhhdCB0aGUgc2FtcGxlIGlzIGxvbmdlciBvciB0aGUgc2FtZVxuICAgICAgICAvLyBhbmQgdGhlcmUgZm9yIGN1dCBvZmYgZWFybGllci4gU28gd2Ugc2hvdWxkIGZpbmQgdGhlIHJvb3QgbW9zdCBmcmFtZSBpblxuICAgICAgICAvLyB0aGUgc2FtcGxlIHNvbWV3aGVyZSBpbiB0aGUgY29udHJvbC5cbiAgICAgICAgYy0tO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgcyA+PSAxICYmIGMgPj0gMDsgcy0tLCBjLS0pIHtcbiAgICAgICAgLy8gTmV4dCB3ZSBmaW5kIHRoZSBmaXJzdCBvbmUgdGhhdCBpc24ndCB0aGUgc2FtZSB3aGljaCBzaG91bGQgYmUgdGhlXG4gICAgICAgIC8vIGZyYW1lIHRoYXQgY2FsbGVkIG91ciBzYW1wbGUgZnVuY3Rpb24gYW5kIHRoZSBjb250cm9sLlxuICAgICAgICBpZiAoc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAgIC8vIEluIFY4LCB0aGUgZmlyc3QgbGluZSBpcyBkZXNjcmliaW5nIHRoZSBtZXNzYWdlIGJ1dCBvdGhlciBWTXMgZG9uJ3QuXG4gICAgICAgICAgLy8gSWYgd2UncmUgYWJvdXQgdG8gcmV0dXJuIHRoZSBmaXJzdCBsaW5lLCBhbmQgdGhlIGNvbnRyb2wgaXMgYWxzbyBvbiB0aGUgc2FtZVxuICAgICAgICAgIC8vIGxpbmUsIHRoYXQncyBhIHByZXR0eSBnb29kIGluZGljYXRvciB0aGF0IG91ciBzYW1wbGUgdGhyZXcgYXQgc2FtZSBsaW5lIGFzXG4gICAgICAgICAgLy8gdGhlIGNvbnRyb2wuIEkuZS4gYmVmb3JlIHdlIGVudGVyZWQgdGhlIHNhbXBsZSBmcmFtZS4gU28gd2UgaWdub3JlIHRoaXMgcmVzdWx0LlxuICAgICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgcGFzc2VkIGEgY2xhc3MgdG8gZnVuY3Rpb24gY29tcG9uZW50LCBvciBub24tZnVuY3Rpb24uXG4gICAgICAgICAgaWYgKHMgIT09IDEgfHwgYyAhPT0gMSkge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICBzLS07XG4gICAgICAgICAgICAgIGMtLTsgLy8gV2UgbWF5IHN0aWxsIGhhdmUgc2ltaWxhciBpbnRlcm1lZGlhdGUgZnJhbWVzIGZyb20gdGhlIGNvbnN0cnVjdCBjYWxsLlxuICAgICAgICAgICAgICAvLyBUaGUgbmV4dCBvbmUgdGhhdCBpc24ndCB0aGUgc2FtZSBzaG91bGQgYmUgb3VyIG1hdGNoIHRob3VnaC5cblxuICAgICAgICAgICAgICBpZiAoYyA8IDAgfHwgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAgICAgICAgIC8vIFY4IGFkZHMgYSBcIm5ld1wiIHByZWZpeCBmb3IgbmF0aXZlIGNsYXNzZXMuIExldCdzIHJlbW92ZSBpdCB0byBtYWtlIGl0IHByZXR0aWVyLlxuICAgICAgICAgICAgICAgIHZhciBfZnJhbWUgPSAnXFxuJyArIHNhbXBsZUxpbmVzW3NdLnJlcGxhY2UoJyBhdCBuZXcgJywgJyBhdCAnKTtcblxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50RnJhbWVDYWNoZS5zZXQoZm4sIF9mcmFtZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAvLyBSZXR1cm4gdGhlIGxpbmUgd2UgZm91bmQuXG5cblxuICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHMgPj0gMSAmJiBjID49IDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHJlZW50cnkgPSBmYWxzZTtcblxuICAgIHtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudCA9IHByZXZpb3VzRGlzcGF0Y2hlcjtcbiAgICAgIHJlZW5hYmxlTG9ncygpO1xuICAgIH1cblxuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZTtcbiAgfSAvLyBGYWxsYmFjayB0byBqdXN0IHVzaW5nIHRoZSBuYW1lIGlmIHdlIGNvdWxkbid0IG1ha2UgaXQgdGhyb3cuXG5cblxuICB2YXIgbmFtZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6ICcnO1xuICB2YXIgc3ludGhldGljRnJhbWUgPSBuYW1lID8gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSkgOiAnJztcblxuICB7XG4gICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29tcG9uZW50RnJhbWVDYWNoZS5zZXQoZm4sIHN5bnRoZXRpY0ZyYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3ludGhldGljRnJhbWU7XG59XG5mdW5jdGlvbiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUoZm4sIHNvdXJjZSwgb3duZXJGbikge1xuICB7XG4gICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISEocHJvdG90eXBlICYmIHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKHR5cGUsIHNvdXJjZSwgb3duZXJGbikge1xuXG4gIGlmICh0eXBlID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSh0eXBlLCBzaG91bGRDb25zdHJ1Y3QodHlwZSkpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUodHlwZSk7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlJyk7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnU3VzcGVuc2VMaXN0Jyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUodHlwZS5yZW5kZXIpO1xuXG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgLy8gTWVtbyBtYXkgY29udGFpbiBhbnkgY29tcG9uZW50IHR5cGUgc28gd2UgcmVjdXJzaXZlbHkgcmVzb2x2ZSBpdC5cbiAgICAgICAgcmV0dXJuIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVih0eXBlLnR5cGUsIHNvdXJjZSwgb3duZXJGbik7XG5cbiAgICAgIGNhc2UgUkVBQ1RfQkxPQ0tfVFlQRTpcbiAgICAgICAgcmV0dXJuIGRlc2NyaWJlRnVuY3Rpb25Db21wb25lbnRGcmFtZSh0eXBlLl9yZW5kZXIpO1xuXG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIExhenkgbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGluaXQocGF5bG9hZCksIHNvdXJjZSwgb3duZXJGbik7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuXG5mdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KSB7XG4gIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICB2YXIgc3RhY2sgPSBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYoZWxlbWVudC50eXBlLCBlbGVtZW50Ll9zb3VyY2UsIG93bmVyID8gb3duZXIudHlwZSA6IG51bGwpO1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5zZXRFeHRyYVN0YWNrRnJhbWUoc3RhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLnNldEV4dHJhU3RhY2tGcmFtZShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50KSB7XG4gIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgb2theSBidXQgRmxvdyBkb2Vzbid0IGtub3cgaXQuXG4gICAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuICAgIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICAgIGlmIChoYXModHlwZVNwZWNzLCB0eXBlU3BlY05hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvciQxID0gdm9pZCAwOyAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiAnICsgbG9jYXRpb24gKyAnIHR5cGUgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyAnICsgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICsgJ2AuJyArICdUaGlzIG9mdGVuIGhhcHBlbnMgYmVjYXVzZSBvZiB0eXBvcyBzdWNoIGFzIGBQcm9wVHlwZXMuZnVuY3Rpb25gIGluc3RlYWQgb2YgYFByb3BUeXBlcy5mdW5jYC4nKTtcbiAgICAgICAgICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVycm9yJDEgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCcpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGVycm9yJDEgPSBleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvciQxICYmICEoZXJyb3IkMSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgICAgZXJyb3IoJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMnICsgJyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgJyArICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gJyArICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICsgJ2NyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgJyArICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBsb2NhdGlvbiwgdHlwZVNwZWNOYW1lLCB0eXBlb2YgZXJyb3IkMSk7XG5cbiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvciQxLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yJDEubWVzc2FnZV0gPSB0cnVlO1xuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgICAgZXJyb3IoJ0ZhaWxlZCAlcyB0eXBlOiAlcycsIGxvY2F0aW9uLCBlcnJvciQxLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICBrZXk6IHRydWUsXG4gIHJlZjogdHJ1ZSxcbiAgX19zZWxmOiB0cnVlLFxuICBfX3NvdXJjZTogdHJ1ZVxufTtcbnZhciBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bjtcbnZhciBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bjtcbnZhciBkaWRXYXJuQWJvdXRTdHJpbmdSZWZzO1xuXG57XG4gIGRpZFdhcm5BYm91dFN0cmluZ1JlZnMgPSB7fTtcbn1cblxuZnVuY3Rpb24gaGFzVmFsaWRSZWYoY29uZmlnKSB7XG4gIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdyZWYnKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAncmVmJykuZ2V0O1xuXG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaGFzVmFsaWRLZXkoY29uZmlnKSB7XG4gIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdrZXknKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAna2V5JykuZ2V0O1xuXG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmZpZy5rZXkgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gd2FybklmU3RyaW5nUmVmQ2Fubm90QmVBdXRvQ29udmVydGVkKGNvbmZpZywgc2VsZikge1xuICB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcucmVmID09PSAnc3RyaW5nJyAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ICYmIHNlbGYgJiYgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5zdGF0ZU5vZGUgIT09IHNlbGYpIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpO1xuXG4gICAgICBpZiAoIWRpZFdhcm5BYm91dFN0cmluZ1JlZnNbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgZXJyb3IoJ0NvbXBvbmVudCBcIiVzXCIgY29udGFpbnMgdGhlIHN0cmluZyByZWYgXCIlc1wiLiAnICsgJ1N1cHBvcnQgZm9yIHN0cmluZyByZWZzIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiAnICsgJ1RoaXMgY2FzZSBjYW5ub3QgYmUgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gYW4gYXJyb3cgZnVuY3Rpb24uICcgKyAnV2UgYXNrIHlvdSB0byBtYW51YWxseSBmaXggdGhpcyBjYXNlIGJ5IHVzaW5nIHVzZVJlZigpIG9yIGNyZWF0ZVJlZigpIGluc3RlYWQuICcgKyAnTGVhcm4gbW9yZSBhYm91dCB1c2luZyByZWZzIHNhZmVseSBoZXJlOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zdHJpY3QtbW9kZS1zdHJpbmctcmVmJywgZ2V0Q29tcG9uZW50TmFtZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpLCBjb25maWcucmVmKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nS2V5LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ3JlZicsIHtcbiAgICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nUmVmLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFJlYWN0IGVsZW1lbnQuIFRoaXMgbm8gbG9uZ2VyIGFkaGVyZXMgdG9cbiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBpbnN0YW5jZW9mIGNoZWNrXG4gKiB3aWxsIG5vdCB3b3JrLiBJbnN0ZWFkIHRlc3QgJCR0eXBlb2YgZmllbGQgYWdhaW5zdCBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgdG8gY2hlY2tcbiAqIGlmIHNvbWV0aGluZyBpcyBhIFJlYWN0IEVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0gb3duZXJcbiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpc1xuICogZGlmZmVyZW50IGZyb20gdGhlIGBvd25lcmAgd2hlbiBSZWFjdC5jcmVhdGVFbGVtZW50IGlzIGNhbGxlZCwgc28gdGhhdCB3ZVxuICogY2FuIHdhcm4uIFdlIHdhbnQgdG8gZ2V0IHJpZCBvZiBvd25lciBhbmQgcmVwbGFjZSBzdHJpbmcgYHJlZmBzIHdpdGggYXJyb3dcbiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm9cbiAqIGNoYW5nZSBpbiBiZWhhdmlvci5cbiAqIEBwYXJhbSB7Kn0gc291cmNlIEFuIGFubm90YXRpb24gb2JqZWN0IChhZGRlZCBieSBhIHRyYW5zcGlsZXIgb3Igb3RoZXJ3aXNlKVxuICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5cblxudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3dzIHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHJlZixcbiAgICBwcm9wczogcHJvcHMsXG4gICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICBfb3duZXI6IG93bmVyXG4gIH07XG5cbiAge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9OyAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pOyAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHNlbGZcbiAgICB9KTsgLy8gVHdvIGVsZW1lbnRzIGNyZWF0ZWQgaW4gdHdvIGRpZmZlcmVudCBwbGFjZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWRcbiAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICB9KTtcblxuICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn07XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JmY3MvcHVsbC8xMDdcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKi9cblxuZnVuY3Rpb24ganN4REVWKHR5cGUsIGNvbmZpZywgbWF5YmVLZXksIHNvdXJjZSwgc2VsZikge1xuICB7XG4gICAgdmFyIHByb3BOYW1lOyAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG5cbiAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICB2YXIga2V5ID0gbnVsbDtcbiAgICB2YXIgcmVmID0gbnVsbDsgLy8gQ3VycmVudGx5LCBrZXkgY2FuIGJlIHNwcmVhZCBpbiBhcyBhIHByb3AuIFRoaXMgY2F1c2VzIGEgcG90ZW50aWFsXG4gICAgLy8gaXNzdWUgaWYga2V5IGlzIGFsc28gZXhwbGljaXRseSBkZWNsYXJlZCAoaWUuIDxkaXYgey4uLnByb3BzfSBrZXk9XCJIaVwiIC8+XG4gICAgLy8gb3IgPGRpdiBrZXk9XCJIaVwiIHsuLi5wcm9wc30gLz4gKS4gV2Ugd2FudCB0byBkZXByZWNhdGUga2V5IHNwcmVhZCxcbiAgICAvLyBidXQgYXMgYW4gaW50ZXJtZWRpYXJ5IHN0ZXAsIHdlIHdpbGwgdXNlIGpzeERFViBmb3IgZXZlcnl0aGluZyBleGNlcHRcbiAgICAvLyA8ZGl2IHsuLi5wcm9wc30ga2V5PVwiSGlcIiAvPiwgYmVjYXVzZSB3ZSBhcmVuJ3QgY3VycmVudGx5IGFibGUgdG8gdGVsbCBpZlxuICAgIC8vIGtleSBpcyBleHBsaWNpdGx5IGRlY2xhcmVkIHRvIGJlIHVuZGVmaW5lZCBvciBub3QuXG5cbiAgICBpZiAobWF5YmVLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAga2V5ID0gJycgKyBtYXliZUtleTtcbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIGlmIChoYXNWYWxpZFJlZihjb25maWcpKSB7XG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgd2FybklmU3RyaW5nUmVmQ2Fubm90QmVBdXRvQ29udmVydGVkKGNvbmZpZywgc2VsZik7XG4gICAgfSAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBhcmUgYWRkZWQgdG8gYSBuZXcgcHJvcHMgb2JqZWN0XG5cblxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcblxuXG4gICAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcblxuICAgICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgfHwgcmVmKSB7XG4gICAgICB2YXIgZGlzcGxheU5hbWUgPSB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8ICdVbmtub3duJyA6IHR5cGU7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZikge1xuICAgICAgICBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG52YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcblxuZnVuY3Rpb24gc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShlbGVtZW50KSB7XG4gIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICB2YXIgc3RhY2sgPSBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYoZWxlbWVudC50eXBlLCBlbGVtZW50Ll9zb3VyY2UsIG93bmVyID8gb3duZXIudHlwZSA6IG51bGwpO1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxLnNldEV4dHJhU3RhY2tGcmFtZShzdGFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMS5zZXRFeHRyYVN0YWNrRnJhbWUobnVsbCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93bjtcblxue1xuICBwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93biA9IGZhbHNlO1xufVxuLyoqXG4gKiBWZXJpZmllcyB0aGUgb2JqZWN0IGlzIGEgUmVhY3RFbGVtZW50LlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNpc3ZhbGlkZWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBAZmluYWxcbiAqL1xuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChvYmplY3QpIHtcbiAge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICB7XG4gICAgaWYgKFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudCkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShzb3VyY2UpIHtcbiAge1xuICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGZpbGVOYW1lID0gc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKTtcbiAgICAgIHZhciBsaW5lTnVtYmVyID0gc291cmNlLmxpbmVOdW1iZXI7XG4gICAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHlvdXIgY29kZSBhdCAnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJy4nO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cblxuXG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSkge1xuICB7XG4gICAgdmFyIGluZm8gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcblxuICAgIGlmICghaW5mbykge1xuICAgICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG5cbiAgICAgIGlmIChwYXJlbnROYW1lKSB7XG4gICAgICAgIGluZm8gPSBcIlxcblxcbkNoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPFwiICsgcGFyZW50TmFtZSArIFwiPi5cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5mbztcbiAgfVxufVxuLyoqXG4gKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuXG4gKiBUaGlzIGVsZW1lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcbiAqIHJlb3JkZXJlZC4gQWxsIGNoaWxkcmVuIHRoYXQgaGF2ZW4ndCBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFyZSByZXF1aXJlZCB0b1xuICogaGF2ZSBhIFwia2V5XCIgcHJvcGVydHkgYXNzaWduZWQgdG8gaXQuIEVycm9yIHN0YXR1c2VzIGFyZSBjYWNoZWQgc28gYSB3YXJuaW5nXG4gKiB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICB7XG4gICAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpO1xuXG4gICAgaWYgKG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7IC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gICAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAgIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cblxuICAgIHZhciBjaGlsZE93bmVyID0gJyc7XG5cbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50KSB7XG4gICAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICAgIGNoaWxkT3duZXIgPSBcIiBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSBcIiArIGdldENvbXBvbmVudE5hbWUoZWxlbWVudC5fb3duZXIudHlwZSkgKyBcIi5cIjtcbiAgICB9XG5cbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGVsZW1lbnQpO1xuXG4gICAgZXJyb3IoJ0VhY2ggY2hpbGQgaW4gYSBsaXN0IHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nICsgJyVzJXMgU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay93YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJywgY3VycmVudENvbXBvbmVudEVycm9ySW5mbywgY2hpbGRPd25lcik7XG5cbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKG51bGwpO1xuICB9XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGVsZW1lbnQgZWl0aGVyIGlzIHBhc3NlZCBpbiBhIHN0YXRpYyBsb2NhdGlvbiwgaW4gYW5cbiAqIGFycmF5IHdpdGggYW4gZXhwbGljaXQga2V5cyBwcm9wZXJ0eSBkZWZpbmVkLCBvciBpbiBhbiBvYmplY3QgbGl0ZXJhbFxuICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBub2RlJ3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAge1xuICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG5cbiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgICAgLy8gVGhpcyBlbGVtZW50IHdhcyBwYXNzZWQgaW4gYSB2YWxpZCBsb2NhdGlvbi5cbiAgICAgIGlmIChub2RlLl9zdG9yZSkge1xuICAgICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gRW50cnkgaXRlcmF0b3JzIHVzZWQgdG8gcHJvdmlkZSBpbXBsaWNpdCBrZXlzLFxuICAgICAgICAvLyBidXQgbm93IHdlIHByaW50IGEgc2VwYXJhdGUgd2FybmluZyBmb3IgdGhlbSBsYXRlci5cbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IG5vZGUuZW50cmllcykge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChub2RlKTtcbiAgICAgICAgICB2YXIgc3RlcDtcblxuICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLFxuICogcHJvdmlkZWQgYnkgdGhlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAge1xuICAgIHZhciB0eXBlID0gZWxlbWVudC50eXBlO1xuXG4gICAgaWYgKHR5cGUgPT09IG51bGwgfHwgdHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcm9wVHlwZXM7XG5cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IC8vIE5vdGU6IE1lbW8gb25seSBjaGVja3Mgb3V0ZXIgcHJvcHMgaGVyZS5cbiAgICAvLyBJbm5lciBwcm9wcyBhcmUgY2hlY2tlZCBpbiB0aGUgcmVjb25jaWxlci5cbiAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUpKSB7XG4gICAgICBwcm9wVHlwZXMgPSB0eXBlLnByb3BUeXBlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9wVHlwZXMpIHtcbiAgICAgIC8vIEludGVudGlvbmFsbHkgaW5zaWRlIHRvIGF2b2lkIHRyaWdnZXJpbmcgbGF6eSBpbml0aWFsaXplcnM6XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUodHlwZSk7XG4gICAgICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgZWxlbWVudCk7XG4gICAgfSBlbHNlIGlmICh0eXBlLlByb3BUeXBlcyAhPT0gdW5kZWZpbmVkICYmICFwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93bikge1xuICAgICAgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSB0cnVlOyAvLyBJbnRlbnRpb25hbGx5IGluc2lkZSB0byBhdm9pZCB0cmlnZ2VyaW5nIGxhenkgaW5pdGlhbGl6ZXJzOlxuXG4gICAgICB2YXIgX25hbWUgPSBnZXRDb21wb25lbnROYW1lKHR5cGUpO1xuXG4gICAgICBlcnJvcignQ29tcG9uZW50ICVzIGRlY2xhcmVkIGBQcm9wVHlwZXNgIGluc3RlYWQgb2YgYHByb3BUeXBlc2AuIERpZCB5b3UgbWlzc3BlbGwgdGhlIHByb3BlcnR5IGFzc2lnbm1lbnQ/JywgX25hbWUgfHwgJ1Vua25vd24nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHR5cGUuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nICYmICF0eXBlLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCkge1xuICAgICAgZXJyb3IoJ2dldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyAnICsgJ2RlZmluaXRpb25zLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgYGRlZmF1bHRQcm9wc2AgaW5zdGVhZC4nKTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBmcmFnbWVudCwgdmFsaWRhdGUgdGhhdCBpdCBjYW4gb25seSBiZSBwcm92aWRlZCB3aXRoIGZyYWdtZW50IHByb3BzXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZnJhZ21lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhmcmFnbWVudCkge1xuICB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcmFnbWVudC5wcm9wcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoa2V5ICE9PSAnY2hpbGRyZW4nICYmIGtleSAhPT0gJ2tleScpIHtcbiAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShmcmFnbWVudCk7XG5cbiAgICAgICAgZXJyb3IoJ0ludmFsaWQgcHJvcCBgJXNgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuICcgKyAnUmVhY3QuRnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBga2V5YCBhbmQgYGNoaWxkcmVuYCBwcm9wcy4nLCBrZXkpO1xuXG4gICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEobnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmcmFnbWVudC5yZWYgIT09IG51bGwpIHtcbiAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZnJhZ21lbnQpO1xuXG4gICAgICBlcnJvcignSW52YWxpZCBhdHRyaWJ1dGUgYHJlZmAgc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4nKTtcblxuICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgaXNTdGF0aWNDaGlsZHJlbiwgc291cmNlLCBzZWxmKSB7XG4gIHtcbiAgICB2YXIgdmFsaWRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpOyAvLyBXZSB3YXJuIGluIHRoaXMgY2FzZSBidXQgZG9uJ3QgdGhyb3cuIFdlIGV4cGVjdCB0aGUgZWxlbWVudCBjcmVhdGlvbiB0b1xuICAgIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG5cbiAgICBpZiAoIXZhbGlkVHlwZSkge1xuICAgICAgdmFyIGluZm8gPSAnJztcblxuICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZUluZm8gPSBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShzb3VyY2UpO1xuXG4gICAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgICBpbmZvICs9IHNvdXJjZUluZm87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZVN0cmluZztcblxuICAgICAgaWYgKHR5cGUgPT09IG51bGwpIHtcbiAgICAgICAgdHlwZVN0cmluZyA9ICdudWxsJztcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgICB0eXBlU3RyaW5nID0gJ2FycmF5JztcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgICAgICB0eXBlU3RyaW5nID0gXCI8XCIgKyAoZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpIHx8ICdVbmtub3duJykgKyBcIiAvPlwiO1xuICAgICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlU3RyaW5nID0gdHlwZW9mIHR5cGU7XG4gICAgICB9XG5cbiAgICAgIGVycm9yKCdSZWFjdC5qc3g6IHR5cGUgaXMgaW52YWxpZCAtLSBleHBlY3RlZCBhIHN0cmluZyAoZm9yICcgKyAnYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSAnICsgJ2NvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZVN0cmluZywgaW5mbyk7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSBqc3hERVYodHlwZSwgcHJvcHMsIGtleSwgc291cmNlLCBzZWxmKTsgLy8gVGhlIHJlc3VsdCBjYW4gYmUgbnVsbGlzaCBpZiBhIG1vY2sgb3IgYSBjdXN0b20gZnVuY3Rpb24gaXMgdXNlZC5cbiAgICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG5cbiAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9IC8vIFNraXAga2V5IHdhcm5pbmcgaWYgdGhlIHR5cGUgaXNuJ3QgdmFsaWQgc2luY2Ugb3VyIGtleSB2YWxpZGF0aW9uIGxvZ2ljXG4gICAgLy8gZG9lc24ndCBleHBlY3QgYSBub24tc3RyaW5nL2Z1bmN0aW9uIHR5cGUgYW5kIGNhbiB0aHJvdyBjb25mdXNpbmcgZXJyb3JzLlxuICAgIC8vIFdlIGRvbid0IHdhbnQgZXhjZXB0aW9uIGJlaGF2aW9yIHRvIGRpZmZlciBiZXR3ZWVuIGRldiBhbmQgcHJvZC5cbiAgICAvLyAoUmVuZGVyaW5nIHdpbGwgdGhyb3cgd2l0aCBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgYXMgc29vbiBhcyB0aGUgdHlwZSBpc1xuICAgIC8vIGZpeGVkLCB0aGUga2V5IHdhcm5pbmdzIHdpbGwgYXBwZWFyLilcblxuXG4gICAgaWYgKHZhbGlkVHlwZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG5cbiAgICAgIGlmIChjaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpc1N0YXRpY0NoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuW2ldLCB0eXBlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZShjaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yKCdSZWFjdC5qc3g6IFN0YXRpYyBjaGlsZHJlbiBzaG91bGQgYWx3YXlzIGJlIGFuIGFycmF5LiAnICsgJ1lvdSBhcmUgbGlrZWx5IGV4cGxpY2l0bHkgY2FsbGluZyBSZWFjdC5qc3hzIG9yIFJlYWN0LmpzeERFVi4gJyArICdVc2UgdGhlIEJhYmVsIHRyYW5zZm9ybSBpbnN0ZWFkLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhjaGlsZHJlbiwgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gZXhwb3J0cy5GcmFnbWVudCkge1xuICAgICAgdmFsaWRhdGVGcmFnbWVudFByb3BzKGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxufSAvLyBUaGVzZSB0d28gZnVuY3Rpb25zIGV4aXN0IHRvIHN0aWxsIGdldCBjaGlsZCB3YXJuaW5ncyBpbiBkZXZcbi8vIGV2ZW4gd2l0aCB0aGUgcHJvZCB0cmFuc2Zvcm0uIFRoaXMgbWVhbnMgdGhhdCBqc3hERVYgaXMgcHVyZWx5XG4vLyBvcHQtaW4gYmVoYXZpb3IgZm9yIGJldHRlciBtZXNzYWdlcyBidXQgdGhhdCB3ZSB3b24ndCBzdG9wXG4vLyBnaXZpbmcgeW91IHdhcm5pbmdzIGlmIHlvdSB1c2UgcHJvZHVjdGlvbiBhcGlzLlxuXG5mdW5jdGlvbiBqc3hXaXRoVmFsaWRhdGlvblN0YXRpYyh0eXBlLCBwcm9wcywga2V5KSB7XG4gIHtcbiAgICByZXR1cm4ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgdHJ1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGpzeFdpdGhWYWxpZGF0aW9uRHluYW1pYyh0eXBlLCBwcm9wcywga2V5KSB7XG4gIHtcbiAgICByZXR1cm4ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgZmFsc2UpO1xuICB9XG59XG5cbnZhciBqc3ggPSAganN4V2l0aFZhbGlkYXRpb25EeW5hbWljIDsgLy8gd2UgbWF5IHdhbnQgdG8gc3BlY2lhbCBjYXNlIGpzeHMgaW50ZXJuYWxseSB0byB0YWtlIGFkdmFudGFnZSBvZiBzdGF0aWMgY2hpbGRyZW4uXG4vLyBmb3Igbm93IHdlIGNhbiBzaGlwIGlkZW50aWNhbCBwcm9kIGZ1bmN0aW9uc1xuXG52YXIganN4cyA9ICBqc3hXaXRoVmFsaWRhdGlvblN0YXRpYyA7XG5cbmV4cG9ydHMuanN4ID0ganN4O1xuZXhwb3J0cy5qc3hzID0ganN4cztcbiAgfSkoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0ICogYXMgSnIgZnJvbSBcInVyaS10ZW1wbGF0ZS1saXRlXCI7XG5jbGFzcyBlbiB7XG4gIGFzeW5jIGdldChlLCByKSB7XG4gICAgY29uc3QgeyB0b3RhbFNlYXRzOiBuLCBhdmFpbGFibGVTZWF0czogYSB9ID0gYXdhaXQgKGF3YWl0IGZldGNoKFwiL2F3LWFwaS9zdWJzY3JpcHRpb25zXCIpKS5qc29uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsOiBuLFxuICAgICAgYXZhaWxhYmxlOiBhXG4gICAgfTtcbiAgfVxuICBhc3luYyBzZWF0cyhlLCByLCBuKSB7XG4gICAgcmV0dXJuIChhd2FpdCAoYXdhaXQgZmV0Y2goXCIvYXctYXBpL3VzZXJzXCIpKS5qc29uKCkpLnVzZXJzLm1hcChcbiAgICAgICh7IHVzZXJuYW1lOiBhLCBmaXJzdE5hbWU6IGksIGxhc3ROYW1lOiBvIH0pID0+ICh7XG4gICAgICAgIGlkOiBhLFxuICAgICAgICBuYW1lOiBgJHtpfSAke299YFxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGFzc2lnbihlLCByLCBuKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIHVuQXNzaWduKGUsIHIsIG4pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cbnZhciBGdCA9IHR5cGVvZiBnbG9iYWxUaGlzIDwgXCJ1XCIgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyA8IFwidVwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCA8IFwidVwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgPCBcInVcIiA/IHNlbGYgOiB7fTtcbmZ1bmN0aW9uIHByKHQpIHtcbiAgaWYgKHQuX19lc01vZHVsZSlcbiAgICByZXR1cm4gdDtcbiAgdmFyIGUgPSB0LmRlZmF1bHQ7XG4gIGlmICh0eXBlb2YgZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgciA9IGZ1bmN0aW9uIG4oKSB7XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIG4pIHtcbiAgICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBhcmd1bWVudHMpO1xuICAgICAgICB2YXIgaSA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoZSwgYSk7XG4gICAgICAgIHJldHVybiBuZXcgaSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIHIucHJvdG90eXBlID0gZS5wcm90b3R5cGU7XG4gIH0gZWxzZVxuICAgIHIgPSB7fTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIE9iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24obikge1xuICAgIHZhciBhID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCBuKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkociwgbiwgYS5nZXQgPyBhIDoge1xuICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdFtuXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSksIHI7XG59XG52YXIgZ3QgPSB7fSwgJCA9IHt9LCB0biA9IHtcbiAgZ2V0IGV4cG9ydHMoKSB7XG4gICAgcmV0dXJuICQ7XG4gIH0sXG4gIHNldCBleHBvcnRzKHQpIHtcbiAgICAkID0gdDtcbiAgfVxufTtcbihmdW5jdGlvbih0KSB7XG4gIHZhciBlLCByLCBuLCBhLCBpLCBvLCBsLCBzLCBoLCBnLCBiLCBkLCBmLCBfLCB2LCBFLCBELCBBLCBOLCBVLCB0ZSwgeiwgRywgS2UsIFZlLCBNZSwgSXQsIEh0LCBJZTtcbiAgKGZ1bmN0aW9uKE8pIHtcbiAgICB2YXIgSGUgPSB0eXBlb2YgRnQgPT0gXCJvYmplY3RcIiA/IEZ0IDogdHlwZW9mIHNlbGYgPT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0eXBlb2YgdGhpcyA9PSBcIm9iamVjdFwiID8gdGhpcyA6IHt9O1xuICAgIE8oRmUoSGUsIEZlKHQuZXhwb3J0cykpKTtcbiAgICBmdW5jdGlvbiBGZSh1LCBjKSB7XG4gICAgICByZXR1cm4gdSAhPT0gSGUgJiYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09IFwiZnVuY3Rpb25cIiA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSkgOiB1Ll9fZXNNb2R1bGUgPSAhMCksIGZ1bmN0aW9uKHAsIHkpIHtcbiAgICAgICAgcmV0dXJuIHVbcF0gPSBjID8gYyhwLCB5KSA6IHk7XG4gICAgICB9O1xuICAgIH1cbiAgfSkoZnVuY3Rpb24oTykge1xuICAgIHZhciBIZSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uKHUsIGMpIHtcbiAgICAgIHUuX19wcm90b19fID0gYztcbiAgICB9IHx8IGZ1bmN0aW9uKHUsIGMpIHtcbiAgICAgIGZvciAodmFyIHAgaW4gYylcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGMsIHApICYmICh1W3BdID0gY1twXSk7XG4gICAgfTtcbiAgICBlID0gZnVuY3Rpb24odSwgYykge1xuICAgICAgaWYgKHR5cGVvZiBjICE9IFwiZnVuY3Rpb25cIiAmJiBjICE9PSBudWxsKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhjKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICBIZSh1LCBjKTtcbiAgICAgIGZ1bmN0aW9uIHAoKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSB1O1xuICAgICAgfVxuICAgICAgdS5wcm90b3R5cGUgPSBjID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShjKSA6IChwLnByb3RvdHlwZSA9IGMucHJvdG90eXBlLCBuZXcgcCgpKTtcbiAgICB9LCByID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih1KSB7XG4gICAgICBmb3IgKHZhciBjLCBwID0gMSwgeSA9IGFyZ3VtZW50cy5sZW5ndGg7IHAgPCB5OyBwKyspIHtcbiAgICAgICAgYyA9IGFyZ3VtZW50c1twXTtcbiAgICAgICAgZm9yICh2YXIgdyBpbiBjKVxuICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjLCB3KSAmJiAodVt3XSA9IGNbd10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHU7XG4gICAgfSwgbiA9IGZ1bmN0aW9uKHUsIGMpIHtcbiAgICAgIHZhciBwID0ge307XG4gICAgICBmb3IgKHZhciB5IGluIHUpXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1LCB5KSAmJiBjLmluZGV4T2YoeSkgPCAwICYmIChwW3ldID0gdVt5XSk7XG4gICAgICBpZiAodSAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgdyA9IDAsIHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHUpOyB3IDwgeS5sZW5ndGg7IHcrKylcbiAgICAgICAgICBjLmluZGV4T2YoeVt3XSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh1LCB5W3ddKSAmJiAocFt5W3ddXSA9IHVbeVt3XV0pO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfSwgYSA9IGZ1bmN0aW9uKHUsIGMsIHAsIHkpIHtcbiAgICAgIHZhciB3ID0gYXJndW1lbnRzLmxlbmd0aCwgbSA9IHcgPCAzID8gYyA6IHkgPT09IG51bGwgPyB5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjLCBwKSA6IHksIFI7XG4gICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIG0gPSBSZWZsZWN0LmRlY29yYXRlKHUsIGMsIHAsIHkpO1xuICAgICAgZWxzZVxuICAgICAgICBmb3IgKHZhciBQID0gdS5sZW5ndGggLSAxOyBQID49IDA7IFAtLSlcbiAgICAgICAgICAoUiA9IHVbUF0pICYmIChtID0gKHcgPCAzID8gUihtKSA6IHcgPiAzID8gUihjLCBwLCBtKSA6IFIoYywgcCkpIHx8IG0pO1xuICAgICAgcmV0dXJuIHcgPiAzICYmIG0gJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KGMsIHAsIG0pLCBtO1xuICAgIH0sIGkgPSBmdW5jdGlvbih1LCBjKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocCwgeSkge1xuICAgICAgICBjKHAsIHksIHUpO1xuICAgICAgfTtcbiAgICB9LCBvID0gZnVuY3Rpb24odSwgYywgcCwgeSwgdywgbSkge1xuICAgICAgZnVuY3Rpb24gUihmZSkge1xuICAgICAgICBpZiAoZmUgIT09IHZvaWQgMCAmJiB0eXBlb2YgZmUgIT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTtcbiAgICAgICAgcmV0dXJuIGZlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgUCA9IHkua2luZCwgeCA9IFAgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDogUCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCIsIFQgPSAhYyAmJiB1ID8geS5zdGF0aWMgPyB1IDogdS5wcm90b3R5cGUgOiBudWxsLCBDID0gYyB8fCAoVCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoVCwgeS5uYW1lKSA6IHt9KSwgSCwgViA9ICExLCBMID0gcC5sZW5ndGggLSAxOyBMID49IDA7IEwtLSkge1xuICAgICAgICB2YXIgWCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBXIGluIHkpXG4gICAgICAgICAgWFtXXSA9IFcgPT09IFwiYWNjZXNzXCIgPyB7fSA6IHlbV107XG4gICAgICAgIGZvciAodmFyIFcgaW4geS5hY2Nlc3MpXG4gICAgICAgICAgWC5hY2Nlc3NbV10gPSB5LmFjY2Vzc1tXXTtcbiAgICAgICAgWC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uKGZlKSB7XG4gICAgICAgICAgaWYgKFYpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpO1xuICAgICAgICAgIG0ucHVzaChSKGZlIHx8IG51bGwpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlID0gKDAsIHBbTF0pKFAgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBDLmdldCwgc2V0OiBDLnNldCB9IDogQ1t4XSwgWCk7XG4gICAgICAgIGlmIChQID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmUgPT09IHZvaWQgMClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZSA9PT0gbnVsbCB8fCB0eXBlb2YgcmUgIT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgKEggPSBSKHJlLmdldCkpICYmIChDLmdldCA9IEgpLCAoSCA9IFIocmUuc2V0KSkgJiYgKEMuc2V0ID0gSCksIChIID0gUihyZS5pbml0KSkgJiYgdy5wdXNoKEgpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAoSCA9IFIocmUpKSAmJiAoUCA9PT0gXCJmaWVsZFwiID8gdy5wdXNoKEgpIDogQ1t4XSA9IEgpO1xuICAgICAgfVxuICAgICAgVCAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoVCwgeS5uYW1lLCBDKSwgViA9ICEwO1xuICAgIH0sIGwgPSBmdW5jdGlvbih1LCBjLCBwKSB7XG4gICAgICBmb3IgKHZhciB5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIsIHcgPSAwOyB3IDwgYy5sZW5ndGg7IHcrKylcbiAgICAgICAgcCA9IHkgPyBjW3ddLmNhbGwodSwgcCkgOiBjW3ddLmNhbGwodSk7XG4gICAgICByZXR1cm4geSA/IHAgOiB2b2lkIDA7XG4gICAgfSwgcyA9IGZ1bmN0aW9uKHUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdSA9PSBcInN5bWJvbFwiID8gdSA6IFwiXCIuY29uY2F0KHUpO1xuICAgIH0sIGggPSBmdW5jdGlvbih1LCBjLCBwKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGMgPT0gXCJzeW1ib2xcIiAmJiAoYyA9IGMuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQoYy5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIiksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6ICEwLCB2YWx1ZTogcCA/IFwiXCIuY29uY2F0KHAsIFwiIFwiLCBjKSA6IGMgfSk7XG4gICAgfSwgZyA9IGZ1bmN0aW9uKHUsIGMpIHtcbiAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEodSwgYyk7XG4gICAgfSwgYiA9IGZ1bmN0aW9uKHUsIGMsIHAsIHkpIHtcbiAgICAgIGZ1bmN0aW9uIHcobSkge1xuICAgICAgICByZXR1cm4gbSBpbnN0YW5jZW9mIHAgPyBtIDogbmV3IHAoZnVuY3Rpb24oUikge1xuICAgICAgICAgIFIobSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyAocCB8fCAocCA9IFByb21pc2UpKShmdW5jdGlvbihtLCBSKSB7XG4gICAgICAgIGZ1bmN0aW9uIFAoQykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBUKHkubmV4dChDKSk7XG4gICAgICAgICAgfSBjYXRjaCAoSCkge1xuICAgICAgICAgICAgUihIKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24geChDKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFQoeS50aHJvdyhDKSk7XG4gICAgICAgICAgfSBjYXRjaCAoSCkge1xuICAgICAgICAgICAgUihIKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gVChDKSB7XG4gICAgICAgICAgQy5kb25lID8gbShDLnZhbHVlKSA6IHcoQy52YWx1ZSkudGhlbihQLCB4KTtcbiAgICAgICAgfVxuICAgICAgICBUKCh5ID0geS5hcHBseSh1LCBjIHx8IFtdKSkubmV4dCgpKTtcbiAgICAgIH0pO1xuICAgIH0sIGQgPSBmdW5jdGlvbih1LCBjKSB7XG4gICAgICB2YXIgcCA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAobVswXSAmIDEpXG4gICAgICAgICAgdGhyb3cgbVsxXTtcbiAgICAgICAgcmV0dXJuIG1bMV07XG4gICAgICB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCB5LCB3LCBtLCBSO1xuICAgICAgcmV0dXJuIFIgPSB7IG5leHQ6IFAoMCksIHRocm93OiBQKDEpLCByZXR1cm46IFAoMikgfSwgdHlwZW9mIFN5bWJvbCA9PSBcImZ1bmN0aW9uXCIgJiYgKFJbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0pLCBSO1xuICAgICAgZnVuY3Rpb24gUChUKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihDKSB7XG4gICAgICAgICAgcmV0dXJuIHgoW1QsIENdKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHgoVCkge1xuICAgICAgICBpZiAoeSlcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgZm9yICg7IFIgJiYgKFIgPSAwLCBUWzBdICYmIChwID0gMCkpLCBwOyApXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh5ID0gMSwgdyAmJiAobSA9IFRbMF0gJiAyID8gdy5yZXR1cm4gOiBUWzBdID8gdy50aHJvdyB8fCAoKG0gPSB3LnJldHVybikgJiYgbS5jYWxsKHcpLCAwKSA6IHcubmV4dCkgJiYgIShtID0gbS5jYWxsKHcsIFRbMV0pKS5kb25lKVxuICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgIHN3aXRjaCAodyA9IDAsIG0gJiYgKFQgPSBbVFswXSAmIDIsIG0udmFsdWVdKSwgVFswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBtID0gVDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBwLmxhYmVsKyssIHsgdmFsdWU6IFRbMV0sIGRvbmU6ICExIH07XG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBwLmxhYmVsKyssIHcgPSBUWzFdLCBUID0gWzBdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgVCA9IHAub3BzLnBvcCgpLCBwLnRyeXMucG9wKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKG0gPSBwLnRyeXMsICEobSA9IG0ubGVuZ3RoID4gMCAmJiBtW20ubGVuZ3RoIC0gMV0pICYmIChUWzBdID09PSA2IHx8IFRbMF0gPT09IDIpKSB7XG4gICAgICAgICAgICAgICAgICBwID0gMDtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoVFswXSA9PT0gMyAmJiAoIW0gfHwgVFsxXSA+IG1bMF0gJiYgVFsxXSA8IG1bM10pKSB7XG4gICAgICAgICAgICAgICAgICBwLmxhYmVsID0gVFsxXTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoVFswXSA9PT0gNiAmJiBwLmxhYmVsIDwgbVsxXSkge1xuICAgICAgICAgICAgICAgICAgcC5sYWJlbCA9IG1bMV0sIG0gPSBUO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtICYmIHAubGFiZWwgPCBtWzJdKSB7XG4gICAgICAgICAgICAgICAgICBwLmxhYmVsID0gbVsyXSwgcC5vcHMucHVzaChUKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtWzJdICYmIHAub3BzLnBvcCgpLCBwLnRyeXMucG9wKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBUID0gYy5jYWxsKHUsIHApO1xuICAgICAgICAgIH0gY2F0Y2ggKEMpIHtcbiAgICAgICAgICAgIFQgPSBbNiwgQ10sIHcgPSAwO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB5ID0gbSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICBpZiAoVFswXSAmIDUpXG4gICAgICAgICAgdGhyb3cgVFsxXTtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IFRbMF0gPyBUWzFdIDogdm9pZCAwLCBkb25lOiAhMCB9O1xuICAgICAgfVxuICAgIH0sIGYgPSBmdW5jdGlvbih1LCBjKSB7XG4gICAgICBmb3IgKHZhciBwIGluIHUpXG4gICAgICAgIHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYywgcCkgJiYgSWUoYywgdSwgcCk7XG4gICAgfSwgSWUgPSBPYmplY3QuY3JlYXRlID8gZnVuY3Rpb24odSwgYywgcCwgeSkge1xuICAgICAgeSA9PT0gdm9pZCAwICYmICh5ID0gcCk7XG4gICAgICB2YXIgdyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYywgcCk7XG4gICAgICAoIXcgfHwgKFwiZ2V0XCIgaW4gdyA/ICFjLl9fZXNNb2R1bGUgOiB3LndyaXRhYmxlIHx8IHcuY29uZmlndXJhYmxlKSkgJiYgKHcgPSB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY1twXTtcbiAgICAgIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LCB5LCB3KTtcbiAgICB9IDogZnVuY3Rpb24odSwgYywgcCwgeSkge1xuICAgICAgeSA9PT0gdm9pZCAwICYmICh5ID0gcCksIHVbeV0gPSBjW3BdO1xuICAgIH0sIF8gPSBmdW5jdGlvbih1KSB7XG4gICAgICB2YXIgYyA9IHR5cGVvZiBTeW1ib2wgPT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgcCA9IGMgJiYgdVtjXSwgeSA9IDA7XG4gICAgICBpZiAocClcbiAgICAgICAgcmV0dXJuIHAuY2FsbCh1KTtcbiAgICAgIGlmICh1ICYmIHR5cGVvZiB1Lmxlbmd0aCA9PSBcIm51bWJlclwiKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHUgJiYgeSA+PSB1Lmxlbmd0aCAmJiAodSA9IHZvaWQgMCksIHsgdmFsdWU6IHUgJiYgdVt5KytdLCBkb25lOiAhdSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB9LCB2ID0gZnVuY3Rpb24odSwgYykge1xuICAgICAgdmFyIHAgPSB0eXBlb2YgU3ltYm9sID09IFwiZnVuY3Rpb25cIiAmJiB1W1N5bWJvbC5pdGVyYXRvcl07XG4gICAgICBpZiAoIXApXG4gICAgICAgIHJldHVybiB1O1xuICAgICAgdmFyIHkgPSBwLmNhbGwodSksIHcsIG0gPSBbXSwgUjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoOyAoYyA9PT0gdm9pZCAwIHx8IGMtLSA+IDApICYmICEodyA9IHkubmV4dCgpKS5kb25lOyApXG4gICAgICAgICAgbS5wdXNoKHcudmFsdWUpO1xuICAgICAgfSBjYXRjaCAoUCkge1xuICAgICAgICBSID0geyBlcnJvcjogUCB9O1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3ICYmICF3LmRvbmUgJiYgKHAgPSB5LnJldHVybikgJiYgcC5jYWxsKHkpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChSKVxuICAgICAgICAgICAgdGhyb3cgUi5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG07XG4gICAgfSwgRSA9IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgdSA9IFtdLCBjID0gMDsgYyA8IGFyZ3VtZW50cy5sZW5ndGg7IGMrKylcbiAgICAgICAgdSA9IHUuY29uY2F0KHYoYXJndW1lbnRzW2NdKSk7XG4gICAgICByZXR1cm4gdTtcbiAgICB9LCBEID0gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciB1ID0gMCwgYyA9IDAsIHAgPSBhcmd1bWVudHMubGVuZ3RoOyBjIDwgcDsgYysrKVxuICAgICAgICB1ICs9IGFyZ3VtZW50c1tjXS5sZW5ndGg7XG4gICAgICBmb3IgKHZhciB5ID0gQXJyYXkodSksIHcgPSAwLCBjID0gMDsgYyA8IHA7IGMrKylcbiAgICAgICAgZm9yICh2YXIgbSA9IGFyZ3VtZW50c1tjXSwgUiA9IDAsIFAgPSBtLmxlbmd0aDsgUiA8IFA7IFIrKywgdysrKVxuICAgICAgICAgIHlbd10gPSBtW1JdO1xuICAgICAgcmV0dXJuIHk7XG4gICAgfSwgQSA9IGZ1bmN0aW9uKHUsIGMsIHApIHtcbiAgICAgIGlmIChwIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpXG4gICAgICAgIGZvciAodmFyIHkgPSAwLCB3ID0gYy5sZW5ndGgsIG07IHkgPCB3OyB5KyspXG4gICAgICAgICAgKG0gfHwgISh5IGluIGMpKSAmJiAobSB8fCAobSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGMsIDAsIHkpKSwgbVt5XSA9IGNbeV0pO1xuICAgICAgcmV0dXJuIHUuY29uY2F0KG0gfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYykpO1xuICAgIH0sIE4gPSBmdW5jdGlvbih1KSB7XG4gICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIE4gPyAodGhpcy52ID0gdSwgdGhpcykgOiBuZXcgTih1KTtcbiAgICB9LCBVID0gZnVuY3Rpb24odSwgYywgcCkge1xuICAgICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcilcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgIHZhciB5ID0gcC5hcHBseSh1LCBjIHx8IFtdKSwgdywgbSA9IFtdO1xuICAgICAgcmV0dXJuIHcgPSB7fSwgUihcIm5leHRcIiksIFIoXCJ0aHJvd1wiKSwgUihcInJldHVyblwiKSwgd1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LCB3O1xuICAgICAgZnVuY3Rpb24gUihWKSB7XG4gICAgICAgIHlbVl0gJiYgKHdbVl0gPSBmdW5jdGlvbihMKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKFgsIFcpIHtcbiAgICAgICAgICAgIG0ucHVzaChbViwgTCwgWCwgV10pID4gMSB8fCBQKFYsIEwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFAoViwgTCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHgoeVtWXShMKSk7XG4gICAgICAgIH0gY2F0Y2ggKFgpIHtcbiAgICAgICAgICBIKG1bMF1bM10sIFgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB4KFYpIHtcbiAgICAgICAgVi52YWx1ZSBpbnN0YW5jZW9mIE4gPyBQcm9taXNlLnJlc29sdmUoVi52YWx1ZS52KS50aGVuKFQsIEMpIDogSChtWzBdWzJdLCBWKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFQoVikge1xuICAgICAgICBQKFwibmV4dFwiLCBWKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIEMoVikge1xuICAgICAgICBQKFwidGhyb3dcIiwgVik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBIKFYsIEwpIHtcbiAgICAgICAgVihMKSwgbS5zaGlmdCgpLCBtLmxlbmd0aCAmJiBQKG1bMF1bMF0sIG1bMF1bMV0pO1xuICAgICAgfVxuICAgIH0sIHRlID0gZnVuY3Rpb24odSkge1xuICAgICAgdmFyIGMsIHA7XG4gICAgICByZXR1cm4gYyA9IHt9LCB5KFwibmV4dFwiKSwgeShcInRocm93XCIsIGZ1bmN0aW9uKHcpIHtcbiAgICAgICAgdGhyb3cgdztcbiAgICAgIH0pLCB5KFwicmV0dXJuXCIpLCBjW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LCBjO1xuICAgICAgZnVuY3Rpb24geSh3LCBtKSB7XG4gICAgICAgIGNbd10gPSB1W3ddID8gZnVuY3Rpb24oUikge1xuICAgICAgICAgIHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IE4odVt3XShSKSksIGRvbmU6ICExIH0gOiBtID8gbShSKSA6IFI7XG4gICAgICAgIH0gOiBtO1xuICAgICAgfVxuICAgIH0sIHogPSBmdW5jdGlvbih1KSB7XG4gICAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgdmFyIGMgPSB1W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgcDtcbiAgICAgIHJldHVybiBjID8gYy5jYWxsKHUpIDogKHUgPSB0eXBlb2YgXyA9PSBcImZ1bmN0aW9uXCIgPyBfKHUpIDogdVtTeW1ib2wuaXRlcmF0b3JdKCksIHAgPSB7fSwgeShcIm5leHRcIiksIHkoXCJ0aHJvd1wiKSwgeShcInJldHVyblwiKSwgcFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LCBwKTtcbiAgICAgIGZ1bmN0aW9uIHkobSkge1xuICAgICAgICBwW21dID0gdVttXSAmJiBmdW5jdGlvbihSKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKFAsIHgpIHtcbiAgICAgICAgICAgIFIgPSB1W21dKFIpLCB3KFAsIHgsIFIuZG9uZSwgUi52YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB3KG0sIFIsIFAsIHgpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHgpLnRoZW4oZnVuY3Rpb24oVCkge1xuICAgICAgICAgIG0oeyB2YWx1ZTogVCwgZG9uZTogUCB9KTtcbiAgICAgICAgfSwgUik7XG4gICAgICB9XG4gICAgfSwgRyA9IGZ1bmN0aW9uKHUsIGMpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkodSwgXCJyYXdcIiwgeyB2YWx1ZTogYyB9KSA6IHUucmF3ID0gYywgdTtcbiAgICB9O1xuICAgIHZhciBGZSA9IE9iamVjdC5jcmVhdGUgPyBmdW5jdGlvbih1LCBjKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodSwgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogITAsIHZhbHVlOiBjIH0pO1xuICAgIH0gOiBmdW5jdGlvbih1LCBjKSB7XG4gICAgICB1LmRlZmF1bHQgPSBjO1xuICAgIH07XG4gICAgS2UgPSBmdW5jdGlvbih1KSB7XG4gICAgICBpZiAodSAmJiB1Ll9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiB1O1xuICAgICAgdmFyIGMgPSB7fTtcbiAgICAgIGlmICh1ICE9IG51bGwpXG4gICAgICAgIGZvciAodmFyIHAgaW4gdSlcbiAgICAgICAgICBwICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodSwgcCkgJiYgSWUoYywgdSwgcCk7XG4gICAgICByZXR1cm4gRmUoYywgdSksIGM7XG4gICAgfSwgVmUgPSBmdW5jdGlvbih1KSB7XG4gICAgICByZXR1cm4gdSAmJiB1Ll9fZXNNb2R1bGUgPyB1IDogeyBkZWZhdWx0OiB1IH07XG4gICAgfSwgTWUgPSBmdW5jdGlvbih1LCBjLCBwLCB5KSB7XG4gICAgICBpZiAocCA9PT0gXCJhXCIgJiYgIXkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgICBpZiAodHlwZW9mIGMgPT0gXCJmdW5jdGlvblwiID8gdSAhPT0gYyB8fCAheSA6ICFjLmhhcyh1KSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICAgIHJldHVybiBwID09PSBcIm1cIiA/IHkgOiBwID09PSBcImFcIiA/IHkuY2FsbCh1KSA6IHkgPyB5LnZhbHVlIDogYy5nZXQodSk7XG4gICAgfSwgSXQgPSBmdW5jdGlvbih1LCBjLCBwLCB5LCB3KSB7XG4gICAgICBpZiAoeSA9PT0gXCJtXCIpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgICBpZiAoeSA9PT0gXCJhXCIgJiYgIXcpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgICBpZiAodHlwZW9mIGMgPT0gXCJmdW5jdGlvblwiID8gdSAhPT0gYyB8fCAhdyA6ICFjLmhhcyh1KSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgICAgcmV0dXJuIHkgPT09IFwiYVwiID8gdy5jYWxsKHUsIHApIDogdyA/IHcudmFsdWUgPSBwIDogYy5zZXQodSwgcCksIHA7XG4gICAgfSwgSHQgPSBmdW5jdGlvbih1LCBjKSB7XG4gICAgICBpZiAoYyA9PT0gbnVsbCB8fCB0eXBlb2YgYyAhPSBcIm9iamVjdFwiICYmIHR5cGVvZiBjICE9IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xuICAgICAgcmV0dXJuIHR5cGVvZiB1ID09IFwiZnVuY3Rpb25cIiA/IGMgPT09IHUgOiB1LmhhcyhjKTtcbiAgICB9LCBPKFwiX19leHRlbmRzXCIsIGUpLCBPKFwiX19hc3NpZ25cIiwgciksIE8oXCJfX3Jlc3RcIiwgbiksIE8oXCJfX2RlY29yYXRlXCIsIGEpLCBPKFwiX19wYXJhbVwiLCBpKSwgTyhcIl9fZXNEZWNvcmF0ZVwiLCBvKSwgTyhcIl9fcnVuSW5pdGlhbGl6ZXJzXCIsIGwpLCBPKFwiX19wcm9wS2V5XCIsIHMpLCBPKFwiX19zZXRGdW5jdGlvbk5hbWVcIiwgaCksIE8oXCJfX21ldGFkYXRhXCIsIGcpLCBPKFwiX19hd2FpdGVyXCIsIGIpLCBPKFwiX19nZW5lcmF0b3JcIiwgZCksIE8oXCJfX2V4cG9ydFN0YXJcIiwgZiksIE8oXCJfX2NyZWF0ZUJpbmRpbmdcIiwgSWUpLCBPKFwiX192YWx1ZXNcIiwgXyksIE8oXCJfX3JlYWRcIiwgdiksIE8oXCJfX3NwcmVhZFwiLCBFKSwgTyhcIl9fc3ByZWFkQXJyYXlzXCIsIEQpLCBPKFwiX19zcHJlYWRBcnJheVwiLCBBKSwgTyhcIl9fYXdhaXRcIiwgTiksIE8oXCJfX2FzeW5jR2VuZXJhdG9yXCIsIFUpLCBPKFwiX19hc3luY0RlbGVnYXRvclwiLCB0ZSksIE8oXCJfX2FzeW5jVmFsdWVzXCIsIHopLCBPKFwiX19tYWtlVGVtcGxhdGVPYmplY3RcIiwgRyksIE8oXCJfX2ltcG9ydFN0YXJcIiwgS2UpLCBPKFwiX19pbXBvcnREZWZhdWx0XCIsIFZlKSwgTyhcIl9fY2xhc3NQcml2YXRlRmllbGRHZXRcIiwgTWUpLCBPKFwiX19jbGFzc1ByaXZhdGVGaWVsZFNldFwiLCBJdCksIE8oXCJfX2NsYXNzUHJpdmF0ZUZpZWxkSW5cIiwgSHQpO1xuICB9KTtcbn0pKHRuKTtcbnZhciBwZSA9IHt9O1xuY2xhc3MgWiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29udGVudFR5cGVBc3NvY2lhdGVkRmFjdG9yaWVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgfVxuICBnZXRWYWxpZENvbnRlbnRUeXBlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZWdpc3RyeSBzdXBwb3J0cyBtdWx0aXBsZSBjb250ZW50IHR5cGVzLiBHZXQgdGhlIHJlZ2lzdGVyZWQgZmFjdG9yeSBpbnN0ZWFkLlwiKTtcbiAgfVxuICBnZXRSb290UGFyc2VOb2RlKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb250ZW50IHR5cGUgY2Fubm90IGJlIHVuZGVmaW5lZCBvciBlbXB0eVwiKTtcbiAgICBpZiAoIXIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb250ZW50IGNhbm5vdCBiZSB1bmRlZmluZWQgb3IgZW1wdHlcIik7XG4gICAgY29uc3QgbiA9IGUuc3BsaXQoXCI7XCIpWzBdO1xuICAgIGxldCBhID0gdGhpcy5jb250ZW50VHlwZUFzc29jaWF0ZWRGYWN0b3JpZXMuZ2V0KG4pO1xuICAgIGlmIChhKVxuICAgICAgcmV0dXJuIGEuZ2V0Um9vdFBhcnNlTm9kZShuLCByKTtcbiAgICBjb25zdCBpID0gbi5yZXBsYWNlKC9bXi9dK1xcKy9naSwgXCJcIik7XG4gICAgaWYgKGEgPSB0aGlzLmNvbnRlbnRUeXBlQXNzb2NpYXRlZEZhY3Rvcmllcy5nZXQoaSksIGEpXG4gICAgICByZXR1cm4gYS5nZXRSb290UGFyc2VOb2RlKGksIHIpO1xuICAgIHRocm93IG5ldyBFcnJvcihgQ29udGVudCB0eXBlICR7aX0gZG9lcyBub3QgaGF2ZSBhIGZhY3RvcnkgcmVnaXN0ZXJlZCB0byBiZSBwYXJzZWRgKTtcbiAgfVxufVxuWi5kZWZhdWx0SW5zdGFuY2UgPSBuZXcgWigpO1xuY2xhc3MgZ3Ige1xuICBnZXRWYWxpZENvbnRlbnRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25jcmV0ZS5nZXRWYWxpZENvbnRlbnRUeXBlKCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgcHJveHkgZmFjdG9yeSB0aGF0IHdyYXBzIHRoZSBzcGVjaWZpZWQgY29uY3JldGUgZmFjdG9yeSB3aGlsZSBjb21wb3NpbmcgdGhlIGJlZm9yZSBhbmQgYWZ0ZXIgY2FsbGJhY2tzLlxuICAgKiBAcGFyYW0gX2NvbmNyZXRlIHRoZSBjb25jcmV0ZSBmYWN0b3J5IHRvIHdyYXBcbiAgICogQHBhcmFtIF9vbkJlZm9yZSB0aGUgY2FsbGJhY2sgdG8gaW52b2tlIGJlZm9yZSB0aGUgZGVzZXJpYWxpemF0aW9uIG9mIGFueSBtb2RlbCBvYmplY3QuXG4gICAqIEBwYXJhbSBfb25BZnRlciB0aGUgY2FsbGJhY2sgdG8gaW52b2tlIGFmdGVyIHRoZSBkZXNlcmlhbGl6YXRpb24gb2YgYW55IG1vZGVsIG9iamVjdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHIsIG4pIHtcbiAgICBpZiAodGhpcy5fY29uY3JldGUgPSBlLCB0aGlzLl9vbkJlZm9yZSA9IHIsIHRoaXMuX29uQWZ0ZXIgPSBuLCAhZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIl9jb25jcmV0ZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICB9XG4gIGdldFJvb3RQYXJzZU5vZGUoZSwgcikge1xuICAgIGNvbnN0IG4gPSB0aGlzLl9jb25jcmV0ZS5nZXRSb290UGFyc2VOb2RlKGUsIHIpLCBhID0gbi5vbkJlZm9yZUFzc2lnbkZpZWxkVmFsdWVzLCBpID0gbi5vbkFmdGVyQXNzaWduRmllbGRWYWx1ZXM7XG4gICAgcmV0dXJuIG4ub25CZWZvcmVBc3NpZ25GaWVsZFZhbHVlcyA9IChvKSA9PiB7XG4gICAgICB0aGlzLl9vbkJlZm9yZSAmJiB0aGlzLl9vbkJlZm9yZShvKSwgYSAmJiBhKG8pO1xuICAgIH0sIG4ub25BZnRlckFzc2lnbkZpZWxkVmFsdWVzID0gKG8pID0+IHtcbiAgICAgIHRoaXMuX29uQWZ0ZXIgJiYgdGhpcy5fb25BZnRlcihvKSwgaSAmJiBpKG8pO1xuICAgIH0sIG47XG4gIH1cbn1cbmNsYXNzIG9lIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250ZW50VHlwZUFzc29jaWF0ZWRGYWN0b3JpZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB9XG4gIGdldFZhbGlkQ29udGVudFR5cGUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlZ2lzdHJ5IHN1cHBvcnRzIG11bHRpcGxlIGNvbnRlbnQgdHlwZXMuIEdldCB0aGUgcmVnaXN0ZXJlZCBmYWN0b3J5IGluc3RlYWQuXCIpO1xuICB9XG4gIGdldFNlcmlhbGl6YXRpb25Xcml0ZXIoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbnRlbnQgdHlwZSBjYW5ub3QgYmUgdW5kZWZpbmVkIG9yIGVtcHR5XCIpO1xuICAgIGNvbnN0IHIgPSBlLnNwbGl0KFwiO1wiKVswXTtcbiAgICBsZXQgbiA9IHRoaXMuY29udGVudFR5cGVBc3NvY2lhdGVkRmFjdG9yaWVzLmdldChyKTtcbiAgICBpZiAobilcbiAgICAgIHJldHVybiBuLmdldFNlcmlhbGl6YXRpb25Xcml0ZXIocik7XG4gICAgY29uc3QgYSA9IHIucmVwbGFjZSgvW14vXStcXCsvZ2ksIFwiXCIpO1xuICAgIGlmIChuID0gdGhpcy5jb250ZW50VHlwZUFzc29jaWF0ZWRGYWN0b3JpZXMuZ2V0KGEpLCBuKVxuICAgICAgcmV0dXJuIG4uZ2V0U2VyaWFsaXphdGlvbldyaXRlcihhKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvbnRlbnQgdHlwZSAke2F9IGRvZXMgbm90IGhhdmUgYSBmYWN0b3J5IHJlZ2lzdGVyZWQgdG8gYmUgc2VyaWFsaXplZGApO1xuICB9XG59XG5vZS5kZWZhdWx0SW5zdGFuY2UgPSBuZXcgb2UoKTtcbmNsYXNzIHlyIHtcbiAgZ2V0VmFsaWRDb250ZW50VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uY3JldGUuZ2V0VmFsaWRDb250ZW50VHlwZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHByb3h5IGZhY3RvcnkgdGhhdCB3cmFwcyB0aGUgc3BlY2lmaWVkIGNvbmNyZXRlIGZhY3Rvcnkgd2hpbGUgY29tcG9zaW5nIHRoZSBiZWZvcmUgYW5kIGFmdGVyIGNhbGxiYWNrcy5cbiAgICogQHBhcmFtIF9jb25jcmV0ZSB0aGUgY29uY3JldGUgZmFjdG9yeSB0byB3cmFwXG4gICAqIEBwYXJhbSBfb25CZWZvcmUgdGhlIGNhbGxiYWNrIHRvIGludm9rZSBiZWZvcmUgdGhlIHNlcmlhbGl6YXRpb24gb2YgYW55IG1vZGVsIG9iamVjdC5cbiAgICogQHBhcmFtIF9vbkFmdGVyIHRoZSBjYWxsYmFjayB0byBpbnZva2UgYWZ0ZXIgdGhlIHNlcmlhbGl6YXRpb24gb2YgYW55IG1vZGVsIG9iamVjdC5cbiAgICogQHBhcmFtIF9vblN0YXJ0IHRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUgc2VyaWFsaXphdGlvbiBvZiBhIG1vZGVsIG9iamVjdCBzdGFydHNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHIsIG4sIGEpIHtcbiAgICBpZiAodGhpcy5fY29uY3JldGUgPSBlLCB0aGlzLl9vbkJlZm9yZSA9IHIsIHRoaXMuX29uQWZ0ZXIgPSBuLCB0aGlzLl9vblN0YXJ0ID0gYSwgIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJfY29uY3JldGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgfVxuICBnZXRTZXJpYWxpemF0aW9uV3JpdGVyKGUpIHtcbiAgICBjb25zdCByID0gdGhpcy5fY29uY3JldGUuZ2V0U2VyaWFsaXphdGlvbldyaXRlcihlKSwgbiA9IHIub25CZWZvcmVPYmplY3RTZXJpYWxpemF0aW9uLCBhID0gci5vbkFmdGVyT2JqZWN0U2VyaWFsaXphdGlvbiwgaSA9IHIub25TdGFydE9iamVjdFNlcmlhbGl6YXRpb247XG4gICAgcmV0dXJuIHIub25CZWZvcmVPYmplY3RTZXJpYWxpemF0aW9uID0gKG8pID0+IHtcbiAgICAgIHRoaXMuX29uQmVmb3JlICYmIHRoaXMuX29uQmVmb3JlKG8pLCBuICYmIG4obyk7XG4gICAgfSwgci5vbkFmdGVyT2JqZWN0U2VyaWFsaXphdGlvbiA9IChvKSA9PiB7XG4gICAgICB0aGlzLl9vbkFmdGVyICYmIHRoaXMuX29uQWZ0ZXIobyksIGEgJiYgYShvKTtcbiAgICB9LCByLm9uU3RhcnRPYmplY3RTZXJpYWxpemF0aW9uID0gKG8sIGwpID0+IHtcbiAgICAgIHRoaXMuX29uU3RhcnQgJiYgdGhpcy5fb25TdGFydChvLCBsKSwgaSAmJiBpKG8sIGwpO1xuICAgIH0sIHI7XG4gIH1cbn1cbmxldCBqZTtcbmNvbnN0IHJuID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZnVuY3Rpb24gbm4oKSB7XG4gIGlmICghamUgJiYgKGplID0gdHlwZW9mIGNyeXB0byA8IFwidVwiICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byksICFqZSkpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWRcIik7XG4gIHJldHVybiBqZShybik7XG59XG5jb25zdCBJID0gW107XG5mb3IgKGxldCB0ID0gMDsgdCA8IDI1NjsgKyt0KVxuICBJLnB1c2goKHQgKyAyNTYpLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG5mdW5jdGlvbiBhbih0LCBlID0gMCkge1xuICByZXR1cm4gKElbdFtlICsgMF1dICsgSVt0W2UgKyAxXV0gKyBJW3RbZSArIDJdXSArIElbdFtlICsgM11dICsgXCItXCIgKyBJW3RbZSArIDRdXSArIElbdFtlICsgNV1dICsgXCItXCIgKyBJW3RbZSArIDZdXSArIElbdFtlICsgN11dICsgXCItXCIgKyBJW3RbZSArIDhdXSArIElbdFtlICsgOV1dICsgXCItXCIgKyBJW3RbZSArIDEwXV0gKyBJW3RbZSArIDExXV0gKyBJW3RbZSArIDEyXV0gKyBJW3RbZSArIDEzXV0gKyBJW3RbZSArIDE0XV0gKyBJW3RbZSArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5jb25zdCBvbiA9IHR5cGVvZiBjcnlwdG8gPCBcInVcIiAmJiBjcnlwdG8ucmFuZG9tVVVJRCAmJiBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byksIGp0ID0ge1xuICByYW5kb21VVUlEOiBvblxufTtcbmZ1bmN0aW9uIHNuKHQsIGUsIHIpIHtcbiAgaWYgKGp0LnJhbmRvbVVVSUQgJiYgIWUgJiYgIXQpXG4gICAgcmV0dXJuIGp0LnJhbmRvbVVVSUQoKTtcbiAgdCA9IHQgfHwge307XG4gIGNvbnN0IG4gPSB0LnJhbmRvbSB8fCAodC5ybmcgfHwgbm4pKCk7XG4gIGlmIChuWzZdID0gbls2XSAmIDE1IHwgNjQsIG5bOF0gPSBuWzhdICYgNjMgfCAxMjgsIGUpIHtcbiAgICByID0gciB8fCAwO1xuICAgIGZvciAobGV0IGEgPSAwOyBhIDwgMTY7ICsrYSlcbiAgICAgIGVbciArIGFdID0gblthXTtcbiAgICByZXR1cm4gZTtcbiAgfVxuICByZXR1cm4gYW4obik7XG59XG5jbGFzcyBtciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIHRoaXMuc3RvcmUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCB0aGlzLnJldHVybk9ubHlDaGFuZ2VkVmFsdWVzID0gITEsIHRoaXMuX2luaXRpYWxpemF0aW9uQ29tcGxldGVkID0gITA7XG4gIH1cbiAgZ2V0KGUpIHtcbiAgICBjb25zdCByID0gdGhpcy5zdG9yZS5nZXQoZSk7XG4gICAgaWYgKHIgJiYgKHRoaXMucmV0dXJuT25seUNoYW5nZWRWYWx1ZXMgJiYgci5jaGFuZ2VkIHx8ICF0aGlzLnJldHVybk9ubHlDaGFuZ2VkVmFsdWVzKSlcbiAgICAgIHJldHVybiByLnZhbHVlO1xuICB9XG4gIHNldChlLCByKSB7XG4gICAgY29uc3QgbiA9IHRoaXMuc3RvcmUuZ2V0KGUpLCBhID0gbj8udmFsdWU7XG4gICAgbiA/IChuLnZhbHVlID0gciwgbi5jaGFuZ2VkID0gdGhpcy5pbml0aWFsaXphdGlvbkNvbXBsZXRlZCkgOiB0aGlzLnN0b3JlLnNldChlLCB7XG4gICAgICBjaGFuZ2VkOiB0aGlzLmluaXRpYWxpemF0aW9uQ29tcGxldGVkLFxuICAgICAgdmFsdWU6IHJcbiAgICB9KSwgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goKGkpID0+IHtcbiAgICAgIGkoZSwgYSwgcik7XG4gICAgfSk7XG4gIH1cbiAgZW51bWVyYXRlKCkge1xuICAgIGxldCBlID0gWy4uLnRoaXMuc3RvcmUuZW50cmllcygpXTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5Pbmx5Q2hhbmdlZFZhbHVlcyAmJiAoZSA9IGUuZmlsdGVyKChbciwgbl0pID0+IG4uY2hhbmdlZCkpLCBlLm1hcCgoW3IsIG5dKSA9PiAoeyBrZXk6IHIsIHZhbHVlOiBuIH0pKTtcbiAgfVxuICBlbnVtZXJhdGVLZXlzRm9yVmFsdWVzQ2hhbmdlZFRvTnVsbCgpIHtcbiAgICBjb25zdCBlID0gW107XG4gICAgZm9yIChjb25zdCBbciwgbl0gb2YgdGhpcy5zdG9yZSlcbiAgICAgIG4uY2hhbmdlZCAmJiAhbi52YWx1ZSAmJiBlLnB1c2gocik7XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgc3Vic2NyaWJlKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYWxsYmFjayBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIHJldHVybiByID0gciA/PyBzbigpLCB0aGlzLnN1YnNjcmlwdGlvbnMuc2V0KHIsIGUpLCByO1xuICB9XG4gIHVuc3Vic2NyaWJlKGUpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZGVsZXRlKGUpO1xuICB9XG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc3RvcmUuY2xlYXIoKTtcbiAgfVxuICBzZXQgaW5pdGlhbGl6YXRpb25Db21wbGV0ZWQoZSkge1xuICAgIHRoaXMuX2luaXRpYWxpemF0aW9uQ29tcGxldGVkID0gZSwgdGhpcy5zdG9yZS5mb3JFYWNoKChyKSA9PiB7XG4gICAgICByLmNoYW5nZWQgPSAhZTtcbiAgICB9KTtcbiAgfVxuICBnZXQgaW5pdGlhbGl6YXRpb25Db21wbGV0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxpemF0aW9uQ29tcGxldGVkO1xuICB9XG59XG5jbGFzcyB3ciB7XG4gIGNyZWF0ZUJhY2tpbmdTdG9yZSgpIHtcbiAgICByZXR1cm4gbmV3IG1yKCk7XG4gIH1cbn1cbmNsYXNzIF9yIHtcbn1cbl9yLmluc3RhbmNlID0gbmV3IHdyKCk7XG5jbGFzcyBxZSBleHRlbmRzIGdyIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBCYWNraW5nU3RvcmVQYXJzZU5vZGVGYWN0b3J5IGNsYXNzIGdpdmVuIHRoZSBjb25jcmV0ZSBpbXBsZW1lbnRhdGlvbi5cbiAgICogQHBhcmFtIGNvbmNyZXRlIHRoZSBjb25jcmV0ZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgUGFyc2VOb2RlRmFjdG9yeVxuICAgKi9cbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHN1cGVyKGUsIChyKSA9PiB7XG4gICAgICBjb25zdCBuID0gcjtcbiAgICAgIG4gJiYgbi5iYWNraW5nU3RvcmUgJiYgKG4uYmFja2luZ1N0b3JlLmluaXRpYWxpemF0aW9uQ29tcGxldGVkID0gITEpO1xuICAgIH0sIChyKSA9PiB7XG4gICAgICBjb25zdCBuID0gcjtcbiAgICAgIG4gJiYgbi5iYWNraW5nU3RvcmUgJiYgKG4uYmFja2luZ1N0b3JlLmluaXRpYWxpemF0aW9uQ29tcGxldGVkID0gITApO1xuICAgIH0pO1xuICB9XG59XG5jbGFzcyBVZSBleHRlbmRzIHlyIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBCYWNraW5nU3RvcmVTZXJpYWxpemF0aW9uV3JpdGVyUHJveHlGYWN0b3J5IGNsYXNzIGdpdmVuIGEgY29uY3JldGUgaW1wbGVtZW50YXRpb24gb2YgU2VyaWFsaXphdGlvbldyaXRlckZhY3RvcnkuXG4gICAqIEBwYXJhbSBjb25jcmV0ZSBhIGNvbmNyZXRlIGltcGxlbWVudGF0aW9uIG9mIFNlcmlhbGl6YXRpb25Xcml0ZXJGYWN0b3J5IHRvIHdyYXAuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgc3VwZXIoZSwgKHIpID0+IHtcbiAgICAgIGNvbnN0IG4gPSByO1xuICAgICAgbiAmJiBuLmJhY2tpbmdTdG9yZSAmJiAobi5iYWNraW5nU3RvcmUucmV0dXJuT25seUNoYW5nZWRWYWx1ZXMgPSAhMCk7XG4gICAgfSwgKHIpID0+IHtcbiAgICAgIGNvbnN0IG4gPSByO1xuICAgICAgbiAmJiBuLmJhY2tpbmdTdG9yZSAmJiAobi5iYWNraW5nU3RvcmUucmV0dXJuT25seUNoYW5nZWRWYWx1ZXMgPSAhMSwgbi5iYWNraW5nU3RvcmUuaW5pdGlhbGl6YXRpb25Db21wbGV0ZWQgPSAhMCk7XG4gICAgfSwgKHIsIG4pID0+IHtcbiAgICAgIGNvbnN0IGEgPSByO1xuICAgICAgaWYgKGEgJiYgYS5iYWNraW5nU3RvcmUpIHtcbiAgICAgICAgY29uc3QgaSA9IGEuYmFja2luZ1N0b3JlLmVudW1lcmF0ZUtleXNGb3JWYWx1ZXNDaGFuZ2VkVG9OdWxsKCk7XG4gICAgICAgIGZvciAoY29uc3QgbyBvZiBpKVxuICAgICAgICAgIG4ud3JpdGVOdWxsVmFsdWUobyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHl0KHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcIlR5cGUgaXMgcmVxdWlyZWRcIik7XG4gIGNvbnN0IGUgPSBuZXcgdCgpO1xuICBvZS5kZWZhdWx0SW5zdGFuY2UuY29udGVudFR5cGVBc3NvY2lhdGVkRmFjdG9yaWVzLnNldChlLmdldFZhbGlkQ29udGVudFR5cGUoKSwgZSk7XG59XG5mdW5jdGlvbiBtdCh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlIGlzIHJlcXVpcmVkXCIpO1xuICBjb25zdCBlID0gbmV3IHQoKTtcbiAgWi5kZWZhdWx0SW5zdGFuY2UuY29udGVudFR5cGVBc3NvY2lhdGVkRmFjdG9yaWVzLnNldChlLmdldFZhbGlkQ29udGVudFR5cGUoKSwgZSk7XG59XG5mdW5jdGlvbiBsbih0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcmlnaW5hbCBtdXN0IGJlIHNwZWNpZmllZFwiKTtcbiAgbGV0IGUgPSB0O1xuICByZXR1cm4gdCBpbnN0YW5jZW9mIG9lID8gcXQodCkgOiBlID0gbmV3IFVlKHQpLCBxdChvZS5kZWZhdWx0SW5zdGFuY2UpLCBzdChaLmRlZmF1bHRJbnN0YW5jZSksIGU7XG59XG5mdW5jdGlvbiB1bih0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcmlnaW5hbCBtdXN0IGJlIHNwZWNpZmllZFwiKTtcbiAgbGV0IGUgPSB0O1xuICByZXR1cm4gdCBpbnN0YW5jZW9mIFogPyBzdCh0KSA6IGUgPSBuZXcgcWUodCksIHN0KFouZGVmYXVsdEluc3RhbmNlKSwgZTtcbn1cbmZ1bmN0aW9uIHN0KHQpIHtcbiAgZm9yIChjb25zdCBbZSwgcl0gb2YgdC5jb250ZW50VHlwZUFzc29jaWF0ZWRGYWN0b3JpZXMpXG4gICAgciBpbnN0YW5jZW9mIHFlIHx8IHIgaW5zdGFuY2VvZiBaIHx8IHQuY29udGVudFR5cGVBc3NvY2lhdGVkRmFjdG9yaWVzLnNldChlLCBuZXcgcWUocikpO1xufVxuZnVuY3Rpb24gcXQodCkge1xuICBmb3IgKGNvbnN0IFtlLCByXSBvZiB0LmNvbnRlbnRUeXBlQXNzb2NpYXRlZEZhY3RvcmllcylcbiAgICByIGluc3RhbmNlb2YgVWUgfHwgciBpbnN0YW5jZW9mIG9lIHx8IHQuY29udGVudFR5cGVBc3NvY2lhdGVkRmFjdG9yaWVzLnNldChlLCBuZXcgVWUocikpO1xufVxuY2xhc3MgaiBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHN1cGVyKGUpO1xuICB9XG59XG5jbGFzcyB3dCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IEFsbG93ZWRIb3N0c1ZhbGlkYXRvciBvYmplY3Qgd2l0aCBwcm92aWRlZCB2YWx1ZXMuXG4gICAqIEBwYXJhbSBhbGxvd2VkSG9zdHMgQSBsaXN0IG9mIHZhbGlkIGhvc3RzLiAgSWYgdGhlIGxpc3QgaXMgZW1wdHksIGFsbCBob3N0cyBhcmUgdmFsaWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSkge1xuICAgIHRoaXMuYWxsb3dlZEhvc3RzID0gZSA/PyAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsaXN0IG9mIHZhbGlkIGhvc3RzLiAgSWYgdGhlIGxpc3QgaXMgZW1wdHksIGFsbCBob3N0cyBhcmUgdmFsaWQuXG4gICAqIEByZXR1cm5zIEEgbGlzdCBvZiB2YWxpZCBob3N0cy4gIElmIHRoZSBsaXN0IGlzIGVtcHR5LCBhbGwgaG9zdHMgYXJlIHZhbGlkLlxuICAgKi9cbiAgZ2V0QWxsb3dlZEhvc3RzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuYWxsb3dlZEhvc3RzKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgbGlzdCBvZiB2YWxpZCBob3N0cy4gIElmIHRoZSBsaXN0IGlzIGVtcHR5LCBhbGwgaG9zdHMgYXJlIHZhbGlkLlxuICAgKiBAcGFyYW0gYWxsb3dlZEhvc3RzIEEgbGlzdCBvZiB2YWxpZCBob3N0cy4gIElmIHRoZSBsaXN0IGlzIGVtcHR5LCBhbGwgaG9zdHMgYXJlIHZhbGlkLlxuICAgKi9cbiAgc2V0QWxsb3dlZEhvc3RzKGUpIHtcbiAgICB0aGlzLmFsbG93ZWRIb3N0cyA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHRoZSBwcm92aWRlZCBob3N0IGlzIHZhbGlkLlxuICAgKiBAcGFyYW0gdXJsIFRoZSB1cmwgdG8gY2hlY2suXG4gICAqL1xuICBpc1VybEhvc3RWYWxpZChlKSB7XG4gICAgdmFyIHI7XG4gICAgaWYgKCFlKVxuICAgICAgcmV0dXJuICExO1xuICAgIGlmICh0aGlzLmFsbG93ZWRIb3N0cy5zaXplID09PSAwKVxuICAgICAgcmV0dXJuICEwO1xuICAgIGNvbnN0IG4gPSBlLnNwbGl0KFwiOi8vXCIpO1xuICAgIGlmIChuLmxlbmd0aCA+PSAyKSB7XG4gICAgICBjb25zdCBhID0gblsxXTtcbiAgICAgIGlmIChhKVxuICAgICAgICByZXR1cm4gdGhpcy5pc0hvc3RBbmRQYXRoVmFsaWQoYSk7XG4gICAgfSBlbHNlIGlmICghZS5zdGFydHNXaXRoKFwiaHR0cFwiKSlcbiAgICAgIHJldHVybiB0aGlzLmlzSG9zdEFuZFBhdGhWYWxpZChlKTtcbiAgICByZXR1cm4gd2luZG93ICYmIHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaG9zdCA/IHRoaXMuYWxsb3dlZEhvc3RzLmhhcygociA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0KSA9PT0gbnVsbCB8fCByID09PSB2b2lkIDAgPyB2b2lkIDAgOiByLnRvTG93ZXJDYXNlKCkpIDogITE7XG4gIH1cbiAgaXNIb3N0QW5kUGF0aFZhbGlkKGUpIHtcbiAgICBjb25zdCByID0gZS5zcGxpdChcIi9cIik7XG4gICAgaWYgKHIubGVuZ3RoID49IDIpIHtcbiAgICAgIGNvbnN0IG4gPSByWzBdO1xuICAgICAgaWYgKG4pXG4gICAgICAgIHJldHVybiB0aGlzLmFsbG93ZWRIb3N0cy5oYXMobi50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuICExO1xuICB9XG59XG5mdW5jdGlvbiBicih0KSB7XG4gIGlmICghdC50b0xvY2FsZUxvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSAmJiAhZG4oKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdXRoZW50aWNhdGlvbiBzY2hlbWUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGh0dHBzIHJlcXVlc3RzXCIpO1xufVxuZnVuY3Rpb24gZG4oKSB7XG4gIHJldHVybiB3aW5kb3cgJiYgd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC50b0xvd2VyQ2FzZSgpICE9PSBcImh0dHBzOlwiO1xufVxuY2xhc3MgY24ge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQXBpS2V5QXV0aGVudGljYXRpb25Qcm92aWRlclxuICAgKiBAcGFyYW0gYXBpS2V5IFRoZSBBUEkgS2V5IHRvIHVzZSBmb3IgYXV0aGVudGljYXRpb25cbiAgICogQHBhcmFtIHBhcmFtZXRlck5hbWUgVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciB0byB1c2UgZm9yIGF1dGhlbnRpY2F0aW9uXG4gICAqIEBwYXJhbSBsb2NhdGlvbiBUaGUgbG9jYXRpb24gb2YgdGhlIHBhcmFtZXRlciB0byB1c2UgZm9yIGF1dGhlbnRpY2F0aW9uXG4gICAqIEBwYXJhbSB2YWxpZEhvc3RzIFRoZSBob3N0cyB0aGF0IGFyZSBhbGxvd2VkIHRvIHVzZSB0aGlzIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlLCByLCBuLCBhKSB7XG4gICAgaWYgKHRoaXMuYXBpS2V5ID0gZSwgdGhpcy5wYXJhbWV0ZXJOYW1lID0gciwgdGhpcy5sb2NhdGlvbiA9IG4sIGUgPT09IHZvaWQgMCB8fCBlID09PSBcIlwiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXBpS2V5IGNhbm5vdCBiZSBudWxsIG9yIGVtcHR5XCIpO1xuICAgIGlmIChyID09PSB2b2lkIDAgfHwgciA9PT0gXCJcIilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhcmFtZXRlck5hbWUgY2Fubm90IGJlIG51bGwgb3IgZW1wdHlcIik7XG4gICAgaWYgKG4gIT09IGFlLlF1ZXJ5UGFyYW1ldGVyICYmIG4gIT09IGFlLkhlYWRlcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImxvY2F0aW9uIG11c3QgYmUgZWl0aGVyIFF1ZXJ5UGFyYW1ldGVyIG9yIEhlYWRlclwiKTtcbiAgICB0aGlzLnZhbGlkYXRvciA9IG5ldyB3dChhKTtcbiAgfVxuICBhdXRoZW50aWNhdGVSZXF1ZXN0KGUsIHIpIHtcbiAgICBjb25zdCBuID0gZS5VUkw7XG4gICAgaWYgKCFuIHx8ICF0aGlzLnZhbGlkYXRvci5pc1VybEhvc3RWYWxpZChuKSlcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBzd2l0Y2ggKGJyKG4pLCB0aGlzLmxvY2F0aW9uKSB7XG4gICAgICBjYXNlIGFlLlF1ZXJ5UGFyYW1ldGVyOlxuICAgICAgICBlLlVSTCArPSAobi5pbmRleE9mKFwiP1wiKSA9PT0gLTEgPyBcIj9cIiA6IFwiJlwiKSArIHRoaXMucGFyYW1ldGVyTmFtZSArIFwiPVwiICsgdGhpcy5hcGlLZXk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhZS5IZWFkZXI6XG4gICAgICAgIGUuaGVhZGVyc1t0aGlzLnBhcmFtZXRlck5hbWVdID8gZS5oZWFkZXJzW3RoaXMucGFyYW1ldGVyTmFtZV0ucHVzaCh0aGlzLmFwaUtleSkgOiBlLmhlYWRlcnNbdGhpcy5wYXJhbWV0ZXJOYW1lXSA9IFt0aGlzLmFwaUtleV07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cbnZhciBhZTtcbihmdW5jdGlvbih0KSB7XG4gIHRbdC5RdWVyeVBhcmFtZXRlciA9IDBdID0gXCJRdWVyeVBhcmFtZXRlclwiLCB0W3QuSGVhZGVyID0gMV0gPSBcIkhlYWRlclwiO1xufSkoYWUgfHwgKGFlID0ge30pKTtcbmNsYXNzIHZyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hdXRoZW50aWNhdGVSZXF1ZXN0ID0gKGUsIHIpID0+IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG59XG5jbGFzcyBZIHtcbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBhY2Nlc3NUb2tlblByb3ZpZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5hY2Nlc3NUb2tlblByb3ZpZGVyID0gZSwgdGhpcy5hdXRoZW50aWNhdGVSZXF1ZXN0ID0gYXN5bmMgKHIsIG4pID0+IHtcbiAgICAgIGlmICghcilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBpbmZvIGNhbm5vdCBiZSBudWxsXCIpO1xuICAgICAgaWYgKG4gJiYgbi5jbGFpbXMgJiYgci5oZWFkZXJzW1kuYXV0aG9yaXphdGlvbkhlYWRlcktleV0gJiYgZGVsZXRlIHIuaGVhZGVyc1tZLmF1dGhvcml6YXRpb25IZWFkZXJLZXldLCAhci5oZWFkZXJzIHx8ICFyLmhlYWRlcnNbWS5hdXRob3JpemF0aW9uSGVhZGVyS2V5XSkge1xuICAgICAgICBjb25zdCBhID0gYXdhaXQgdGhpcy5hY2Nlc3NUb2tlblByb3ZpZGVyLmdldEF1dGhvcml6YXRpb25Ub2tlbihyLlVSTCwgbik7XG4gICAgICAgIHIuaGVhZGVycyB8fCAoci5oZWFkZXJzID0ge30pLCBhICYmIChyLmhlYWRlcnNbWS5hdXRob3JpemF0aW9uSGVhZGVyS2V5XSA9IFtgQmVhcmVyICR7YX1gXSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuWS5hdXRob3JpemF0aW9uSGVhZGVyS2V5ID0gXCJBdXRob3JpemF0aW9uXCI7XG52YXIgaG4gPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PSBcIm9iamVjdFwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiBzZWxmID09IFwib2JqZWN0XCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyA9PSBcIm9iamVjdFwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCA9PSBcIm9iamVjdFwiID8gZ2xvYmFsIDoge30sIGllID0gXCIxLjQuMVwiLCBVdCA9IC9eKFxcZCspXFwuKFxcZCspXFwuKFxcZCspKC0oLispKT8kLztcbmZ1bmN0aW9uIGZuKHQpIHtcbiAgdmFyIGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbdF0pLCByID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSwgbiA9IHQubWF0Y2goVXQpO1xuICBpZiAoIW4pXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICExO1xuICAgIH07XG4gIHZhciBhID0ge1xuICAgIG1ham9yOiArblsxXSxcbiAgICBtaW5vcjogK25bMl0sXG4gICAgcGF0Y2g6ICtuWzNdLFxuICAgIHByZXJlbGVhc2U6IG5bNF1cbiAgfTtcbiAgaWYgKGEucHJlcmVsZWFzZSAhPSBudWxsKVxuICAgIHJldHVybiBmdW5jdGlvbihzKSB7XG4gICAgICByZXR1cm4gcyA9PT0gdDtcbiAgICB9O1xuICBmdW5jdGlvbiBpKGwpIHtcbiAgICByZXR1cm4gci5hZGQobCksICExO1xuICB9XG4gIGZ1bmN0aW9uIG8obCkge1xuICAgIHJldHVybiBlLmFkZChsKSwgITA7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKHMpIHtcbiAgICBpZiAoZS5oYXMocykpXG4gICAgICByZXR1cm4gITA7XG4gICAgaWYgKHIuaGFzKHMpKVxuICAgICAgcmV0dXJuICExO1xuICAgIHZhciBoID0gcy5tYXRjaChVdCk7XG4gICAgaWYgKCFoKVxuICAgICAgcmV0dXJuIGkocyk7XG4gICAgdmFyIGcgPSB7XG4gICAgICBtYWpvcjogK2hbMV0sXG4gICAgICBtaW5vcjogK2hbMl0sXG4gICAgICBwYXRjaDogK2hbM10sXG4gICAgICBwcmVyZWxlYXNlOiBoWzRdXG4gICAgfTtcbiAgICByZXR1cm4gZy5wcmVyZWxlYXNlICE9IG51bGwgfHwgYS5tYWpvciAhPT0gZy5tYWpvciA/IGkocykgOiBhLm1ham9yID09PSAwID8gYS5taW5vciA9PT0gZy5taW5vciAmJiBhLnBhdGNoIDw9IGcucGF0Y2ggPyBvKHMpIDogaShzKSA6IGEubWlub3IgPD0gZy5taW5vciA/IG8ocykgOiBpKHMpO1xuICB9O1xufVxudmFyIHBuID0gZm4oaWUpLCBnbiA9IGllLnNwbGl0KFwiLlwiKVswXSwgUGUgPSBTeW1ib2wuZm9yKFwib3BlbnRlbGVtZXRyeS5qcy5hcGkuXCIgKyBnbiksIFNlID0gaG47XG5mdW5jdGlvbiBOZSh0LCBlLCByLCBuKSB7XG4gIHZhciBhO1xuICBuID09PSB2b2lkIDAgJiYgKG4gPSAhMSk7XG4gIHZhciBpID0gU2VbUGVdID0gKGEgPSBTZVtQZV0pICE9PSBudWxsICYmIGEgIT09IHZvaWQgMCA/IGEgOiB7XG4gICAgdmVyc2lvbjogaWVcbiAgfTtcbiAgaWYgKCFuICYmIGlbdF0pIHtcbiAgICB2YXIgbyA9IG5ldyBFcnJvcihcIkBvcGVudGVsZW1ldHJ5L2FwaTogQXR0ZW1wdGVkIGR1cGxpY2F0ZSByZWdpc3RyYXRpb24gb2YgQVBJOiBcIiArIHQpO1xuICAgIHJldHVybiByLmVycm9yKG8uc3RhY2sgfHwgby5tZXNzYWdlKSwgITE7XG4gIH1cbiAgaWYgKGkudmVyc2lvbiAhPT0gaWUpIHtcbiAgICB2YXIgbyA9IG5ldyBFcnJvcihcIkBvcGVudGVsZW1ldHJ5L2FwaTogUmVnaXN0cmF0aW9uIG9mIHZlcnNpb24gdlwiICsgaS52ZXJzaW9uICsgXCIgZm9yIFwiICsgdCArIFwiIGRvZXMgbm90IG1hdGNoIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBBUEkgdlwiICsgaWUpO1xuICAgIHJldHVybiByLmVycm9yKG8uc3RhY2sgfHwgby5tZXNzYWdlKSwgITE7XG4gIH1cbiAgcmV0dXJuIGlbdF0gPSBlLCByLmRlYnVnKFwiQG9wZW50ZWxlbWV0cnkvYXBpOiBSZWdpc3RlcmVkIGEgZ2xvYmFsIGZvciBcIiArIHQgKyBcIiB2XCIgKyBpZSArIFwiLlwiKSwgITA7XG59XG5mdW5jdGlvbiBzZSh0KSB7XG4gIHZhciBlLCByLCBuID0gKGUgPSBTZVtQZV0pID09PSBudWxsIHx8IGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGUudmVyc2lvbjtcbiAgaWYgKCEoIW4gfHwgIXBuKG4pKSlcbiAgICByZXR1cm4gKHIgPSBTZVtQZV0pID09PSBudWxsIHx8IHIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJbdF07XG59XG5mdW5jdGlvbiBDZSh0LCBlKSB7XG4gIGUuZGVidWcoXCJAb3BlbnRlbGVtZXRyeS9hcGk6IFVucmVnaXN0ZXJpbmcgYSBnbG9iYWwgZm9yIFwiICsgdCArIFwiIHZcIiArIGllICsgXCIuXCIpO1xuICB2YXIgciA9IFNlW1BlXTtcbiAgciAmJiBkZWxldGUgclt0XTtcbn1cbnZhciB5biA9IGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3JlYWQgfHwgZnVuY3Rpb24odCwgZSkge1xuICB2YXIgciA9IHR5cGVvZiBTeW1ib2wgPT0gXCJmdW5jdGlvblwiICYmIHRbU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFyKVxuICAgIHJldHVybiB0O1xuICB2YXIgbiA9IHIuY2FsbCh0KSwgYSwgaSA9IFtdLCBvO1xuICB0cnkge1xuICAgIGZvciAoOyAoZSA9PT0gdm9pZCAwIHx8IGUtLSA+IDApICYmICEoYSA9IG4ubmV4dCgpKS5kb25lOyApXG4gICAgICBpLnB1c2goYS52YWx1ZSk7XG4gIH0gY2F0Y2ggKGwpIHtcbiAgICBvID0geyBlcnJvcjogbCB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBhICYmICFhLmRvbmUgJiYgKHIgPSBuLnJldHVybikgJiYgci5jYWxsKG4pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAobylcbiAgICAgICAgdGhyb3cgby5lcnJvcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59LCBtbiA9IGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3NwcmVhZEFycmF5IHx8IGZ1bmN0aW9uKHQsIGUsIHIpIHtcbiAgaWYgKHIgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMilcbiAgICBmb3IgKHZhciBuID0gMCwgYSA9IGUubGVuZ3RoLCBpOyBuIDwgYTsgbisrKVxuICAgICAgKGkgfHwgIShuIGluIGUpKSAmJiAoaSB8fCAoaSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUsIDAsIG4pKSwgaVtuXSA9IGVbbl0pO1xuICByZXR1cm4gdC5jb25jYXQoaSB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKSk7XG59LCB3biA9IChcbiAgLyoqIEBjbGFzcyAqL1xuICBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KGUpIHtcbiAgICAgIHRoaXMuX25hbWVzcGFjZSA9IGUubmFtZXNwYWNlIHx8IFwiRGlhZ0NvbXBvbmVudExvZ2dlclwiO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGUgPSBbXSwgciA9IDA7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspXG4gICAgICAgIGVbcl0gPSBhcmd1bWVudHNbcl07XG4gICAgICByZXR1cm4gZ2UoXCJkZWJ1Z1wiLCB0aGlzLl9uYW1lc3BhY2UsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBlID0gW10sIHIgPSAwOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKVxuICAgICAgICBlW3JdID0gYXJndW1lbnRzW3JdO1xuICAgICAgcmV0dXJuIGdlKFwiZXJyb3JcIiwgdGhpcy5fbmFtZXNwYWNlLCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBlID0gW10sIHIgPSAwOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKVxuICAgICAgICBlW3JdID0gYXJndW1lbnRzW3JdO1xuICAgICAgcmV0dXJuIGdlKFwiaW5mb1wiLCB0aGlzLl9uYW1lc3BhY2UsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGUgPSBbXSwgciA9IDA7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspXG4gICAgICAgIGVbcl0gPSBhcmd1bWVudHNbcl07XG4gICAgICByZXR1cm4gZ2UoXCJ3YXJuXCIsIHRoaXMuX25hbWVzcGFjZSwgZSk7XG4gICAgfSwgdC5wcm90b3R5cGUudmVyYm9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgZSA9IFtdLCByID0gMDsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKylcbiAgICAgICAgZVtyXSA9IGFyZ3VtZW50c1tyXTtcbiAgICAgIHJldHVybiBnZShcInZlcmJvc2VcIiwgdGhpcy5fbmFtZXNwYWNlLCBlKTtcbiAgICB9LCB0O1xuICB9KClcbik7XG5mdW5jdGlvbiBnZSh0LCBlLCByKSB7XG4gIHZhciBuID0gc2UoXCJkaWFnXCIpO1xuICBpZiAobilcbiAgICByZXR1cm4gci51bnNoaWZ0KGUpLCBuW3RdLmFwcGx5KG4sIG1uKFtdLCB5bihyKSwgITEpKTtcbn1cbnZhciBxO1xuKGZ1bmN0aW9uKHQpIHtcbiAgdFt0Lk5PTkUgPSAwXSA9IFwiTk9ORVwiLCB0W3QuRVJST1IgPSAzMF0gPSBcIkVSUk9SXCIsIHRbdC5XQVJOID0gNTBdID0gXCJXQVJOXCIsIHRbdC5JTkZPID0gNjBdID0gXCJJTkZPXCIsIHRbdC5ERUJVRyA9IDcwXSA9IFwiREVCVUdcIiwgdFt0LlZFUkJPU0UgPSA4MF0gPSBcIlZFUkJPU0VcIiwgdFt0LkFMTCA9IDk5OTldID0gXCJBTExcIjtcbn0pKHEgfHwgKHEgPSB7fSkpO1xuZnVuY3Rpb24gX24odCwgZSkge1xuICB0IDwgcS5OT05FID8gdCA9IHEuTk9ORSA6IHQgPiBxLkFMTCAmJiAodCA9IHEuQUxMKSwgZSA9IGUgfHwge307XG4gIGZ1bmN0aW9uIHIobiwgYSkge1xuICAgIHZhciBpID0gZVtuXTtcbiAgICByZXR1cm4gdHlwZW9mIGkgPT0gXCJmdW5jdGlvblwiICYmIHQgPj0gYSA/IGkuYmluZChlKSA6IGZ1bmN0aW9uKCkge1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBlcnJvcjogcihcImVycm9yXCIsIHEuRVJST1IpLFxuICAgIHdhcm46IHIoXCJ3YXJuXCIsIHEuV0FSTiksXG4gICAgaW5mbzogcihcImluZm9cIiwgcS5JTkZPKSxcbiAgICBkZWJ1ZzogcihcImRlYnVnXCIsIHEuREVCVUcpLFxuICAgIHZlcmJvc2U6IHIoXCJ2ZXJib3NlXCIsIHEuVkVSQk9TRSlcbiAgfTtcbn1cbnZhciBibiA9IGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3JlYWQgfHwgZnVuY3Rpb24odCwgZSkge1xuICB2YXIgciA9IHR5cGVvZiBTeW1ib2wgPT0gXCJmdW5jdGlvblwiICYmIHRbU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFyKVxuICAgIHJldHVybiB0O1xuICB2YXIgbiA9IHIuY2FsbCh0KSwgYSwgaSA9IFtdLCBvO1xuICB0cnkge1xuICAgIGZvciAoOyAoZSA9PT0gdm9pZCAwIHx8IGUtLSA+IDApICYmICEoYSA9IG4ubmV4dCgpKS5kb25lOyApXG4gICAgICBpLnB1c2goYS52YWx1ZSk7XG4gIH0gY2F0Y2ggKGwpIHtcbiAgICBvID0geyBlcnJvcjogbCB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBhICYmICFhLmRvbmUgJiYgKHIgPSBuLnJldHVybikgJiYgci5jYWxsKG4pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAobylcbiAgICAgICAgdGhyb3cgby5lcnJvcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59LCB2biA9IGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3NwcmVhZEFycmF5IHx8IGZ1bmN0aW9uKHQsIGUsIHIpIHtcbiAgaWYgKHIgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMilcbiAgICBmb3IgKHZhciBuID0gMCwgYSA9IGUubGVuZ3RoLCBpOyBuIDwgYTsgbisrKVxuICAgICAgKGkgfHwgIShuIGluIGUpKSAmJiAoaSB8fCAoaSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUsIDAsIG4pKSwgaVtuXSA9IGVbbl0pO1xuICByZXR1cm4gdC5jb25jYXQoaSB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKSk7XG59LCBFbiA9IFwiZGlhZ1wiLCBLID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICBmdW5jdGlvbiBlKGEpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSBbXSwgbyA9IDA7IG8gPCBhcmd1bWVudHMubGVuZ3RoOyBvKyspXG4gICAgICAgICAgICBpW29dID0gYXJndW1lbnRzW29dO1xuICAgICAgICAgIHZhciBsID0gc2UoXCJkaWFnXCIpO1xuICAgICAgICAgIGlmIChsKVxuICAgICAgICAgICAgcmV0dXJuIGxbYV0uYXBwbHkobCwgdm4oW10sIGJuKGkpLCAhMSkpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIHIgPSB0aGlzLCBuID0gZnVuY3Rpb24oYSwgaSkge1xuICAgICAgICB2YXIgbywgbCwgcztcbiAgICAgICAgaWYgKGkgPT09IHZvaWQgMCAmJiAoaSA9IHsgbG9nTGV2ZWw6IHEuSU5GTyB9KSwgYSA9PT0gcikge1xuICAgICAgICAgIHZhciBoID0gbmV3IEVycm9yKFwiQ2Fubm90IHVzZSBkaWFnIGFzIHRoZSBsb2dnZXIgZm9yIGl0c2VsZi4gUGxlYXNlIHVzZSBhIERpYWdMb2dnZXIgaW1wbGVtZW50YXRpb24gbGlrZSBDb25zb2xlRGlhZ0xvZ2dlciBvciBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvblwiKTtcbiAgICAgICAgICByZXR1cm4gci5lcnJvcigobyA9IGguc3RhY2spICE9PSBudWxsICYmIG8gIT09IHZvaWQgMCA/IG8gOiBoLm1lc3NhZ2UpLCAhMTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlb2YgaSA9PSBcIm51bWJlclwiICYmIChpID0ge1xuICAgICAgICAgIGxvZ0xldmVsOiBpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZyA9IHNlKFwiZGlhZ1wiKSwgYiA9IF9uKChsID0gaS5sb2dMZXZlbCkgIT09IG51bGwgJiYgbCAhPT0gdm9pZCAwID8gbCA6IHEuSU5GTywgYSk7XG4gICAgICAgIGlmIChnICYmICFpLnN1cHByZXNzT3ZlcnJpZGVNZXNzYWdlKSB7XG4gICAgICAgICAgdmFyIGQgPSAocyA9IG5ldyBFcnJvcigpLnN0YWNrKSAhPT0gbnVsbCAmJiBzICE9PSB2b2lkIDAgPyBzIDogXCI8ZmFpbGVkIHRvIGdlbmVyYXRlIHN0YWNrdHJhY2U+XCI7XG4gICAgICAgICAgZy53YXJuKFwiQ3VycmVudCBsb2dnZXIgd2lsbCBiZSBvdmVyd3JpdHRlbiBmcm9tIFwiICsgZCksIGIud2FybihcIkN1cnJlbnQgbG9nZ2VyIHdpbGwgb3ZlcndyaXRlIG9uZSBhbHJlYWR5IHJlZ2lzdGVyZWQgZnJvbSBcIiArIGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOZShcImRpYWdcIiwgYiwgciwgITApO1xuICAgICAgfTtcbiAgICAgIHIuc2V0TG9nZ2VyID0gbiwgci5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIENlKEVuLCByKTtcbiAgICAgIH0sIHIuY3JlYXRlQ29tcG9uZW50TG9nZ2VyID0gZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gbmV3IHduKGEpO1xuICAgICAgfSwgci52ZXJib3NlID0gZShcInZlcmJvc2VcIiksIHIuZGVidWcgPSBlKFwiZGVidWdcIiksIHIuaW5mbyA9IGUoXCJpbmZvXCIpLCByLndhcm4gPSBlKFwid2FyblwiKSwgci5lcnJvciA9IGUoXCJlcnJvclwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHQuaW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZSB8fCAodGhpcy5faW5zdGFuY2UgPSBuZXcgdCgpKSwgdGhpcy5faW5zdGFuY2U7XG4gICAgfSwgdDtcbiAgfSgpXG4pLCBBbiA9IGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3JlYWQgfHwgZnVuY3Rpb24odCwgZSkge1xuICB2YXIgciA9IHR5cGVvZiBTeW1ib2wgPT0gXCJmdW5jdGlvblwiICYmIHRbU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFyKVxuICAgIHJldHVybiB0O1xuICB2YXIgbiA9IHIuY2FsbCh0KSwgYSwgaSA9IFtdLCBvO1xuICB0cnkge1xuICAgIGZvciAoOyAoZSA9PT0gdm9pZCAwIHx8IGUtLSA+IDApICYmICEoYSA9IG4ubmV4dCgpKS5kb25lOyApXG4gICAgICBpLnB1c2goYS52YWx1ZSk7XG4gIH0gY2F0Y2ggKGwpIHtcbiAgICBvID0geyBlcnJvcjogbCB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBhICYmICFhLmRvbmUgJiYgKHIgPSBuLnJldHVybikgJiYgci5jYWxsKG4pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAobylcbiAgICAgICAgdGhyb3cgby5lcnJvcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59LCBEbiA9IGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3ZhbHVlcyB8fCBmdW5jdGlvbih0KSB7XG4gIHZhciBlID0gdHlwZW9mIFN5bWJvbCA9PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCByID0gZSAmJiB0W2VdLCBuID0gMDtcbiAgaWYgKHIpXG4gICAgcmV0dXJuIHIuY2FsbCh0KTtcbiAgaWYgKHQgJiYgdHlwZW9mIHQubGVuZ3RoID09IFwibnVtYmVyXCIpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdCAmJiBuID49IHQubGVuZ3RoICYmICh0ID0gdm9pZCAwKSwgeyB2YWx1ZTogdCAmJiB0W24rK10sIGRvbmU6ICF0IH07XG4gICAgICB9XG4gICAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihlID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufSwgUm4gPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChlKSB7XG4gICAgICB0aGlzLl9lbnRyaWVzID0gZSA/IG5ldyBNYXAoZSkgOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuZ2V0RW50cnkgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgciA9IHRoaXMuX2VudHJpZXMuZ2V0KGUpO1xuICAgICAgaWYgKHIpXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByKTtcbiAgICB9LCB0LnByb3RvdHlwZS5nZXRBbGxFbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9lbnRyaWVzLmVudHJpZXMoKSkubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHIgPSBBbihlLCAyKSwgbiA9IHJbMF0sIGEgPSByWzFdO1xuICAgICAgICByZXR1cm4gW24sIGFdO1xuICAgICAgfSk7XG4gICAgfSwgdC5wcm90b3R5cGUuc2V0RW50cnkgPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICB2YXIgbiA9IG5ldyB0KHRoaXMuX2VudHJpZXMpO1xuICAgICAgcmV0dXJuIG4uX2VudHJpZXMuc2V0KGUsIHIpLCBuO1xuICAgIH0sIHQucHJvdG90eXBlLnJlbW92ZUVudHJ5ID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHIgPSBuZXcgdCh0aGlzLl9lbnRyaWVzKTtcbiAgICAgIHJldHVybiByLl9lbnRyaWVzLmRlbGV0ZShlKSwgcjtcbiAgICB9LCB0LnByb3RvdHlwZS5yZW1vdmVFbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBlLCByLCBuID0gW10sIGEgPSAwOyBhIDwgYXJndW1lbnRzLmxlbmd0aDsgYSsrKVxuICAgICAgICBuW2FdID0gYXJndW1lbnRzW2FdO1xuICAgICAgdmFyIGkgPSBuZXcgdCh0aGlzLl9lbnRyaWVzKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIG8gPSBEbihuKSwgbCA9IG8ubmV4dCgpOyAhbC5kb25lOyBsID0gby5uZXh0KCkpIHtcbiAgICAgICAgICB2YXIgcyA9IGwudmFsdWU7XG4gICAgICAgICAgaS5fZW50cmllcy5kZWxldGUocyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGgpIHtcbiAgICAgICAgZSA9IHsgZXJyb3I6IGggfTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbCAmJiAhbC5kb25lICYmIChyID0gby5yZXR1cm4pICYmIHIuY2FsbChvKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoZSlcbiAgICAgICAgICAgIHRocm93IGUuZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpO1xuICAgIH0sIHQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IHQoKTtcbiAgICB9LCB0O1xuICB9KClcbiksIFRuID0gU3ltYm9sKFwiQmFnZ2FnZUVudHJ5TWV0YWRhdGFcIiksIE9uID0gSy5pbnN0YW5jZSgpO1xuZnVuY3Rpb24gUG4odCkge1xuICByZXR1cm4gdCA9PT0gdm9pZCAwICYmICh0ID0ge30pLCBuZXcgUm4obmV3IE1hcChPYmplY3QuZW50cmllcyh0KSkpO1xufVxuZnVuY3Rpb24gU24odCkge1xuICByZXR1cm4gdHlwZW9mIHQgIT0gXCJzdHJpbmdcIiAmJiAoT24uZXJyb3IoXCJDYW5ub3QgY3JlYXRlIGJhZ2dhZ2UgbWV0YWRhdGEgZnJvbSB1bmtub3duIHR5cGU6IFwiICsgdHlwZW9mIHQpLCB0ID0gXCJcIiksIHtcbiAgICBfX1RZUEVfXzogVG4sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gX3QodCkge1xuICByZXR1cm4gU3ltYm9sLmZvcih0KTtcbn1cbnZhciBObiA9IChcbiAgLyoqIEBjbGFzcyAqL1xuICBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KGUpIHtcbiAgICAgIHZhciByID0gdGhpcztcbiAgICAgIHIuX2N1cnJlbnRDb250ZXh0ID0gZSA/IG5ldyBNYXAoZSkgOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCByLmdldFZhbHVlID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gci5fY3VycmVudENvbnRleHQuZ2V0KG4pO1xuICAgICAgfSwgci5zZXRWYWx1ZSA9IGZ1bmN0aW9uKG4sIGEpIHtcbiAgICAgICAgdmFyIGkgPSBuZXcgdChyLl9jdXJyZW50Q29udGV4dCk7XG4gICAgICAgIHJldHVybiBpLl9jdXJyZW50Q29udGV4dC5zZXQobiwgYSksIGk7XG4gICAgICB9LCByLmRlbGV0ZVZhbHVlID0gZnVuY3Rpb24obikge1xuICAgICAgICB2YXIgYSA9IG5ldyB0KHIuX2N1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGEuX2N1cnJlbnRDb250ZXh0LmRlbGV0ZShuKSwgYTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9KClcbiksIEVyID0gbmV3IE5uKCksIEdlID0gW1xuICB7IG46IFwiZXJyb3JcIiwgYzogXCJlcnJvclwiIH0sXG4gIHsgbjogXCJ3YXJuXCIsIGM6IFwid2FyblwiIH0sXG4gIHsgbjogXCJpbmZvXCIsIGM6IFwiaW5mb1wiIH0sXG4gIHsgbjogXCJkZWJ1Z1wiLCBjOiBcImRlYnVnXCIgfSxcbiAgeyBuOiBcInZlcmJvc2VcIiwgYzogXCJ0cmFjZVwiIH1cbl0sIENuID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICBmdW5jdGlvbiBlKG4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZvciAodmFyIGEgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBhW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgICAgICB2YXIgbyA9IGNvbnNvbGVbbl07XG4gICAgICAgICAgICBpZiAodHlwZW9mIG8gIT0gXCJmdW5jdGlvblwiICYmIChvID0gY29uc29sZS5sb2cpLCB0eXBlb2YgbyA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgIHJldHVybiBvLmFwcGx5KGNvbnNvbGUsIGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgR2UubGVuZ3RoOyByKyspXG4gICAgICAgIHRoaXNbR2Vbcl0ubl0gPSBlKEdlW3JdLmMpO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbiAgfSgpXG4pLCBkZSA9IGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX2V4dGVuZHMgfHwgZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24oZSwgcikge1xuICAgIHJldHVybiB0ID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24obiwgYSkge1xuICAgICAgbi5fX3Byb3RvX18gPSBhO1xuICAgIH0gfHwgZnVuY3Rpb24obiwgYSkge1xuICAgICAgZm9yICh2YXIgaSBpbiBhKVxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgaSkgJiYgKG5baV0gPSBhW2ldKTtcbiAgICB9LCB0KGUsIHIpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24oZSwgcikge1xuICAgIGlmICh0eXBlb2YgciAhPSBcImZ1bmN0aW9uXCIgJiYgciAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKHIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICB0KGUsIHIpO1xuICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID0gZTtcbiAgICB9XG4gICAgZS5wcm90b3R5cGUgPSByID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShyKSA6IChuLnByb3RvdHlwZSA9IHIucHJvdG90eXBlLCBuZXcgbigpKTtcbiAgfTtcbn0oKSwgVm4gPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmNyZWF0ZUhpc3RvZ3JhbSA9IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgIHJldHVybiB6bjtcbiAgICB9LCB0LnByb3RvdHlwZS5jcmVhdGVDb3VudGVyID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgcmV0dXJuIFVuO1xuICAgIH0sIHQucHJvdG90eXBlLmNyZWF0ZVVwRG93bkNvdW50ZXIgPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICByZXR1cm4geG47XG4gICAgfSwgdC5wcm90b3R5cGUuY3JlYXRlT2JzZXJ2YWJsZUdhdWdlID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgcmV0dXJuIExuO1xuICAgIH0sIHQucHJvdG90eXBlLmNyZWF0ZU9ic2VydmFibGVDb3VudGVyID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgcmV0dXJuIEJuO1xuICAgIH0sIHQucHJvdG90eXBlLmNyZWF0ZU9ic2VydmFibGVVcERvd25Db3VudGVyID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgcmV0dXJuIEtuO1xuICAgIH0sIHQucHJvdG90eXBlLmFkZEJhdGNoT2JzZXJ2YWJsZUNhbGxiYWNrID0gZnVuY3Rpb24oZSwgcikge1xuICAgIH0sIHQucHJvdG90eXBlLnJlbW92ZUJhdGNoT2JzZXJ2YWJsZUNhbGxiYWNrID0gZnVuY3Rpb24oZSkge1xuICAgIH0sIHQ7XG4gIH0oKVxuKSwgYnQgPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH0oKVxuKSwgTW4gPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24odCkge1xuICAgIGRlKGUsIHQpO1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICByZXR1cm4gdCAhPT0gbnVsbCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHIsIG4pIHtcbiAgICB9LCBlO1xuICB9KGJ0KVxuKSwgSW4gPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24odCkge1xuICAgIGRlKGUsIHQpO1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICByZXR1cm4gdCAhPT0gbnVsbCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHIsIG4pIHtcbiAgICB9LCBlO1xuICB9KGJ0KVxuKSwgSG4gPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24odCkge1xuICAgIGRlKGUsIHQpO1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICByZXR1cm4gdCAhPT0gbnVsbCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGUucHJvdG90eXBlLnJlY29yZCA9IGZ1bmN0aW9uKHIsIG4pIHtcbiAgICB9LCBlO1xuICB9KGJ0KVxuKSwgdnQgPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmFkZENhbGxiYWNrID0gZnVuY3Rpb24oZSkge1xuICAgIH0sIHQucHJvdG90eXBlLnJlbW92ZUNhbGxiYWNrID0gZnVuY3Rpb24oZSkge1xuICAgIH0sIHQ7XG4gIH0oKVxuKSwgRm4gPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24odCkge1xuICAgIGRlKGUsIHQpO1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICByZXR1cm4gdCAhPT0gbnVsbCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH0odnQpXG4pLCBqbiA9IChcbiAgLyoqIEBjbGFzcyAqL1xuICBmdW5jdGlvbih0KSB7XG4gICAgZGUoZSwgdCk7XG4gICAgZnVuY3Rpb24gZSgpIHtcbiAgICAgIHJldHVybiB0ICE9PSBudWxsICYmIHQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gZTtcbiAgfSh2dClcbiksIHFuID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKHQpIHtcbiAgICBkZShlLCB0KTtcbiAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgcmV0dXJuIHQgIT09IG51bGwgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9KHZ0KVxuKSwgQXIgPSBuZXcgVm4oKSwgVW4gPSBuZXcgTW4oKSwgem4gPSBuZXcgSG4oKSwgeG4gPSBuZXcgSW4oKSwgQm4gPSBuZXcgRm4oKSwgTG4gPSBuZXcgam4oKSwgS24gPSBuZXcgcW4oKTtcbmZ1bmN0aW9uIEduKCkge1xuICByZXR1cm4gQXI7XG59XG52YXIgbHQ7XG4oZnVuY3Rpb24odCkge1xuICB0W3QuSU5UID0gMF0gPSBcIklOVFwiLCB0W3QuRE9VQkxFID0gMV0gPSBcIkRPVUJMRVwiO1xufSkobHQgfHwgKGx0ID0ge30pKTtcbnZhciBEciA9IHtcbiAgZ2V0OiBmdW5jdGlvbih0LCBlKSB7XG4gICAgaWYgKHQgIT0gbnVsbClcbiAgICAgIHJldHVybiB0W2VdO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIHQgPT0gbnVsbCA/IFtdIDogT2JqZWN0LmtleXModCk7XG4gIH1cbn0sIFJyID0ge1xuICBzZXQ6IGZ1bmN0aW9uKHQsIGUsIHIpIHtcbiAgICB0ICE9IG51bGwgJiYgKHRbZV0gPSByKTtcbiAgfVxufSwga24gPSBnbG9iYWxUaGlzICYmIGdsb2JhbFRoaXMuX19yZWFkIHx8IGZ1bmN0aW9uKHQsIGUpIHtcbiAgdmFyIHIgPSB0eXBlb2YgU3ltYm9sID09IFwiZnVuY3Rpb25cIiAmJiB0W1N5bWJvbC5pdGVyYXRvcl07XG4gIGlmICghcilcbiAgICByZXR1cm4gdDtcbiAgdmFyIG4gPSByLmNhbGwodCksIGEsIGkgPSBbXSwgbztcbiAgdHJ5IHtcbiAgICBmb3IgKDsgKGUgPT09IHZvaWQgMCB8fCBlLS0gPiAwKSAmJiAhKGEgPSBuLm5leHQoKSkuZG9uZTsgKVxuICAgICAgaS5wdXNoKGEudmFsdWUpO1xuICB9IGNhdGNoIChsKSB7XG4gICAgbyA9IHsgZXJyb3I6IGwgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgYSAmJiAhYS5kb25lICYmIChyID0gbi5yZXR1cm4pICYmIHIuY2FsbChuKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKG8pXG4gICAgICAgIHRocm93IG8uZXJyb3I7XG4gICAgfVxuICB9XG4gIHJldHVybiBpO1xufSwgJG4gPSBnbG9iYWxUaGlzICYmIGdsb2JhbFRoaXMuX19zcHJlYWRBcnJheSB8fCBmdW5jdGlvbih0LCBlLCByKSB7XG4gIGlmIChyIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpXG4gICAgZm9yICh2YXIgbiA9IDAsIGEgPSBlLmxlbmd0aCwgaTsgbiA8IGE7IG4rKylcbiAgICAgIChpIHx8ICEobiBpbiBlKSkgJiYgKGkgfHwgKGkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLCAwLCBuKSksIGlbbl0gPSBlW25dKTtcbiAgcmV0dXJuIHQuY29uY2F0KGkgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSkpO1xufSwgWG4gPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmFjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIEVyO1xuICAgIH0sIHQucHJvdG90eXBlLndpdGggPSBmdW5jdGlvbihlLCByLCBuKSB7XG4gICAgICBmb3IgKHZhciBhID0gW10sIGkgPSAzOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICBhW2kgLSAzXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIHJldHVybiByLmNhbGwuYXBwbHkociwgJG4oW25dLCBrbihhKSwgITEpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgcmV0dXJuIHI7XG4gICAgfSwgdC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCB0O1xuICB9KClcbiksIFduID0gZ2xvYmFsVGhpcyAmJiBnbG9iYWxUaGlzLl9fcmVhZCB8fCBmdW5jdGlvbih0LCBlKSB7XG4gIHZhciByID0gdHlwZW9mIFN5bWJvbCA9PSBcImZ1bmN0aW9uXCIgJiYgdFtTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIXIpXG4gICAgcmV0dXJuIHQ7XG4gIHZhciBuID0gci5jYWxsKHQpLCBhLCBpID0gW10sIG87XG4gIHRyeSB7XG4gICAgZm9yICg7IChlID09PSB2b2lkIDAgfHwgZS0tID4gMCkgJiYgIShhID0gbi5uZXh0KCkpLmRvbmU7IClcbiAgICAgIGkucHVzaChhLnZhbHVlKTtcbiAgfSBjYXRjaCAobCkge1xuICAgIG8gPSB7IGVycm9yOiBsIH07XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGEgJiYgIWEuZG9uZSAmJiAociA9IG4ucmV0dXJuKSAmJiByLmNhbGwobik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChvKVxuICAgICAgICB0aHJvdyBvLmVycm9yO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTtcbn0sIFluID0gZ2xvYmFsVGhpcyAmJiBnbG9iYWxUaGlzLl9fc3ByZWFkQXJyYXkgfHwgZnVuY3Rpb24odCwgZSwgcikge1xuICBpZiAociB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKVxuICAgIGZvciAodmFyIG4gPSAwLCBhID0gZS5sZW5ndGgsIGk7IG4gPCBhOyBuKyspXG4gICAgICAoaSB8fCAhKG4gaW4gZSkpICYmIChpIHx8IChpID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSwgMCwgbikpLCBpW25dID0gZVtuXSk7XG4gIHJldHVybiB0LmNvbmNhdChpIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpKTtcbn0sIGtlID0gXCJjb250ZXh0XCIsIFFuID0gbmV3IFhuKCksIExlID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgfVxuICAgIHJldHVybiB0LmdldEluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2UgfHwgKHRoaXMuX2luc3RhbmNlID0gbmV3IHQoKSksIHRoaXMuX2luc3RhbmNlO1xuICAgIH0sIHQucHJvdG90eXBlLnNldEdsb2JhbENvbnRleHRNYW5hZ2VyID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIE5lKGtlLCBlLCBLLmluc3RhbmNlKCkpO1xuICAgIH0sIHQucHJvdG90eXBlLmFjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldENvbnRleHRNYW5hZ2VyKCkuYWN0aXZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUud2l0aCA9IGZ1bmN0aW9uKGUsIHIsIG4pIHtcbiAgICAgIGZvciAodmFyIGEsIGkgPSBbXSwgbyA9IDM7IG8gPCBhcmd1bWVudHMubGVuZ3RoOyBvKyspXG4gICAgICAgIGlbbyAtIDNdID0gYXJndW1lbnRzW29dO1xuICAgICAgcmV0dXJuIChhID0gdGhpcy5fZ2V0Q29udGV4dE1hbmFnZXIoKSkud2l0aC5hcHBseShhLCBZbihbZSwgciwgbl0sIFduKGkpLCAhMSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0Q29udGV4dE1hbmFnZXIoKS5iaW5kKGUsIHIpO1xuICAgIH0sIHQucHJvdG90eXBlLl9nZXRDb250ZXh0TWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNlKGtlKSB8fCBRbjtcbiAgICB9LCB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9nZXRDb250ZXh0TWFuYWdlcigpLmRpc2FibGUoKSwgQ2Uoa2UsIEsuaW5zdGFuY2UoKSk7XG4gICAgfSwgdDtcbiAgfSgpXG4pLCB6ZTtcbihmdW5jdGlvbih0KSB7XG4gIHRbdC5OT05FID0gMF0gPSBcIk5PTkVcIiwgdFt0LlNBTVBMRUQgPSAxXSA9IFwiU0FNUExFRFwiO1xufSkoemUgfHwgKHplID0ge30pKTtcbnZhciBFdCA9IFwiMDAwMDAwMDAwMDAwMDAwMFwiLCBBdCA9IFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIiwgVHIgPSB7XG4gIHRyYWNlSWQ6IEF0LFxuICBzcGFuSWQ6IEV0LFxuICB0cmFjZUZsYWdzOiB6ZS5OT05FXG59LCBUZSA9IChcbiAgLyoqIEBjbGFzcyAqL1xuICBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KGUpIHtcbiAgICAgIGUgPT09IHZvaWQgMCAmJiAoZSA9IFRyKSwgdGhpcy5fc3BhbkNvbnRleHQgPSBlO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuc3BhbkNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zcGFuQ29udGV4dDtcbiAgICB9LCB0LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgdC5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS5zZXRTdGF0dXMgPSBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS51cGRhdGVOYW1lID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgdC5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oZSkge1xuICAgIH0sIHQucHJvdG90eXBlLmlzUmVjb3JkaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gITE7XG4gICAgfSwgdC5wcm90b3R5cGUucmVjb3JkRXhjZXB0aW9uID0gZnVuY3Rpb24oZSwgcikge1xuICAgIH0sIHQ7XG4gIH0oKVxuKSwgRHQgPSBfdChcIk9wZW5UZWxlbWV0cnkgQ29udGV4dCBLZXkgU1BBTlwiKTtcbmZ1bmN0aW9uIFJ0KHQpIHtcbiAgcmV0dXJuIHQuZ2V0VmFsdWUoRHQpIHx8IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIFpuKCkge1xuICByZXR1cm4gUnQoTGUuZ2V0SW5zdGFuY2UoKS5hY3RpdmUoKSk7XG59XG5mdW5jdGlvbiBUdCh0LCBlKSB7XG4gIHJldHVybiB0LnNldFZhbHVlKER0LCBlKTtcbn1cbmZ1bmN0aW9uIEpuKHQpIHtcbiAgcmV0dXJuIHQuZGVsZXRlVmFsdWUoRHQpO1xufVxuZnVuY3Rpb24gZWEodCwgZSkge1xuICByZXR1cm4gVHQodCwgbmV3IFRlKGUpKTtcbn1cbmZ1bmN0aW9uIE9yKHQpIHtcbiAgdmFyIGU7XG4gIHJldHVybiAoZSA9IFJ0KHQpKSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnNwYW5Db250ZXh0KCk7XG59XG52YXIgdGEgPSAvXihbMC05YS1mXXszMn0pJC9pLCByYSA9IC9eWzAtOWEtZl17MTZ9JC9pO1xuZnVuY3Rpb24gUHIodCkge1xuICByZXR1cm4gdGEudGVzdCh0KSAmJiB0ICE9PSBBdDtcbn1cbmZ1bmN0aW9uIFNyKHQpIHtcbiAgcmV0dXJuIHJhLnRlc3QodCkgJiYgdCAhPT0gRXQ7XG59XG5mdW5jdGlvbiBPdCh0KSB7XG4gIHJldHVybiBQcih0LnRyYWNlSWQpICYmIFNyKHQuc3BhbklkKTtcbn1cbmZ1bmN0aW9uIG5hKHQpIHtcbiAgcmV0dXJuIG5ldyBUZSh0KTtcbn1cbnZhciAkZSA9IExlLmdldEluc3RhbmNlKCksIE5yID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5zdGFydFNwYW4gPSBmdW5jdGlvbihlLCByLCBuKSB7XG4gICAgICBuID09PSB2b2lkIDAgJiYgKG4gPSAkZS5hY3RpdmUoKSk7XG4gICAgICB2YXIgYSA9ICEhcj8ucm9vdDtcbiAgICAgIGlmIChhKVxuICAgICAgICByZXR1cm4gbmV3IFRlKCk7XG4gICAgICB2YXIgaSA9IG4gJiYgT3Iobik7XG4gICAgICByZXR1cm4gYWEoaSkgJiYgT3QoaSkgPyBuZXcgVGUoaSkgOiBuZXcgVGUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zdGFydEFjdGl2ZVNwYW4gPSBmdW5jdGlvbihlLCByLCBuLCBhKSB7XG4gICAgICB2YXIgaSwgbywgbDtcbiAgICAgIGlmICghKGFyZ3VtZW50cy5sZW5ndGggPCAyKSkge1xuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAyID8gbCA9IHIgOiBhcmd1bWVudHMubGVuZ3RoID09PSAzID8gKGkgPSByLCBsID0gbikgOiAoaSA9IHIsIG8gPSBuLCBsID0gYSk7XG4gICAgICAgIHZhciBzID0gbyA/PyAkZS5hY3RpdmUoKSwgaCA9IHRoaXMuc3RhcnRTcGFuKGUsIGksIHMpLCBnID0gVHQocywgaCk7XG4gICAgICAgIHJldHVybiAkZS53aXRoKGcsIGwsIHZvaWQgMCwgaCk7XG4gICAgICB9XG4gICAgfSwgdDtcbiAgfSgpXG4pO1xuZnVuY3Rpb24gYWEodCkge1xuICByZXR1cm4gdHlwZW9mIHQgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdC5zcGFuSWQgPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgdC50cmFjZUlkID09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHQudHJhY2VGbGFncyA9PSBcIm51bWJlclwiO1xufVxudmFyIGlhID0gbmV3IE5yKCksIENyID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoZSwgciwgbiwgYSkge1xuICAgICAgdGhpcy5fcHJvdmlkZXIgPSBlLCB0aGlzLm5hbWUgPSByLCB0aGlzLnZlcnNpb24gPSBuLCB0aGlzLm9wdGlvbnMgPSBhO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuc3RhcnRTcGFuID0gZnVuY3Rpb24oZSwgciwgbikge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldFRyYWNlcigpLnN0YXJ0U3BhbihlLCByLCBuKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zdGFydEFjdGl2ZVNwYW4gPSBmdW5jdGlvbihlLCByLCBuLCBhKSB7XG4gICAgICB2YXIgaSA9IHRoaXMuX2dldFRyYWNlcigpO1xuICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoaS5zdGFydEFjdGl2ZVNwYW4sIGksIGFyZ3VtZW50cyk7XG4gICAgfSwgdC5wcm90b3R5cGUuX2dldFRyYWNlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2RlbGVnYXRlKVxuICAgICAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGU7XG4gICAgICB2YXIgZSA9IHRoaXMuX3Byb3ZpZGVyLmdldERlbGVnYXRlVHJhY2VyKHRoaXMubmFtZSwgdGhpcy52ZXJzaW9uLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGUgPyAodGhpcy5fZGVsZWdhdGUgPSBlLCB0aGlzLl9kZWxlZ2F0ZSkgOiBpYTtcbiAgICB9LCB0O1xuICB9KClcbiksIG9hID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5nZXRUcmFjZXIgPSBmdW5jdGlvbihlLCByLCBuKSB7XG4gICAgICByZXR1cm4gbmV3IE5yKCk7XG4gICAgfSwgdDtcbiAgfSgpXG4pLCBzYSA9IG5ldyBvYSgpLCB1dCA9IChcbiAgLyoqIEBjbGFzcyAqL1xuICBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuZ2V0VHJhY2VyID0gZnVuY3Rpb24oZSwgciwgbikge1xuICAgICAgdmFyIGE7XG4gICAgICByZXR1cm4gKGEgPSB0aGlzLmdldERlbGVnYXRlVHJhY2VyKGUsIHIsIG4pKSAhPT0gbnVsbCAmJiBhICE9PSB2b2lkIDAgPyBhIDogbmV3IENyKHRoaXMsIGUsIHIsIG4pO1xuICAgIH0sIHQucHJvdG90eXBlLmdldERlbGVnYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZTtcbiAgICAgIHJldHVybiAoZSA9IHRoaXMuX2RlbGVnYXRlKSAhPT0gbnVsbCAmJiBlICE9PSB2b2lkIDAgPyBlIDogc2E7XG4gICAgfSwgdC5wcm90b3R5cGUuc2V0RGVsZWdhdGUgPSBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLl9kZWxlZ2F0ZSA9IGU7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0RGVsZWdhdGVUcmFjZXIgPSBmdW5jdGlvbihlLCByLCBuKSB7XG4gICAgICB2YXIgYTtcbiAgICAgIHJldHVybiAoYSA9IHRoaXMuX2RlbGVnYXRlKSA9PT0gbnVsbCB8fCBhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhLmdldFRyYWNlcihlLCByLCBuKTtcbiAgICB9LCB0O1xuICB9KClcbiksIGR0O1xuKGZ1bmN0aW9uKHQpIHtcbiAgdFt0Lk5PVF9SRUNPUkQgPSAwXSA9IFwiTk9UX1JFQ09SRFwiLCB0W3QuUkVDT1JEID0gMV0gPSBcIlJFQ09SRFwiLCB0W3QuUkVDT1JEX0FORF9TQU1QTEVEID0gMl0gPSBcIlJFQ09SRF9BTkRfU0FNUExFRFwiO1xufSkoZHQgfHwgKGR0ID0ge30pKTtcbnZhciBjdDtcbihmdW5jdGlvbih0KSB7XG4gIHRbdC5JTlRFUk5BTCA9IDBdID0gXCJJTlRFUk5BTFwiLCB0W3QuU0VSVkVSID0gMV0gPSBcIlNFUlZFUlwiLCB0W3QuQ0xJRU5UID0gMl0gPSBcIkNMSUVOVFwiLCB0W3QuUFJPRFVDRVIgPSAzXSA9IFwiUFJPRFVDRVJcIiwgdFt0LkNPTlNVTUVSID0gNF0gPSBcIkNPTlNVTUVSXCI7XG59KShjdCB8fCAoY3QgPSB7fSkpO1xudmFyIGh0O1xuKGZ1bmN0aW9uKHQpIHtcbiAgdFt0LlVOU0VUID0gMF0gPSBcIlVOU0VUXCIsIHRbdC5PSyA9IDFdID0gXCJPS1wiLCB0W3QuRVJST1IgPSAyXSA9IFwiRVJST1JcIjtcbn0pKGh0IHx8IChodCA9IHt9KSk7XG52YXIgZnQgPSBcIltfMC05YS16LSovXVwiLCBsYSA9IFwiW2Etel1cIiArIGZ0ICsgXCJ7MCwyNTV9XCIsIHVhID0gXCJbYS16MC05XVwiICsgZnQgKyBcInswLDI0MH1AW2Etel1cIiArIGZ0ICsgXCJ7MCwxM31cIiwgZGEgPSBuZXcgUmVnRXhwKFwiXig/OlwiICsgbGEgKyBcInxcIiArIHVhICsgXCIpJFwiKSwgY2EgPSAvXlsgLX5dezAsMjU1fVshLX5dJC8sIGhhID0gLyx8PS87XG5mdW5jdGlvbiBmYSh0KSB7XG4gIHJldHVybiBkYS50ZXN0KHQpO1xufVxuZnVuY3Rpb24gcGEodCkge1xuICByZXR1cm4gY2EudGVzdCh0KSAmJiAhaGEudGVzdCh0KTtcbn1cbnZhciB6dCA9IDMyLCBnYSA9IDUxMiwgeHQgPSBcIixcIiwgQnQgPSBcIj1cIiwgeWEgPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChlKSB7XG4gICAgICB0aGlzLl9pbnRlcm5hbFN0YXRlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgZSAmJiB0aGlzLl9wYXJzZShlKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgIHZhciBuID0gdGhpcy5fY2xvbmUoKTtcbiAgICAgIHJldHVybiBuLl9pbnRlcm5hbFN0YXRlLmhhcyhlKSAmJiBuLl9pbnRlcm5hbFN0YXRlLmRlbGV0ZShlKSwgbi5faW50ZXJuYWxTdGF0ZS5zZXQoZSwgciksIG47XG4gICAgfSwgdC5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgciA9IHRoaXMuX2Nsb25lKCk7XG4gICAgICByZXR1cm4gci5faW50ZXJuYWxTdGF0ZS5kZWxldGUoZSksIHI7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsU3RhdGUuZ2V0KGUpO1xuICAgIH0sIHQucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX2tleXMoKS5yZWR1Y2UoZnVuY3Rpb24ociwgbikge1xuICAgICAgICByZXR1cm4gci5wdXNoKG4gKyBCdCArIGUuZ2V0KG4pKSwgcjtcbiAgICAgIH0sIFtdKS5qb2luKHh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5fcGFyc2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLmxlbmd0aCA+IGdhIHx8ICh0aGlzLl9pbnRlcm5hbFN0YXRlID0gZS5zcGxpdCh4dCkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbihyLCBuKSB7XG4gICAgICAgIHZhciBhID0gbi50cmltKCksIGkgPSBhLmluZGV4T2YoQnQpO1xuICAgICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgICB2YXIgbyA9IGEuc2xpY2UoMCwgaSksIGwgPSBhLnNsaWNlKGkgKyAxLCBuLmxlbmd0aCk7XG4gICAgICAgICAgZmEobykgJiYgcGEobCkgJiYgci5zZXQobywgbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9LCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKSwgdGhpcy5faW50ZXJuYWxTdGF0ZS5zaXplID4genQgJiYgKHRoaXMuX2ludGVybmFsU3RhdGUgPSBuZXcgTWFwKEFycmF5LmZyb20odGhpcy5faW50ZXJuYWxTdGF0ZS5lbnRyaWVzKCkpLnJldmVyc2UoKS5zbGljZSgwLCB6dCkpKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuX2tleXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX2ludGVybmFsU3RhdGUua2V5cygpKS5yZXZlcnNlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuX2Nsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IG5ldyB0KCk7XG4gICAgICByZXR1cm4gZS5faW50ZXJuYWxTdGF0ZSA9IG5ldyBNYXAodGhpcy5faW50ZXJuYWxTdGF0ZSksIGU7XG4gICAgfSwgdDtcbiAgfSgpXG4pO1xuZnVuY3Rpb24gbWEodCkge1xuICByZXR1cm4gbmV3IHlhKHQpO1xufVxudmFyIFZyID0gTGUuZ2V0SW5zdGFuY2UoKSwgTXIgPSBLLmluc3RhbmNlKCksIHdhID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5nZXRNZXRlciA9IGZ1bmN0aW9uKGUsIHIsIG4pIHtcbiAgICAgIHJldHVybiBBcjtcbiAgICB9LCB0O1xuICB9KClcbiksIF9hID0gbmV3IHdhKCksIFhlID0gXCJtZXRyaWNzXCIsIGJhID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgfVxuICAgIHJldHVybiB0LmdldEluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2UgfHwgKHRoaXMuX2luc3RhbmNlID0gbmV3IHQoKSksIHRoaXMuX2luc3RhbmNlO1xuICAgIH0sIHQucHJvdG90eXBlLnNldEdsb2JhbE1ldGVyUHJvdmlkZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gTmUoWGUsIGUsIEsuaW5zdGFuY2UoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0TWV0ZXJQcm92aWRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNlKFhlKSB8fCBfYTtcbiAgICB9LCB0LnByb3RvdHlwZS5nZXRNZXRlciA9IGZ1bmN0aW9uKGUsIHIsIG4pIHtcbiAgICAgIHJldHVybiB0aGlzLmdldE1ldGVyUHJvdmlkZXIoKS5nZXRNZXRlcihlLCByLCBuKTtcbiAgICB9LCB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICBDZShYZSwgSy5pbnN0YW5jZSgpKTtcbiAgICB9LCB0O1xuICB9KClcbiksIElyID0gYmEuZ2V0SW5zdGFuY2UoKSwgdmEgPSAoXG4gIC8qKiBAY2xhc3MgKi9cbiAgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmluamVjdCA9IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICB9LCB0LnByb3RvdHlwZS5leHRyYWN0ID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSwgdC5wcm90b3R5cGUuZmllbGRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSwgdDtcbiAgfSgpXG4pLCBQdCA9IF90KFwiT3BlblRlbGVtZXRyeSBCYWdnYWdlIEtleVwiKTtcbmZ1bmN0aW9uIEhyKHQpIHtcbiAgcmV0dXJuIHQuZ2V0VmFsdWUoUHQpIHx8IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIEVhKCkge1xuICByZXR1cm4gSHIoTGUuZ2V0SW5zdGFuY2UoKS5hY3RpdmUoKSk7XG59XG5mdW5jdGlvbiBBYSh0LCBlKSB7XG4gIHJldHVybiB0LnNldFZhbHVlKFB0LCBlKTtcbn1cbmZ1bmN0aW9uIERhKHQpIHtcbiAgcmV0dXJuIHQuZGVsZXRlVmFsdWUoUHQpO1xufVxudmFyIFdlID0gXCJwcm9wYWdhdGlvblwiLCBSYSA9IG5ldyB2YSgpLCBUYSA9IChcbiAgLyoqIEBjbGFzcyAqL1xuICBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgdGhpcy5jcmVhdGVCYWdnYWdlID0gUG4sIHRoaXMuZ2V0QmFnZ2FnZSA9IEhyLCB0aGlzLmdldEFjdGl2ZUJhZ2dhZ2UgPSBFYSwgdGhpcy5zZXRCYWdnYWdlID0gQWEsIHRoaXMuZGVsZXRlQmFnZ2FnZSA9IERhO1xuICAgIH1cbiAgICByZXR1cm4gdC5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlIHx8ICh0aGlzLl9pbnN0YW5jZSA9IG5ldyB0KCkpLCB0aGlzLl9pbnN0YW5jZTtcbiAgICB9LCB0LnByb3RvdHlwZS5zZXRHbG9iYWxQcm9wYWdhdG9yID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIE5lKFdlLCBlLCBLLmluc3RhbmNlKCkpO1xuICAgIH0sIHQucHJvdG90eXBlLmluamVjdCA9IGZ1bmN0aW9uKGUsIHIsIG4pIHtcbiAgICAgIHJldHVybiBuID09PSB2b2lkIDAgJiYgKG4gPSBSciksIHRoaXMuX2dldEdsb2JhbFByb3BhZ2F0b3IoKS5pbmplY3QoZSwgciwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuZXh0cmFjdCA9IGZ1bmN0aW9uKGUsIHIsIG4pIHtcbiAgICAgIHJldHVybiBuID09PSB2b2lkIDAgJiYgKG4gPSBEciksIHRoaXMuX2dldEdsb2JhbFByb3BhZ2F0b3IoKS5leHRyYWN0KGUsIHIsIG4pO1xuICAgIH0sIHQucHJvdG90eXBlLmZpZWxkcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldEdsb2JhbFByb3BhZ2F0b3IoKS5maWVsZHMoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICBDZShXZSwgSy5pbnN0YW5jZSgpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5fZ2V0R2xvYmFsUHJvcGFnYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNlKFdlKSB8fCBSYTtcbiAgICB9LCB0O1xuICB9KClcbiksIEZyID0gVGEuZ2V0SW5zdGFuY2UoKSwgWWUgPSBcInRyYWNlXCIsIE9hID0gKFxuICAvKiogQGNsYXNzICovXG4gIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICB0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyID0gbmV3IHV0KCksIHRoaXMud3JhcFNwYW5Db250ZXh0ID0gbmEsIHRoaXMuaXNTcGFuQ29udGV4dFZhbGlkID0gT3QsIHRoaXMuZGVsZXRlU3BhbiA9IEpuLCB0aGlzLmdldFNwYW4gPSBSdCwgdGhpcy5nZXRBY3RpdmVTcGFuID0gWm4sIHRoaXMuZ2V0U3BhbkNvbnRleHQgPSBPciwgdGhpcy5zZXRTcGFuID0gVHQsIHRoaXMuc2V0U3BhbkNvbnRleHQgPSBlYTtcbiAgICB9XG4gICAgcmV0dXJuIHQuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZSB8fCAodGhpcy5faW5zdGFuY2UgPSBuZXcgdCgpKSwgdGhpcy5faW5zdGFuY2U7XG4gICAgfSwgdC5wcm90b3R5cGUuc2V0R2xvYmFsVHJhY2VyUHJvdmlkZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgciA9IE5lKFllLCB0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyLCBLLmluc3RhbmNlKCkpO1xuICAgICAgcmV0dXJuIHIgJiYgdGhpcy5fcHJveHlUcmFjZXJQcm92aWRlci5zZXREZWxlZ2F0ZShlKSwgcjtcbiAgICB9LCB0LnByb3RvdHlwZS5nZXRUcmFjZXJQcm92aWRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNlKFllKSB8fCB0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyO1xuICAgIH0sIHQucHJvdG90eXBlLmdldFRyYWNlciA9IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRyYWNlclByb3ZpZGVyKCkuZ2V0VHJhY2VyKGUsIHIpO1xuICAgIH0sIHQucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIENlKFllLCBLLmluc3RhbmNlKCkpLCB0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyID0gbmV3IHV0KCk7XG4gICAgfSwgdDtcbiAgfSgpXG4pLCB4ZSA9IE9hLmdldEluc3RhbmNlKCk7XG5jb25zdCBQYSA9IHtcbiAgY29udGV4dDogVnIsXG4gIGRpYWc6IE1yLFxuICBtZXRyaWNzOiBJcixcbiAgcHJvcGFnYXRpb246IEZyLFxuICB0cmFjZTogeGVcbn0sIFNhID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgRGlhZ0NvbnNvbGVMb2dnZXI6IENuLFxuICBnZXQgRGlhZ0xvZ0xldmVsKCkge1xuICAgIHJldHVybiBxO1xuICB9LFxuICBJTlZBTElEX1NQQU5JRDogRXQsXG4gIElOVkFMSURfU1BBTl9DT05URVhUOiBUcixcbiAgSU5WQUxJRF9UUkFDRUlEOiBBdCxcbiAgUHJveHlUcmFjZXI6IENyLFxuICBQcm94eVRyYWNlclByb3ZpZGVyOiB1dCxcbiAgUk9PVF9DT05URVhUOiBFcixcbiAgZ2V0IFNhbXBsaW5nRGVjaXNpb24oKSB7XG4gICAgcmV0dXJuIGR0O1xuICB9LFxuICBnZXQgU3BhbktpbmQoKSB7XG4gICAgcmV0dXJuIGN0O1xuICB9LFxuICBnZXQgU3BhblN0YXR1c0NvZGUoKSB7XG4gICAgcmV0dXJuIGh0O1xuICB9LFxuICBnZXQgVHJhY2VGbGFncygpIHtcbiAgICByZXR1cm4gemU7XG4gIH0sXG4gIGdldCBWYWx1ZVR5cGUoKSB7XG4gICAgcmV0dXJuIGx0O1xuICB9LFxuICBiYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmc6IFNuLFxuICBjb250ZXh0OiBWcixcbiAgY3JlYXRlQ29udGV4dEtleTogX3QsXG4gIGNyZWF0ZU5vb3BNZXRlcjogR24sXG4gIGNyZWF0ZVRyYWNlU3RhdGU6IG1hLFxuICBkZWZhdWx0OiBQYSxcbiAgZGVmYXVsdFRleHRNYXBHZXR0ZXI6IERyLFxuICBkZWZhdWx0VGV4dE1hcFNldHRlcjogUnIsXG4gIGRpYWc6IE1yLFxuICBpc1NwYW5Db250ZXh0VmFsaWQ6IE90LFxuICBpc1ZhbGlkU3BhbklkOiBTcixcbiAgaXNWYWxpZFRyYWNlSWQ6IFByLFxuICBtZXRyaWNzOiBJcixcbiAgcHJvcGFnYXRpb246IEZyLFxuICB0cmFjZTogeGVcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KSk7XG5jbGFzcyBKIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRGF0ZU9ubHkgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICAgKiBAcmV0dXJucyBUaGUgbmV3IERhdGVPbmx5XG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIHllYXIgaXMgaW52YWxpZFxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSBtb250aCBpcyBpbnZhbGlkXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIGRheSBpcyBpbnZhbGlkXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IHllYXI6IGUgPSAwLCBtb250aDogciA9IDEsIGRheTogbiA9IDEgfSkge1xuICAgIHRoaXMuZGF5ID0gbiwgdGhpcy5tb250aCA9IHIsIHRoaXMueWVhciA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRGF0ZU9ubHkgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAgICogQHBhcmFtIGRhdGUgVGhlIGRhdGVcbiAgICogQHJldHVybnMgVGhlIG5ldyBEYXRlT25seVxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSBkYXRlIGlzIGludmFsaWRcbiAgICovXG4gIHN0YXRpYyBmcm9tRGF0ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0ZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIHJldHVybiBuZXcgSih7XG4gICAgICB5ZWFyOiBlLmdldEZ1bGxZZWFyKCksXG4gICAgICBtb250aDogZS5nZXRNb250aCgpICsgMSxcbiAgICAgIGRheTogZS5nZXREYXRlKClcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUGFyc2VzIGEgc3RyaW5nIGludG8gYSBEYXRlT25seS4gVGhlIHN0cmluZyBjYW4gYmUgb2YgdGhlIElTTyA4NjAxIHRpbWUgb25seSBmb3JtYXQgb3IgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSB0aWNrcyBvZiBhIERhdGUuXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFyc2VcbiAgICogQHJldHVybnMgVGhlIHBhcnNlZCBEYXRlT25seS5cbiAgICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgdmFsdWUgaXMgaW52YWxpZFxuICAgKi9cbiAgc3RhdGljIHBhcnNlKGUpIHtcbiAgICB2YXIgciwgbiwgYSwgaSwgbywgbDtcbiAgICBpZiAoIWUgfHwgZS5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgcyA9IC9eKD88eWVhcj5cXGR7NCx9KS0oPzxtb250aD4wWzEtOV18MVswMTJdKS0oPzxkYXk+MFsxLTldfFsxMl1cXGR8M1swMV0pJC9naS5leGVjKGUpO1xuICAgIGlmIChzKSB7XG4gICAgICBjb25zdCBnID0gcGFyc2VJbnQoKG4gPSAociA9IHMuZ3JvdXBzKSA9PT0gbnVsbCB8fCByID09PSB2b2lkIDAgPyB2b2lkIDAgOiByLnllYXIpICE9PSBudWxsICYmIG4gIT09IHZvaWQgMCA/IG4gOiBcIlwiLCAxMCksIGIgPSBwYXJzZUludCgoaSA9IChhID0gcy5ncm91cHMpID09PSBudWxsIHx8IGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGEubW9udGgpICE9PSBudWxsICYmIGkgIT09IHZvaWQgMCA/IGkgOiBcIlwiLCAxMCksIGQgPSBwYXJzZUludCgobCA9IChvID0gcy5ncm91cHMpID09PSBudWxsIHx8IG8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG8uZGF5KSAhPT0gbnVsbCAmJiBsICE9PSB2b2lkIDAgPyBsIDogXCJcIiwgMTApO1xuICAgICAgcmV0dXJuIG5ldyBKKHsgeWVhcjogZywgbW9udGg6IGIsIGRheTogZCB9KTtcbiAgICB9XG4gICAgY29uc3QgaCA9IERhdGUucGFyc2UoZSk7XG4gICAgaWYgKCFpc05hTihoKSkge1xuICAgICAgY29uc3QgZyA9IG5ldyBEYXRlKGgpO1xuICAgICAgcmV0dXJuIHRoaXMuZnJvbURhdGUoZyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgaXMgbm90IGEgdmFsaWQgZGF0ZS1vbmx5IHJlcHJlc2VudGF0aW9uOiAke2V9YCk7XG4gIH1cbiAgLyoqXG4gICAqICBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXRlIGluIHRoZSBmb3JtYXQgWVlZWS1NTS1ERFxuICAgKiBAcmV0dXJucyBUaGUgZGF0ZSBpbiB0aGUgZm9ybWF0IFlZWVktTU0tREQgSVNPIDg2MDFcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHtRKHRoaXMueWVhciwgNCl9LSR7USh0aGlzLm1vbnRoKX0tJHtRKHRoaXMuZGF5KX1gO1xuICB9XG59XG5mdW5jdGlvbiBRKHQsIGUgPSAyKSB7XG4gIHJldHVybiB0LnRvU3RyaW5nKCkucGFkU3RhcnQoZSwgXCIwXCIpO1xufVxudmFyIHB0ID0ge307XG4oZnVuY3Rpb24odCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCB0LnNlcmlhbGl6ZSA9IHQucGFyc2UgPSB0LkludmFsaWREdXJhdGlvbkVycm9yID0gdm9pZCAwO1xuICBjb25zdCBlID0gW1xuICAgIHsgdW5pdDogXCJ5ZWFyc1wiLCBzeW1ib2w6IFwiWVwiIH0sXG4gICAgeyB1bml0OiBcIm1vbnRoc1wiLCBzeW1ib2w6IFwiTVwiIH0sXG4gICAgeyB1bml0OiBcIndlZWtzXCIsIHN5bWJvbDogXCJXXCIgfSxcbiAgICB7IHVuaXQ6IFwiZGF5c1wiLCBzeW1ib2w6IFwiRFwiIH0sXG4gICAgeyB1bml0OiBcImhvdXJzXCIsIHN5bWJvbDogXCJIXCIgfSxcbiAgICB7IHVuaXQ6IFwibWludXRlc1wiLCBzeW1ib2w6IFwiTVwiIH0sXG4gICAgeyB1bml0OiBcInNlY29uZHNcIiwgc3ltYm9sOiBcIlNcIiB9XG4gIF0sIHIgPSAocywgaCkgPT4gYCgoPzwke3N9Pi0/XFxcXGQqW1xcXFwuLF0/XFxcXGQrKSR7aH0pP2AsIG4gPSBuZXcgUmVnRXhwKFtcbiAgICBcIig/PG5lZ2F0aXZlPi0pP1BcIixcbiAgICByKFwieWVhcnNcIiwgXCJZXCIpLFxuICAgIHIoXCJtb250aHNcIiwgXCJNXCIpLFxuICAgIHIoXCJ3ZWVrc1wiLCBcIldcIiksXG4gICAgcihcImRheXNcIiwgXCJEXCIpLFxuICAgIFwiKFRcIixcbiAgICByKFwiaG91cnNcIiwgXCJIXCIpLFxuICAgIHIoXCJtaW51dGVzXCIsIFwiTVwiKSxcbiAgICByKFwic2Vjb25kc1wiLCBcIlNcIiksXG4gICAgXCIpP1wiXG4gICAgLy8gZW5kIG9wdGlvbmFsIHRpbWVcbiAgXS5qb2luKFwiXCIpKTtcbiAgZnVuY3Rpb24gYShzKSB7XG4gICAgaWYgKCEocyA9PT0gXCJcIiB8fCBzID09PSB2b2lkIDAgfHwgcyA9PT0gbnVsbCkpXG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChzLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSk7XG4gIH1cbiAgdC5JbnZhbGlkRHVyYXRpb25FcnJvciA9IG5ldyBFcnJvcihcIkludmFsaWQgZHVyYXRpb25cIik7XG4gIGZ1bmN0aW9uIGkocykge1xuICAgIGNvbnN0IGggPSBuLmV4ZWMocyk7XG4gICAgaWYgKCFoIHx8ICFoLmdyb3VwcylcbiAgICAgIHRocm93IHQuSW52YWxpZER1cmF0aW9uRXJyb3I7XG4gICAgbGV0IGcgPSAhMDtcbiAgICBjb25zdCBiID0ge307XG4gICAgZm9yIChjb25zdCB7IHVuaXQ6IGYgfSBvZiBlKVxuICAgICAgaC5ncm91cHNbZl0gJiYgKGcgPSAhMSwgYltmXSA9IGEoaC5ncm91cHNbZl0pKTtcbiAgICBpZiAoZylcbiAgICAgIHRocm93IHQuSW52YWxpZER1cmF0aW9uRXJyb3I7XG4gICAgY29uc3QgZCA9IGI7XG4gICAgcmV0dXJuIGguZ3JvdXBzLm5lZ2F0aXZlICYmIChkLm5lZ2F0aXZlID0gITApLCBkO1xuICB9XG4gIHQucGFyc2UgPSBpO1xuICBjb25zdCBvID0gKHMsIGgpID0+IHtcbiAgICBpZiAoIXMpXG4gICAgICByZXR1cm47XG4gICAgbGV0IGcgPSBzLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgYiA9IGcuaW5kZXhPZihcImVcIik7XG4gICAgaWYgKGIgPiAtMSkge1xuICAgICAgY29uc3QgZCA9IHBhcnNlSW50KGcuc2xpY2UoYiArIDIpLCAxMCk7XG4gICAgICBnID0gcy50b0ZpeGVkKGQgKyBiIC0gMik7XG4gICAgfVxuICAgIHJldHVybiBnICsgaDtcbiAgfTtcbiAgZnVuY3Rpb24gbChzKSB7XG4gICAgcmV0dXJuICFzLnllYXJzICYmICFzLm1vbnRocyAmJiAhcy53ZWVrcyAmJiAhcy5kYXlzICYmICFzLmhvdXJzICYmICFzLm1pbnV0ZXMgJiYgIXMuc2Vjb25kcyA/IFwiUFQwU1wiIDogW1xuICAgICAgcy5uZWdhdGl2ZSAmJiBcIi1cIixcbiAgICAgIFwiUFwiLFxuICAgICAgbyhzLnllYXJzLCBcIllcIiksXG4gICAgICBvKHMubW9udGhzLCBcIk1cIiksXG4gICAgICBvKHMud2Vla3MsIFwiV1wiKSxcbiAgICAgIG8ocy5kYXlzLCBcIkRcIiksXG4gICAgICAocy5ob3VycyB8fCBzLm1pbnV0ZXMgfHwgcy5zZWNvbmRzKSAmJiBcIlRcIixcbiAgICAgIG8ocy5ob3VycywgXCJIXCIpLFxuICAgICAgbyhzLm1pbnV0ZXMsIFwiTVwiKSxcbiAgICAgIG8ocy5zZWNvbmRzLCBcIlNcIilcbiAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXCIpO1xuICB9XG4gIHQuc2VyaWFsaXplID0gbDtcbn0pKHB0KTtcbmNsYXNzIGxlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRHVyYXRpb24gdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cbiAgICogQHJldHVybnMgVGhlIG5ldyBEdXJhdGlvblxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHllYXJzIGlzIGludmFsaWRcbiAgICogQHRocm93cyBBbiBlcnJvciBpZiBtb250aHMgaXMgaW52YWxpZFxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHdlZWtzIGlzIGludmFsaWRcbiAgICogQHRocm93cyBBbiBlcnJvciBpZiBkYXlzIGlzIGludmFsaWRcbiAgICogQHRocm93cyBBbiBlcnJvciBpZiBob3VycyBpcyBpbnZhbGlkXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgbWludXRlcyBpcyBpbnZhbGlkXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgc2Vjb25kcyBpcyBpbnZhbGlkXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgd2Vla3MgaXMgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIHllYXJzIG9yIG1vbnRoc1xuICAgKi9cbiAgY29uc3RydWN0b3IoeyB5ZWFyczogZSA9IDAsIG1vbnRoczogciA9IDAsIHdlZWtzOiBuID0gMCwgZGF5czogYSA9IDAsIGhvdXJzOiBpID0gMCwgbWludXRlczogbyA9IDAsIHNlY29uZHM6IGwgPSAwLCBuZWdhdGl2ZTogcyA9ICExIH0pIHtcbiAgICBpZiAoZSA8IDAgfHwgZSA+IDk5OTkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZZWFyIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA5OTk5XCIpO1xuICAgIGlmIChyIDwgMCB8fCByID4gMTEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb250aCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTFcIik7XG4gICAgaWYgKG4gPCAwIHx8IG4gPiA1MylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldlZWsgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDUzXCIpO1xuICAgIGlmIChhIDwgMCB8fCBhID4gNilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRheSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlwiKTtcbiAgICBpZiAoaSA8IDAgfHwgaSA+IDIzKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSG91ciBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjNcIik7XG4gICAgaWYgKG8gPCAwIHx8IG8gPiA1OSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pbnV0ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNTlcIik7XG4gICAgaWYgKGwgPCAwIHx8IGwgPiA1OSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY29uZCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNTlcIik7XG4gICAgaWYgKChlID4gMCB8fCByID4gMCkgJiYgbiA+IDApXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGF2ZSB3ZWVrcyBhbmQgbW9udGhzIG9yIHdlZWtzIGFuZCB5ZWFyc1wiKTtcbiAgICB0aGlzLnllYXJzID0gZSwgdGhpcy5tb250aHMgPSByLCB0aGlzLndlZWtzID0gbiwgdGhpcy5kYXlzID0gYSwgdGhpcy5ob3VycyA9IGksIHRoaXMubWludXRlcyA9IG8sIHRoaXMuc2Vjb25kcyA9IGwsIHRoaXMubmVnYXRpdmUgPSBzO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSBzdHJpbmcgaW50byBhIER1cmF0aW9uLiBUaGUgc3RyaW5nIGNhbiBiZSBvZiB0aGUgSVNPIDg2MDEgZHVyYXRpb24gZm9ybWF0LlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhcnNlXG4gICAqIEByZXR1cm5zIFRoZSBwYXJzZWQgRHVyYXRpb24uXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIHZhbHVlIGlzIGludmFsaWRcbiAgICovXG4gIHN0YXRpYyBwYXJzZShlKSB7XG4gICAgdmFyIHIsIG4sIGEsIGksIG8sIGwsIHMsIGg7XG4gICAgaWYgKCFlIHx8IGUubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGcgPSBwdC5wYXJzZShlKTtcbiAgICByZXR1cm4gbmV3IGxlKHtcbiAgICAgIHllYXJzOiAociA9IGcueWVhcnMpICE9PSBudWxsICYmIHIgIT09IHZvaWQgMCA/IHIgOiAwLFxuICAgICAgbW9udGhzOiAobiA9IGcubW9udGhzKSAhPT0gbnVsbCAmJiBuICE9PSB2b2lkIDAgPyBuIDogMCxcbiAgICAgIHdlZWtzOiAoYSA9IGcud2Vla3MpICE9PSBudWxsICYmIGEgIT09IHZvaWQgMCA/IGEgOiAwLFxuICAgICAgZGF5czogKGkgPSBnLmRheXMpICE9PSBudWxsICYmIGkgIT09IHZvaWQgMCA/IGkgOiAwLFxuICAgICAgaG91cnM6IChvID0gZy5ob3VycykgIT09IG51bGwgJiYgbyAhPT0gdm9pZCAwID8gbyA6IDAsXG4gICAgICBtaW51dGVzOiAobCA9IGcubWludXRlcykgIT09IG51bGwgJiYgbCAhPT0gdm9pZCAwID8gbCA6IDAsXG4gICAgICBzZWNvbmRzOiAocyA9IGcuc2Vjb25kcykgIT09IG51bGwgJiYgcyAhPT0gdm9pZCAwID8gcyA6IDAsXG4gICAgICBuZWdhdGl2ZTogKGggPSBnLm5lZ2F0aXZlKSAhPT0gbnVsbCAmJiBoICE9PSB2b2lkIDAgPyBoIDogITFcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgZHVyYXRpb24gdG8gYSBzdHJpbmcgaW4gdGhlIElTTyA4NjAxIGR1cmF0aW9uIGZvcm1hdC5cbiAgICogQHJldHVybnMgVGhlIHNlcmlhbGl6ZWQgZHVyYXRpb24uXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gcHQuc2VyaWFsaXplKHRoaXMpO1xuICB9XG59XG5jbGFzcyBlZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFRpbWVPbmx5IGZyb20gdGhlIGdpdmVuIHBhcmFtZXRlcnMuXG4gICAqIEByZXR1cm5zIFRoZSBuZXcgVGltZU9ubHlcbiAgICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgbWlsbGlzZWNvbmRzIGFyZSBpbnZhbGlkXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIHNlY29uZHMgYXJlIGludmFsaWRcbiAgICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgbWludXRlcyBhcmUgaW52YWxpZFxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSBob3VycyBhcmUgaW52YWxpZFxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSBtaWxsaXNlY29uZHMgYXJlIGludmFsaWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgaG91cnM6IGUgPSAwLCBtaW51dGVzOiByID0gMCwgc2Vjb25kczogbiA9IDAsIHBpY29zZWNvbmRzOiBhID0gMCB9KSB7XG4gICAgaWYgKGUgPCAwIHx8IGUgPiAyMylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkhvdXIgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDIzXCIpO1xuICAgIGlmIChyIDwgMCB8fCByID4gNTkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaW51dGUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDU5XCIpO1xuICAgIGlmIChuIDwgMCB8fCBuID4gNTkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWNvbmQgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDU5XCIpO1xuICAgIGlmIChhIDwgMCB8fCBhID4gOTk5OTk5OTk5OTk5KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlsbGlzZWNvbmQgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDk5OTk5OTk5OTk5OVwiKTtcbiAgICB0aGlzLmhvdXJzID0gZSwgdGhpcy5taW51dGVzID0gciwgdGhpcy5zZWNvbmRzID0gbiwgdGhpcy5waWNvc2Vjb25kcyA9IGE7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgVGltZU9ubHkgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAgICogQHBhcmFtIGRhdGUgVGhlIGRhdGVcbiAgICogQHJldHVybnMgVGhlIG5ldyBUaW1lT25seVxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSBkYXRlIGlzIGludmFsaWRcbiAgICovXG4gIHN0YXRpYyBmcm9tRGF0ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0ZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIHJldHVybiBuZXcgZWUoe1xuICAgICAgaG91cnM6IGUuZ2V0SG91cnMoKSxcbiAgICAgIG1pbnV0ZXM6IGUuZ2V0TWludXRlcygpLFxuICAgICAgc2Vjb25kczogZS5nZXRTZWNvbmRzKCksXG4gICAgICBwaWNvc2Vjb25kczogZS5nZXRNaWxsaXNlY29uZHMoKSAqIDFlOVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSBzdHJpbmcgaW50byBhIFRpbWVPbmx5LiBUaGUgc3RyaW5nIGNhbiBiZSBvZiB0aGUgSVNPIDg2MDEgdGltZSBvbmx5IGZvcm1hdCBvciBhIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHRpY2tzIG9mIGEgRGF0ZS5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBwYXJzZVxuICAgKiBAcmV0dXJucyBUaGUgcGFyc2VkIFRpbWVPbmx5LlxuICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSB2YWx1ZSBpcyBpbnZhbGlkXG4gICAqL1xuICBzdGF0aWMgcGFyc2UoZSkge1xuICAgIHZhciByLCBuLCBhLCBpLCBvLCBsLCBzLCBoO1xuICAgIGlmICghZSB8fCBlLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBnID0gRGF0ZS5wYXJzZShlKTtcbiAgICBpZiAoaXNOYU4oZykpIHtcbiAgICAgIGNvbnN0IGIgPSAvXig/PGhvdXJzPlswMV1cXGR8MlswLTNdKTooPzxtaW51dGVzPlswLTVdXFxkKTooPzxzZWNvbmRzPlswLTVdXFxkKSg/OlsuXSg/PG1pbGxpc2Vjb25kcz5cXGR7MSwxMn0pKT8kL2dpLmV4ZWMoZSk7XG4gICAgICBpZiAoYikge1xuICAgICAgICBjb25zdCBkID0gcGFyc2VJbnQoKG4gPSAociA9IGIuZ3JvdXBzKSA9PT0gbnVsbCB8fCByID09PSB2b2lkIDAgPyB2b2lkIDAgOiByLmhvdXJzKSAhPT0gbnVsbCAmJiBuICE9PSB2b2lkIDAgPyBuIDogXCJcIiksIGYgPSBwYXJzZUludCgoaSA9IChhID0gYi5ncm91cHMpID09PSBudWxsIHx8IGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGEubWludXRlcykgIT09IG51bGwgJiYgaSAhPT0gdm9pZCAwID8gaSA6IFwiXCIpLCBfID0gcGFyc2VJbnQoKGwgPSAobyA9IGIuZ3JvdXBzKSA9PT0gbnVsbCB8fCBvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvLnNlY29uZHMpICE9PSBudWxsICYmIGwgIT09IHZvaWQgMCA/IGwgOiBcIlwiKSwgdiA9IHBhcnNlSW50KChoID0gKHMgPSBiLmdyb3VwcykgPT09IG51bGwgfHwgcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcy5taWxsaXNlY29uZHMpICE9PSBudWxsICYmIGggIT09IHZvaWQgMCA/IGggOiBcIjBcIik7XG4gICAgICAgIHJldHVybiBuZXcgZWUoe1xuICAgICAgICAgIGhvdXJzOiBkLFxuICAgICAgICAgIG1pbnV0ZXM6IGYsXG4gICAgICAgICAgc2Vjb25kczogXyxcbiAgICAgICAgICBwaWNvc2Vjb25kczogdlxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWx1ZSBpcyBub3QgYSB2YWxpZCB0aW1lLW9ubHkgcmVwcmVzZW50YXRpb25cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGIgPSBuZXcgRGF0ZShnKTtcbiAgICAgIHJldHVybiB0aGlzLmZyb21EYXRlKGIpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGltZSBpbiB0aGUgZm9ybWF0IEhIOk1NOlNTLlNTU1NTU1NTU1NTU1NTXG4gICAqIEByZXR1cm5zIFRoZSB0aW1lIGluIHRoZSBmb3JtYXQgSEg6TU06U1MuU1NTU1NTU1NTU1NTU1NcbiAgICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgdGltZSBpcyBpbnZhbGlkXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYCR7USh0aGlzLmhvdXJzLCAyKX06JHtRKHRoaXMubWludXRlcywgMil9OiR7USh0aGlzLnNlY29uZHMsIDIpfS4ke1EodGhpcy5waWNvc2Vjb25kcywgMTIpfWA7XG4gIH1cbn1cbmNsYXNzIFMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnBhdGhQYXJhbWV0ZXJzID0ge30sIHRoaXMucXVlcnlQYXJhbWV0ZXJzID0ge30sIHRoaXMuaGVhZGVycyA9IHt9LCB0aGlzLl9yZXF1ZXN0T3B0aW9ucyA9IHt9LCB0aGlzLnNldENvbnRlbnRGcm9tUGFyc2FibGUgPSAoZSwgciwgbikgPT4ge1xuICAgICAgeGUuZ2V0VHJhY2VyKFMudHJhY2VyS2V5KS5zdGFydEFjdGl2ZVNwYW4oXCJzZXRDb250ZW50RnJvbVBhcnNhYmxlXCIsIChhKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgaSA9IHRoaXMuZ2V0U2VyaWFsaXphdGlvbldyaXRlcihlLCByLCBuKTtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMgfHwgKHRoaXMuaGVhZGVycyA9IHt9KSwgQXJyYXkuaXNBcnJheShuKSA/IChhLnNldEF0dHJpYnV0ZShTLnJlcXVlc3RUeXBlS2V5LCBcIm9iamVjdFtdXCIpLCBpLndyaXRlQ29sbGVjdGlvbk9mT2JqZWN0VmFsdWVzKHZvaWQgMCwgbikpIDogKGEuc2V0QXR0cmlidXRlKFMucmVxdWVzdFR5cGVLZXksIFwib2JqZWN0XCIpLCBpLndyaXRlT2JqZWN0VmFsdWUodm9pZCAwLCBuKSksIHRoaXMuc2V0Q29udGVudEFuZENvbnRlbnRUeXBlKGksIHIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGEuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIHRoaXMuc2V0Q29udGVudEFuZENvbnRlbnRUeXBlID0gKGUsIHIpID0+IHtcbiAgICAgIHIgJiYgKHRoaXMuaGVhZGVyc1tTLmNvbnRlbnRUeXBlSGVhZGVyXSA9IFtyXSksIHRoaXMuY29udGVudCA9IGUuZ2V0U2VyaWFsaXplZENvbnRlbnQoKTtcbiAgICB9LCB0aGlzLmdldFNlcmlhbGl6YXRpb25Xcml0ZXIgPSAoZSwgciwgLi4ubikgPT4ge1xuICAgICAgaWYgKCFlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJodHRwQ29yZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgICAgaWYgKCFyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb250ZW50VHlwZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgICAgaWYgKCFuIHx8IG4ubGVuZ3RoID09PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZXMgY2Fubm90IGJlIHVuZGVmaW5lZCBvciBlbXB0eVwiKTtcbiAgICAgIHJldHVybiBlLmdldFNlcmlhbGl6YXRpb25Xcml0ZXJGYWN0b3J5KCkuZ2V0U2VyaWFsaXphdGlvbldyaXRlcihyKTtcbiAgICB9LCB0aGlzLnNldENvbnRlbnRGcm9tU2NhbGFyID0gKGUsIHIsIG4pID0+IHtcbiAgICAgIHhlLmdldFRyYWNlcihTLnRyYWNlcktleSkuc3RhcnRBY3RpdmVTcGFuKFwic2V0Q29udGVudEZyb21TY2FsYXJcIiwgKGEpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBpID0gdGhpcy5nZXRTZXJpYWxpemF0aW9uV3JpdGVyKGUsIHIsIG4pO1xuICAgICAgICAgIGlmICh0aGlzLmhlYWRlcnMgfHwgKHRoaXMuaGVhZGVycyA9IHt9KSwgQXJyYXkuaXNBcnJheShuKSlcbiAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKFMucmVxdWVzdFR5cGVLZXksIFwiW11cIiksIGkud3JpdGVDb2xsZWN0aW9uT2ZQcmltaXRpdmVWYWx1ZXModm9pZCAwLCBuKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG8gPSB0eXBlb2YgbjtcbiAgICAgICAgICAgIGlmIChhLnNldEF0dHJpYnV0ZShTLnJlcXVlc3RUeXBlS2V5LCBvKSwgIW4pXG4gICAgICAgICAgICAgIGkud3JpdGVOdWxsVmFsdWUodm9pZCAwKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG8gPT09IFwiYm9vbGVhblwiKVxuICAgICAgICAgICAgICBpLndyaXRlQm9vbGVhblZhbHVlKHZvaWQgMCwgbik7XG4gICAgICAgICAgICBlbHNlIGlmIChvID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICBpLndyaXRlU3RyaW5nVmFsdWUodm9pZCAwLCBuKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBEYXRlKVxuICAgICAgICAgICAgICBpLndyaXRlRGF0ZVZhbHVlKHZvaWQgMCwgbik7XG4gICAgICAgICAgICBlbHNlIGlmIChuIGluc3RhbmNlb2YgSilcbiAgICAgICAgICAgICAgaS53cml0ZURhdGVPbmx5VmFsdWUodm9pZCAwLCBuKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBlZSlcbiAgICAgICAgICAgICAgaS53cml0ZVRpbWVPbmx5VmFsdWUodm9pZCAwLCBuKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBsZSlcbiAgICAgICAgICAgICAgaS53cml0ZUR1cmF0aW9uVmFsdWUodm9pZCAwLCBuKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG8gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgIGkud3JpdGVOdW1iZXJWYWx1ZSh2b2lkIDAsIG4pO1xuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShuKSlcbiAgICAgICAgICAgICAgaS53cml0ZUNvbGxlY3Rpb25PZlByaW1pdGl2ZVZhbHVlcyh2b2lkIDAsIG4pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGVuY291bnRlcmVkIHVua25vd24gdmFsdWUgdHlwZSBkdXJpbmcgc2VyaWFsaXphdGlvbiAke299YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2V0Q29udGVudEFuZENvbnRlbnRUeXBlKGksIHIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGEuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIHRoaXMuc2V0U3RyZWFtQ29udGVudCA9IChlKSA9PiB7XG4gICAgICB0aGlzLmhlYWRlcnNbUy5jb250ZW50VHlwZUhlYWRlcl0gPSBbXG4gICAgICAgIFMuYmluYXJ5Q29udGVudFR5cGVcbiAgICAgIF0sIHRoaXMuY29udGVudCA9IGU7XG4gICAgfSwgdGhpcy5zZXRRdWVyeVN0cmluZ1BhcmFtZXRlcnNGcm9tUmF3T2JqZWN0ID0gKGUpID0+IHtcbiAgICAgIGUgJiYgT2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoW3IsIG5dKSA9PiB7XG4gICAgICAgIGxldCBhID0gcjtcbiAgICAgICAgaWYgKGUuZ2V0UXVlcnlQYXJhbWV0ZXIpIHtcbiAgICAgICAgICBjb25zdCBpID0gZS5nZXRRdWVyeVBhcmFtZXRlcihhKTtcbiAgICAgICAgICBpICYmIChhID0gaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5xdWVyeVBhcmFtZXRlcnNbYV0gPSBuO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuICAvKiogR2V0cyB0aGUgVVJMIG9mIHRoZSByZXF1ZXN0ICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gIGdldCBVUkwoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMucGF0aFBhcmFtZXRlcnNbUy5yYXdfdXJsX2tleV07XG4gICAgaWYgKHRoaXMudXJpKVxuICAgICAgcmV0dXJuIHRoaXMudXJpO1xuICAgIGlmIChlKVxuICAgICAgcmV0dXJuIHRoaXMuVVJMID0gZSwgZTtcbiAgICBpZiAodGhpcy5xdWVyeVBhcmFtZXRlcnMpXG4gICAgICBpZiAodGhpcy5wYXRoUGFyYW1ldGVycylcbiAgICAgICAgaWYgKHRoaXMudXJsVGVtcGxhdGUpIHtcbiAgICAgICAgICBjb25zdCByID0gbmV3IEpyLlVSSS5UZW1wbGF0ZSh0aGlzLnVybFRlbXBsYXRlKSwgbiA9IHt9O1xuICAgICAgICAgIGZvciAoY29uc3QgYSBpbiB0aGlzLnF1ZXJ5UGFyYW1ldGVycylcbiAgICAgICAgICAgIHRoaXMucXVlcnlQYXJhbWV0ZXJzW2FdICYmIChuW2FdID0gdGhpcy5xdWVyeVBhcmFtZXRlcnNbYV0pO1xuICAgICAgICAgIGZvciAoY29uc3QgYSBpbiB0aGlzLnBhdGhQYXJhbWV0ZXJzKVxuICAgICAgICAgICAgdGhpcy5wYXRoUGFyYW1ldGVyc1thXSAmJiAoblthXSA9IHRoaXMucGF0aFBhcmFtZXRlcnNbYV0pO1xuICAgICAgICAgIHJldHVybiByLmV4cGFuZChuKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsVGVtcGxhdGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGF0aFBhcmFtZXRlcnMgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlbHNlXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJxdWVyeVBhcmFtZXRlcnMgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgfVxuICAvKiogU2V0cyB0aGUgVVJMIG9mIHRoZSByZXF1ZXN0ICovXG4gIHNldCBVUkwoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVSTCBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIHRoaXMudXJpID0gZSwgdGhpcy5xdWVyeVBhcmFtZXRlcnMgPSB7fSwgdGhpcy5wYXRoUGFyYW1ldGVycyA9IHt9O1xuICB9XG4gIC8qKiBHZXRzIHRoZSByZXF1ZXN0IG9wdGlvbnMgZm9yIHRoZSByZXF1ZXN0LiAqL1xuICBnZXRSZXF1ZXN0T3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdE9wdGlvbnM7XG4gIH1cbiAgLyoqIEFkZHMgdGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0LiAqL1xuICBhZGRSZXF1ZXN0SGVhZGVycyhlKSB7XG4gICAgaWYgKGUpXG4gICAgICBmb3IgKGNvbnN0IHIgaW4gZSlcbiAgICAgICAgdGhpcy5oZWFkZXJzW3JdID0gZVtyXTtcbiAgfVxuICAvKiogQWRkcyB0aGUgcmVxdWVzdCBvcHRpb25zIGZvciB0aGUgcmVxdWVzdC4gKi9cbiAgYWRkUmVxdWVzdE9wdGlvbnMoZSkge1xuICAgICFlIHx8IGUubGVuZ3RoID09PSAwIHx8IGUuZm9yRWFjaCgocikgPT4ge1xuICAgICAgdGhpcy5fcmVxdWVzdE9wdGlvbnNbci5nZXRLZXkoKV0gPSByO1xuICAgIH0pO1xuICB9XG4gIC8qKiBSZW1vdmVzIHRoZSByZXF1ZXN0IG9wdGlvbnMgZm9yIHRoZSByZXF1ZXN0LiAqL1xuICByZW1vdmVSZXF1ZXN0T3B0aW9ucyguLi5lKSB7XG4gICAgIWUgfHwgZS5sZW5ndGggPT09IDAgfHwgZS5mb3JFYWNoKChyKSA9PiB7XG4gICAgICBkZWxldGUgdGhpcy5fcmVxdWVzdE9wdGlvbnNbci5nZXRLZXkoKV07XG4gICAgfSk7XG4gIH1cbn1cblMucmF3X3VybF9rZXkgPSBcInJlcXVlc3QtcmF3LXVybFwiO1xuUy5iaW5hcnlDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI7XG5TLmNvbnRlbnRUeXBlSGVhZGVyID0gXCJDb250ZW50LVR5cGVcIjtcblMudHJhY2VyS2V5ID0gXCJAbWljcm9zb2Z0L2tpb3RhLWFic3RyYWN0aW9uc1wiO1xuUy5yZXF1ZXN0VHlwZUtleSA9IFwiY29tLm1pY3Jvc29mdC5raW90YS5yZXF1ZXN0LnR5cGVcIjtcbmZ1bmN0aW9uIEYodCkge1xuICBjb25zdCBlID0ge307XG4gIGlmICh0eXBlb2YgdCA9PSBcInN0cmluZ1wiKVxuICAgIGVbUy5yYXdfdXJsX2tleV0gPSB0O1xuICBlbHNlIGlmICh0KVxuICAgIGZvciAoY29uc3QgciBpbiB0KVxuICAgICAgZVtyXSA9IHRbcl07XG4gIHJldHVybiBlO1xufVxuY2xhc3MgTmEge1xuICBjb25zdHJ1Y3RvcihlLCByLCBuKSB7XG4gICAgaWYgKCFyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEFkYXB0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBpZiAobiA9PT0gdm9pZCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsVGVtcGxhdGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICB0aGlzLnBhdGhQYXJhbWV0ZXJzID0gRihlKSwgdGhpcy5yZXF1ZXN0QWRhcHRlciA9IHIsIHRoaXMudXJsVGVtcGxhdGUgPSBuO1xuICB9XG59XG52YXIgQjtcbihmdW5jdGlvbih0KSB7XG4gIHQuR0VUID0gXCJHRVRcIiwgdC5QT1NUID0gXCJQT1NUXCIsIHQuUEFUQ0ggPSBcIlBBVENIXCIsIHQuREVMRVRFID0gXCJERUxFVEVcIiwgdC5PUFRJT05TID0gXCJPUFRJT05TXCIsIHQuQ09OTkVDVCA9IFwiQ09OTkVDVFwiLCB0LlRSQUNFID0gXCJUUkFDRVwiLCB0LkhFQUQgPSBcIkhFQURcIiwgdC5QVVQgPSBcIlBVVFwiO1xufSkoQiB8fCAoQiA9IHt9KSk7XG5jbGFzcyBTdCB7XG4gIGhhbmRsZVJlc3BvbnNlQXN5bmMoZSwgcikge1xuICAgIHJldHVybiB0aGlzLnZhbHVlID0gZSwgdGhpcy5lcnJvck1hcHBpbmdzID0gciwgUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7XG4gIH1cbn1cbmNsYXNzIE50IHtcbn1cbk50LkNhbGxBbmRHZXROYXRpdmUgPSBhc3luYyAodCwgZSwgciwgbikgPT4ge1xuICBjb25zdCBhID0gbmV3IFN0KCk7XG4gIHJldHVybiBhd2FpdCB0KGUsIHIsIG4sIGEpLCBhLnZhbHVlO1xufTtcbk50LkNhbGxBbmRHZXROYXRpdmVXaXRoQm9keSA9IGFzeW5jICh0LCBlLCByLCBuLCBhKSA9PiB7XG4gIGNvbnN0IGkgPSBuZXcgU3QoKTtcbiAgcmV0dXJuIGF3YWl0IHQoZSwgciwgbiwgYSwgaSksIGkudmFsdWU7XG59O1xuZnVuY3Rpb24ganIodCkge1xuICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA+IDAgPyB0LnN1YnN0cmluZygwLCAxKS50b0xvY2FsZVVwcGVyQ2FzZSgpICsgdC5zdWJzdHJpbmcoMSkgOiBcIlwiO1xufVxuY29uc3QgQ2EgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBbGxvd2VkSG9zdHNWYWxpZGF0b3I6IHd0LFxuICBBbm9ueW1vdXNBdXRoZW50aWNhdGlvblByb3ZpZGVyOiB2cixcbiAgQXBpRXJyb3I6IGosXG4gIEFwaUtleUF1dGhlbnRpY2F0aW9uUHJvdmlkZXI6IGNuLFxuICBnZXQgQXBpS2V5TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGFlO1xuICB9LFxuICBCYWNraW5nU3RvcmVGYWN0b3J5U2luZ2xldG9uOiBfcixcbiAgQmFja2luZ1N0b3JlUGFyc2VOb2RlRmFjdG9yeTogcWUsXG4gIEJhY2tpbmdTdG9yZVNlcmlhbGl6YXRpb25Xcml0ZXJQcm94eUZhY3Rvcnk6IFVlLFxuICBCYXNlQmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblByb3ZpZGVyOiBZLFxuICBCYXNlUmVxdWVzdEJ1aWxkZXI6IE5hLFxuICBEYXRlT25seTogSixcbiAgRHVyYXRpb246IGxlLFxuICBnZXQgSHR0cE1ldGhvZCgpIHtcbiAgICByZXR1cm4gQjtcbiAgfSxcbiAgSW5NZW1vcnlCYWNraW5nU3RvcmU6IG1yLFxuICBJbk1lbW9yeUJhY2tpbmdTdG9yZUZhY3Rvcnk6IHdyLFxuICBOYXRpdmVSZXNwb25zZUhhbmRsZXI6IFN0LFxuICBOYXRpdmVSZXNwb25zZVdyYXBwZXI6IE50LFxuICBQYXJzZU5vZGVGYWN0b3J5UmVnaXN0cnk6IFosXG4gIFBhcnNlTm9kZVByb3h5RmFjdG9yeTogZ3IsXG4gIFJlcXVlc3RJbmZvcm1hdGlvbjogUyxcbiAgU2VyaWFsaXphdGlvbldyaXRlckZhY3RvcnlSZWdpc3RyeTogb2UsXG4gIFNlcmlhbGl6YXRpb25Xcml0ZXJQcm94eUZhY3Rvcnk6IHlyLFxuICBUaW1lT25seTogZWUsXG4gIGVuYWJsZUJhY2tpbmdTdG9yZUZvclBhcnNlTm9kZUZhY3Rvcnk6IHVuLFxuICBlbmFibGVCYWNraW5nU3RvcmVGb3JTZXJpYWxpemF0aW9uV3JpdGVyRmFjdG9yeTogbG4sXG4gIGZvcm1hdFNlZ21lbnQ6IFEsXG4gIGdldFBhdGhQYXJhbWV0ZXJzOiBGLFxuICByZWdpc3RlckRlZmF1bHREZXNlcmlhbGl6ZXI6IG10LFxuICByZWdpc3RlckRlZmF1bHRTZXJpYWxpemVyOiB5dCxcbiAgdG9GaXJzdENoYXJhY3RlclVwcGVyOiBqcixcbiAgdmFsaWRhdGVQcm90b2NvbDogYnJcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KSksIEN0ID0gLyogQF9fUFVSRV9fICovIHByKENhKSwgY2UgPSAvKiBAX19QVVJFX18gKi8gcHIoU2EpO1xudmFyIHllID0ge30sIG1lID0ge30sIEx0O1xuZnVuY3Rpb24gVnQoKSB7XG4gIGlmIChMdClcbiAgICByZXR1cm4gbWU7XG4gIEx0ID0gMSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1lLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIG1lLkN1c3RvbUZldGNoSGFuZGxlciA9IHZvaWQgMDtcbiAgY29uc3QgdCA9ICQ7XG4gIGNsYXNzIGUge1xuICAgIGNvbnN0cnVjdG9yKG4pIHtcbiAgICAgIHRoaXMuY3VzdG9tRmV0Y2ggPSBuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICogQGFzeW5jXG4gICAgICogVG8gZXhlY3V0ZSB0aGUgY3VycmVudCBtaWRkbGV3YXJlXG4gICAgICogQHBhcmFtIHtDb250ZXh0fSBjb250ZXh0IC0gVGhlIHJlcXVlc3QgY29udGV4dCBvYmplY3RcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBub3RoaW5nXG4gICAgICovXG4gICAgZXhlY3V0ZShuLCBhKSB7XG4gICAgICByZXR1cm4gdC5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmN1c3RvbUZldGNoKG4sIGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZS5DdXN0b21GZXRjaEhhbmRsZXIgPSBlLCBtZTtcbn1cbnZhciB3ZSA9IHt9LCBPZSA9IHt9LCBWYSA9IHtcbiAgZ2V0IGV4cG9ydHMoKSB7XG4gICAgcmV0dXJuIE9lO1xuICB9LFxuICBzZXQgZXhwb3J0cyh0KSB7XG4gICAgT2UgPSB0O1xuICB9XG59LCBLdDtcbmZ1bmN0aW9uIE1hKCkge1xuICByZXR1cm4gS3QgfHwgKEt0ID0gMSwgZnVuY3Rpb24odCwgZSkge1xuICAgIHZhciByID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodHlwZW9mIHNlbGYgPCBcInVcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyA8IFwidVwiKVxuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgaWYgKHR5cGVvZiBuIDwgXCJ1XCIpXG4gICAgICAgIHJldHVybiBuO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0XCIpO1xuICAgIH0sIG4gPSByKCk7XG4gICAgdC5leHBvcnRzID0gZSA9IG4uZmV0Y2gsIG4uZmV0Y2ggJiYgKGUuZGVmYXVsdCA9IG4uZmV0Y2guYmluZChuKSksIGUuSGVhZGVycyA9IG4uSGVhZGVycywgZS5SZXF1ZXN0ID0gbi5SZXF1ZXN0LCBlLlJlc3BvbnNlID0gbi5SZXNwb25zZTtcbiAgfShWYSwgT2UpKSwgT2U7XG59XG52YXIgX2UgPSB7fSwgUWUgPSB7fSwgR3Q7XG5mdW5jdGlvbiBoZSgpIHtcbiAgcmV0dXJuIEd0IHx8IChHdCA9IDEsIGZ1bmN0aW9uKHQpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCB0LmdldE9ic2VydmFiaWxpdHlPcHRpb25zRnJvbVJlcXVlc3QgPSB0Lk9ic2VydmFiaWxpdHlPcHRpb25zSW1wbCA9IHQuT2JzZXJ2YWJpbGl0eU9wdGlvbktleSA9IHZvaWQgMCwgdC5PYnNlcnZhYmlsaXR5T3B0aW9uS2V5ID0gXCJPYnNlcnZhYmlsaXR5T3B0aW9uS2V5XCI7XG4gICAgY2xhc3MgZSB7XG4gICAgICBjb25zdHJ1Y3RvcihhKSB7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsT3B0aW9ucyA9IGEgPz8ge307XG4gICAgICB9XG4gICAgICBnZXRLZXkoKSB7XG4gICAgICAgIHJldHVybiB0Lk9ic2VydmFiaWxpdHlPcHRpb25LZXk7XG4gICAgICB9XG4gICAgICBnZXQgaW5jbHVkZUVVSUlBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZ2luYWxPcHRpb25zLmluY2x1ZGVFVUlJQXR0cmlidXRlcztcbiAgICAgIH1cbiAgICAgIHNldCBpbmNsdWRlRVVJSUF0dHJpYnV0ZXMoYSkge1xuICAgICAgICB0aGlzLl9vcmlnaW5hbE9wdGlvbnMuaW5jbHVkZUVVSUlBdHRyaWJ1dGVzID0gYTtcbiAgICAgIH1cbiAgICAgIGdldFRyYWNlckluc3RydW1lbnRhdGlvbk5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkBtaWNyb3NvZnQva2lvdGEtaHR0cC1mZXRjaGxpYnJhcnlcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgdC5PYnNlcnZhYmlsaXR5T3B0aW9uc0ltcGwgPSBlO1xuICAgIGZ1bmN0aW9uIHIobikge1xuICAgICAgaWYgKG4pIHtcbiAgICAgICAgY29uc3QgYSA9IG5bdC5PYnNlcnZhYmlsaXR5T3B0aW9uS2V5XTtcbiAgICAgICAgaWYgKGEgaW5zdGFuY2VvZiBlKVxuICAgICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH1cbiAgICB0LmdldE9ic2VydmFiaWxpdHlPcHRpb25zRnJvbVJlcXVlc3QgPSByO1xuICB9KFFlKSksIFFlO1xufVxudmFyIFplID0ge30sIGt0O1xuZnVuY3Rpb24gcXIoKSB7XG4gIHJldHVybiBrdCB8fCAoa3QgPSAxLCBmdW5jdGlvbih0KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgdC5QYXJhbWV0ZXJzTmFtZURlY29kaW5nSGFuZGxlck9wdGlvbnMgPSB0LlBhcmFtZXRlcnNOYW1lRGVjb2RpbmdIYW5kbGVyT3B0aW9uc0tleSA9IHZvaWQgMCwgdC5QYXJhbWV0ZXJzTmFtZURlY29kaW5nSGFuZGxlck9wdGlvbnNLZXkgPSBcIlJldHJ5SGFuZGxlck9wdGlvbktleVwiO1xuICAgIGNsYXNzIGUge1xuICAgICAgZ2V0S2V5KCkge1xuICAgICAgICByZXR1cm4gdC5QYXJhbWV0ZXJzTmFtZURlY29kaW5nSGFuZGxlck9wdGlvbnNLZXk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICogVG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIFBhcmFtZXRlcnNOYW1lRGVjb2RpbmdIYW5kbGVyT3B0aW9uc1xuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbZW5hYmxlID0gdHJ1ZV0gLSBXaGV0aGVyIHRvIGRlY29kZSB0aGUgc3BlY2lmaWVkIGNoYXJhY3RlcnMgaW4gdGhlIHJlcXVlc3QgcXVlcnkgcGFyYW1ldGVycyBuYW1lc1xuICAgICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2NoYXJhY3RlcnNUb0RlY29kZSA9IFtcIi5cIiwgXCItXCIsIFwiflwiLCBcIiRcIl1dIC0gVGhlIGNoYXJhY3RlcnMgdG8gZGVjb2RlXG4gICAgICAgKi9cbiAgICAgIGNvbnN0cnVjdG9yKG4gPSAhMCwgYSA9IFtcIi5cIiwgXCItXCIsIFwiflwiLCBcIiRcIl0pIHtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBuLCB0aGlzLmNoYXJhY3RlcnNUb0RlY29kZSA9IGE7XG4gICAgICB9XG4gICAgfVxuICAgIHQuUGFyYW1ldGVyc05hbWVEZWNvZGluZ0hhbmRsZXJPcHRpb25zID0gZTtcbiAgfShaZSkpLCBaZTtcbn1cbnZhciAkdDtcbmZ1bmN0aW9uIFVyKCkge1xuICBpZiAoJHQpXG4gICAgcmV0dXJuIF9lO1xuICAkdCA9IDEsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBfZS5QYXJhbWV0ZXJzTmFtZURlY29kaW5nSGFuZGxlciA9IHZvaWQgMDtcbiAgY29uc3QgdCA9IGNlLCBlID0gaGUoKSwgciA9IHFyKCk7XG4gIGNsYXNzIG4ge1xuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBUbyBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgUGFyYW1ldGVyc05hbWVEZWNvZGluZ0hhbmRsZXJcbiAgICAgKiBAcGFyYW0ge1BhcmFtZXRlcnNOYW1lRGVjb2RpbmdIYW5kbGVyT3B0aW9uc30gW29wdGlvbnMgPSBuZXcgUGFyYW1ldGVyc05hbWVEZWNvZGluZ0hhbmRsZXJPcHRpb25zKCldIC0gVGhlIHBhcmFtZXRlcnMgbmFtZSBkZWNvZGluZyBoYW5kbGVyIG9wdGlvbnMgdmFsdWVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpID0gbmV3IHIuUGFyYW1ldGVyc05hbWVEZWNvZGluZ0hhbmRsZXJPcHRpb25zKCkpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMgPSBpLCAhaSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhc3luY1xuICAgICAqIFRvIGV4ZWN1dGUgdGhlIGN1cnJlbnQgbWlkZGxld2FyZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgdXJsIHRvIGJlIGZldGNoZWRcbiAgICAgKiBAcGFyYW0ge0ZldGNoUmVxdWVzdEluaXR9IHJlcXVlc3RJbml0IC0gVGhlIHJlcXVlc3QgaW5pdCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIFJlcXVlc3RPcHRpb24+fSBbcmVxdWVzdE9wdGlvbnNdIC0gVGhlIHJlcXVlc3Qgb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIG5vdGhpbmdcbiAgICAgKi9cbiAgICBleGVjdXRlKGksIG8sIGwpIHtcbiAgICAgIGxldCBzID0gdGhpcy5vcHRpb25zO1xuICAgICAgbCAmJiBsW3IuUGFyYW1ldGVyc05hbWVEZWNvZGluZ0hhbmRsZXJPcHRpb25zS2V5XSAmJiAocyA9IGxbci5QYXJhbWV0ZXJzTmFtZURlY29kaW5nSGFuZGxlck9wdGlvbnNLZXldKTtcbiAgICAgIGNvbnN0IGggPSAoMCwgZS5nZXRPYnNlcnZhYmlsaXR5T3B0aW9uc0Zyb21SZXF1ZXN0KShsKTtcbiAgICAgIHJldHVybiBoID8gdC50cmFjZS5nZXRUcmFjZXIoaC5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihcInBhcmFtZXRlcnNOYW1lRGVjb2RpbmdIYW5kbGVyIC0gZXhlY3V0ZVwiLCAoZykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBnLnNldEF0dHJpYnV0ZShcImNvbS5taWNyb3NvZnQua2lvdGEuaGFuZGxlci5wYXJhbWV0ZXJzX25hbWVfZGVjb2RpbmcuZW5hYmxlXCIsIHMuZW5hYmxlKSwgdGhpcy5kZWNvZGVQYXJhbWV0ZXJzKGksIG8sIHMsIGwpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGcuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0pIDogdGhpcy5kZWNvZGVQYXJhbWV0ZXJzKGksIG8sIHMsIGwpO1xuICAgIH1cbiAgICBkZWNvZGVQYXJhbWV0ZXJzKGksIG8sIGwsIHMpIHtcbiAgICAgIHZhciBoLCBnO1xuICAgICAgbGV0IGIgPSBpO1xuICAgICAgcmV0dXJuIGwgJiYgbC5lbmFibGUgJiYgaS5pbmRleE9mKFwiJVwiKSA+IC0xICYmIGwuY2hhcmFjdGVyc1RvRGVjb2RlICYmIGwuY2hhcmFjdGVyc1RvRGVjb2RlLmxlbmd0aCA+IDAgJiYgbC5jaGFyYWN0ZXJzVG9EZWNvZGUuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBiID0gYi5yZXBsYWNlKG5ldyBSZWdFeHAoYCUke2QuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNil9YCwgXCJnaVwiKSwgZCk7XG4gICAgICB9KSwgKGcgPSAoaCA9IHRoaXMubmV4dCkgPT09IG51bGwgfHwgaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaC5leGVjdXRlKGIsIG8sIHMpKSAhPT0gbnVsbCAmJiBnICE9PSB2b2lkIDAgPyBnIDogUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVGhlIG5leHQgbWlkZGxld2FyZSBpcyBub3Qgc2V0LlwiKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBfZS5QYXJhbWV0ZXJzTmFtZURlY29kaW5nSGFuZGxlciA9IG4sIF9lO1xufVxudmFyIGJlID0ge30sIEplID0ge30sIFh0O1xuZnVuY3Rpb24genIoKSB7XG4gIHJldHVybiBYdCB8fCAoWHQgPSAxLCBmdW5jdGlvbih0KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgdC5SZWRpcmVjdEhhbmRsZXJPcHRpb25zID0gdC5SZWRpcmVjdEhhbmRsZXJPcHRpb25LZXkgPSB2b2lkIDAsIHQuUmVkaXJlY3RIYW5kbGVyT3B0aW9uS2V5ID0gXCJSZWRpcmVjdEhhbmRsZXJPcHRpb25cIjtcbiAgICBjbGFzcyBlIHtcbiAgICAgIC8qKlxuICAgICAgICogQHB1YmxpY1xuICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgKiBUbyBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgUmVkaXJlY3RIYW5kbGVyT3B0aW9uc1xuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFttYXhSZWRpcmVjdHMgPSBSZWRpcmVjdEhhbmRsZXJPcHRpb25zLkRFRkFVTFRfTUFYX1JFRElSRUNUU10gLSBUaGUgbWF4IHJlZGlyZWN0cyB2YWx1ZVxuICAgICAgICogQHBhcmFtIHtTaG91bGRSZWRpcmVjdH0gW3Nob3VsZFJlZGlyZWN0ID0gUmVkaXJlY3RIYW5kbGVyT3B0aW9ucy5ERUZBVUxUX1NIT1VMRF9SRVRSWV0gLSBUaGUgc2hvdWxkIHJlZGlyZWN0IGNhbGxiYWNrXG4gICAgICAgKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBSZWRpcmVjdEhhbmRsZXJPcHRpb25zXG4gICAgICAgKi9cbiAgICAgIGNvbnN0cnVjdG9yKG4gPSBlLkRFRkFVTFRfTUFYX1JFRElSRUNUUywgYSA9IGUuZGVmYXVsdFNob3VsZFJldHJ5KSB7XG4gICAgICAgIGlmICh0aGlzLm1heFJlZGlyZWN0cyA9IG4sIHRoaXMuc2hvdWxkUmVkaXJlY3QgPSBhLCBuID4gZS5NQVhfTUFYX1JFRElSRUNUUykge1xuICAgICAgICAgIGNvbnN0IGkgPSBuZXcgRXJyb3IoYE1heFJlZGlyZWN0cyBzaG91bGQgbm90IGJlIG1vcmUgdGhhbiAke2UuTUFYX01BWF9SRURJUkVDVFN9YCk7XG4gICAgICAgICAgdGhyb3cgaS5uYW1lID0gXCJNYXhMaW1pdEV4Y2VlZGVkXCIsIGk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPCAwKSB7XG4gICAgICAgICAgY29uc3QgaSA9IG5ldyBFcnJvcihcIk1heFJlZGlyZWN0cyBzaG91bGQgbm90IGJlIG5lZ2F0aXZlXCIpO1xuICAgICAgICAgIHRocm93IGkubmFtZSA9IFwiTWluRXhwZWN0YXRpb25Ob3RNZXRcIiwgaTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heFJlZGlyZWN0cyA9IG4sIHRoaXMuc2hvdWxkUmVkaXJlY3QgPSBhO1xuICAgICAgfVxuICAgICAgZ2V0S2V5KCkge1xuICAgICAgICByZXR1cm4gdC5SZWRpcmVjdEhhbmRsZXJPcHRpb25LZXk7XG4gICAgICB9XG4gICAgfVxuICAgIHQuUmVkaXJlY3RIYW5kbGVyT3B0aW9ucyA9IGUsIGUuREVGQVVMVF9NQVhfUkVESVJFQ1RTID0gNSwgZS5NQVhfTUFYX1JFRElSRUNUUyA9IDIwLCBlLmRlZmF1bHRTaG91bGRSZXRyeSA9ICgpID0+ICEwO1xuICB9KEplKSksIEplO1xufVxudmFyIFd0O1xuZnVuY3Rpb24geHIoKSB7XG4gIGlmIChXdClcbiAgICByZXR1cm4gYmU7XG4gIFd0ID0gMSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJlLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIGJlLlJlZGlyZWN0SGFuZGxlciA9IHZvaWQgMDtcbiAgY29uc3QgdCA9ICQsIGUgPSBDdCwgciA9IGNlLCBuID0gaGUoKSwgYSA9IHpyKCk7XG4gIGNsYXNzIGkge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIFRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBSZWRpcmVjdEhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge1JlZGlyZWN0SGFuZGxlck9wdGlvbnN9IFtvcHRpb25zID0gbmV3IFJlZGlyZWN0SGFuZGxlck9wdGlvbnMoKV0gLSBUaGUgcmVkaXJlY3QgaGFuZGxlciBvcHRpb25zIGluc3RhbmNlXG4gICAgICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgUmVkaXJlY3RIYW5kbGVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobCA9IG5ldyBhLlJlZGlyZWN0SGFuZGxlck9wdGlvbnMoKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucyA9IGwsICFsKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFRvIGNoZWNrIHdoZXRoZXIgdGhlIHJlc3BvbnNlIGhhcyB0aGUgcmVkaXJlY3Qgc3RhdHVzIGNvZGUgb3Igbm90XG4gICAgICogQHBhcmFtIHtSZXNwb25zZX0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gICAgICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB3aGV0aGVyIHRoZSByZXNwb25zZSBjb250YWlucyB0aGUgcmVkaXJlY3Qgc3RhdHVzIGNvZGUgb3Igbm90XG4gICAgICovXG4gICAgaXNSZWRpcmVjdChsKSB7XG4gICAgICByZXR1cm4gaS5SRURJUkVDVF9TVEFUVVNfQ09ERVMuaGFzKGwuc3RhdHVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBUbyBjaGVjayB3aGV0aGVyIHRoZSByZXNwb25zZSBoYXMgbG9jYXRpb24gaGVhZGVyIG9yIG5vdFxuICAgICAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc3BvbnNlIC0gVGhlIHJlc3BvbnNlIG9iamVjdFxuICAgICAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHdoZXRoZXIgdGhlIHJlc3BvbnNlIGhhcyBsb2NhdGlvbiBoZWFkZXIgb3Igbm90XG4gICAgICovXG4gICAgaGFzTG9jYXRpb25IZWFkZXIobCkge1xuICAgICAgcmV0dXJuIGwuaGVhZGVycy5oYXMoaS5MT0NBVElPTl9IRUFERVIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFRvIGdldCB0aGUgcmVkaXJlY3QgdXJsIGZyb20gbG9jYXRpb24gaGVhZGVyIGluIHJlc3BvbnNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc3BvbnNlIC0gVGhlIHJlc3BvbnNlIG9iamVjdFxuICAgICAqIEByZXR1cm5zIEEgcmVkaXJlY3QgdXJsIGZyb20gbG9jYXRpb24gaGVhZGVyXG4gICAgICovXG4gICAgZ2V0TG9jYXRpb25IZWFkZXIobCkge1xuICAgICAgcmV0dXJuIGwuaGVhZGVycy5nZXQoaS5MT0NBVElPTl9IRUFERVIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFRvIGNoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIHVybCBpcyBhIHJlbGF0aXZlIHVybCBvciBub3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHVybCBzdHJpbmcgdmFsdWVcbiAgICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHdoZXRoZXIgdGhlIGdpdmVuIHVybCBpcyBhIHJlbGF0aXZlIHVybCBvciBub3RcbiAgICAgKi9cbiAgICBpc1JlbGF0aXZlVVJMKGwpIHtcbiAgICAgIHJldHVybiBsLmluZGV4T2YoXCI6Ly9cIikgPT09IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFRvIGNoZWNrIHdoZXRoZXIgdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyIGluIHRoZSByZXF1ZXN0IHNob3VsZCBiZSBkcm9wcGVkIGZvciBjb25zZXF1ZW50IHJlZGlyZWN0ZWQgcmVxdWVzdHNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdFVybCAtIFRoZSByZXF1ZXN0IHVybCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWRpcmVjdFVybCAtIFRoZSByZWRpcmVjdCB1cmwgdmFsdWVcbiAgICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHdoZXRoZXIgdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyIGluIHRoZSByZXF1ZXN0IHNob3VsZCBiZSBkcm9wcGVkIGZvciBjb25zZXF1ZW50IHJlZGlyZWN0ZWQgcmVxdWVzdHNcbiAgICAgKi9cbiAgICBzaG91bGREcm9wQXV0aG9yaXphdGlvbkhlYWRlcihsLCBzKSB7XG4gICAgICBjb25zdCBoID0gL15bQS1aYS16XS4rPzpcXC9cXC8uKz8oPz1cXC98JCkvLCBnID0gaC5leGVjKGwpO1xuICAgICAgbGV0IGIsIGQ7XG4gICAgICBnICE9PSBudWxsICYmIChiID0gZ1swXSk7XG4gICAgICBjb25zdCBmID0gaC5leGVjKHMpO1xuICAgICAgcmV0dXJuIGYgIT09IG51bGwgJiYgKGQgPSBmWzBdKSwgdHlwZW9mIGIgPCBcInVcIiAmJiB0eXBlb2YgZCA8IFwidVwiICYmIGIgIT09IGQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGFzeW5jXG4gICAgICogVG8gZXhlY3V0ZSB0aGUgbmV4dCBtaWRkbGV3YXJlIGFuZCB0byBoYW5kbGUgaW4gY2FzZSBvZiByZWRpcmVjdCByZXNwb25zZSByZXR1cm5lZCBieSB0aGUgc2VydmVyXG4gICAgICogQHBhcmFtIHtDb250ZXh0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJlZGlyZWN0Q291bnQgLSBUaGUgcmVkaXJlY3QgY291bnQgdmFsdWVcbiAgICAgKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIFJlcXVlc3RPcHRpb24+fSBbcmVxdWVzdE9wdGlvbnMgPSB7fV0gLSBUaGUgcmVxdWVzdCBvcHRpb25zXG4gICAgICogQHBhcmFtIHtSZWRpcmVjdEhhbmRsZXJPcHRpb25zfSBjdXJyZW50T3B0aW9ucyAtIFRoZSByZWRpcmVjdCBoYW5kbGVyIG9wdGlvbnMgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhY2VyTmFtZSAtIFRoZSBuYW1lIHRvIHVzZSBmb3IgdGhlIHRyYWNlclxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIG5vdGhpbmdcbiAgICAgKi9cbiAgICBleGVjdXRlV2l0aFJlZGlyZWN0KGwsIHMsIGgsIGcsIGIsIGQpIHtcbiAgICAgIHZhciBmO1xuICAgICAgcmV0dXJuIHQuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBfID0geWllbGQgKGYgPSB0aGlzLm5leHQpID09PSBudWxsIHx8IGYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGYuZXhlY3V0ZShsLCBzLCBiKTtcbiAgICAgICAgaWYgKCFfKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlc3BvbnNlIGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgaWYgKGggPCBnLm1heFJlZGlyZWN0cyAmJiB0aGlzLmlzUmVkaXJlY3QoXykgJiYgdGhpcy5oYXNMb2NhdGlvbkhlYWRlcihfKSAmJiBnLnNob3VsZFJlZGlyZWN0KF8pKSB7XG4gICAgICAgICAgaWYgKCsraCwgXy5zdGF0dXMgPT09IGkuU1RBVFVTX0NPREVfU0VFX09USEVSKVxuICAgICAgICAgICAgcy5tZXRob2QgPSBlLkh0dHBNZXRob2QuR0VULCBkZWxldGUgcy5ib2R5O1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuZ2V0TG9jYXRpb25IZWFkZXIoXyk7XG4gICAgICAgICAgICB2ICYmIChzLmhlYWRlcnMgJiYgIXRoaXMuaXNSZWxhdGl2ZVVSTCh2KSAmJiB0aGlzLnNob3VsZERyb3BBdXRob3JpemF0aW9uSGVhZGVyKGwsIHYpICYmIGRlbGV0ZSBzLmhlYWRlcnNbaS5BVVRIT1JJWkFUSU9OX0hFQURFUl0sIGwgPSB2KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGQgPyByLnRyYWNlLmdldFRyYWNlcihkKS5zdGFydEFjdGl2ZVNwYW4oYHJlZGlyZWN0SGFuZGxlciAtIHJlZGlyZWN0ICR7aH1gLCAodikgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHYuc2V0QXR0cmlidXRlKFwiY29tLm1pY3Jvc29mdC5raW90YS5oYW5kbGVyLnJlZGlyZWN0LmNvdW50XCIsIGgpLCB2LnNldEF0dHJpYnV0ZShcImh0dHAuc3RhdHVzX2NvZGVcIiwgXy5zdGF0dXMpLCB0aGlzLmV4ZWN1dGVXaXRoUmVkaXJlY3QobCwgcywgaCwgZywgYik7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICB2LmVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pIDogeWllbGQgdGhpcy5leGVjdXRlV2l0aFJlZGlyZWN0KGwsIHMsIGgsIGcsIGIpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICByZXR1cm4gXztcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICogQGFzeW5jXG4gICAgICogVG8gZXhlY3V0ZSB0aGUgY3VycmVudCBtaWRkbGV3YXJlXG4gICAgICogQHBhcmFtIHtDb250ZXh0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgb2JqZWN0IG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gbm90aGluZ1xuICAgICAqL1xuICAgIGV4ZWN1dGUobCwgcywgaCkge1xuICAgICAgbGV0IGIgPSB0aGlzLm9wdGlvbnM7XG4gICAgICBoICYmIGhbYS5SZWRpcmVjdEhhbmRsZXJPcHRpb25LZXldICYmIChiID0gaFthLlJlZGlyZWN0SGFuZGxlck9wdGlvbktleV0pLCBzLnJlZGlyZWN0ID0gaS5NQU5VQUxfUkVESVJFQ1Q7XG4gICAgICBjb25zdCBkID0gKDAsIG4uZ2V0T2JzZXJ2YWJpbGl0eU9wdGlvbnNGcm9tUmVxdWVzdCkoaCk7XG4gICAgICByZXR1cm4gZCA/IHIudHJhY2UuZ2V0VHJhY2VyKGQuZ2V0VHJhY2VySW5zdHJ1bWVudGF0aW9uTmFtZSgpKS5zdGFydEFjdGl2ZVNwYW4oXCJyZWRpcmVjdEhhbmRsZXIgLSBleGVjdXRlXCIsIChmKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGYuc2V0QXR0cmlidXRlKFwiY29tLm1pY3Jvc29mdC5raW90YS5oYW5kbGVyLnJlZGlyZWN0LmVuYWJsZVwiLCAhMCksIHRoaXMuZXhlY3V0ZVdpdGhSZWRpcmVjdChsLCBzLCAwLCBiLCBoLCBkLmdldFRyYWNlckluc3RydW1lbnRhdGlvbk5hbWUoKSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZi5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSkgOiB0aGlzLmV4ZWN1dGVXaXRoUmVkaXJlY3QobCwgcywgMCwgYiwgaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiZS5SZWRpcmVjdEhhbmRsZXIgPSBpLCBpLlJFRElSRUNUX1NUQVRVU19DT0RFUyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgICAzMDEsXG4gICAgMzAyLFxuICAgIDMwMyxcbiAgICAzMDcsXG4gICAgMzA4XG4gICAgLy8gTW92ZWQgUGVybWFuZW50bHlcbiAgXSksIGkuU1RBVFVTX0NPREVfU0VFX09USEVSID0gMzAzLCBpLkxPQ0FUSU9OX0hFQURFUiA9IFwiTG9jYXRpb25cIiwgaS5BVVRIT1JJWkFUSU9OX0hFQURFUiA9IFwiQXV0aG9yaXphdGlvblwiLCBpLk1BTlVBTF9SRURJUkVDVCA9IFwibWFudWFsXCIsIGJlO1xufVxudmFyIHZlID0ge30sIGsgPSB7fSwgWXQ7XG5mdW5jdGlvbiBNdCgpIHtcbiAgaWYgKFl0KVxuICAgIHJldHVybiBrO1xuICBZdCA9IDEsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShrLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIGsuYXBwZW5kUmVxdWVzdEhlYWRlciA9IGsuc2V0UmVxdWVzdEhlYWRlciA9IGsuZ2V0UmVxdWVzdEhlYWRlciA9IHZvaWQgMDtcbiAgY29uc3QgdCA9IChuLCBhKSA9PiB7XG4gICAgaWYgKG4gJiYgbi5oZWFkZXJzKVxuICAgICAgcmV0dXJuIG4uaGVhZGVyc1thXTtcbiAgfTtcbiAgay5nZXRSZXF1ZXN0SGVhZGVyID0gdDtcbiAgY29uc3QgZSA9IChuLCBhLCBpKSA9PiB7XG4gICAgbiAmJiAobi5oZWFkZXJzIHx8IChuLmhlYWRlcnMgPSB7fSksIG4uaGVhZGVyc1thXSA9IGkpO1xuICB9O1xuICBrLnNldFJlcXVlc3RIZWFkZXIgPSBlO1xuICBjb25zdCByID0gKG4sIGEsIGksIG8gPSBcIiwgXCIpID0+IHtcbiAgICBuICYmIChuLmhlYWRlcnMgfHwgKG4uaGVhZGVycyA9IHt9KSwgbi5oZWFkZXJzW2FdID8gbi5oZWFkZXJzW2FdICs9IGAke299JHtpfWAgOiBuLmhlYWRlcnNbYV0gPSBpKTtcbiAgfTtcbiAgcmV0dXJuIGsuYXBwZW5kUmVxdWVzdEhlYWRlciA9IHIsIGs7XG59XG52YXIgZXQgPSB7fSwgUXQ7XG5mdW5jdGlvbiBCcigpIHtcbiAgcmV0dXJuIFF0IHx8IChRdCA9IDEsIGZ1bmN0aW9uKHQpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCB0LlJldHJ5SGFuZGxlck9wdGlvbnMgPSB0LlJldHJ5SGFuZGxlck9wdGlvbktleSA9IHZvaWQgMCwgdC5SZXRyeUhhbmRsZXJPcHRpb25LZXkgPSBcIlJldHJ5SGFuZGxlck9wdGlvbktleVwiO1xuICAgIGNsYXNzIGUge1xuICAgICAgLyoqXG4gICAgICAgKiBAcHVibGljXG4gICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAqIFRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBSZXRyeUhhbmRsZXJPcHRpb25zXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlbGF5ID0gUmV0cnlIYW5kbGVyT3B0aW9ucy5ERUZBVUxUX0RFTEFZXSAtIFRoZSBkZWxheSB2YWx1ZSBpbiBzZWNvbmRzXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heFJldHJpZXMgPSBSZXRyeUhhbmRsZXJPcHRpb25zLkRFRkFVTFRfTUFYX1JFVFJJRVNdIC0gVGhlIG1heFJldHJpZXMgdmFsdWVcbiAgICAgICAqIEBwYXJhbSB7U2hvdWxkUmV0cnl9IFtzaG91bGRSZXRyeSA9IFJldHJ5SGFuZGxlck9wdGlvbnMuREVGQVVMVF9TSE9VTERfUkVUUlldIC0gVGhlIHNob3VsZFJldHJ5IGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBSZXRyeUhhbmRsZXJPcHRpb25zXG4gICAgICAgKi9cbiAgICAgIGNvbnN0cnVjdG9yKG4gPSBlLkRFRkFVTFRfREVMQVksIGEgPSBlLkRFRkFVTFRfTUFYX1JFVFJJRVMsIGkgPSBlLmRlZmF1bHRTaG91bGRSZXRyeSkge1xuICAgICAgICBpZiAodGhpcy5kZWxheSA9IG4sIHRoaXMubWF4UmV0cmllcyA9IGEsIHRoaXMuc2hvdWxkUmV0cnkgPSBpLCBuID4gZS5NQVhfREVMQVkgJiYgYSA+IGUuTUFYX01BWF9SRVRSSUVTKSB7XG4gICAgICAgICAgY29uc3QgbyA9IG5ldyBFcnJvcihgRGVsYXkgYW5kIE1heFJldHJpZXMgc2hvdWxkIG5vdCBiZSBtb3JlIHRoYW4gJHtlLk1BWF9ERUxBWX0gYW5kICR7ZS5NQVhfTUFYX1JFVFJJRVN9YCk7XG4gICAgICAgICAgdGhyb3cgby5uYW1lID0gXCJNYXhMaW1pdEV4Y2VlZGVkXCIsIG87XG4gICAgICAgIH0gZWxzZSBpZiAobiA+IGUuTUFYX0RFTEFZKSB7XG4gICAgICAgICAgY29uc3QgbyA9IG5ldyBFcnJvcihgRGVsYXkgc2hvdWxkIG5vdCBiZSBtb3JlIHRoYW4gJHtlLk1BWF9ERUxBWX1gKTtcbiAgICAgICAgICB0aHJvdyBvLm5hbWUgPSBcIk1heExpbWl0RXhjZWVkZWRcIiwgbztcbiAgICAgICAgfSBlbHNlIGlmIChhID4gZS5NQVhfTUFYX1JFVFJJRVMpIHtcbiAgICAgICAgICBjb25zdCBvID0gbmV3IEVycm9yKGBNYXhSZXRyaWVzIHNob3VsZCBub3QgYmUgbW9yZSB0aGFuICR7ZS5NQVhfTUFYX1JFVFJJRVN9YCk7XG4gICAgICAgICAgdGhyb3cgby5uYW1lID0gXCJNYXhMaW1pdEV4Y2VlZGVkXCIsIG87XG4gICAgICAgIH0gZWxzZSBpZiAobiA8IDAgJiYgYSA8IDApIHtcbiAgICAgICAgICBjb25zdCBvID0gbmV3IEVycm9yKFwiRGVsYXkgYW5kIE1heFJldHJpZXMgc2hvdWxkIG5vdCBiZSBuZWdhdGl2ZVwiKTtcbiAgICAgICAgICB0aHJvdyBvLm5hbWUgPSBcIk1pbkV4cGVjdGF0aW9uTm90TWV0XCIsIG87XG4gICAgICAgIH0gZWxzZSBpZiAobiA8IDApIHtcbiAgICAgICAgICBjb25zdCBvID0gbmV3IEVycm9yKFwiRGVsYXkgc2hvdWxkIG5vdCBiZSBuZWdhdGl2ZVwiKTtcbiAgICAgICAgICB0aHJvdyBvLm5hbWUgPSBcIk1pbkV4cGVjdGF0aW9uTm90TWV0XCIsIG87XG4gICAgICAgIH0gZWxzZSBpZiAoYSA8IDApIHtcbiAgICAgICAgICBjb25zdCBvID0gbmV3IEVycm9yKFwiTWF4UmV0cmllcyBzaG91bGQgbm90IGJlIG5lZ2F0aXZlXCIpO1xuICAgICAgICAgIHRocm93IG8ubmFtZSA9IFwiTWluRXhwZWN0YXRpb25Ob3RNZXRcIiwgbztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gTWF0aC5taW4obiwgZS5NQVhfREVMQVkpLCB0aGlzLm1heFJldHJpZXMgPSBNYXRoLm1pbihhLCBlLk1BWF9NQVhfUkVUUklFUyksIHRoaXMuc2hvdWxkUmV0cnkgPSBpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBAcHVibGljXG4gICAgICAgKiBUbyBnZXQgdGhlIG1heGltdW0gZGVsYXlcbiAgICAgICAqIEByZXR1cm5zIEEgbWF4aW11bSBkZWxheVxuICAgICAgICovXG4gICAgICBnZXRNYXhEZWxheSgpIHtcbiAgICAgICAgcmV0dXJuIGUuTUFYX0RFTEFZO1xuICAgICAgfVxuICAgICAgZ2V0S2V5KCkge1xuICAgICAgICByZXR1cm4gdC5SZXRyeUhhbmRsZXJPcHRpb25LZXk7XG4gICAgICB9XG4gICAgfVxuICAgIHQuUmV0cnlIYW5kbGVyT3B0aW9ucyA9IGUsIGUuREVGQVVMVF9ERUxBWSA9IDMsIGUuREVGQVVMVF9NQVhfUkVUUklFUyA9IDMsIGUuTUFYX0RFTEFZID0gMTgwLCBlLk1BWF9NQVhfUkVUUklFUyA9IDEwLCBlLmRlZmF1bHRTaG91bGRSZXRyeSA9ICgpID0+ICEwO1xuICB9KGV0KSksIGV0O1xufVxudmFyIFp0O1xuZnVuY3Rpb24gTHIoKSB7XG4gIGlmIChadClcbiAgICByZXR1cm4gdmU7XG4gIFp0ID0gMSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZlLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIHZlLlJldHJ5SGFuZGxlciA9IHZvaWQgMDtcbiAgY29uc3QgdCA9ICQsIGUgPSBDdCwgciA9IGNlLCBuID0gaGUoKSwgYSA9IE10KCksIGkgPSBCcigpO1xuICBjbGFzcyBvIHtcbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogVG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIFJldHJ5SGFuZGxlclxuICAgICAqIEBwYXJhbSB7UmV0cnlIYW5kbGVyT3B0aW9uc30gW29wdGlvbnMgPSBuZXcgUmV0cnlIYW5kbGVyT3B0aW9ucygpXSAtIFRoZSByZXRyeSBoYW5kbGVyIG9wdGlvbnMgdmFsdWVcbiAgICAgKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBSZXRyeUhhbmRsZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzID0gbmV3IGkuUmV0cnlIYW5kbGVyT3B0aW9ucygpKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zID0gcywgIXMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyByZXF1aXJlZC5cIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBUbyBjaGVjayB3aGV0aGVyIHRoZSByZXNwb25zZSBoYXMgdGhlIHJldHJ5IHN0YXR1cyBjb2RlXG4gICAgICogQHBhcmFtIHtSZXNwb25zZX0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgcmVzcG9uc2UgaGFzIHJldHJ5IHN0YXR1cyBjb2RlIG9yIG5vdFxuICAgICAqL1xuICAgIGlzUmV0cnkocykge1xuICAgICAgcmV0dXJuIG8uUkVUUllfU1RBVFVTX0NPREVTLmhhcyhzLnN0YXR1cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogVG8gY2hlY2sgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBidWZmZXJlZCBvciBub3RcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RJbml0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2YgYSByZXF1ZXN0XG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgcGF5bG9hZCBpcyBidWZmZXJlZCBvciBub3RcbiAgICAgKi9cbiAgICBpc0J1ZmZlcmVkKHMpIHtcbiAgICAgIHZhciBoO1xuICAgICAgY29uc3QgZyA9IHMubWV0aG9kO1xuICAgICAgcmV0dXJuICEoKGcgPT09IGUuSHR0cE1ldGhvZC5QVVQgfHwgZyA9PT0gZS5IdHRwTWV0aG9kLlBBVENIIHx8IGcgPT09IGUuSHR0cE1ldGhvZC5QT1NUKSAmJiAoKGggPSAoMCwgYS5nZXRSZXF1ZXN0SGVhZGVyKShzLCBcImNvbnRlbnQtdHlwZVwiKSkgPT09IG51bGwgfHwgaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaC50b0xvd2VyQ2FzZSgpKSA9PT0gXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogVG8gZ2V0IHRoZSBkZWxheSBmb3IgYSByZXRyeVxuICAgICAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc3BvbnNlIC0gVGhlIHJlc3BvbnNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByZXRyeUF0dGVtcHRzIC0gVGhlIGN1cnJlbnQgYXR0ZW1wdCBjb3VudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSAtIFRoZSBkZWxheSB2YWx1ZSBpbiBzZWNvbmRzXG4gICAgICogQHJldHVybnMgQSBkZWxheSBmb3IgYSByZXRyeVxuICAgICAqL1xuICAgIGdldERlbGF5KHMsIGgsIGcpIHtcbiAgICAgIGNvbnN0IGIgPSAoKSA9PiBOdW1iZXIoTWF0aC5yYW5kb20oKS50b0ZpeGVkKDMpKSwgZCA9IHMuaGVhZGVycyAhPT0gdm9pZCAwID8gcy5oZWFkZXJzLmdldChvLlJFVFJZX0FGVEVSX0hFQURFUikgOiBudWxsO1xuICAgICAgbGV0IGY7XG4gICAgICByZXR1cm4gZCAhPT0gbnVsbCA/IE51bWJlci5pc05hTihOdW1iZXIoZCkpID8gZiA9IE1hdGgucm91bmQoKG5ldyBEYXRlKGQpLmdldFRpbWUoKSAtIERhdGUubm93KCkpIC8gMWUzKSA6IGYgPSBOdW1iZXIoZCkgOiBmID0gaCA+PSAyID8gdGhpcy5nZXRFeHBvbmVudGlhbEJhY2tPZmZUaW1lKGgpICsgZyArIGIoKSA6IGcgKyBiKCksIE1hdGgubWluKGYsIHRoaXMub3B0aW9ucy5nZXRNYXhEZWxheSgpICsgYigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBUbyBnZXQgYW4gZXhwb25lbnRpYWwgYmFjayBvZmYgdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXR0ZW1wdHMgLSBUaGUgY3VycmVudCBhdHRlbXB0IGNvdW50XG4gICAgICogQHJldHVybnMgQW4gZXhwb25lbnRpYWwgYmFjayBvZmYgdmFsdWVcbiAgICAgKi9cbiAgICBnZXRFeHBvbmVudGlhbEJhY2tPZmZUaW1lKHMpIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKDEgLyAyICogKE1hdGgucG93KDIsIHMpIC0gMSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBhc3luY1xuICAgICAqIFRvIGFkZCBkZWxheSBmb3IgdGhlIGV4ZWN1dGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheVNlY29uZHMgLSBUaGUgZGVsYXkgdmFsdWUgaW4gc2Vjb25kc1xuICAgICAqIEByZXR1cm5zIE5vdGhpbmdcbiAgICAgKi9cbiAgICBzbGVlcChzKSB7XG4gICAgICByZXR1cm4gdC5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IGggPSBzICogMWUzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKGcpID0+IHNldFRpbWVvdXQoZywgaCkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGFzeW5jXG4gICAgICogVG8gZXhlY3V0ZSB0aGUgbWlkZGxld2FyZSB3aXRoIHJldHJpZXNcbiAgICAgKiBAcGFyYW0ge0NvbnRleHR9IGNvbnRleHQgLSBUaGUgY29udGV4dCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmV0cnlBdHRlbXB0cyAtIFRoZSBjdXJyZW50IGF0dGVtcHQgY291bnRcbiAgICAgKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIFJlcXVlc3RPcHRpb24+fSBbcmVxdWVzdE9wdGlvbnMgPSB7fV0gLSBUaGUgcmVxdWVzdCBvcHRpb25zXG4gICAgICogQHBhcmFtIHtSZXRyeUhhbmRsZXJPcHRpb25zfSBjdXJyZW50T3B0aW9ucyAtIFRoZSByZXRyeSBtaWRkbGV3YXJlIG9wdGlvbnMgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhY2VyTmFtZSAtIFRoZSBuYW1lIHRvIHVzZSBmb3IgdGhlIHRyYWNlclxuICAgICAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIG5vdGhpbmdcbiAgICAgKi9cbiAgICBleGVjdXRlV2l0aFJldHJ5KHMsIGgsIGcsIGIsIGQsIGYpIHtcbiAgICAgIHZhciBfO1xuICAgICAgcmV0dXJuIHQuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCB2ID0geWllbGQgKF8gPSB0aGlzLm5leHQpID09PSBudWxsIHx8IF8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8uZXhlY3V0ZShzLCBoLCBkKTtcbiAgICAgICAgaWYgKCF2KVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlc3BvbnNlIGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgaWYgKGcgPCBiLm1heFJldHJpZXMgJiYgdGhpcy5pc1JldHJ5KHYpICYmIHRoaXMuaXNCdWZmZXJlZChoKSAmJiBiLnNob3VsZFJldHJ5KGIuZGVsYXksIGcsIHMsIGgsIHYpKSB7XG4gICAgICAgICAgaWYgKCsrZywgKDAsIGEuc2V0UmVxdWVzdEhlYWRlcikoaCwgby5SRVRSWV9BVFRFTVBUX0hFQURFUiwgZy50b1N0cmluZygpKSwgdikge1xuICAgICAgICAgICAgY29uc3QgRSA9IHRoaXMuZ2V0RGVsYXkodiwgZywgYi5kZWxheSk7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLnNsZWVwKEUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZiA/IHlpZWxkIHIudHJhY2UuZ2V0VHJhY2VyKGYpLnN0YXJ0QWN0aXZlU3BhbihgcmV0cnlIYW5kbGVyIC0gYXR0ZW1wdCAke2d9YCwgKEUpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBFLnNldEF0dHJpYnV0ZShcImh0dHAucmV0cnlfY291bnRcIiwgZyksIEUuc2V0QXR0cmlidXRlKFwiaHR0cC5zdGF0dXNfY29kZVwiLCB2LnN0YXR1cyksIHRoaXMuZXhlY3V0ZVdpdGhSZXRyeShzLCBoLCBnLCBiLCBkKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIEUuZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkgOiB5aWVsZCB0aGlzLmV4ZWN1dGVXaXRoUmV0cnkocywgaCwgZywgYiwgZCk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHJldHVybiB2O1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYXN5bmNcbiAgICAgKiBUbyBleGVjdXRlIHRoZSBjdXJyZW50IG1pZGRsZXdhcmVcbiAgICAgKiBAcGFyYW0ge0NvbnRleHR9IGNvbnRleHQgLSBUaGUgY29udGV4dCBvYmplY3Qgb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBub3RoaW5nXG4gICAgICovXG4gICAgZXhlY3V0ZShzLCBoLCBnKSB7XG4gICAgICBsZXQgZCA9IHRoaXMub3B0aW9ucztcbiAgICAgIGcgJiYgZ1tpLlJldHJ5SGFuZGxlck9wdGlvbktleV0gJiYgKGQgPSBnW2kuUmV0cnlIYW5kbGVyT3B0aW9uS2V5XSk7XG4gICAgICBjb25zdCBmID0gKDAsIG4uZ2V0T2JzZXJ2YWJpbGl0eU9wdGlvbnNGcm9tUmVxdWVzdCkoZyk7XG4gICAgICByZXR1cm4gZiA/IHIudHJhY2UuZ2V0VHJhY2VyKGYuZ2V0VHJhY2VySW5zdHJ1bWVudGF0aW9uTmFtZSgpKS5zdGFydEFjdGl2ZVNwYW4oXCJyZXRyeUhhbmRsZXIgLSBleGVjdXRlXCIsIChfKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIF8uc2V0QXR0cmlidXRlKFwiY29tLm1pY3Jvc29mdC5raW90YS5oYW5kbGVyLnJldHJ5LmVuYWJsZVwiLCAhMCksIHRoaXMuZXhlY3V0ZVdpdGhSZXRyeShzLCBoLCAwLCBkLCBnLCBmLmdldFRyYWNlckluc3RydW1lbnRhdGlvbk5hbWUoKSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgXy5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSkgOiB0aGlzLmV4ZWN1dGVXaXRoUmV0cnkocywgaCwgMCwgZCwgZyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2ZS5SZXRyeUhhbmRsZXIgPSBvLCBvLlJFVFJZX1NUQVRVU19DT0RFUyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgICA0MjksXG4gICAgNTAzLFxuICAgIDUwNFxuICAgIC8vIEdhdGV3YXkgdGltZW91dFxuICBdKSwgby5SRVRSWV9BVFRFTVBUX0hFQURFUiA9IFwiUmV0cnktQXR0ZW1wdFwiLCBvLlJFVFJZX0FGVEVSX0hFQURFUiA9IFwiUmV0cnktQWZ0ZXJcIiwgdmU7XG59XG52YXIgRWUgPSB7fSwgdHQgPSB7fSwgQWUgPSB7fSwgSnQ7XG5mdW5jdGlvbiBJYSgpIHtcbiAgcmV0dXJuIEp0IHx8IChKdCA9IDEsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBBZS5saWJyYXJ5VmVyc2lvbiA9IHZvaWQgMCwgQWUubGlicmFyeVZlcnNpb24gPSBcIjEuMC4wLXByZXZpZXcuMTJcIiksIEFlO1xufVxudmFyIGVyO1xuZnVuY3Rpb24gS3IoKSB7XG4gIHJldHVybiBlciB8fCAoZXIgPSAxLCBmdW5jdGlvbih0KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgdC5Vc2VyQWdlbnRIYW5kbGVyT3B0aW9ucyA9IHQuVXNlckFnZW50SGFuZGxlck9wdGlvbnNLZXkgPSB2b2lkIDA7XG4gICAgY29uc3QgZSA9IElhKCk7XG4gICAgdC5Vc2VyQWdlbnRIYW5kbGVyT3B0aW9uc0tleSA9IFwiVXNlckFnZW50SGFuZGxlck9wdGlvbktleVwiO1xuICAgIGNsYXNzIHIge1xuICAgICAgZ2V0S2V5KCkge1xuICAgICAgICByZXR1cm4gdC5Vc2VyQWdlbnRIYW5kbGVyT3B0aW9uc0tleTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogQHB1YmxpY1xuICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgKiBUbyBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgVXNlckFnZW50SGFuZGxlck9wdGlvblxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbZW5hYmxlID0gdHJ1ZV0gLSBXaGV0aGVyIHRvIGFkZCB0aGUgdXNlciBhZ2VudCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvZHVjdE5hbWUgPSBcImtpb3RhLXR5cGVzY3JpcHRcIl0gLSBUaGUgcHJvZHVjdCBuYW1lIHRvIGJlIGFkZGVkIHRvIHRoZSB1c2VyIGFnZW50IGhlYWRlclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9kdWN0VmVyc2lvbiA9IFwiMS4wLjAtcHJldmlldy4xMlwiXSAtIFRoZSBwcm9kdWN0IHZlcnNpb24gdG8gYmUgYWRkZWQgdG8gdGhlIHVzZXIgYWdlbnQgaGVhZGVyXG4gICAgICAgKi9cbiAgICAgIGNvbnN0cnVjdG9yKGEgPSAhMCwgaSA9IFwia2lvdGEtdHlwZXNjcmlwdFwiLCBvID0gZS5saWJyYXJ5VmVyc2lvbikge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGEsIHRoaXMucHJvZHVjdE5hbWUgPSBpLCB0aGlzLnByb2R1Y3RWZXJzaW9uID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdC5Vc2VyQWdlbnRIYW5kbGVyT3B0aW9ucyA9IHI7XG4gIH0odHQpKSwgdHQ7XG59XG52YXIgdHI7XG5mdW5jdGlvbiBHcigpIHtcbiAgaWYgKHRyKVxuICAgIHJldHVybiBFZTtcbiAgdHIgPSAxLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWUsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgRWUuVXNlckFnZW50SGFuZGxlciA9IHZvaWQgMDtcbiAgY29uc3QgdCA9ICQsIGUgPSBjZSwgciA9IGhlKCksIG4gPSBNdCgpLCBhID0gS3IoKSwgaSA9IFwiVXNlci1BZ2VudFwiO1xuICBjbGFzcyBvIHtcbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogVG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIFVzZXJBZ2VudEhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge1VzZXJBZ2VudEhhbmRsZXJPcHRpb259IFtvcHRpb25zID0gbmV3IFVzZXJBZ2VudEhhbmRsZXJPcHRpb24oKV0gLSBUaGUgb3B0aW9ucyBmb3IgdGhlIG1pZGRsZXdhcmVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzID0gbmV3IGEuVXNlckFnZW50SGFuZGxlck9wdGlvbnMoKSkge1xuICAgICAgdGhpcy5fb3B0aW9ucyA9IHM7XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIGV4ZWN1dGUocywgaCwgZykge1xuICAgICAgY29uc3QgYiA9ICgwLCByLmdldE9ic2VydmFiaWxpdHlPcHRpb25zRnJvbVJlcXVlc3QpKGcpO1xuICAgICAgcmV0dXJuIGIgPyBlLnRyYWNlLmdldFRyYWNlcihiLmdldFRyYWNlckluc3RydW1lbnRhdGlvbk5hbWUoKSkuc3RhcnRBY3RpdmVTcGFuKFwidXNlckFnZW50SGFuZGxlciAtIGV4ZWN1dGVcIiwgKGQpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZC5zZXRBdHRyaWJ1dGUoXCJjb20ubWljcm9zb2Z0Lmtpb3RhLmhhbmRsZXIudXNlcmFnZW50LmVuYWJsZVwiLCAhMCksIHRoaXMuYWRkVmFsdWUocywgaCwgZyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZC5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSkgOiB0aGlzLmFkZFZhbHVlKHMsIGgsIGcpO1xuICAgIH1cbiAgICBhZGRWYWx1ZShzLCBoLCBnKSB7XG4gICAgICB2YXIgYjtcbiAgICAgIHJldHVybiB0Ll9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgbGV0IGQgPSB0aGlzLl9vcHRpb25zO1xuICAgICAgICBpZiAoZyAmJiBnW2EuVXNlckFnZW50SGFuZGxlck9wdGlvbnNLZXldICYmIChkID0gZ1thLlVzZXJBZ2VudEhhbmRsZXJPcHRpb25zS2V5XSksIGQuZW5hYmxlKSB7XG4gICAgICAgICAgY29uc3QgXyA9IGAke2QucHJvZHVjdE5hbWV9LyR7ZC5wcm9kdWN0VmVyc2lvbn1gLCB2ID0gKDAsIG4uZ2V0UmVxdWVzdEhlYWRlcikoaCwgaSk7XG4gICAgICAgICAgKCF2IHx8IHYuaW5kZXhPZihfKSA9PT0gLTEpICYmICgwLCBuLmFwcGVuZFJlcXVlc3RIZWFkZXIpKGgsIGksIF8sIFwiIFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmID0geWllbGQgKGIgPSB0aGlzLm5leHQpID09PSBudWxsIHx8IGIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGIuZXhlY3V0ZShzLCBoLCBnKTtcbiAgICAgICAgaWYgKCFmKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHJlc3BvbnNlIHJldHVybmVkIGJ5IHRoZSBuZXh0IG1pZGRsZXdhcmVcIik7XG4gICAgICAgIHJldHVybiBmO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBFZS5Vc2VyQWdlbnRIYW5kbGVyID0gbywgRWU7XG59XG52YXIgcnI7XG5mdW5jdGlvbiBrcigpIHtcbiAgaWYgKHJyKVxuICAgIHJldHVybiB3ZTtcbiAgcnIgPSAxLCBPYmplY3QuZGVmaW5lUHJvcGVydHkod2UsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgd2UuTWlkZGxld2FyZUZhY3RvcnkgPSB2b2lkIDA7XG4gIGNvbnN0IHQgPSBNYSgpLCBlID0gVnQoKSwgciA9IFVyKCksIG4gPSB4cigpLCBhID0gTHIoKSwgaSA9IEdyKCk7XG4gIGNsYXNzIG8ge1xuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAc3RhdGljXG4gICAgICogUmV0dXJucyB0aGUgZGVmYXVsdCBtaWRkbGV3YXJlIGNoYWluIGFuIGFycmF5IHdpdGggdGhlICBtaWRkbGV3YXJlIGhhbmRsZXJzXG4gICAgICogQHBhcmFtIHtBdXRoZW50aWNhdGlvblByb3ZpZGVyfSBhdXRoUHJvdmlkZXIgLSBUaGUgYXV0aGVudGljYXRpb24gcHJvdmlkZXIgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbWlkZGxld2FyZSBoYW5kbGVycyBvZiB0aGUgZGVmYXVsdCBtaWRkbGV3YXJlIGNoYWluXG4gICAgICovXG4gICAgc3RhdGljIGdldERlZmF1bHRNaWRkbGV3YXJlQ2hhaW4ocyA9IHQuZGVmYXVsdCkge1xuICAgICAgcmV0dXJuIFtuZXcgYS5SZXRyeUhhbmRsZXIoKSwgbmV3IG4uUmVkaXJlY3RIYW5kbGVyKCksIG5ldyByLlBhcmFtZXRlcnNOYW1lRGVjb2RpbmdIYW5kbGVyKCksIG5ldyBpLlVzZXJBZ2VudEhhbmRsZXIoKSwgbmV3IGUuQ3VzdG9tRmV0Y2hIYW5kbGVyKHMpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdlLk1pZGRsZXdhcmVGYWN0b3J5ID0gbywgd2U7XG59XG52YXIgbnI7XG5mdW5jdGlvbiAkcigpIHtcbiAgaWYgKG5yKVxuICAgIHJldHVybiB5ZTtcbiAgbnIgPSAxLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoeWUsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgeWUuSHR0cENsaWVudCA9IHZvaWQgMDtcbiAgY29uc3QgdCA9ICQsIGUgPSBWdCgpLCByID0ga3IoKTtcbiAgY2xhc3MgbiB7XG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYSBIdHRwQ2xpZW50IHdoaWNoIGNvbnRhaW5zIHRoZSBtaWRkbGV3YXJlcyBhbmQgZmV0Y2ggaW1wbGVtZW50YXRpb24gZm9yIHJlcXVlc3QgZXhlY3V0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uTWlkZGxld2FyZX0gbWlkZGxld2FyZSAtIFRoZSBmaXJzdCBtaWRkbGV3YXJlIG9mIHRoZSBtaWRkbGV3YXJlIGNoYWluIG9yIGEgc2VxdWVuY2Ugb2YgYWxsIHRoZSBNaWRkbGV3YXJlIGhhbmRsZXJzXG4gICAgICogSWYgbWlkZGxld2FyZXMgcGFyYW0gaXMgdW5kZWZpbmVkLCB0aGUgaHR0cENsaWVudCBpbnN0YW5jZSB3aWxsIHVzZSB0aGUgZGVmYXVsdCBhcnJheSBvZiBtaWRkbGV3YXJlcy5cbiAgICAgKiBTZXQgbWlkZGxld2FyZXMgdG8gYG51bGxgIGlmIHlvdSBkbyBub3Qgd2lzaCB0byB1c2UgbWlkZGxld2FyZXMuXG4gICAgICogSWYgY3VzdG9tIGZldGNoIGlzIHVuZGVmaW5lZCwgdGhlIGh0dHBDbGllbnQgaW5zdGFuY2UgdXNlcyB0aGUgYERlZmF1bHRGZXRjaEhhbmRsZXJgXG4gICAgICogQHBhcmFtIHsocmVxdWVzdDogc3RyaW5nLCBpbml0PzogUmVxdWVzdEluaXQpID0+IFByb21pc2UgPCBSZXNwb25zZSA+fSBjdXN0b20gZmV0Y2ggZnVuY3Rpb24gLSBhIEZldGNoIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgICAqXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaSwgLi4ubykge1xuICAgICAgdGhpcy5jdXN0b21GZXRjaCA9IGksICFvLmxlbmd0aCB8fCAhb1swXSA/IHRoaXMuc2V0TWlkZGxld2FyZSguLi5yLk1pZGRsZXdhcmVGYWN0b3J5LmdldERlZmF1bHRNaWRkbGV3YXJlQ2hhaW4oaSkpIDogdGhpcy5jdXN0b21GZXRjaCA/IHRoaXMuc2V0TWlkZGxld2FyZSguLi5vLCBuZXcgZS5DdXN0b21GZXRjaEhhbmRsZXIoaSkpIDogdGhpcy5zZXRNaWRkbGV3YXJlKC4uLm8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFByb2Nlc3NlcyB0aGUgbWlkZGxld2FyZSBwYXJhbWV0ZXIgcGFzc2VkIHRvIHNldCB0aGlzLm1pZGRsZXdhcmUgcHJvcGVydHlcbiAgICAgKiBUaGUgY2FsbGluZyBmdW5jdGlvbiBzaG91bGQgdmFsaWRhdGUgaWYgbWlkZGxld2FyZSBpcyBub3QgdW5kZWZpbmVkIG9yIG5vdCBlbXB0eS5cbiAgICAgKiBAcGFyYW0gey4uLk1pZGRsZXdhcmV9IG1pZGRsZXdhcmUgLSBUaGUgbWlkZGxld2FyZSBwYXNzZWRcbiAgICAgKiBAcmV0dXJucyBOb3RoaW5nXG4gICAgICovXG4gICAgc2V0TWlkZGxld2FyZSguLi5pKSB7XG4gICAgICBpLmZvckVhY2goKG8sIGwpID0+IHtcbiAgICAgICAgbCA8IGkubGVuZ3RoIC0gMSAmJiAoby5uZXh0ID0gaVtsICsgMV0pO1xuICAgICAgfSksIHRoaXMubWlkZGxld2FyZSA9IGlbMF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIGEgcmVxdWVzdCBhbmQgcmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIHRoZSByZXNwb25zZS5cbiAgICAgKiBAcGFyYW0gdXJsIHRoZSByZXF1ZXN0IHVybC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyByZXF1ZXN0IG9wdGlvbnMuXG4gICAgICogQHJldHVybnMgdGhlIHByb21pc2UgcmVzb2x2aW5nIHRoZSByZXNwb25zZS5cbiAgICAgKi9cbiAgICBleGVjdXRlRmV0Y2goaSwgbywgbCkge1xuICAgICAgcmV0dXJuIHQuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBpZiAodGhpcy5jdXN0b21GZXRjaCAmJiAhdGhpcy5taWRkbGV3YXJlKVxuICAgICAgICAgIHJldHVybiB0aGlzLmN1c3RvbUZldGNoKGksIG8pO1xuICAgICAgICBpZiAodGhpcy5taWRkbGV3YXJlKVxuICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLm1pZGRsZXdhcmUuZXhlY3V0ZShpLCBvLCBsKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgbWlkZGxld2FyZXMgb3IgYSBjdXN0b20gZmV0Y2ggZnVuY3Rpb24gdG8gZXhlY3V0ZSB0aGUgcmVxdWVzdFwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4geWUuSHR0cENsaWVudCA9IG4sIHllO1xufVxudmFyIGFyO1xuZnVuY3Rpb24gSGEoKSB7XG4gIGlmIChhcilcbiAgICByZXR1cm4gcGU7XG4gIGFyID0gMSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBlLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIHBlLkZldGNoUmVxdWVzdEFkYXB0ZXIgPSB2b2lkIDA7XG4gIGNvbnN0IHQgPSAkLCBlID0gQ3QsIHIgPSBjZSwgbiA9ICRyKCksIGEgPSBoZSgpO1xuICBjbGFzcyBpIHtcbiAgICBnZXRTZXJpYWxpemF0aW9uV3JpdGVyRmFjdG9yeSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlcmlhbGl6YXRpb25Xcml0ZXJGYWN0b3J5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgaHR0cCBjb3JlIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0gYXV0aGVudGljYXRpb25Qcm92aWRlciB0aGUgYXV0aGVudGljYXRpb24gcHJvdmlkZXIgdG8gdXNlLlxuICAgICAqIEBwYXJhbSBwYXJzZU5vZGVGYWN0b3J5IHRoZSBwYXJzZSBub2RlIGZhY3RvcnkgdG8gZGVzZXJpYWxpemUgcmVzcG9uc2VzLlxuICAgICAqIEBwYXJhbSBzZXJpYWxpemF0aW9uV3JpdGVyRmFjdG9yeSB0aGUgc2VyaWFsaXphdGlvbiB3cml0ZXIgZmFjdG9yeSB0byB1c2UgdG8gc2VyaWFsaXplIHJlcXVlc3QgYm9kaWVzLlxuICAgICAqIEBwYXJhbSBodHRwQ2xpZW50IHRoZSBodHRwIGNsaWVudCB0byB1c2UgdG8gZXhlY3V0ZSByZXF1ZXN0cy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2YWJpbGl0eU9wdGlvbnMgdGhlIG9ic2VydmFiaWxpdHkgb3B0aW9ucyB0byB1c2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobCwgcyA9IGUuUGFyc2VOb2RlRmFjdG9yeVJlZ2lzdHJ5LmRlZmF1bHRJbnN0YW5jZSwgaCA9IGUuU2VyaWFsaXphdGlvbldyaXRlckZhY3RvcnlSZWdpc3RyeS5kZWZhdWx0SW5zdGFuY2UsIGcgPSBuZXcgbi5IdHRwQ2xpZW50KCksIGIgPSBuZXcgYS5PYnNlcnZhYmlsaXR5T3B0aW9uc0ltcGwoKSkge1xuICAgICAgaWYgKHRoaXMuYXV0aGVudGljYXRpb25Qcm92aWRlciA9IGwsIHRoaXMucGFyc2VOb2RlRmFjdG9yeSA9IHMsIHRoaXMuc2VyaWFsaXphdGlvbldyaXRlckZhY3RvcnkgPSBoLCB0aGlzLmh0dHBDbGllbnQgPSBnLCB0aGlzLmJhc2VVcmwgPSBcIlwiLCB0aGlzLmdldFJlc3BvbnNlQ29udGVudFR5cGUgPSAoZCkgPT4ge1xuICAgICAgICB2YXIgZjtcbiAgICAgICAgY29uc3QgXyA9IChmID0gZC5oZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKSkgPT09IG51bGwgfHwgZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIV8pXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2ID0gXy5zcGxpdChcIjtcIik7XG4gICAgICAgIGlmICh2Lmxlbmd0aCAhPT0gMClcbiAgICAgICAgICByZXR1cm4gdlswXTtcbiAgICAgIH0sIHRoaXMuc2VuZENvbGxlY3Rpb25PZlByaW1pdGl2ZUFzeW5jID0gKGQsIGYsIF8sIHYpID0+IHtcbiAgICAgICAgaWYgKCFkKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RJbmZvIGNhbm5vdCBiZSBudWxsXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydFRyYWNpbmdTcGFuKGQsIFwic2VuZENvbGxlY3Rpb25PZlByaW1pdGl2ZUFzeW5jXCIsIChFKSA9PiB0Ll9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgRCA9IHlpZWxkIHRoaXMuZ2V0SHR0cFJlc3BvbnNlTWVzc2FnZShkLCBFKTtcbiAgICAgICAgICAgIGlmIChfKVxuICAgICAgICAgICAgICByZXR1cm4gRS5hZGRFdmVudChpLmV2ZW50UmVzcG9uc2VIYW5kbGVySW52b2tlZEtleSksIHlpZWxkIF8uaGFuZGxlUmVzcG9uc2VBc3luYyhELCB2KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmICh5aWVsZCB0aGlzLnRocm93SWZGYWlsZWRSZXNwb25zZShELCB2LCBFKSwgdGhpcy5zaG91bGRSZXR1cm5VbmRlZmluZWQoRCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBzd2l0Y2ggKGYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIkRhdGVcIjpcbiAgICAgICAgICAgICAgICAgIGNvbnN0IEEgPSB5aWVsZCB0aGlzLmdldFJvb3RQYXJzZU5vZGUoRCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gci50cmFjZS5nZXRUcmFjZXIodGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucy5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihgZ2V0Q29sbGVjdGlvbk9mJHtmfVZhbHVlYCwgKE4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoRS5zZXRBdHRyaWJ1dGUoaS5yZXNwb25zZVR5cGVBdHRyaWJ1dGVLZXksIGYpLCBmID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEEuZ2V0Q29sbGVjdGlvbk9mUHJpbWl0aXZlVmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGYgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQS5nZXRDb2xsZWN0aW9uT2ZQcmltaXRpdmVWYWx1ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQS5nZXRDb2xsZWN0aW9uT2ZQcmltaXRpdmVWYWx1ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gXCJEYXRlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQS5nZXRDb2xsZWN0aW9uT2ZQcmltaXRpdmVWYWx1ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gXCJEdXJhdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEEuZ2V0Q29sbGVjdGlvbk9mUHJpbWl0aXZlVmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGYgPT09IFwiRGF0ZU9ubHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBLmdldENvbGxlY3Rpb25PZlByaW1pdGl2ZVZhbHVlcygpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChmID09PSBcIlRpbWVPbmx5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQS5nZXRDb2xsZWN0aW9uT2ZQcmltaXRpdmVWYWx1ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmV4cGVjdGVkIHR5cGUgdG8gZGVzZXJpYWxpemVcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgTi5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIHlpZWxkIHRoaXMucHVyZ2VSZXNwb25zZUJvZHkoRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIEUuZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9LCB0aGlzLnNlbmRDb2xsZWN0aW9uQXN5bmMgPSAoZCwgZiwgXywgdikgPT4ge1xuICAgICAgICBpZiAoIWQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEluZm8gY2Fubm90IGJlIG51bGxcIik7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0VHJhY2luZ1NwYW4oZCwgXCJzZW5kQ29sbGVjdGlvbkFzeW5jXCIsIChFKSA9PiB0Ll9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgRCA9IHlpZWxkIHRoaXMuZ2V0SHR0cFJlc3BvbnNlTWVzc2FnZShkLCBFKTtcbiAgICAgICAgICAgIGlmIChfKVxuICAgICAgICAgICAgICByZXR1cm4gRS5hZGRFdmVudChpLmV2ZW50UmVzcG9uc2VIYW5kbGVySW52b2tlZEtleSksIHlpZWxkIF8uaGFuZGxlUmVzcG9uc2VBc3luYyhELCB2KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmICh5aWVsZCB0aGlzLnRocm93SWZGYWlsZWRSZXNwb25zZShELCB2LCBFKSwgdGhpcy5zaG91bGRSZXR1cm5VbmRlZmluZWQoRCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBjb25zdCBBID0geWllbGQgdGhpcy5nZXRSb290UGFyc2VOb2RlKEQpO1xuICAgICAgICAgICAgICByZXR1cm4gci50cmFjZS5nZXRUcmFjZXIodGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucy5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihcImdldENvbGxlY3Rpb25PZk9iamVjdFZhbHVlc1wiLCAoTikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBVID0gQS5nZXRDb2xsZWN0aW9uT2ZPYmplY3RWYWx1ZXMoZik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gRS5zZXRBdHRyaWJ1dGUoaS5yZXNwb25zZVR5cGVBdHRyaWJ1dGVLZXksIFwib2JqZWN0W11cIiksIFU7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgIE4uZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIHlpZWxkIHRoaXMucHVyZ2VSZXNwb25zZUJvZHkoRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIEUuZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9LCB0aGlzLnN0YXJ0VHJhY2luZ1NwYW4gPSAoZCwgZiwgXykgPT4ge1xuICAgICAgICB2YXIgdjtcbiAgICAgICAgY29uc3QgRSA9IGRlY29kZVVSSUNvbXBvbmVudCgodiA9IGQudXJsVGVtcGxhdGUpICE9PSBudWxsICYmIHYgIT09IHZvaWQgMCA/IHYgOiBcIlwiKSwgRCA9IEUucmVwbGFjZSgvXFx7XFw/W159XStcXH0vZ2ksIFwiXCIpO1xuICAgICAgICByZXR1cm4gci50cmFjZS5nZXRUcmFjZXIodGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucy5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihgJHtmfSAtICR7RH1gLCAoQSkgPT4gdC5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBBLnNldEF0dHJpYnV0ZShcImh0dHAudXJpX3RlbXBsYXRlXCIsIEUpLCB5aWVsZCBfKEEpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBBLmVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSwgdGhpcy5zZW5kQXN5bmMgPSAoZCwgZiwgXywgdikgPT4ge1xuICAgICAgICBpZiAoIWQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEluZm8gY2Fubm90IGJlIG51bGxcIik7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0VHJhY2luZ1NwYW4oZCwgXCJzZW5kQXN5bmNcIiwgKEUpID0+IHQuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBEID0geWllbGQgdGhpcy5nZXRIdHRwUmVzcG9uc2VNZXNzYWdlKGQsIEUpO1xuICAgICAgICAgICAgaWYgKF8pXG4gICAgICAgICAgICAgIHJldHVybiBFLmFkZEV2ZW50KGkuZXZlbnRSZXNwb25zZUhhbmRsZXJJbnZva2VkS2V5KSwgeWllbGQgXy5oYW5kbGVSZXNwb25zZUFzeW5jKEQsIHYpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKHlpZWxkIHRoaXMudGhyb3dJZkZhaWxlZFJlc3BvbnNlKEQsIHYsIEUpLCB0aGlzLnNob3VsZFJldHVyblVuZGVmaW5lZChEKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIGNvbnN0IEEgPSB5aWVsZCB0aGlzLmdldFJvb3RQYXJzZU5vZGUoRCk7XG4gICAgICAgICAgICAgIHJldHVybiByLnRyYWNlLmdldFRyYWNlcih0aGlzLm9ic2VydmFiaWxpdHlPcHRpb25zLmdldFRyYWNlckluc3RydW1lbnRhdGlvbk5hbWUoKSkuc3RhcnRBY3RpdmVTcGFuKFwiZ2V0T2JqZWN0VmFsdWVcIiwgKE4pID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEUuc2V0QXR0cmlidXRlKGkucmVzcG9uc2VUeXBlQXR0cmlidXRlS2V5LCBcIm9iamVjdFwiKSwgQS5nZXRPYmplY3RWYWx1ZShmKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgTi5lbmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgeWllbGQgdGhpcy5wdXJnZVJlc3BvbnNlQm9keShEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgRS5lbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0sIHRoaXMuc2VuZFByaW1pdGl2ZUFzeW5jID0gKGQsIGYsIF8sIHYpID0+IHtcbiAgICAgICAgaWYgKCFkKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RJbmZvIGNhbm5vdCBiZSBudWxsXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydFRyYWNpbmdTcGFuKGQsIFwic2VuZFByaW1pdGl2ZUFzeW5jXCIsIChFKSA9PiB0Ll9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgRCA9IHlpZWxkIHRoaXMuZ2V0SHR0cFJlc3BvbnNlTWVzc2FnZShkLCBFKTtcbiAgICAgICAgICAgIGlmIChfKVxuICAgICAgICAgICAgICByZXR1cm4gRS5hZGRFdmVudChpLmV2ZW50UmVzcG9uc2VIYW5kbGVySW52b2tlZEtleSksIHlpZWxkIF8uaGFuZGxlUmVzcG9uc2VBc3luYyhELCB2KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmICh5aWVsZCB0aGlzLnRocm93SWZGYWlsZWRSZXNwb25zZShELCB2LCBFKSwgdGhpcy5zaG91bGRSZXR1cm5VbmRlZmluZWQoRCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBzd2l0Y2ggKGYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiQXJyYXlCdWZmZXJcIjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBELmJvZHkgPyB5aWVsZCBELmFycmF5QnVmZmVyKCkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJEYXRlXCI6XG4gICAgICAgICAgICAgICAgICBjb25zdCBBID0geWllbGQgdGhpcy5nZXRSb290UGFyc2VOb2RlKEQpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEUuc2V0QXR0cmlidXRlKGkucmVzcG9uc2VUeXBlQXR0cmlidXRlS2V5LCBmKSwgci50cmFjZS5nZXRUcmFjZXIodGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucy5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihgZ2V0JHtmfVZhbHVlYCwgKE4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGYgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQS5nZXROdW1iZXJWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChmID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBLmdldEJvb2xlYW5WYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChmID09PSBcIkRhdGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBLmdldERhdGVWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChmID09PSBcIkR1cmF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQS5nZXREdXJhdGlvblZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGYgPT09IFwiRGF0ZU9ubHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBLmdldERhdGVPbmx5VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gXCJUaW1lT25seVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEEuZ2V0VGltZU9ubHlWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuZXhwZWN0ZWQgdHlwZSB0byBkZXNlcmlhbGl6ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICBOLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgeWllbGQgdGhpcy5wdXJnZVJlc3BvbnNlQm9keShEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgRS5lbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0sIHRoaXMuc2VuZE5vUmVzcG9uc2VDb250ZW50QXN5bmMgPSAoZCwgZiwgXykgPT4ge1xuICAgICAgICBpZiAoIWQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEluZm8gY2Fubm90IGJlIG51bGxcIik7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0VHJhY2luZ1NwYW4oZCwgXCJzZW5kTm9SZXNwb25zZUNvbnRlbnRBc3luY1wiLCAodikgPT4gdC5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IEUgPSB5aWVsZCB0aGlzLmdldEh0dHBSZXNwb25zZU1lc3NhZ2UoZCwgdik7XG4gICAgICAgICAgICBpZiAoZilcbiAgICAgICAgICAgICAgcmV0dXJuIHYuYWRkRXZlbnQoaS5ldmVudFJlc3BvbnNlSGFuZGxlckludm9rZWRLZXkpLCB5aWVsZCBmLmhhbmRsZVJlc3BvbnNlQXN5bmMoRSwgXyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB5aWVsZCB0aGlzLnRocm93SWZGYWlsZWRSZXNwb25zZShFLCBfLCB2KTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIHlpZWxkIHRoaXMucHVyZ2VSZXNwb25zZUJvZHkoRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHYuZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9LCB0aGlzLmVuYWJsZUJhY2tpbmdTdG9yZSA9IChkKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnBhcnNlTm9kZUZhY3RvcnkgPSAoMCwgZS5lbmFibGVCYWNraW5nU3RvcmVGb3JQYXJzZU5vZGVGYWN0b3J5KSh0aGlzLnBhcnNlTm9kZUZhY3RvcnkpLCB0aGlzLnNlcmlhbGl6YXRpb25Xcml0ZXJGYWN0b3J5ID0gKDAsIGUuZW5hYmxlQmFja2luZ1N0b3JlRm9yU2VyaWFsaXphdGlvbldyaXRlckZhY3RvcnkpKHRoaXMuc2VyaWFsaXphdGlvbldyaXRlckZhY3RvcnkpLCAhdGhpcy5zZXJpYWxpemF0aW9uV3JpdGVyRmFjdG9yeSB8fCAhdGhpcy5wYXJzZU5vZGVGYWN0b3J5KVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuYWJsZSB0byBlbmFibGUgYmFja2luZyBzdG9yZVwiKTtcbiAgICAgICAgZCAmJiAoZS5CYWNraW5nU3RvcmVGYWN0b3J5U2luZ2xldG9uLmluc3RhbmNlID0gZCk7XG4gICAgICB9LCB0aGlzLmdldFJvb3RQYXJzZU5vZGUgPSAoZCkgPT4gci50cmFjZS5nZXRUcmFjZXIodGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucy5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihcImdldFJvb3RQYXJzZU5vZGVcIiwgKGYpID0+IHQuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IF8gPSB5aWVsZCBkLmFycmF5QnVmZmVyKCksIHYgPSB0aGlzLmdldFJlc3BvbnNlQ29udGVudFR5cGUoZCk7XG4gICAgICAgICAgaWYgKCF2KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gcmVzcG9uc2UgY29udGVudCB0eXBlIGZvdW5kIGZvciBkZXNlcmlhbGl6YXRpb25cIik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VOb2RlRmFjdG9yeS5nZXRSb290UGFyc2VOb2RlKHYsIF8pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGYuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0pKSwgdGhpcy5zaG91bGRSZXR1cm5VbmRlZmluZWQgPSAoZCkgPT4gZC5zdGF0dXMgPT09IDIwNCB8fCAhZC5ib2R5LCB0aGlzLnB1cmdlUmVzcG9uc2VCb2R5ID0gKGQpID0+IHQuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAhZC5ib2R5VXNlZCAmJiBkLmJvZHkgJiYgKHlpZWxkIGQuYXJyYXlCdWZmZXIoKSk7XG4gICAgICB9KSwgdGhpcy50aHJvd0lmRmFpbGVkUmVzcG9uc2UgPSAoZCwgZiwgXykgPT4gci50cmFjZS5nZXRUcmFjZXIodGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucy5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihcInRocm93SWZGYWlsZWRSZXNwb25zZVwiLCAodikgPT4gdC5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHZhciBFLCBEO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChkLm9rKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIF8uc2V0U3RhdHVzKHtcbiAgICAgICAgICAgIGNvZGU6IHIuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgICAgICBtZXNzYWdlOiBcInJlY2VpdmVkX2Vycm9yX3Jlc3BvbnNlXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBBID0gZC5zdGF0dXMsIE4gPSBBLnRvU3RyaW5nKCk7XG4gICAgICAgICAgaWYgKCFmIHx8ICFmW05dICYmICEoQSA+PSA0MDAgJiYgQSA8IDUwMCAmJiBmW1wiNFhYXCJdKSAmJiAhKEEgPj0gNTAwICYmIEEgPCA2MDAgJiYgZltcIjVYWFwiXSkpIHtcbiAgICAgICAgICAgIF8uc2V0QXR0cmlidXRlKGkuZXJyb3JNYXBwaW5nRm91bmRBdHRyaWJ1dGVOYW1lLCAhMSk7XG4gICAgICAgICAgICBjb25zdCBHID0gbmV3IGUuQXBpRXJyb3IoXCJ0aGUgc2VydmVyIHJldHVybmVkIGFuIHVuZXhwZWN0ZWQgc3RhdHVzIGNvZGUgYW5kIG5vIGVycm9yIGNsYXNzIGlzIHJlZ2lzdGVyZWQgZm9yIHRoaXMgY29kZSBcIiArIEEpO1xuICAgICAgICAgICAgdGhyb3cgXy5yZWNvcmRFeGNlcHRpb24oRyksIEc7XG4gICAgICAgICAgfVxuICAgICAgICAgIF8uc2V0QXR0cmlidXRlKGkuZXJyb3JNYXBwaW5nRm91bmRBdHRyaWJ1dGVOYW1lLCAhMCk7XG4gICAgICAgICAgY29uc3QgVSA9IChEID0gKEUgPSBmW05dKSAhPT0gbnVsbCAmJiBFICE9PSB2b2lkIDAgPyBFIDogQSA+PSA0MDAgJiYgQSA8IDUwMCA/IGZbXCI0WFhcIl0gOiB2b2lkIDApICE9PSBudWxsICYmIEQgIT09IHZvaWQgMCA/IEQgOiBBID49IDUwMCAmJiBBIDwgNjAwID8gZltcIjVYWFwiXSA6IHZvaWQgMCwgdGUgPSB5aWVsZCB0aGlzLmdldFJvb3RQYXJzZU5vZGUoZCk7XG4gICAgICAgICAgbGV0IHogPSByLnRyYWNlLmdldFRyYWNlcih0aGlzLm9ic2VydmFiaWxpdHlPcHRpb25zLmdldFRyYWNlckluc3RydW1lbnRhdGlvbk5hbWUoKSkuc3RhcnRBY3RpdmVTcGFuKFwiZ2V0T2JqZWN0VmFsdWVcIiwgKEcpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZS5nZXRPYmplY3RWYWx1ZShVKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIEcuZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhyb3cgXy5zZXRBdHRyaWJ1dGUoaS5lcnJvckJvZHlGb3VuZEF0dHJpYnV0ZU5hbWUsICEheiksIHogfHwgKHogPSBuZXcgZS5BcGlFcnJvcihcInVuZXhwZWN0ZWQgZXJyb3IgdHlwZVwiICsgdHlwZW9mIHopKSwgXy5yZWNvcmRFeGNlcHRpb24oeiksIHo7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdi5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSkpLCB0aGlzLmdldEh0dHBSZXNwb25zZU1lc3NhZ2UgPSAoZCwgZiwgXykgPT4gci50cmFjZS5nZXRUcmFjZXIodGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucy5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihcImdldEh0dHBSZXNwb25zZU1lc3NhZ2VcIiwgKHYpID0+IHQuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RJbmZvIGNhbm5vdCBiZSBudWxsXCIpO1xuICAgICAgICAgIHRoaXMuc2V0QmFzZVVybEZvclJlcXVlc3RJbmZvcm1hdGlvbihkKTtcbiAgICAgICAgICBjb25zdCBFID0ge307XG4gICAgICAgICAgXyAmJiAoRS5jbGFpbXMgPSBfKSwgeWllbGQgdGhpcy5hdXRoZW50aWNhdGlvblByb3ZpZGVyLmF1dGhlbnRpY2F0ZVJlcXVlc3QoZCwgRSk7XG4gICAgICAgICAgY29uc3QgRCA9IHlpZWxkIHRoaXMuZ2V0UmVxdWVzdEZyb21SZXF1ZXN0SW5mb3JtYXRpb24oZCwgZik7XG4gICAgICAgICAgdGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucyAmJiBkLmFkZFJlcXVlc3RPcHRpb25zKFt0aGlzLm9ic2VydmFiaWxpdHlPcHRpb25zXSk7XG4gICAgICAgICAgbGV0IEEgPSB5aWVsZCB0aGlzLmh0dHBDbGllbnQuZXhlY3V0ZUZldGNoKGQuVVJMLCBELCBkLmdldFJlcXVlc3RPcHRpb25zKCkpO1xuICAgICAgICAgIGlmIChBID0geWllbGQgdGhpcy5yZXRyeUNBRVJlc3BvbnNlSWZSZXF1aXJlZChkLCBBLCBmLCBfKSwgQSkge1xuICAgICAgICAgICAgY29uc3QgTiA9IEEuaGVhZGVycy5nZXQoXCJDb250ZW50LUxlbmd0aFwiKTtcbiAgICAgICAgICAgIE4gJiYgZi5zZXRBdHRyaWJ1dGUoXCJodHRwLnJlc3BvbnNlX2NvbnRlbnRfbGVuZ3RoXCIsIHBhcnNlSW50KE4pKTtcbiAgICAgICAgICAgIGNvbnN0IFUgPSBBLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgICAgICAgICAgVSAmJiBmLnNldEF0dHJpYnV0ZShcImh0dHAucmVzcG9uc2VfY29udGVudF90eXBlXCIsIFUpLCBmLnNldEF0dHJpYnV0ZShcImh0dHAuc3RhdHVzX2NvZGVcIiwgQS5zdGF0dXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB2LmVuZCgpO1xuICAgICAgICB9XG4gICAgICB9KSksIHRoaXMucmV0cnlDQUVSZXNwb25zZUlmUmVxdWlyZWQgPSAoZCwgZiwgXywgdikgPT4gdC5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiByLnRyYWNlLmdldFRyYWNlcih0aGlzLm9ic2VydmFiaWxpdHlPcHRpb25zLmdldFRyYWNlckluc3RydW1lbnRhdGlvbk5hbWUoKSkuc3RhcnRBY3RpdmVTcGFuKFwicmV0cnlDQUVSZXNwb25zZUlmUmVxdWlyZWRcIiwgKEUpID0+IHQuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBEID0gdGhpcy5nZXRDbGFpbXNGcm9tUmVzcG9uc2UoZiwgdik7XG4gICAgICAgICAgICByZXR1cm4gRCA/IChFLmFkZEV2ZW50KGkuYXV0aGVudGljYXRlQ2hhbGxlbmdlZEV2ZW50S2V5KSwgXy5zZXRBdHRyaWJ1dGUoXCJodHRwLnJldHJ5X2NvdW50XCIsIDEpLCB5aWVsZCB0aGlzLnB1cmdlUmVzcG9uc2VCb2R5KGYpLCB5aWVsZCB0aGlzLmdldEh0dHBSZXNwb25zZU1lc3NhZ2UoZCwgXywgRCkpIDogZjtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgRS5lbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0pLCB0aGlzLmdldENsYWltc0Zyb21SZXNwb25zZSA9IChkLCBmKSA9PiB7XG4gICAgICAgIGlmIChkLnN0YXR1cyA9PT0gNDAxICYmICFmKSB7XG4gICAgICAgICAgY29uc3QgXyA9IGQuaGVhZGVycy5nZXQoXCJXV1ctQXV0aGVudGljYXRlXCIpO1xuICAgICAgICAgIGlmIChfICYmIC9eQmVhcmVyIC9naS50ZXN0KF8pKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gXy5yZXBsYWNlKC9eQmVhcmVyIC9naSwgXCJcIikuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBFIG9mIHYpIHtcbiAgICAgICAgICAgICAgY29uc3QgRCA9IEUudHJpbSgpO1xuICAgICAgICAgICAgICBpZiAoL2NsYWltcz1cIlteXCJdK1wiL2dpLnRlc3QoRCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIEQucmVwbGFjZSgvY2xhaW1zPVwiKFteXCJdKylcIi9naSwgXCIkMVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMuc2V0QmFzZVVybEZvclJlcXVlc3RJbmZvcm1hdGlvbiA9IChkKSA9PiB7XG4gICAgICAgIGQucGF0aFBhcmFtZXRlcnMuYmFzZXVybCA9IHRoaXMuYmFzZVVybDtcbiAgICAgIH0sIHRoaXMuZ2V0UmVxdWVzdEZyb21SZXF1ZXN0SW5mb3JtYXRpb24gPSAoZCwgZikgPT4gci50cmFjZS5nZXRUcmFjZXIodGhpcy5vYnNlcnZhYmlsaXR5T3B0aW9ucy5nZXRUcmFjZXJJbnN0cnVtZW50YXRpb25OYW1lKCkpLnN0YXJ0QWN0aXZlU3BhbihcImdldFJlcXVlc3RGcm9tUmVxdWVzdEluZm9ybWF0aW9uXCIsIChfKSA9PiB0Ll9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdmFyIHY7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgRSA9ICh2ID0gZC5odHRwTWV0aG9kKSA9PT0gbnVsbCB8fCB2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2LnRvU3RyaW5nKCksIEQgPSBkLlVSTDtcbiAgICAgICAgICBmLnNldEF0dHJpYnV0ZShcImh0dHAubWV0aG9kXCIsIEUgPz8gXCJcIik7XG4gICAgICAgICAgY29uc3QgQSA9IEQuaW5kZXhPZihcIjovL1wiKSA+IC0xLCBOID0gRC5zcGxpdChcIjovL1wiKTtcbiAgICAgICAgICBBICYmIGYuc2V0QXR0cmlidXRlKFwiaHR0cC5zY2hlbWVcIiwgTlswXSk7XG4gICAgICAgICAgY29uc3QgVSA9IEEgPyBOWzFdIDogRDtcbiAgICAgICAgICBmLnNldEF0dHJpYnV0ZShcImh0dHAuaG9zdFwiLCBVLnNwbGl0KFwiL1wiKVswXSksIHRoaXMub2JzZXJ2YWJpbGl0eU9wdGlvbnMuaW5jbHVkZUVVSUlBdHRyaWJ1dGVzICYmIGYuc2V0QXR0cmlidXRlKFwiaHR0cC51cmlcIiwgZGVjb2RlVVJJQ29tcG9uZW50KEQpKTtcbiAgICAgICAgICBjb25zdCB0ZSA9IGQuaGVhZGVyc1tcIkNvbnRlbnQtTGVuZ3RoXCJdO1xuICAgICAgICAgIHRlICYmIGYuc2V0QXR0cmlidXRlKFwiaHR0cC5yZXF1ZXN0X2NvbnRlbnRfbGVuZ3RoXCIsIHBhcnNlSW50KHRlWzBdKSk7XG4gICAgICAgICAgY29uc3QgeiA9IGQuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXTtcbiAgICAgICAgICB6ICYmIGYuc2V0QXR0cmlidXRlKFwiaHR0cC5yZXF1ZXN0X2NvbnRlbnRfdHlwZVwiLCB6KTtcbiAgICAgICAgICBjb25zdCBHID0gZC5oZWFkZXJzID8gT2JqZWN0LmVudHJpZXMoZC5oZWFkZXJzKS5tYXAoKFtWZSwgTWVdKSA9PiBbVmUudG9Mb2NhbGVMb3dlckNhc2UoKSwgdGhpcy5mb2xkSGVhZGVyVmFsdWUoTWUpXSkgOiB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZDogRSxcbiAgICAgICAgICAgIGhlYWRlcnM6IEcsXG4gICAgICAgICAgICBib2R5OiBkLmNvbnRlbnRcbiAgICAgICAgICB9O1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF8uZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0pKSwgdGhpcy5mb2xkSGVhZGVyVmFsdWUgPSAoZCkgPT4gZC5sZW5ndGggPCAxID8gXCJcIiA6IGQubGVuZ3RoID09PSAxID8gZFswXSA6IGQucmVkdWNlKChmLCBfKSA9PiBmICsgXywgXCIsXCIpLCB0aGlzLmNvbnZlcnRUb05hdGl2ZVJlcXVlc3RBc3luYyA9IChkKSA9PiB0Ll9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaWYgKCFkKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RJbmZvIGNhbm5vdCBiZSBudWxsXCIpO1xuICAgICAgICByZXR1cm4geWllbGQgdGhpcy5hdXRoZW50aWNhdGlvblByb3ZpZGVyLmF1dGhlbnRpY2F0ZVJlcXVlc3QoZCwgdm9pZCAwKSwgdGhpcy5zdGFydFRyYWNpbmdTcGFuKGQsIFwiY29udmVydFRvTmF0aXZlUmVxdWVzdEFzeW5jXCIsIChmKSA9PiB0Ll9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5nZXRSZXF1ZXN0RnJvbVJlcXVlc3RJbmZvcm1hdGlvbihkLCBmKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSksICFsKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhdXRoZW50aWNhdGlvbiBwcm92aWRlciBjYW5ub3QgYmUgbnVsbFwiKTtcbiAgICAgIGlmICghcylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2Ugbm9kZSBmYWN0b3J5IGNhbm5vdCBiZSBudWxsXCIpO1xuICAgICAgaWYgKCFoKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXJpYWxpemF0aW9uIHdyaXRlciBmYWN0b3J5IGNhbm5vdCBiZSBudWxsXCIpO1xuICAgICAgaWYgKCFnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJodHRwIGNsaWVudCBjYW5ub3QgYmUgbnVsbFwiKTtcbiAgICAgIGlmIChiKVxuICAgICAgICB0aGlzLm9ic2VydmFiaWxpdHlPcHRpb25zID0gbmV3IGEuT2JzZXJ2YWJpbGl0eU9wdGlvbnNJbXBsKGIpO1xuICAgICAgZWxzZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvYnNlcnZhYmlsaXR5IG9wdGlvbnMgY2Fubm90IGJlIG51bGxcIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBwZS5GZXRjaFJlcXVlc3RBZGFwdGVyID0gaSwgaS5yZXNwb25zZVR5cGVBdHRyaWJ1dGVLZXkgPSBcImNvbS5taWNyb3NvZnQua2lvdGEucmVzcG9uc2UudHlwZVwiLCBpLmV2ZW50UmVzcG9uc2VIYW5kbGVySW52b2tlZEtleSA9IFwiY29tLm1pY3Jvc29mdC5raW90YS5yZXNwb25zZV9oYW5kbGVyX2ludm9rZWRcIiwgaS5lcnJvck1hcHBpbmdGb3VuZEF0dHJpYnV0ZU5hbWUgPSBcImNvbS5taWNyb3NvZnQua2lvdGEuZXJyb3IubWFwcGluZ19mb3VuZFwiLCBpLmVycm9yQm9keUZvdW5kQXR0cmlidXRlTmFtZSA9IFwiY29tLm1pY3Jvc29mdC5raW90YS5lcnJvci5ib2R5X2ZvdW5kXCIsIGkuYXV0aGVudGljYXRlQ2hhbGxlbmdlZEV2ZW50S2V5ID0gXCJjb20ubWljcm9zb2Z0Lmtpb3RhLmF1dGhlbnRpY2F0ZV9jaGFsbGVuZ2VfcmVjZWl2ZWRcIiwgcGU7XG59XG52YXIgcnQgPSB7fSwgaXI7XG5mdW5jdGlvbiBGYSgpIHtcbiAgcmV0dXJuIGlyIHx8IChpciA9IDEsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShydCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pKSwgcnQ7XG59XG52YXIgRGUgPSB7fSwgbmUgPSB7fSwgb3I7XG5mdW5jdGlvbiBqYSgpIHtcbiAgcmV0dXJuIG9yIHx8IChvciA9IDEsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBuZS5odHRwU3RhdHVzQ29kZSA9IG5lLm1ldGhvZFN0YXR1c0NvZGUgPSB2b2lkIDAsIG5lLm1ldGhvZFN0YXR1c0NvZGUgPSB7XG4gICAgR0VUOiBbNDI5LCA1MDAsIDUwMiwgNTAzLCA1MDRdLFxuICAgIFBPU1Q6IFs0MjksIDUwMCwgNTAyLCA1MDMsIDUwNCwgNTA3XSxcbiAgICBQVVQ6IFs0MjksIDUwMCwgNTAyLCA1MDMsIDUwNCwgNTA3XSxcbiAgICBQQVRDSDogWzQyOSwgNTAwLCA1MDIsIDUwMywgNTA0XSxcbiAgICBERUxFVEU6IFs0MjksIDUwMCwgNTAyLCA1MDMsIDUwNCwgNTA3XVxuICB9LCBuZS5odHRwU3RhdHVzQ29kZSA9IHtcbiAgICAxMDA6IFwiQ29udGludWVcIixcbiAgICAxMDE6IFwiU3dpdGNoaW5nIFByb3RvY29sc1wiLFxuICAgIDEwMjogXCJQcm9jZXNzaW5nXCIsXG4gICAgMTAzOiBcIkVhcmx5IEhpbnRzXCIsXG4gICAgMjAwOiBcIk9LXCIsXG4gICAgMjAxOiBcIkNyZWF0ZWRcIixcbiAgICAyMDI6IFwiQWNjZXB0ZWRcIixcbiAgICAyMDM6IFwiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb25cIixcbiAgICAyMDQ6IFwiTm8gQ29udGVudFwiLFxuICAgIDIwNTogXCJSZXNldCBDb250ZW50XCIsXG4gICAgMjA2OiBcIlBhcnRpYWwgQ29udGVudFwiLFxuICAgIDIwNzogXCJNdWx0aS1TdGF0dXNcIixcbiAgICAyMDg6IFwiQWxyZWFkeSBSZXBvcnRlZFwiLFxuICAgIDIyNjogXCJJTSBVc2VkXCIsXG4gICAgMzAwOiBcIk11bHRpcGxlIENob2ljZXNcIixcbiAgICAzMDE6IFwiTW92ZWQgUGVybWFuZW50bHlcIixcbiAgICAzMDI6IFwiRm91bmRcIixcbiAgICAzMDM6IFwiU2VlIE90aGVyXCIsXG4gICAgMzA0OiBcIk5vdCBNb2RpZmllZFwiLFxuICAgIDMwNTogXCJVc2UgUHJveHlcIixcbiAgICAzMDc6IFwiVGVtcG9yYXJ5IFJlZGlyZWN0XCIsXG4gICAgMzA4OiBcIlBlcm1hbmVudCBSZWRpcmVjdFwiLFxuICAgIDQwMDogXCJCYWQgUmVxdWVzdFwiLFxuICAgIDQwMTogXCJVbmF1dGhvcml6ZWRcIixcbiAgICA0MDI6IFwiUGF5bWVudCBSZXF1aXJlZFwiLFxuICAgIDQwMzogXCJGb3JiaWRkZW5cIixcbiAgICA0MDQ6IFwiTm90IEZvdW5kXCIsXG4gICAgNDA1OiBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiLFxuICAgIDQwNjogXCJOb3QgQWNjZXB0YWJsZVwiLFxuICAgIDQwNzogXCJQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiLFxuICAgIDQwODogXCJSZXF1ZXN0IFRpbWVvdXRcIixcbiAgICA0MDk6IFwiQ29uZmxpY3RcIixcbiAgICA0MTA6IFwiR29uZVwiLFxuICAgIDQxMTogXCJMZW5ndGggUmVxdWlyZWRcIixcbiAgICA0MTI6IFwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLFxuICAgIDQxMzogXCJQYXlsb2FkIFRvbyBMYXJnZVwiLFxuICAgIDQxNDogXCJVUkkgVG9vIExvbmdcIixcbiAgICA0MTU6IFwiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZVwiLFxuICAgIDQxNjogXCJSYW5nZSBOb3QgU2F0aXNmaWFibGVcIixcbiAgICA0MTc6IFwiRXhwZWN0YXRpb24gRmFpbGVkXCIsXG4gICAgNDIxOiBcIk1pc2RpcmVjdGVkIFJlcXVlc3RcIixcbiAgICA0MjI6IFwiVW5wcm9jZXNzYWJsZSBFbnRpdHlcIixcbiAgICA0MjM6IFwiTG9ja2VkXCIsXG4gICAgNDI0OiBcIkZhaWxlZCBEZXBlbmRlbmN5XCIsXG4gICAgNDI1OiBcIlRvbyBFYXJseVwiLFxuICAgIDQyNjogXCJVcGdyYWRlIFJlcXVpcmVkXCIsXG4gICAgNDI4OiBcIlByZWNvbmRpdGlvbiBSZXF1aXJlZFwiLFxuICAgIDQyOTogXCJUb28gTWFueSBSZXF1ZXN0c1wiLFxuICAgIDQzMTogXCJSZXF1ZXN0IEhlYWRlciBGaWVsZHMgVG9vIExhcmdlXCIsXG4gICAgNDUxOiBcIlVuYXZhaWxhYmxlIEZvciBMZWdhbCBSZWFzb25zXCIsXG4gICAgNTAwOiBcIkludGVybmFsIFNlcnZlciBFcnJvclwiLFxuICAgIDUwMTogXCJOb3QgSW1wbGVtZW50ZWRcIixcbiAgICA1MDI6IFwiQmFkIEdhdGV3YXlcIixcbiAgICA1MDM6IFwiU2VydmljZSBVbmF2YWlsYWJsZVwiLFxuICAgIDUwNDogXCJHYXRld2F5IFRpbWVvdXRcIixcbiAgICA1MDU6IFwiSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWRcIixcbiAgICA1MDY6IFwiVmFyaWFudCBBbHNvIE5lZ290aWF0ZXNcIixcbiAgICA1MDc6IFwiSW5zdWZmaWNpZW50IFN0b3JhZ2VcIixcbiAgICA1MDg6IFwiTG9vcCBEZXRlY3RlZFwiLFxuICAgIDUxMDogXCJOb3QgRXh0ZW5kZWRcIixcbiAgICA1MTE6IFwiTmV0d29yayBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiXG4gIH0pLCBuZTtcbn1cbnZhciBudCA9IHt9LCBzcjtcbmZ1bmN0aW9uIFhyKCkge1xuICByZXR1cm4gc3IgfHwgKHNyID0gMSwgZnVuY3Rpb24odCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIHQuQ2hhb3NTdHJhdGVneSA9IHZvaWQgMCwgZnVuY3Rpb24oZSkge1xuICAgICAgZVtlLk1BTlVBTCA9IDBdID0gXCJNQU5VQUxcIiwgZVtlLlJBTkRPTSA9IDFdID0gXCJSQU5ET01cIjtcbiAgICB9KHQuQ2hhb3NTdHJhdGVneSB8fCAodC5DaGFvc1N0cmF0ZWd5ID0ge30pKTtcbiAgfShudCkpLCBudDtcbn1cbnZhciBscjtcbmZ1bmN0aW9uIHFhKCkge1xuICBpZiAobHIpXG4gICAgcmV0dXJuIERlO1xuICBsciA9IDEsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBEZS5DaGFvc0hhbmRsZXIgPSB2b2lkIDA7XG4gIGNvbnN0IHQgPSBjZSwgZSA9IGhlKCksIHIgPSBqYSgpLCBuID0gWHIoKTtcbiAgY2xhc3MgYSB7XG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIFRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBDaGFvc0hhbmRsZXJcbiAgICAgKiBAcGFyYW0ge0NoYW9zSGFuZGxlck9wdGlvbnN9IFtvcHRpb25zID0gbmV3IENoYW9zSGFuZGxlck9wdGlvbnMoKV0gLSBUaGUgY2hhb3MgaGFuZGxlciBvcHRpb25zIGluc3RhbmNlXG4gICAgICogQHBhcmFtIG1hbnVhbE1hcCAtIFRoZSBNYXAgcGFzc2VkIGJ5IHVzZXIgY29udGFpbmluZyB1cmwtc3RhdHVzQ29kZSBpbmZvXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobywgbCkge1xuICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICBjaGFvc1N0cmF0ZWd5OiBuLkNoYW9zU3RyYXRlZ3kuUkFORE9NLFxuICAgICAgICBzdGF0dXNNZXNzYWdlOiBcIkEgcmFuZG9tIHN0YXR1cyBtZXNzYWdlXCIsXG4gICAgICAgIGNoYW9zUGVyY2VudGFnZTogMTBcbiAgICAgIH07XG4gICAgICBjb25zdCBzID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG8pO1xuICAgICAgaWYgKHMuY2hhb3NQZXJjZW50YWdlID4gMTAwIHx8IHMuY2hhb3NQZXJjZW50YWdlIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hhb3MgUGVyY2VudGFnZSBtdXN0IGJlIHNldCB0byBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlwiKTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IHMsIHRoaXMubWFudWFsTWFwID0gbCA/PyAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGEgcmFuZG9tIHN0YXR1cyBjb2RlIGZvciB0aGUgUkFORE9NIG1vZGUgZnJvbSB0aGUgcHJlZGVmaW5lZCBhcnJheVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RNZXRob2QgLSB0aGUgQVBJIG1ldGhvZCBmb3IgdGhlIHJlcXVlc3RcbiAgICAgKiBAcmV0dXJucyBhIHJhbmRvbSBzdGF0dXMgY29kZSBmcm9tIGEgZ2l2ZW4gc2V0IG9mIHN0YXR1cyBjb2Rlc1xuICAgICAqL1xuICAgIGdlbmVyYXRlUmFuZG9tU3RhdHVzQ29kZShvKSB7XG4gICAgICBjb25zdCBsID0gci5tZXRob2RTdGF0dXNDb2RlW29dO1xuICAgICAgcmV0dXJuIGxbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbC5sZW5ndGgpXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RyaXBzIG91dCB0aGUgaG9zdCB1cmwgYW5kIHJldHVybnMgdGhlIHJlbGF0aXZlIHVybCBvbmx5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NoYW9zSGFuZGxlck9wdGlvbnN9IGNoYW9zSGFuZGxlck9wdGlvbnMgLSBUaGUgQ2hhb3NIYW5kbGVyT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsTWV0aG9kIC0gdGhlIGNvbXBsZXRlIFVSTFxuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgYXMgcmVsYXRpdmUgVVJMXG4gICAgICovXG4gICAgZ2V0UmVsYXRpdmVVUkwobywgbCkge1xuICAgICAgY29uc3QgcyA9IG8uYmFzZVVybDtcbiAgICAgIHJldHVybiBzID09PSB2b2lkIDAgPyBsIDogbC5yZXBsYWNlKHMsIFwiXCIpLnRyaW0oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0YXR1cyBjb2RlIGZyb20gdGhlIG9wdGlvbnMgb3IgYSByYW5kb21seSBnZW5lcmF0ZWQgc3RhdHVzIGNvZGVcbiAgICAgKiBAcGFyYW0ge0NoYW9zSGFuZGxlck9wdGlvbnN9IGNoYW9zSGFuZGxlck9wdGlvbnMgLSBUaGUgQ2hhb3NIYW5kbGVyT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdFVSTCAtIHRoZSBVUkwgZm9yIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHtIdHRwTWV0aG9kfSByZXF1ZXN0TWV0aG9kIC0gdGhlIEFQSSBtZXRob2QgZm9yIHRoZSByZXF1ZXN0XG4gICAgICogQHJldHVybnMge251bWJlcn0gZ2VuZXJhdGVkIHN0YXR1c0NvZGVcbiAgICAgKi9cbiAgICBnZXRTdGF0dXNDb2RlKG8sIGwsIHMpIHtcbiAgICAgIGlmIChvLmNoYW9zU3RyYXRlZ3kgPT09IG4uQ2hhb3NTdHJhdGVneS5NQU5VQUwpIHtcbiAgICAgICAgaWYgKG8uc3RhdHVzQ29kZSAhPT0gdm9pZCAwKVxuICAgICAgICAgIHJldHVybiBvLnN0YXR1c0NvZGU7XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBoID0gdGhpcy5nZXRSZWxhdGl2ZVVSTChvLCBsKSwgZyA9IHRoaXMubWFudWFsTWFwLmdldChoKTtcbiAgICAgICAgICBpZiAoZyAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBjb25zdCBiID0gZy5nZXQocyk7XG4gICAgICAgICAgICBpZiAoYiAhPT0gdm9pZCAwKVxuICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHRoaXMubWFudWFsTWFwLmZvckVhY2goKGIsIGQpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGY7XG4gICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKGQgKyBcIiRcIikudGVzdChoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSAoZiA9IHRoaXMubWFudWFsTWFwLmdldChkKSkgPT09IG51bGwgfHwgZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZi5nZXQocyk7XG4gICAgICAgICAgICAgICAgaWYgKHYgIT09IHZvaWQgMClcbiAgICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVSYW5kb21TdGF0dXNDb2RlKHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSByZXNwb25keSBmb3IgdGhlIGNoYW9lIHJlc3BvbnNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NoYW9zSGFuZGxlck9wdGlvbnN9IGNoYW9zSGFuZGxlck9wdGlvbnMgLSBUaGUgQ2hhb3NIYW5kbGVyT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdElEIC0gcmVxdWVzdCBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0RGF0ZSAtIGRhdGUgb2YgdGhlIHJlcXVlc3RcbiAgICAgKiAgKiBAcmV0dXJucyByZXNwb25zZSBib2R5XG4gICAgICovXG4gICAgY3JlYXRlUmVzcG9uc2VCb2R5KG8sIGwpIHtcbiAgICAgIGlmIChvLnJlc3BvbnNlQm9keSlcbiAgICAgICAgcmV0dXJuIG8ucmVzcG9uc2VCb2R5O1xuICAgICAgbGV0IHM7XG4gICAgICBpZiAobCA+PSA0MDApIHtcbiAgICAgICAgY29uc3QgaCA9IHIuaHR0cFN0YXR1c0NvZGVbbF0sIGcgPSBvLnN0YXR1c01lc3NhZ2U7XG4gICAgICAgIHMgPSB7XG4gICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIGNvZGU6IGgsXG4gICAgICAgICAgICBtZXNzYWdlOiBnXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlXG4gICAgICAgIHMgPSB7fTtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wb3NlcyBhIG5ldyBjaGFvdGljIHJlc3BvbnNlIGNvZGUgd2l0aCB0aGUgY29uZmlndXJlZCBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSB7RmV0Y2hSZXF1ZXN0SW5pdH0gZmV0Y2hSZXF1ZXN0SW5pdFxuICAgICAqIEByZXR1cm5zIHtSZXNwb25zZX1cbiAgICAgKi9cbiAgICBjcmVhdGVDaGFvc1Jlc3BvbnNlKG8sIGwpIHtcbiAgICAgIHZhciBzO1xuICAgICAgaWYgKGwubWV0aG9kID09PSB2b2lkIDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlcXVlc3QgbWV0aG9kIG11c3QgYmUgZGVmaW5lZC5cIik7XG4gICAgICBjb25zdCBoID0gbC5tZXRob2QsIGcgPSB0aGlzLmdldFN0YXR1c0NvZGUodGhpcy5vcHRpb25zLCBvLCBoKSwgYiA9IHRoaXMuY3JlYXRlUmVzcG9uc2VCb2R5KHRoaXMub3B0aW9ucywgZyksIGQgPSB0eXBlb2YgYiA9PSBcInN0cmluZ1wiID8gYiA6IEpTT04uc3RyaW5naWZ5KGIpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXJsOiBvLFxuICAgICAgICBib2R5OiBkLFxuICAgICAgICBzdGF0dXM6IGcsXG4gICAgICAgIHN0YXR1c1RleHQ6IHRoaXMub3B0aW9ucy5zdGF0dXNNZXNzYWdlLFxuICAgICAgICBoZWFkZXJzOiAocyA9IHRoaXMub3B0aW9ucy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBzICE9PSB2b2lkIDAgPyBzIDoge31cbiAgICAgIH07XG4gICAgfVxuICAgIGV4ZWN1dGUobywgbCwgcykge1xuICAgICAgY29uc3QgaCA9ICgwLCBlLmdldE9ic2VydmFiaWxpdHlPcHRpb25zRnJvbVJlcXVlc3QpKHMpO1xuICAgICAgcmV0dXJuIGggPyB0LnRyYWNlLmdldFRyYWNlcihoLmdldFRyYWNlckluc3RydW1lbnRhdGlvbk5hbWUoKSkuc3RhcnRBY3RpdmVTcGFuKFwiY2hhb3NIYW5kbGVyIC0gZXhlY3V0ZVwiLCAoZykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBnLnNldEF0dHJpYnV0ZShcImNvbS5taWNyb3NvZnQua2lvdGEuaGFuZGxlci5jaGFvcy5lbmFibGVcIiwgITApLCB0aGlzLnJ1bkNoYW9zKG8sIGwsIHMpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGcuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0pIDogdGhpcy5ydW5DaGFvcyhvLCBsLCBzKTtcbiAgICB9XG4gICAgcnVuQ2hhb3MobywgbCwgcywgaCkge1xuICAgICAgaWYgKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkgPCB0aGlzLm9wdGlvbnMuY2hhb3NQZXJjZW50YWdlKVxuICAgICAgICByZXR1cm4gaD8uYWRkRXZlbnQoYS5jaGFvc0hhbmRsZXJUcmlnZ2VyZWRFdmVudEtleSksIFByb21pc2UucmVzb2x2ZSh0aGlzLmNyZWF0ZUNoYW9zUmVzcG9uc2UobywgbCkpO1xuICAgICAgaWYgKCF0aGlzLm5leHQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBzZXQgdGhlIG5leHQgbWlkZGxld2FyZSB0byBjb250aW51ZSB0aGUgcmVxdWVzdFwiKTtcbiAgICAgIHJldHVybiB0aGlzLm5leHQuZXhlY3V0ZShvLCBsLCBzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIERlLkNoYW9zSGFuZGxlciA9IGEsIGEuY2hhb3NIYW5kbGVyVHJpZ2dlcmVkRXZlbnRLZXkgPSBcImNvbS5taWNyb3NvZnQua2lvdGEuY2hhb3NfaGFuZGxlcl90cmlnZ2VyZWRcIiwgRGU7XG59XG52YXIgUmUgPSB7fSwgdXI7XG5mdW5jdGlvbiBVYSgpIHtcbiAgcmV0dXJuIHVyIHx8ICh1ciA9IDEsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBSZS5DaGFvc0hhbmRsZXJPcHRpb25zS2V5ID0gdm9pZCAwLCBSZS5DaGFvc0hhbmRsZXJPcHRpb25zS2V5ID0gXCJDaGFvc0hhbmRsZXJPcHRpb25zS2V5XCIpLCBSZTtcbn1cbnZhciBhdCA9IHt9LCBkcjtcbmZ1bmN0aW9uIHphKCkge1xuICByZXR1cm4gZHIgfHwgKGRyID0gMSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGF0LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSkpLCBhdDtcbn1cbnZhciBpdCA9IHt9LCBjcjtcbmZ1bmN0aW9uIHhhKCkge1xuICByZXR1cm4gY3IgfHwgKGNyID0gMSwgZnVuY3Rpb24odCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIHQuVGVsZW1ldHJ5SGFuZGxlciA9IHQuVGVsZW1ldHJ5SGFuZGxlck9wdGlvbnNLZXkgPSB2b2lkIDAsIHQuVGVsZW1ldHJ5SGFuZGxlck9wdGlvbnNLZXkgPSBcIlRlbGVtZXRyeUhhbmRsZXJPcHRpb25zS2V5XCI7XG4gICAgY2xhc3MgZSB7XG4gICAgICBjb25zdHJ1Y3RvcihuKSB7XG4gICAgICAgIHRoaXMudGVsZW1ldHJ5SGFuZGxlck9wdGlvbnMgPSBuO1xuICAgICAgfVxuICAgICAgZXhlY3V0ZShuLCBhLCBpKSB7XG4gICAgICAgIGlmICh0aGlzLnRlbGVtZXRyeUhhbmRsZXJPcHRpb25zICYmIHRoaXMudGVsZW1ldHJ5SGFuZGxlck9wdGlvbnMudGVsZW1ldHJ5Q29uZmlndXJhdG9yID8gdGhpcy50ZWxlbWV0cnlIYW5kbGVyT3B0aW9ucy50ZWxlbWV0cnlDb25maWd1cmF0b3IobiwgYSwgaSwgdGhpcy50ZWxlbWV0cnlIYW5kbGVyT3B0aW9ucy50ZWxlbWV0cnlJbmZvbWF0aW9uKSA6IGkgJiYgaVt0LlRlbGVtZXRyeUhhbmRsZXJPcHRpb25zS2V5XSAmJiBpW3QuVGVsZW1ldHJ5SGFuZGxlck9wdGlvbnNLZXldLnRlbGVtZXRyeUNvbmZpZ3VyYXRvcihuLCBhLCBpKSwgIXRoaXMubmV4dClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2Ugc2V0IHRoZSBuZXh0IG1pZGRsZXdhcmUgdG8gY29udGludWUgdGhlIHJlcXVlc3RcIik7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHQuZXhlY3V0ZShuLCBhLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdC5UZWxlbWV0cnlIYW5kbGVyID0gZTtcbiAgfShpdCkpLCBpdDtcbn1cbnZhciBvdCA9IHt9LCBocjtcbmZ1bmN0aW9uIEJhKCkge1xuICByZXR1cm4gaHIgfHwgKGhyID0gMSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG90LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSkpLCBvdDtcbn1cbihmdW5jdGlvbih0KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XG4gIGNvbnN0IGUgPSAkO1xuICBlLl9fZXhwb3J0U3RhcihIYSgpLCB0KSwgZS5fX2V4cG9ydFN0YXIoJHIoKSwgdCksIGUuX19leHBvcnRTdGFyKEZhKCksIHQpLCBlLl9fZXhwb3J0U3RhcihxYSgpLCB0KSwgZS5fX2V4cG9ydFN0YXIoVnQoKSwgdCksIGUuX19leHBvcnRTdGFyKFVyKCksIHQpLCBlLl9fZXhwb3J0U3Rhcih4cigpLCB0KSwgZS5fX2V4cG9ydFN0YXIoTHIoKSwgdCksIGUuX19leHBvcnRTdGFyKEdyKCksIHQpLCBlLl9fZXhwb3J0U3RhcihVYSgpLCB0KSwgZS5fX2V4cG9ydFN0YXIoWHIoKSwgdCksIGUuX19leHBvcnRTdGFyKHFyKCksIHQpLCBlLl9fZXhwb3J0U3Rhcih6cigpLCB0KSwgZS5fX2V4cG9ydFN0YXIoQnIoKSwgdCksIGUuX19leHBvcnRTdGFyKHphKCksIHQpLCBlLl9fZXhwb3J0U3RhcihLcigpLCB0KSwgZS5fX2V4cG9ydFN0YXIoeGEoKSwgdCksIGUuX19leHBvcnRTdGFyKGtyKCksIHQpLCBlLl9fZXhwb3J0U3RhcihNdCgpLCB0KSwgZS5fX2V4cG9ydFN0YXIoQmEoKSwgdCk7XG59KShndCk7XG5jbGFzcyBMYSB7XG4gIC8qKiBSZXF1ZXN0IGhlYWRlcnMgKi9cbiAgaGVhZGVycztcbiAgLyoqIFJlcXVlc3Qgb3B0aW9ucyAqL1xuICBvcHRpb25zO1xufVxuY2xhc3MgZnIge1xuICAvKiogU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC4gKi9cbiAgX2FkZGl0aW9uYWxEYXRhO1xuICAvKiogVXNlciBJRHMgdG8gYXNzaWduIHRvIHRoZSBsaWNlbnNlLiAqL1xuICBfYXNzaWduO1xuICAvKiogVXNlciBJRHMgdG8gcmVtb3ZlIGZyb20gdGhlIGxpY2Vuc2UuICovXG4gIF91bmFzc2lnbjtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGFzc2lnbiBwcm9wZXJ0eSB2YWx1ZS4gVXNlciBJRHMgdG8gYXNzaWduIHRvIHRoZSBsaWNlbnNlLlxuICAgKiBAcmV0dXJucyBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0IGFzc2lnbigpIHtcbiAgICByZXR1cm4gdGhpcy5fYXNzaWduO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhc3NpZ24gcHJvcGVydHkgdmFsdWUuIFVzZXIgSURzIHRvIGFzc2lnbiB0byB0aGUgbGljZW5zZS5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGFzc2lnbiBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhc3NpZ24oZSkge1xuICAgIHRoaXMuX2Fzc2lnbiA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBMaWNlbnNlc19zZXJ2aWNlSWRfYm9keSBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFzc2lnbjogKGUpID0+IHtcbiAgICAgICAgdGhpcy5hc3NpZ24gPSBlLmdldENvbGxlY3Rpb25PZlByaW1pdGl2ZVZhbHVlcygpO1xuICAgICAgfSxcbiAgICAgIHVuYXNzaWduOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLnVuYXNzaWduID0gZS5nZXRDb2xsZWN0aW9uT2ZQcmltaXRpdmVWYWx1ZXMoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlQ29sbGVjdGlvbk9mUHJpbWl0aXZlVmFsdWVzKFwiYXNzaWduXCIsIHRoaXMuYXNzaWduKSwgZS53cml0ZUNvbGxlY3Rpb25PZlByaW1pdGl2ZVZhbHVlcyhcInVuYXNzaWduXCIsIHRoaXMudW5hc3NpZ24pLCBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIHVuYXNzaWduIHByb3BlcnR5IHZhbHVlLiBVc2VyIElEcyB0byByZW1vdmUgZnJvbSB0aGUgbGljZW5zZS5cbiAgICogQHJldHVybnMgYSBzdHJpbmdcbiAgICovXG4gIGdldCB1bmFzc2lnbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdW5hc3NpZ247XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIHVuYXNzaWduIHByb3BlcnR5IHZhbHVlLiBVc2VyIElEcyB0byByZW1vdmUgZnJvbSB0aGUgbGljZW5zZS5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIHVuYXNzaWduIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IHVuYXNzaWduKGUpIHtcbiAgICB0aGlzLl91bmFzc2lnbiA9IGU7XG4gIH1cbn1cbmNsYXNzIEthIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBwcm9wZXJ0eSAqL1xuICBfZGVzY3JpcHRpb247XG4gIC8qKiBUaGUgcmVzdWx0IHByb3BlcnR5ICovXG4gIF9yZXN1bHQ7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgVjFhbHBoYUNoZWNrUGVybWlzc2lvblJlc3BvbnNlIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGRlc2NyaXB0aW9uIHByb3BlcnR5IHZhbHVlLiBUaGUgZGVzY3JpcHRpb24gcHJvcGVydHlcbiAgICogQHJldHVybnMgYSBzdHJpbmdcbiAgICovXG4gIGdldCBkZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRlc2NyaXB0aW9uIHByb3BlcnR5IHZhbHVlLiBUaGUgZGVzY3JpcHRpb24gcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGRlc2NyaXB0aW9uIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGRlc2NyaXB0aW9uKGUpIHtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IChlKSA9PiB7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgcmVzdWx0OiAoZSkgPT4ge1xuICAgICAgICB0aGlzLnJlc3VsdCA9IGUuZ2V0Qm9vbGVhblZhbHVlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgcmVzdWx0IHByb3BlcnR5IHZhbHVlLiBUaGUgcmVzdWx0IHByb3BlcnR5XG4gICAqIEByZXR1cm5zIGEgYm9vbGVhblxuICAgKi9cbiAgZ2V0IHJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzdWx0O1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSByZXN1bHQgcHJvcGVydHkgdmFsdWUuIFRoZSByZXN1bHQgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIHJlc3VsdCBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCByZXN1bHQoZSkge1xuICAgIHRoaXMuX3Jlc3VsdCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVTdHJpbmdWYWx1ZShcImRlc2NyaXB0aW9uXCIsIHRoaXMuZGVzY3JpcHRpb24pLCBlLndyaXRlQm9vbGVhblZhbHVlKFwicmVzdWx0XCIsIHRoaXMucmVzdWx0KSwgZS53cml0ZUFkZGl0aW9uYWxEYXRhKHRoaXMuYWRkaXRpb25hbERhdGEpO1xuICB9XG59XG5jbGFzcyBHYSB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKiBDdXJyZW50IG51bWJlciBvZiBhdmFpbGFibGUgc2VhdHMgd2hpY2ggY2FuIGJlIGFzc2lnbmVkLiAqL1xuICBfc2VhdHNBdmFpbGFibGU7XG4gIC8qKiBUb3RhbCBudW1iZXIgb2Ygc2VhdHMgYXNzaWduYWJsZS4gKi9cbiAgX3NlYXRzVG90YWw7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgVjFhbHBoYUdldExpY2Vuc2VSZXNwb25zZSBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlYXRzQXZhaWxhYmxlOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLnNlYXRzQXZhaWxhYmxlID0gZS5nZXROdW1iZXJWYWx1ZSgpO1xuICAgICAgfSxcbiAgICAgIHNlYXRzVG90YWw6IChlKSA9PiB7XG4gICAgICAgIHRoaXMuc2VhdHNUb3RhbCA9IGUuZ2V0TnVtYmVyVmFsdWUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzZWF0c0F2YWlsYWJsZSBwcm9wZXJ0eSB2YWx1ZS4gQ3VycmVudCBudW1iZXIgb2YgYXZhaWxhYmxlIHNlYXRzIHdoaWNoIGNhbiBiZSBhc3NpZ25lZC5cbiAgICogQHJldHVybnMgYSBpbnRlZ2VyXG4gICAqL1xuICBnZXQgc2VhdHNBdmFpbGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlYXRzQXZhaWxhYmxlO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzZWF0c0F2YWlsYWJsZSBwcm9wZXJ0eSB2YWx1ZS4gQ3VycmVudCBudW1iZXIgb2YgYXZhaWxhYmxlIHNlYXRzIHdoaWNoIGNhbiBiZSBhc3NpZ25lZC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIHNlYXRzQXZhaWxhYmxlIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IHNlYXRzQXZhaWxhYmxlKGUpIHtcbiAgICB0aGlzLl9zZWF0c0F2YWlsYWJsZSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNlYXRzVG90YWwgcHJvcGVydHkgdmFsdWUuIFRvdGFsIG51bWJlciBvZiBzZWF0cyBhc3NpZ25hYmxlLlxuICAgKiBAcmV0dXJucyBhIGludGVnZXJcbiAgICovXG4gIGdldCBzZWF0c1RvdGFsKCkge1xuICAgIHJldHVybiB0aGlzLl9zZWF0c1RvdGFsO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzZWF0c1RvdGFsIHByb3BlcnR5IHZhbHVlLiBUb3RhbCBudW1iZXIgb2Ygc2VhdHMgYXNzaWduYWJsZS5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIHNlYXRzVG90YWwgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgc2VhdHNUb3RhbChlKSB7XG4gICAgdGhpcy5fc2VhdHNUb3RhbCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVOdW1iZXJWYWx1ZShcInNlYXRzQXZhaWxhYmxlXCIsIHRoaXMuc2VhdHNBdmFpbGFibGUpLCBlLndyaXRlTnVtYmVyVmFsdWUoXCJzZWF0c1RvdGFsXCIsIHRoaXMuc2VhdHNUb3RhbCksIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuZnVuY3Rpb24ga2EodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgWGEoKTtcbn1cbmNsYXNzICRhIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqIEp1c3QgdXNlciBJRHMsIHVubGVzcyBcImluY2x1ZGVVc2Vyc1wiID0gdHJ1ZS4gKi9cbiAgX3VzZXJzO1xuICAvKipcbiAgICogR2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgICovXG4gIGdldCBhZGRpdGlvbmFsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkaXRpb25hbERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgQWRkaXRpb25hbERhdGEgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgYWRkaXRpb25hbERhdGEoZSkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFYxYWxwaGFHZXRTZWF0c1Jlc3BvbnNlIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlcnM6IChlKSA9PiB7XG4gICAgICAgIHRoaXMudXNlcnMgPSBlLmdldENvbGxlY3Rpb25PZk9iamVjdFZhbHVlcyhrYSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgZS53cml0ZUNvbGxlY3Rpb25PZk9iamVjdFZhbHVlcyhcInVzZXJzXCIsIHRoaXMudXNlcnMpLCBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIHVzZXJzIHByb3BlcnR5IHZhbHVlLiBKdXN0IHVzZXIgSURzLCB1bmxlc3MgXCJpbmNsdWRlVXNlcnNcIiA9IHRydWUuXG4gICAqIEByZXR1cm5zIGEgdjFhbHBoYUdldFNlYXRzVXNlclJlcHJlc2VudGF0aW9uXG4gICAqL1xuICBnZXQgdXNlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJzO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSB1c2VycyBwcm9wZXJ0eSB2YWx1ZS4gSnVzdCB1c2VyIElEcywgdW5sZXNzIFwiaW5jbHVkZVVzZXJzXCIgPSB0cnVlLlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgdXNlcnMgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgdXNlcnMoZSkge1xuICAgIHRoaXMuX3VzZXJzID0gZTtcbiAgfVxufVxuY2xhc3MgWGEge1xuICAvKiogU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC4gKi9cbiAgX2FkZGl0aW9uYWxEYXRhO1xuICAvKiogVGhlIGFzc2lnbmVkIHByb3BlcnR5ICovXG4gIF9hc3NpZ25lZDtcbiAgLyoqIFRoZSBkaXNwbGF5TmFtZSBwcm9wZXJ0eSAqL1xuICBfZGlzcGxheU5hbWU7XG4gIC8qKiBUaGUgaWQgcHJvcGVydHkgKi9cbiAgX2lkO1xuICAvKipcbiAgICogR2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgICovXG4gIGdldCBhZGRpdGlvbmFsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkaXRpb25hbERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgQWRkaXRpb25hbERhdGEgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgYWRkaXRpb25hbERhdGEoZSkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgYXNzaWduZWQgcHJvcGVydHkgdmFsdWUuIFRoZSBhc3NpZ25lZCBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIGJvb2xlYW5cbiAgICovXG4gIGdldCBhc3NpZ25lZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXNzaWduZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFzc2lnbmVkIHByb3BlcnR5IHZhbHVlLiBUaGUgYXNzaWduZWQgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGFzc2lnbmVkIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFzc2lnbmVkKGUpIHtcbiAgICB0aGlzLl9hc3NpZ25lZCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyB2MWFscGhhR2V0U2VhdHNVc2VyUmVwcmVzZW50YXRpb24gYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgZGlzcGxheU5hbWUgcHJvcGVydHkgdmFsdWUuIFRoZSBkaXNwbGF5TmFtZSBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0IGRpc3BsYXlOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNwbGF5TmFtZTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgZGlzcGxheU5hbWUgcHJvcGVydHkgdmFsdWUuIFRoZSBkaXNwbGF5TmFtZSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgZGlzcGxheU5hbWUgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgZGlzcGxheU5hbWUoZSkge1xuICAgIHRoaXMuX2Rpc3BsYXlOYW1lID0gZTtcbiAgfVxuICAvKipcbiAgICogVGhlIGRlc2VyaWFsaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCAobm9kZTogUGFyc2VOb2RlKSA9PiB2b2lkPlxuICAgKi9cbiAgZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhc3NpZ25lZDogKGUpID0+IHtcbiAgICAgICAgdGhpcy5hc3NpZ25lZCA9IGUuZ2V0Qm9vbGVhblZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgZGlzcGxheU5hbWU6IChlKSA9PiB7XG4gICAgICAgIHRoaXMuZGlzcGxheU5hbWUgPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgaWQ6IChlKSA9PiB7XG4gICAgICAgIHRoaXMuaWQgPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgaWQgcHJvcGVydHkgdmFsdWUuIFRoZSBpZCBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgaWQgcHJvcGVydHkgdmFsdWUuIFRoZSBpZCBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgaWQgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgaWQoZSkge1xuICAgIHRoaXMuX2lkID0gZTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgZS53cml0ZUJvb2xlYW5WYWx1ZShcImFzc2lnbmVkXCIsIHRoaXMuYXNzaWduZWQpLCBlLndyaXRlU3RyaW5nVmFsdWUoXCJkaXNwbGF5TmFtZVwiLCB0aGlzLmRpc3BsYXlOYW1lKSwgZS53cml0ZVN0cmluZ1ZhbHVlKFwiaWRcIiwgdGhpcy5pZCksIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuY2xhc3MgV2Ege1xuICAvKiogU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC4gKi9cbiAgX2FkZGl0aW9uYWxEYXRhO1xuICAvKipcbiAgICogR2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgICovXG4gIGdldCBhZGRpdGlvbmFsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkaXRpb25hbERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgQWRkaXRpb25hbERhdGEgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgYWRkaXRpb25hbERhdGEoZSkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFYxYWxwaGFNb2RpZnlTZWF0c1Jlc3BvbnNlIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuZnVuY3Rpb24gWWEodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgS2EoKTtcbn1cbmNsYXNzIFFhIGV4dGVuZHMgaiB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgVjFhbHBoYUNoZWNrUGVybWlzc2lvblJlc3BvbnNlNDAxRXJyb3IgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKSwgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogVGhlIGRlc2VyaWFsaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCAobm9kZTogUGFyc2VOb2RlKSA9PiB2b2lkPlxuICAgKi9cbiAgZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgZS53cml0ZUFkZGl0aW9uYWxEYXRhKHRoaXMuYWRkaXRpb25hbERhdGEpO1xuICB9XG59XG5jbGFzcyBaYSBleHRlbmRzIGoge1xuICAvKiogU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC4gKi9cbiAgX2FkZGl0aW9uYWxEYXRhO1xuICAvKipcbiAgICogR2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgICovXG4gIGdldCBhZGRpdGlvbmFsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkaXRpb25hbERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgQWRkaXRpb25hbERhdGEgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgYWRkaXRpb25hbERhdGEoZSkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFYxYWxwaGFDaGVja1Blcm1pc3Npb25SZXNwb25zZTQwM0Vycm9yIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCksIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuY2xhc3MgSmEgZXh0ZW5kcyBqIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBWMWFscGhhQ2hlY2tQZXJtaXNzaW9uUmVzcG9uc2U1MDBFcnJvciBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpLCB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVpKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IFFhKCk7XG59XG5mdW5jdGlvbiB0aSh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyBaYSgpO1xufVxuZnVuY3Rpb24gcmkodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgSmEoKTtcbn1cbmNsYXNzIG5pIHtcbiAgLyoqIFBhdGggcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QgKi9cbiAgcGF0aFBhcmFtZXRlcnM7XG4gIC8qKiBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy4gKi9cbiAgcmVxdWVzdEFkYXB0ZXI7XG4gIC8qKiBVcmwgdGVtcGxhdGUgdG8gdXNlIHRvIGJ1aWxkIHRoZSBVUkwgZm9yIHRoZSBjdXJyZW50IHJlcXVlc3QgYnVpbGRlciAqL1xuICB1cmxUZW1wbGF0ZTtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBDaGVja1JlcXVlc3RCdWlsZGVyIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICogQHBhcmFtIHBhdGhQYXJhbWV0ZXJzIFRoZSByYXcgdXJsIG9yIHRoZSBVcmwgdGVtcGxhdGUgcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSByZXF1ZXN0QWRhcHRlciBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXRoUGFyYW1ldGVycyBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGlmICghcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RBZGFwdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgdGhpcy51cmxUZW1wbGF0ZSA9IFwieytiYXNldXJsfS92MWFscGhhL2NoZWNrXCI7XG4gICAgY29uc3QgbiA9IEYoZSk7XG4gICAgdGhpcy5wYXRoUGFyYW1ldGVycyA9IG4sIHRoaXMucmVxdWVzdEFkYXB0ZXIgPSByO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja1Blcm1pc3Npb24gZW5kcG9pbnQgaXMgdXNlZCBieSB0aGUgY2xpZW50cyB0byBkZXRlcm1pbmUgaWYgdGhlIGdpdmVuIFwic3ViamVjdFwiIGhhcyB0aGUgZ2l2ZW4gcGVybWlzc2lvbiBcIk9wZXJhdGlvblwiIG9uIGEgZ2l2ZW4gXCJSZXNvdXJjZVwiXG4gICAqIEBwYXJhbSBib2R5IFRoZSByZXF1ZXN0IGJvZHlcbiAgICogQHBhcmFtIHJlcXVlc3RDb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZXF1ZXN0IHN1Y2ggYXMgaGVhZGVycywgcXVlcnkgcGFyYW1ldGVycywgYW5kIG1pZGRsZXdhcmUgb3B0aW9ucy5cbiAgICogQHBhcmFtIHJlc3BvbnNlSGFuZGxlciBSZXNwb25zZSBoYW5kbGVyIHRvIHVzZSBpbiBwbGFjZSBvZiB0aGUgZGVmYXVsdCByZXNwb25zZSBoYW5kbGluZyBwcm92aWRlZCBieSB0aGUgY29yZSBzZXJ2aWNlXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSBvZiBWMWFscGhhQ2hlY2tQZXJtaXNzaW9uUmVzcG9uc2VcbiAgICovXG4gIHBvc3QoZSwgciwgbikge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImJvZHkgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBjb25zdCBhID0gdGhpcy50b1Bvc3RSZXF1ZXN0SW5mb3JtYXRpb24oXG4gICAgICBlLFxuICAgICAgclxuICAgICksIGkgPSB7XG4gICAgICA0MDE6IGVpLFxuICAgICAgNDAzOiB0aSxcbiAgICAgIDUwMDogcmlcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RBZGFwdGVyPy5zZW5kQXN5bmMoYSwgWWEsIG4sIGkpID8/IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInJlcXVlc3QgYWRhcHRlciBpcyBudWxsXCIpKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2tQZXJtaXNzaW9uIGVuZHBvaW50IGlzIHVzZWQgYnkgdGhlIGNsaWVudHMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiBcInN1YmplY3RcIiBoYXMgdGhlIGdpdmVuIHBlcm1pc3Npb24gXCJPcGVyYXRpb25cIiBvbiBhIGdpdmVuIFwiUmVzb3VyY2VcIlxuICAgKiBAcGFyYW0gYm9keSBUaGUgcmVxdWVzdCBib2R5XG4gICAqIEBwYXJhbSByZXF1ZXN0Q29uZmlndXJhdGlvbiBDb25maWd1cmF0aW9uIGZvciB0aGUgcmVxdWVzdCBzdWNoIGFzIGhlYWRlcnMsIHF1ZXJ5IHBhcmFtZXRlcnMsIGFuZCBtaWRkbGV3YXJlIG9wdGlvbnMuXG4gICAqIEByZXR1cm5zIGEgUmVxdWVzdEluZm9ybWF0aW9uXG4gICAqL1xuICB0b1Bvc3RSZXF1ZXN0SW5mb3JtYXRpb24oZSwgcikge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImJvZHkgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBjb25zdCBuID0gbmV3IFMoKTtcbiAgICByZXR1cm4gbi51cmxUZW1wbGF0ZSA9IHRoaXMudXJsVGVtcGxhdGUsIG4ucGF0aFBhcmFtZXRlcnMgPSB0aGlzLnBhdGhQYXJhbWV0ZXJzLCBuLmh0dHBNZXRob2QgPSBCLlBPU1QsIG4uaGVhZGVycy5BY2NlcHQgPSBbXCJhcHBsaWNhdGlvbi9qc29uXCJdLCByICYmIChuLmFkZFJlcXVlc3RIZWFkZXJzKHIuaGVhZGVycyksIG4uYWRkUmVxdWVzdE9wdGlvbnMoci5vcHRpb25zKSksIG4uc2V0Q29udGVudEZyb21QYXJzYWJsZSh0aGlzLnJlcXVlc3RBZGFwdGVyLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgZSksIG47XG4gIH1cbn1cbmZ1bmN0aW9uIGFpKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IEdhKCk7XG59XG5mdW5jdGlvbiBpaSh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyBXYSgpO1xufVxuY2xhc3Mgb2kgZXh0ZW5kcyBqIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBWMWFscGhhR2V0TGljZW5zZVJlc3BvbnNlNDAxRXJyb3IgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKSwgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogVGhlIGRlc2VyaWFsaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCAobm9kZTogUGFyc2VOb2RlKSA9PiB2b2lkPlxuICAgKi9cbiAgZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgZS53cml0ZUFkZGl0aW9uYWxEYXRhKHRoaXMuYWRkaXRpb25hbERhdGEpO1xuICB9XG59XG5jbGFzcyBzaSBleHRlbmRzIGoge1xuICAvKiogU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC4gKi9cbiAgX2FkZGl0aW9uYWxEYXRhO1xuICAvKipcbiAgICogR2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgICovXG4gIGdldCBhZGRpdGlvbmFsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkaXRpb25hbERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgQWRkaXRpb25hbERhdGEgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgYWRkaXRpb25hbERhdGEoZSkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFYxYWxwaGFHZXRMaWNlbnNlUmVzcG9uc2U0MDNFcnJvciBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpLCB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmNsYXNzIGxpIGV4dGVuZHMgaiB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgVjFhbHBoYUdldExpY2Vuc2VSZXNwb25zZTUwMEVycm9yIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCksIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuY2xhc3MgdWkgZXh0ZW5kcyBqIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBWMWFscGhhTW9kaWZ5U2VhdHNSZXNwb25zZTQwMUVycm9yIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCksIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuY2xhc3MgZGkgZXh0ZW5kcyBqIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBWMWFscGhhTW9kaWZ5U2VhdHNSZXNwb25zZTQwM0Vycm9yIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCksIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuY2xhc3MgY2kgZXh0ZW5kcyBqIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBWMWFscGhhTW9kaWZ5U2VhdHNSZXNwb25zZTUwMEVycm9yIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCksIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuZnVuY3Rpb24gaGkodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgb2koKTtcbn1cbmZ1bmN0aW9uIGZpKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IHNpKCk7XG59XG5mdW5jdGlvbiBwaSh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyBsaSgpO1xufVxuZnVuY3Rpb24gZ2kodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgdWkoKTtcbn1cbmZ1bmN0aW9uIHlpKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IGRpKCk7XG59XG5mdW5jdGlvbiBtaSh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyBjaSgpO1xufVxuZnVuY3Rpb24gd2kodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgJGEoKTtcbn1cbmNsYXNzIF9pIGV4dGVuZHMgaiB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgVjFhbHBoYUdldFNlYXRzUmVzcG9uc2U0MDFFcnJvciBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpLCB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmNsYXNzIGJpIGV4dGVuZHMgaiB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgVjFhbHBoYUdldFNlYXRzUmVzcG9uc2U0MDNFcnJvciBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpLCB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmNsYXNzIHZpIGV4dGVuZHMgaiB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgVjFhbHBoYUdldFNlYXRzUmVzcG9uc2U1MDBFcnJvciBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpLCB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmZ1bmN0aW9uIEVpKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IF9pKCk7XG59XG5mdW5jdGlvbiBBaSh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyBiaSgpO1xufVxuZnVuY3Rpb24gRGkodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgdmkoKTtcbn1cbmxldCBSaSA9IGNsYXNzIHtcbiAgLyoqIFBhdGggcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QgKi9cbiAgcGF0aFBhcmFtZXRlcnM7XG4gIC8qKiBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy4gKi9cbiAgcmVxdWVzdEFkYXB0ZXI7XG4gIC8qKiBVcmwgdGVtcGxhdGUgdG8gdXNlIHRvIGJ1aWxkIHRoZSBVUkwgZm9yIHRoZSBjdXJyZW50IHJlcXVlc3QgYnVpbGRlciAqL1xuICB1cmxUZW1wbGF0ZTtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBTZWF0c1JlcXVlc3RCdWlsZGVyIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICogQHBhcmFtIHBhdGhQYXJhbWV0ZXJzIFRoZSByYXcgdXJsIG9yIHRoZSBVcmwgdGVtcGxhdGUgcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSByZXF1ZXN0QWRhcHRlciBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXRoUGFyYW1ldGVycyBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGlmICghcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RBZGFwdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgdGhpcy51cmxUZW1wbGF0ZSA9IFwieytiYXNldXJsfS92MWFscGhhL29yZ3Mve29yZ0lkfS9saWNlbnNlcy97c2VydmljZUlkfS9zZWF0c3s/aW5jbHVkZVVzZXJzKixmaWx0ZXIqfVwiO1xuICAgIGNvbnN0IG4gPSBGKGUpO1xuICAgIHRoaXMucGF0aFBhcmFtZXRlcnMgPSBuLCB0aGlzLnJlcXVlc3RBZGFwdGVyID0gcjtcbiAgfVxuICAvKipcbiAgICogR2V0IGRldGFpbHMgb2YgdXNlcnMgd2hvIGFyZSBhc3NpZ25lZCB0byB0aGUgbGljZW5zZSBvciBhdmFpbGFibGUgdG8gYmUgYXNzaWduZWQuXG4gICAqIEBwYXJhbSByZXF1ZXN0Q29uZmlndXJhdGlvbiBDb25maWd1cmF0aW9uIGZvciB0aGUgcmVxdWVzdCBzdWNoIGFzIGhlYWRlcnMsIHF1ZXJ5IHBhcmFtZXRlcnMsIGFuZCBtaWRkbGV3YXJlIG9wdGlvbnMuXG4gICAqIEBwYXJhbSByZXNwb25zZUhhbmRsZXIgUmVzcG9uc2UgaGFuZGxlciB0byB1c2UgaW4gcGxhY2Ugb2YgdGhlIGRlZmF1bHQgcmVzcG9uc2UgaGFuZGxpbmcgcHJvdmlkZWQgYnkgdGhlIGNvcmUgc2VydmljZVxuICAgKiBAcmV0dXJucyBhIFByb21pc2Ugb2YgVjFhbHBoYUdldFNlYXRzUmVzcG9uc2VcbiAgICovXG4gIGdldChlLCByKSB7XG4gICAgY29uc3QgbiA9IHRoaXMudG9HZXRSZXF1ZXN0SW5mb3JtYXRpb24oXG4gICAgICBlXG4gICAgKSwgYSA9IHtcbiAgICAgIDQwMTogRWksXG4gICAgICA0MDM6IEFpLFxuICAgICAgNTAwOiBEaVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdEFkYXB0ZXI/LnNlbmRBc3luYyhuLCB3aSwgciwgYSkgPz8gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwicmVxdWVzdCBhZGFwdGVyIGlzIG51bGxcIikpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZGV0YWlscyBvZiB1c2VycyB3aG8gYXJlIGFzc2lnbmVkIHRvIHRoZSBsaWNlbnNlIG9yIGF2YWlsYWJsZSB0byBiZSBhc3NpZ25lZC5cbiAgICogQHBhcmFtIHJlcXVlc3RDb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZXF1ZXN0IHN1Y2ggYXMgaGVhZGVycywgcXVlcnkgcGFyYW1ldGVycywgYW5kIG1pZGRsZXdhcmUgb3B0aW9ucy5cbiAgICogQHJldHVybnMgYSBSZXF1ZXN0SW5mb3JtYXRpb25cbiAgICovXG4gIHRvR2V0UmVxdWVzdEluZm9ybWF0aW9uKGUpIHtcbiAgICBjb25zdCByID0gbmV3IFMoKTtcbiAgICByZXR1cm4gci51cmxUZW1wbGF0ZSA9IHRoaXMudXJsVGVtcGxhdGUsIHIucGF0aFBhcmFtZXRlcnMgPSB0aGlzLnBhdGhQYXJhbWV0ZXJzLCByLmh0dHBNZXRob2QgPSBCLkdFVCwgci5oZWFkZXJzLkFjY2VwdCA9IFtcImFwcGxpY2F0aW9uL2pzb25cIl0sIGUgJiYgKHIuYWRkUmVxdWVzdEhlYWRlcnMoZS5oZWFkZXJzKSwgci5zZXRRdWVyeVN0cmluZ1BhcmFtZXRlcnNGcm9tUmF3T2JqZWN0KGUucXVlcnlQYXJhbWV0ZXJzKSwgci5hZGRSZXF1ZXN0T3B0aW9ucyhlLm9wdGlvbnMpKSwgcjtcbiAgfVxufTtcbmNsYXNzIFRpIHtcbiAgLyoqIFBhdGggcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QgKi9cbiAgcGF0aFBhcmFtZXRlcnM7XG4gIC8qKiBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy4gKi9cbiAgcmVxdWVzdEFkYXB0ZXI7XG4gIC8qKiBUaGUgc2VhdHMgcHJvcGVydHkgKi9cbiAgZ2V0IHNlYXRzKCkge1xuICAgIHJldHVybiBuZXcgUmkodGhpcy5wYXRoUGFyYW1ldGVycywgdGhpcy5yZXF1ZXN0QWRhcHRlcik7XG4gIH1cbiAgLyoqIFVybCB0ZW1wbGF0ZSB0byB1c2UgdG8gYnVpbGQgdGhlIFVSTCBmb3IgdGhlIGN1cnJlbnQgcmVxdWVzdCBidWlsZGVyICovXG4gIHVybFRlbXBsYXRlO1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFdpdGhTZXJ2aWNlSXRlbVJlcXVlc3RCdWlsZGVyIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICogQHBhcmFtIHBhdGhQYXJhbWV0ZXJzIFRoZSByYXcgdXJsIG9yIHRoZSBVcmwgdGVtcGxhdGUgcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSByZXF1ZXN0QWRhcHRlciBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXRoUGFyYW1ldGVycyBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGlmICghcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RBZGFwdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgdGhpcy51cmxUZW1wbGF0ZSA9IFwieytiYXNldXJsfS92MWFscGhhL29yZ3Mve29yZ0lkfS9saWNlbnNlcy97c2VydmljZUlkfVwiO1xuICAgIGNvbnN0IG4gPSBGKGUpO1xuICAgIHRoaXMucGF0aFBhcmFtZXRlcnMgPSBuLCB0aGlzLnJlcXVlc3RBZGFwdGVyID0gcjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbGljZW5zZSwgIGluY2x1ZGluZyB0aGUgbnVtYmVyIG9mIGVudGl0bGVkIHNlYXRzIChtYXhpbXVtIGFzc2lnbmFibGUpIGFuZCB0aGUgY3VycmVudCBudW1iZXIgb2YgYXZhaWxhYmxlIHNlYXRzLlxuICAgKiBAcGFyYW0gcmVxdWVzdENvbmZpZ3VyYXRpb24gQ29uZmlndXJhdGlvbiBmb3IgdGhlIHJlcXVlc3Qgc3VjaCBhcyBoZWFkZXJzLCBxdWVyeSBwYXJhbWV0ZXJzLCBhbmQgbWlkZGxld2FyZSBvcHRpb25zLlxuICAgKiBAcGFyYW0gcmVzcG9uc2VIYW5kbGVyIFJlc3BvbnNlIGhhbmRsZXIgdG8gdXNlIGluIHBsYWNlIG9mIHRoZSBkZWZhdWx0IHJlc3BvbnNlIGhhbmRsaW5nIHByb3ZpZGVkIGJ5IHRoZSBjb3JlIHNlcnZpY2VcbiAgICogQHJldHVybnMgYSBQcm9taXNlIG9mIFYxYWxwaGFHZXRMaWNlbnNlUmVzcG9uc2VcbiAgICovXG4gIGdldChlLCByKSB7XG4gICAgY29uc3QgbiA9IHRoaXMudG9HZXRSZXF1ZXN0SW5mb3JtYXRpb24oXG4gICAgICBlXG4gICAgKSwgYSA9IHtcbiAgICAgIDQwMTogaGksXG4gICAgICA0MDM6IGZpLFxuICAgICAgNTAwOiBwaVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdEFkYXB0ZXI/LnNlbmRBc3luYyhuLCBhaSwgciwgYSkgPz8gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwicmVxdWVzdCBhZGFwdGVyIGlzIG51bGxcIikpO1xuICB9XG4gIC8qKlxuICAgKiBBc3NpZ24gb3IgdW5hc3NpZ24gdXNlcnMgdG8gb3IgZnJvbSB0aGUgbGljZW5zZS4gIFVzZXJzIGFzc2lnbmVkIG1heSBhY2Nlc3MgdGhlIHNlcnZpY2UgaWRlbnRpZmllZCBieSBzZXJ2aWNlSWQgYXMgY29udHJhY3RlZCB3aXRoIGFuIG9yZ2FuaXphdGlvbiAoaWRlbnRpZmllZCBieSBvcmdJZCkuIEFzc2lnbmVkIHVzZXJzIGNvbnN1bWUgYSBsaW1pdGVkIG51bWJlciBvZiBzZWF0cyBpbiBhIGxpY2Vuc2UuXG4gICAqIEBwYXJhbSBib2R5IE1vZGlmeVNlYXRzUmVxdWVzdCBhc3N1bWluZyB3ZSBnZXQgdGhlIHVzZXJJZCBldGMgZnJvbSB0aGUgcmVxdWVzdGVyIGluIHRoZSBhdXRob3JpemF0aW9uIGhlYWRlciB0byB2YWxpZGF0ZSBpZiBhbiBcImFkbWluXCIgY2FuIGFjdHVhbGx5IGFkZCBsaWNlbnNlcy5cbiAgICogQHBhcmFtIHJlcXVlc3RDb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZXF1ZXN0IHN1Y2ggYXMgaGVhZGVycywgcXVlcnkgcGFyYW1ldGVycywgYW5kIG1pZGRsZXdhcmUgb3B0aW9ucy5cbiAgICogQHBhcmFtIHJlc3BvbnNlSGFuZGxlciBSZXNwb25zZSBoYW5kbGVyIHRvIHVzZSBpbiBwbGFjZSBvZiB0aGUgZGVmYXVsdCByZXNwb25zZSBoYW5kbGluZyBwcm92aWRlZCBieSB0aGUgY29yZSBzZXJ2aWNlXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSBvZiBWMWFscGhhTW9kaWZ5U2VhdHNSZXNwb25zZVxuICAgKi9cbiAgcG9zdChlLCByLCBuKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYm9keSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGNvbnN0IGEgPSB0aGlzLnRvUG9zdFJlcXVlc3RJbmZvcm1hdGlvbihcbiAgICAgIGUsXG4gICAgICByXG4gICAgKSwgaSA9IHtcbiAgICAgIDQwMTogZ2ksXG4gICAgICA0MDM6IHlpLFxuICAgICAgNTAwOiBtaVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdEFkYXB0ZXI/LnNlbmRBc3luYyhhLCBpaSwgbiwgaSkgPz8gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwicmVxdWVzdCBhZGFwdGVyIGlzIG51bGxcIikpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsaWNlbnNlLCAgaW5jbHVkaW5nIHRoZSBudW1iZXIgb2YgZW50aXRsZWQgc2VhdHMgKG1heGltdW0gYXNzaWduYWJsZSkgYW5kIHRoZSBjdXJyZW50IG51bWJlciBvZiBhdmFpbGFibGUgc2VhdHMuXG4gICAqIEBwYXJhbSByZXF1ZXN0Q29uZmlndXJhdGlvbiBDb25maWd1cmF0aW9uIGZvciB0aGUgcmVxdWVzdCBzdWNoIGFzIGhlYWRlcnMsIHF1ZXJ5IHBhcmFtZXRlcnMsIGFuZCBtaWRkbGV3YXJlIG9wdGlvbnMuXG4gICAqIEByZXR1cm5zIGEgUmVxdWVzdEluZm9ybWF0aW9uXG4gICAqL1xuICB0b0dldFJlcXVlc3RJbmZvcm1hdGlvbihlKSB7XG4gICAgY29uc3QgciA9IG5ldyBTKCk7XG4gICAgcmV0dXJuIHIudXJsVGVtcGxhdGUgPSB0aGlzLnVybFRlbXBsYXRlLCByLnBhdGhQYXJhbWV0ZXJzID0gdGhpcy5wYXRoUGFyYW1ldGVycywgci5odHRwTWV0aG9kID0gQi5HRVQsIHIuaGVhZGVycy5BY2NlcHQgPSBbXCJhcHBsaWNhdGlvbi9qc29uXCJdLCBlICYmIChyLmFkZFJlcXVlc3RIZWFkZXJzKGUuaGVhZGVycyksIHIuYWRkUmVxdWVzdE9wdGlvbnMoZS5vcHRpb25zKSksIHI7XG4gIH1cbiAgLyoqXG4gICAqIEFzc2lnbiBvciB1bmFzc2lnbiB1c2VycyB0byBvciBmcm9tIHRoZSBsaWNlbnNlLiAgVXNlcnMgYXNzaWduZWQgbWF5IGFjY2VzcyB0aGUgc2VydmljZSBpZGVudGlmaWVkIGJ5IHNlcnZpY2VJZCBhcyBjb250cmFjdGVkIHdpdGggYW4gb3JnYW5pemF0aW9uIChpZGVudGlmaWVkIGJ5IG9yZ0lkKS4gQXNzaWduZWQgdXNlcnMgY29uc3VtZSBhIGxpbWl0ZWQgbnVtYmVyIG9mIHNlYXRzIGluIGEgbGljZW5zZS5cbiAgICogQHBhcmFtIGJvZHkgTW9kaWZ5U2VhdHNSZXF1ZXN0IGFzc3VtaW5nIHdlIGdldCB0aGUgdXNlcklkIGV0YyBmcm9tIHRoZSByZXF1ZXN0ZXIgaW4gdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyIHRvIHZhbGlkYXRlIGlmIGFuIFwiYWRtaW5cIiBjYW4gYWN0dWFsbHkgYWRkIGxpY2Vuc2VzLlxuICAgKiBAcGFyYW0gcmVxdWVzdENvbmZpZ3VyYXRpb24gQ29uZmlndXJhdGlvbiBmb3IgdGhlIHJlcXVlc3Qgc3VjaCBhcyBoZWFkZXJzLCBxdWVyeSBwYXJhbWV0ZXJzLCBhbmQgbWlkZGxld2FyZSBvcHRpb25zLlxuICAgKiBAcmV0dXJucyBhIFJlcXVlc3RJbmZvcm1hdGlvblxuICAgKi9cbiAgdG9Qb3N0UmVxdWVzdEluZm9ybWF0aW9uKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJib2R5IGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgY29uc3QgbiA9IG5ldyBTKCk7XG4gICAgcmV0dXJuIG4udXJsVGVtcGxhdGUgPSB0aGlzLnVybFRlbXBsYXRlLCBuLnBhdGhQYXJhbWV0ZXJzID0gdGhpcy5wYXRoUGFyYW1ldGVycywgbi5odHRwTWV0aG9kID0gQi5QT1NULCBuLmhlYWRlcnMuQWNjZXB0ID0gW1wiYXBwbGljYXRpb24vanNvblwiXSwgciAmJiAobi5hZGRSZXF1ZXN0SGVhZGVycyhyLmhlYWRlcnMpLCBuLmFkZFJlcXVlc3RPcHRpb25zKHIub3B0aW9ucykpLCBuLnNldENvbnRlbnRGcm9tUGFyc2FibGUodGhpcy5yZXF1ZXN0QWRhcHRlciwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIGUpLCBuO1xuICB9XG59XG5jbGFzcyBPaSB7XG4gIC8qKiBQYXRoIHBhcmFtZXRlcnMgZm9yIHRoZSByZXF1ZXN0ICovXG4gIHBhdGhQYXJhbWV0ZXJzO1xuICAvKiogVGhlIHJlcXVlc3QgYWRhcHRlciB0byB1c2UgdG8gZXhlY3V0ZSB0aGUgcmVxdWVzdHMuICovXG4gIHJlcXVlc3RBZGFwdGVyO1xuICAvKiogVXJsIHRlbXBsYXRlIHRvIHVzZSB0byBidWlsZCB0aGUgVVJMIGZvciB0aGUgY3VycmVudCByZXF1ZXN0IGJ1aWxkZXIgKi9cbiAgdXJsVGVtcGxhdGU7XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgTGljZW5zZXNSZXF1ZXN0QnVpbGRlciBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqIEBwYXJhbSBwYXRoUGFyYW1ldGVycyBUaGUgcmF3IHVybCBvciB0aGUgVXJsIHRlbXBsYXRlIHBhcmFtZXRlcnMgZm9yIHRoZSByZXF1ZXN0LlxuICAgKiBAcGFyYW0gcmVxdWVzdEFkYXB0ZXIgVGhlIHJlcXVlc3QgYWRhcHRlciB0byB1c2UgdG8gZXhlY3V0ZSB0aGUgcmVxdWVzdHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlLCByKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGF0aFBhcmFtZXRlcnMgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBpZiAoIXIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXF1ZXN0QWRhcHRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIHRoaXMudXJsVGVtcGxhdGUgPSBcInsrYmFzZXVybH0vdjFhbHBoYS9vcmdzL3tvcmdJZH0vbGljZW5zZXNcIjtcbiAgICBjb25zdCBuID0gRihlKTtcbiAgICB0aGlzLnBhdGhQYXJhbWV0ZXJzID0gbiwgdGhpcy5yZXF1ZXN0QWRhcHRlciA9IHI7XG4gIH1cbn1cbmNsYXNzIFBpIHtcbiAgLyoqIFRoZSBsaWNlbnNlcyBwcm9wZXJ0eSAqL1xuICBnZXQgbGljZW5zZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBPaSh0aGlzLnBhdGhQYXJhbWV0ZXJzLCB0aGlzLnJlcXVlc3RBZGFwdGVyKTtcbiAgfVxuICAvKiogUGF0aCBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdCAqL1xuICBwYXRoUGFyYW1ldGVycztcbiAgLyoqIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLiAqL1xuICByZXF1ZXN0QWRhcHRlcjtcbiAgLyoqIFVybCB0ZW1wbGF0ZSB0byB1c2UgdG8gYnVpbGQgdGhlIFVSTCBmb3IgdGhlIGN1cnJlbnQgcmVxdWVzdCBidWlsZGVyICovXG4gIHVybFRlbXBsYXRlO1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFdpdGhPcmdJdGVtUmVxdWVzdEJ1aWxkZXIgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKiBAcGFyYW0gcGF0aFBhcmFtZXRlcnMgVGhlIHJhdyB1cmwgb3IgdGhlIFVybCB0ZW1wbGF0ZSBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdC5cbiAgICogQHBhcmFtIHJlcXVlc3RBZGFwdGVyIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgcikge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhdGhQYXJhbWV0ZXJzIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgaWYgKCFyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEFkYXB0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICB0aGlzLnVybFRlbXBsYXRlID0gXCJ7K2Jhc2V1cmx9L3YxYWxwaGEvb3Jncy97b3JnSWR9XCI7XG4gICAgY29uc3QgbiA9IEYoZSk7XG4gICAgdGhpcy5wYXRoUGFyYW1ldGVycyA9IG4sIHRoaXMucmVxdWVzdEFkYXB0ZXIgPSByO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0gZnJvbSB0aGUgQXBpU2RrLnYxYWxwaGEub3Jncy5pdGVtLmxpY2Vuc2VzLml0ZW0gY29sbGVjdGlvblxuICAgKiBAcGFyYW0gaWQgVW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGl0ZW1cbiAgICogQHJldHVybnMgYSBXaXRoU2VydmljZUl0ZW1SZXF1ZXN0QnVpbGRlclxuICAgKi9cbiAgbGljZW5zZXNCeUlkKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpZCBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGNvbnN0IHIgPSBGKHRoaXMucGF0aFBhcmFtZXRlcnMpO1xuICAgIHJldHVybiByLnNlcnZpY2VJZCA9IGUsIG5ldyBUaShyLCB0aGlzLnJlcXVlc3RBZGFwdGVyKTtcbiAgfVxufVxuY2xhc3MgU2kge1xuICAvKiogUGF0aCBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdCAqL1xuICBwYXRoUGFyYW1ldGVycztcbiAgLyoqIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLiAqL1xuICByZXF1ZXN0QWRhcHRlcjtcbiAgLyoqIFVybCB0ZW1wbGF0ZSB0byB1c2UgdG8gYnVpbGQgdGhlIFVSTCBmb3IgdGhlIGN1cnJlbnQgcmVxdWVzdCBidWlsZGVyICovXG4gIHVybFRlbXBsYXRlO1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IE9yZ3NSZXF1ZXN0QnVpbGRlciBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqIEBwYXJhbSBwYXRoUGFyYW1ldGVycyBUaGUgcmF3IHVybCBvciB0aGUgVXJsIHRlbXBsYXRlIHBhcmFtZXRlcnMgZm9yIHRoZSByZXF1ZXN0LlxuICAgKiBAcGFyYW0gcmVxdWVzdEFkYXB0ZXIgVGhlIHJlcXVlc3QgYWRhcHRlciB0byB1c2UgdG8gZXhlY3V0ZSB0aGUgcmVxdWVzdHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlLCByKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGF0aFBhcmFtZXRlcnMgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBpZiAoIXIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXF1ZXN0QWRhcHRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIHRoaXMudXJsVGVtcGxhdGUgPSBcInsrYmFzZXVybH0vdjFhbHBoYS9vcmdzXCI7XG4gICAgY29uc3QgbiA9IEYoZSk7XG4gICAgdGhpcy5wYXRoUGFyYW1ldGVycyA9IG4sIHRoaXMucmVxdWVzdEFkYXB0ZXIgPSByO1xuICB9XG59XG5jbGFzcyBOaSB7XG4gIC8qKiBUaGUgY2hlY2sgcHJvcGVydHkgKi9cbiAgZ2V0IGNoZWNrKCkge1xuICAgIHJldHVybiBuZXcgbmkodGhpcy5wYXRoUGFyYW1ldGVycywgdGhpcy5yZXF1ZXN0QWRhcHRlcik7XG4gIH1cbiAgLyoqIFRoZSBvcmdzIHByb3BlcnR5ICovXG4gIGdldCBvcmdzKCkge1xuICAgIHJldHVybiBuZXcgU2kodGhpcy5wYXRoUGFyYW1ldGVycywgdGhpcy5yZXF1ZXN0QWRhcHRlcik7XG4gIH1cbiAgLyoqIFBhdGggcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QgKi9cbiAgcGF0aFBhcmFtZXRlcnM7XG4gIC8qKiBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy4gKi9cbiAgcmVxdWVzdEFkYXB0ZXI7XG4gIC8qKiBVcmwgdGVtcGxhdGUgdG8gdXNlIHRvIGJ1aWxkIHRoZSBVUkwgZm9yIHRoZSBjdXJyZW50IHJlcXVlc3QgYnVpbGRlciAqL1xuICB1cmxUZW1wbGF0ZTtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBWMWFscGhhUmVxdWVzdEJ1aWxkZXIgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKiBAcGFyYW0gcGF0aFBhcmFtZXRlcnMgVGhlIHJhdyB1cmwgb3IgdGhlIFVybCB0ZW1wbGF0ZSBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdC5cbiAgICogQHBhcmFtIHJlcXVlc3RBZGFwdGVyIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgcikge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhdGhQYXJhbWV0ZXJzIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgaWYgKCFyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEFkYXB0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICB0aGlzLnVybFRlbXBsYXRlID0gXCJ7K2Jhc2V1cmx9L3YxYWxwaGFcIjtcbiAgICBjb25zdCBuID0gRihlKTtcbiAgICB0aGlzLnBhdGhQYXJhbWV0ZXJzID0gbiwgdGhpcy5yZXF1ZXN0QWRhcHRlciA9IHI7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYW4gaXRlbSBmcm9tIHRoZSBBcGlTZGsudjFhbHBoYS5vcmdzLml0ZW0gY29sbGVjdGlvblxuICAgKiBAcGFyYW0gaWQgVW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGl0ZW1cbiAgICogQHJldHVybnMgYSBXaXRoT3JnSXRlbVJlcXVlc3RCdWlsZGVyXG4gICAqL1xuICBvcmdzQnlJZChlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWQgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBjb25zdCByID0gRih0aGlzLnBhdGhQYXJhbWV0ZXJzKTtcbiAgICByZXR1cm4gci5vcmdJZCA9IGUsIG5ldyBQaShyLCB0aGlzLnJlcXVlc3RBZGFwdGVyKTtcbiAgfVxufVxuY2xhc3MgdWUge1xuICAvKipcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICB0aGlzLl9qc29uTm9kZSA9IGUsIHRoaXMuZ2V0U3RyaW5nVmFsdWUgPSAoKSA9PiB0aGlzLl9qc29uTm9kZSwgdGhpcy5nZXRDaGlsZE5vZGUgPSAocikgPT4gbmV3IHVlKHRoaXMuX2pzb25Ob2RlW3JdKSwgdGhpcy5nZXRCb29sZWFuVmFsdWUgPSAoKSA9PiB0aGlzLl9qc29uTm9kZSwgdGhpcy5nZXROdW1iZXJWYWx1ZSA9ICgpID0+IHRoaXMuX2pzb25Ob2RlLCB0aGlzLmdldEd1aWRWYWx1ZSA9ICgpID0+IHRoaXMuX2pzb25Ob2RlLCB0aGlzLmdldERhdGVWYWx1ZSA9ICgpID0+IHRoaXMuX2pzb25Ob2RlLCB0aGlzLmdldERhdGVPbmx5VmFsdWUgPSAoKSA9PiBKLnBhcnNlKHRoaXMuZ2V0U3RyaW5nVmFsdWUoKSksIHRoaXMuZ2V0VGltZU9ubHlWYWx1ZSA9ICgpID0+IGVlLnBhcnNlKHRoaXMuZ2V0U3RyaW5nVmFsdWUoKSksIHRoaXMuZ2V0RHVyYXRpb25WYWx1ZSA9ICgpID0+IGxlLnBhcnNlKHRoaXMuZ2V0U3RyaW5nVmFsdWUoKSksIHRoaXMuZ2V0Q29sbGVjdGlvbk9mUHJpbWl0aXZlVmFsdWVzID0gKCkgPT4gdGhpcy5fanNvbk5vZGUubWFwKChyKSA9PiB7XG4gICAgICBjb25zdCBuID0gbmV3IHVlKHIpLCBhID0gdHlwZW9mIHI7XG4gICAgICBpZiAoYSA9PT0gXCJib29sZWFuXCIpXG4gICAgICAgIHJldHVybiBuLmdldEJvb2xlYW5WYWx1ZSgpO1xuICAgICAgaWYgKGEgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBuLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICBpZiAoYSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgcmV0dXJuIG4uZ2V0TnVtYmVyVmFsdWUoKTtcbiAgICAgIGlmIChyIGluc3RhbmNlb2YgRGF0ZSlcbiAgICAgICAgcmV0dXJuIG4uZ2V0RGF0ZVZhbHVlKCk7XG4gICAgICBpZiAociBpbnN0YW5jZW9mIEopXG4gICAgICAgIHJldHVybiBuLmdldERhdGVWYWx1ZSgpO1xuICAgICAgaWYgKHIgaW5zdGFuY2VvZiBlZSlcbiAgICAgICAgcmV0dXJuIG4uZ2V0RGF0ZVZhbHVlKCk7XG4gICAgICBpZiAociBpbnN0YW5jZW9mIGxlKVxuICAgICAgICByZXR1cm4gbi5nZXREYXRlVmFsdWUoKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgZW5jb3VudGVyZWQgYW4gdW5rbm93biB0eXBlIGR1cmluZyBkZXNlcmlhbGl6YXRpb24gJHt0eXBlb2Ygcn1gKTtcbiAgICB9KSwgdGhpcy5nZXRDb2xsZWN0aW9uT2ZPYmplY3RWYWx1ZXMgPSAocikgPT4gdGhpcy5fanNvbk5vZGUubWFwKChuKSA9PiBuZXcgdWUobikpLm1hcCgobikgPT4gbi5nZXRPYmplY3RWYWx1ZShyKSksIHRoaXMuZ2V0T2JqZWN0VmFsdWUgPSAocikgPT4ge1xuICAgICAgY29uc3QgbiA9IHIodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcy5vbkJlZm9yZUFzc2lnbkZpZWxkVmFsdWVzICYmIHRoaXMub25CZWZvcmVBc3NpZ25GaWVsZFZhbHVlcyhuKSwgdGhpcy5hc3NpZ25GaWVsZFZhbHVlcyhuKSwgdGhpcy5vbkFmdGVyQXNzaWduRmllbGRWYWx1ZXMgJiYgdGhpcy5vbkFmdGVyQXNzaWduRmllbGRWYWx1ZXMobiksIG47XG4gICAgfSwgdGhpcy5nZXRFbnVtVmFsdWVzID0gKHIpID0+IHtcbiAgICAgIGNvbnN0IG4gPSB0aGlzLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICByZXR1cm4gbiA/IG4uc3BsaXQoXCIsXCIpLm1hcCgoYSkgPT4gcltqcihhKV0pIDogW107XG4gICAgfSwgdGhpcy5nZXRFbnVtVmFsdWUgPSAocikgPT4ge1xuICAgICAgY29uc3QgbiA9IHRoaXMuZ2V0RW51bVZhbHVlcyhyKTtcbiAgICAgIGlmIChuLmxlbmd0aCA+IDApXG4gICAgICAgIHJldHVybiBuWzBdO1xuICAgIH0sIHRoaXMuYXNzaWduRmllbGRWYWx1ZXMgPSAocikgPT4ge1xuICAgICAgY29uc3QgbiA9IHIuZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCk7XG4gICAgICBsZXQgYTtcbiAgICAgIGNvbnN0IGkgPSByO1xuICAgICAgaSAmJiBpLmFkZGl0aW9uYWxEYXRhICYmIChhID0gaS5hZGRpdGlvbmFsRGF0YSksIHRoaXMuX2pzb25Ob2RlICYmIE9iamVjdC5lbnRyaWVzKHRoaXMuX2pzb25Ob2RlKS5mb3JFYWNoKChbbywgbF0pID0+IHtcbiAgICAgICAgY29uc3QgcyA9IG5bb107XG4gICAgICAgIHMgPyBzKG5ldyB1ZShsKSkgOiBhICYmIChhW29dID0gbCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59XG5jbGFzcyBNIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy53cml0ZXIgPSBbXSwgdGhpcy53cml0ZVN0cmluZ1ZhbHVlID0gKGUsIHIpID0+IHtcbiAgICAgIGUgJiYgciAmJiB0aGlzLndyaXRlUHJvcGVydHlOYW1lKGUpLCByICYmIHRoaXMud3JpdGVyLnB1c2goYFwiJHtyfVwiYCksIGUgJiYgciAmJiB0aGlzLndyaXRlci5wdXNoKE0ucHJvcGVydHlTZXBhcmF0b3IpO1xuICAgIH0sIHRoaXMud3JpdGVQcm9wZXJ0eU5hbWUgPSAoZSkgPT4ge1xuICAgICAgdGhpcy53cml0ZXIucHVzaChgXCIke2V9XCI6YCk7XG4gICAgfSwgdGhpcy53cml0ZUJvb2xlYW5WYWx1ZSA9IChlLCByKSA9PiB7XG4gICAgICBjb25zdCBuID0gciAhPSBudWxsO1xuICAgICAgZSAmJiBuICYmIHRoaXMud3JpdGVQcm9wZXJ0eU5hbWUoZSksIG4gJiYgdGhpcy53cml0ZXIucHVzaChgJHtyfWApLCBlICYmIG4gJiYgdGhpcy53cml0ZXIucHVzaChNLnByb3BlcnR5U2VwYXJhdG9yKTtcbiAgICB9LCB0aGlzLndyaXRlTnVtYmVyVmFsdWUgPSAoZSwgcikgPT4ge1xuICAgICAgZSAmJiByICYmIHRoaXMud3JpdGVQcm9wZXJ0eU5hbWUoZSksIHIgJiYgdGhpcy53cml0ZXIucHVzaChgJHtyfWApLCBlICYmIHIgJiYgdGhpcy53cml0ZXIucHVzaChNLnByb3BlcnR5U2VwYXJhdG9yKTtcbiAgICB9LCB0aGlzLndyaXRlR3VpZFZhbHVlID0gKGUsIHIpID0+IHtcbiAgICAgIGUgJiYgciAmJiB0aGlzLndyaXRlUHJvcGVydHlOYW1lKGUpLCByICYmIHRoaXMud3JpdGVyLnB1c2goYFwiJHtyfVwiYCksIGUgJiYgciAmJiB0aGlzLndyaXRlci5wdXNoKE0ucHJvcGVydHlTZXBhcmF0b3IpO1xuICAgIH0sIHRoaXMud3JpdGVEYXRlVmFsdWUgPSAoZSwgcikgPT4ge1xuICAgICAgZSAmJiByICYmIHRoaXMud3JpdGVQcm9wZXJ0eU5hbWUoZSksIHIgJiYgdGhpcy53cml0ZXIucHVzaChgXCIke3IudG9JU09TdHJpbmcoKX1cImApLCBlICYmIHIgJiYgdGhpcy53cml0ZXIucHVzaChNLnByb3BlcnR5U2VwYXJhdG9yKTtcbiAgICB9LCB0aGlzLndyaXRlRGF0ZU9ubHlWYWx1ZSA9IChlLCByKSA9PiB7XG4gICAgICBlICYmIHIgJiYgdGhpcy53cml0ZVByb3BlcnR5TmFtZShlKSwgciAmJiB0aGlzLndyaXRlci5wdXNoKGBcIiR7ci50b1N0cmluZygpfVwiYCksIGUgJiYgciAmJiB0aGlzLndyaXRlci5wdXNoKE0ucHJvcGVydHlTZXBhcmF0b3IpO1xuICAgIH0sIHRoaXMud3JpdGVUaW1lT25seVZhbHVlID0gKGUsIHIpID0+IHtcbiAgICAgIGUgJiYgciAmJiB0aGlzLndyaXRlUHJvcGVydHlOYW1lKGUpLCByICYmIHRoaXMud3JpdGVyLnB1c2goYFwiJHtyLnRvU3RyaW5nKCl9XCJgKSwgZSAmJiByICYmIHRoaXMud3JpdGVyLnB1c2goTS5wcm9wZXJ0eVNlcGFyYXRvcik7XG4gICAgfSwgdGhpcy53cml0ZUR1cmF0aW9uVmFsdWUgPSAoZSwgcikgPT4ge1xuICAgICAgZSAmJiByICYmIHRoaXMud3JpdGVQcm9wZXJ0eU5hbWUoZSksIHIgJiYgdGhpcy53cml0ZXIucHVzaChgXCIke3IudG9TdHJpbmcoKX1cImApLCBlICYmIHIgJiYgdGhpcy53cml0ZXIucHVzaChNLnByb3BlcnR5U2VwYXJhdG9yKTtcbiAgICB9LCB0aGlzLndyaXRlTnVsbFZhbHVlID0gKGUpID0+IHtcbiAgICAgIGUgJiYgdGhpcy53cml0ZVByb3BlcnR5TmFtZShlKSwgdGhpcy53cml0ZXIucHVzaChcIm51bGxcIiksIGUgJiYgdGhpcy53cml0ZXIucHVzaChNLnByb3BlcnR5U2VwYXJhdG9yKTtcbiAgICB9LCB0aGlzLndyaXRlQ29sbGVjdGlvbk9mUHJpbWl0aXZlVmFsdWVzID0gKGUsIHIpID0+IHtcbiAgICAgIHIgJiYgKGUgJiYgdGhpcy53cml0ZVByb3BlcnR5TmFtZShlKSwgdGhpcy53cml0ZXIucHVzaChcIltcIiksIHIuZm9yRWFjaCgobiwgYSkgPT4ge1xuICAgICAgICB0aGlzLndyaXRlQW55VmFsdWUodm9pZCAwLCBuKSwgYSArIDEgPCByLmxlbmd0aCAmJiB0aGlzLndyaXRlci5wdXNoKE0ucHJvcGVydHlTZXBhcmF0b3IpO1xuICAgICAgfSksIHRoaXMud3JpdGVyLnB1c2goXCJdXCIpLCBlICYmIHRoaXMud3JpdGVyLnB1c2goTS5wcm9wZXJ0eVNlcGFyYXRvcikpO1xuICAgIH0sIHRoaXMud3JpdGVDb2xsZWN0aW9uT2ZPYmplY3RWYWx1ZXMgPSAoZSwgcikgPT4ge1xuICAgICAgciAmJiAoZSAmJiB0aGlzLndyaXRlUHJvcGVydHlOYW1lKGUpLCB0aGlzLndyaXRlci5wdXNoKFwiW1wiKSwgci5mb3JFYWNoKChuKSA9PiB7XG4gICAgICAgIHRoaXMud3JpdGVPYmplY3RWYWx1ZSh2b2lkIDAsIG4pLCB0aGlzLndyaXRlci5wdXNoKE0ucHJvcGVydHlTZXBhcmF0b3IpO1xuICAgICAgfSksIHIubGVuZ3RoID4gMCAmJiB0aGlzLndyaXRlci5wb3AoKSwgdGhpcy53cml0ZXIucHVzaChcIl1cIiksIGUgJiYgdGhpcy53cml0ZXIucHVzaChNLnByb3BlcnR5U2VwYXJhdG9yKSk7XG4gICAgfSwgdGhpcy53cml0ZU9iamVjdFZhbHVlID0gKGUsIHIpID0+IHtcbiAgICAgIHIgJiYgKGUgJiYgdGhpcy53cml0ZVByb3BlcnR5TmFtZShlKSwgdGhpcy5vbkJlZm9yZU9iamVjdFNlcmlhbGl6YXRpb24gJiYgdGhpcy5vbkJlZm9yZU9iamVjdFNlcmlhbGl6YXRpb24ociksIHRoaXMud3JpdGVyLnB1c2goXCJ7XCIpLCB0aGlzLm9uU3RhcnRPYmplY3RTZXJpYWxpemF0aW9uICYmIHRoaXMub25TdGFydE9iamVjdFNlcmlhbGl6YXRpb24ociwgdGhpcyksIHIuc2VyaWFsaXplKHRoaXMpLCB0aGlzLm9uQWZ0ZXJPYmplY3RTZXJpYWxpemF0aW9uICYmIHRoaXMub25BZnRlck9iamVjdFNlcmlhbGl6YXRpb24ociksIHRoaXMud3JpdGVyLmxlbmd0aCA+IDAgJiYgdGhpcy53cml0ZXJbdGhpcy53cml0ZXIubGVuZ3RoIC0gMV0gPT09IE0ucHJvcGVydHlTZXBhcmF0b3IgJiYgdGhpcy53cml0ZXIucG9wKCksIHRoaXMud3JpdGVyLnB1c2goXCJ9XCIpLCBlICYmIHRoaXMud3JpdGVyLnB1c2goTS5wcm9wZXJ0eVNlcGFyYXRvcikpO1xuICAgIH0sIHRoaXMud3JpdGVFbnVtVmFsdWUgPSAoZSwgLi4ucikgPT4ge1xuICAgICAgaWYgKHIubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuID0gci5maWx0ZXIoKGEpID0+IGEgIT09IHZvaWQgMCkubWFwKChhKSA9PiBgJHthfWApO1xuICAgICAgICBuLmxlbmd0aCA+IDAgJiYgdGhpcy53cml0ZVN0cmluZ1ZhbHVlKGUsIG4ucmVkdWNlKChhLCBpKSA9PiBgJHthfSwgJHtpfWApKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmdldFNlcmlhbGl6ZWRDb250ZW50ID0gKCkgPT4gdGhpcy5jb252ZXJ0U3RyaW5nVG9BcnJheUJ1ZmZlcih0aGlzLndyaXRlci5qb2luKFwiXCIpKSwgdGhpcy5jb252ZXJ0U3RyaW5nVG9BcnJheUJ1ZmZlciA9IChlKSA9PiB7XG4gICAgICBjb25zdCByID0gbmV3IEFycmF5QnVmZmVyKGUubGVuZ3RoKSwgbiA9IG5ldyBVaW50OEFycmF5KHIpO1xuICAgICAgZm9yIChsZXQgYSA9IDA7IGEgPCBlLmxlbmd0aDsgYSsrKVxuICAgICAgICBuW2FdID0gZS5jaGFyQ29kZUF0KGEpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfSwgdGhpcy53cml0ZUFkZGl0aW9uYWxEYXRhID0gKGUpID0+IHtcbiAgICAgIGlmIChlKVxuICAgICAgICBmb3IgKGNvbnN0IHIgaW4gZSlcbiAgICAgICAgICB0aGlzLndyaXRlQW55VmFsdWUociwgZVtyXSk7XG4gICAgfSwgdGhpcy53cml0ZU5vblBhcnNhYmxlT2JqZWN0VmFsdWUgPSAoZSwgcikgPT4ge1xuICAgICAgZSAmJiB0aGlzLndyaXRlUHJvcGVydHlOYW1lKGUpLCB0aGlzLndyaXRlci5wdXNoKEpTT04uc3RyaW5naWZ5KHIpLCBNLnByb3BlcnR5U2VwYXJhdG9yKTtcbiAgICB9LCB0aGlzLndyaXRlQW55VmFsdWUgPSAoZSwgcikgPT4ge1xuICAgICAgaWYgKHIgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBuID0gdHlwZW9mIHI7XG4gICAgICAgIGlmIChuID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgICB0aGlzLndyaXRlQm9vbGVhblZhbHVlKGUsIHIpO1xuICAgICAgICBlbHNlIGlmIChuID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgIHRoaXMud3JpdGVTdHJpbmdWYWx1ZShlLCByKTtcbiAgICAgICAgZWxzZSBpZiAociBpbnN0YW5jZW9mIERhdGUpXG4gICAgICAgICAgdGhpcy53cml0ZURhdGVWYWx1ZShlLCByKTtcbiAgICAgICAgZWxzZSBpZiAociBpbnN0YW5jZW9mIEopXG4gICAgICAgICAgdGhpcy53cml0ZURhdGVPbmx5VmFsdWUoZSwgcik7XG4gICAgICAgIGVsc2UgaWYgKHIgaW5zdGFuY2VvZiBlZSlcbiAgICAgICAgICB0aGlzLndyaXRlVGltZU9ubHlWYWx1ZShlLCByKTtcbiAgICAgICAgZWxzZSBpZiAociBpbnN0YW5jZW9mIGxlKVxuICAgICAgICAgIHRoaXMud3JpdGVEdXJhdGlvblZhbHVlKGUsIHIpO1xuICAgICAgICBlbHNlIGlmIChuID09PSBcIm51bWJlclwiKVxuICAgICAgICAgIHRoaXMud3JpdGVOdW1iZXJWYWx1ZShlLCByKTtcbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyKSlcbiAgICAgICAgICB0aGlzLndyaXRlQ29sbGVjdGlvbk9mUHJpbWl0aXZlVmFsdWVzKGUsIHIpO1xuICAgICAgICBlbHNlIGlmIChuID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgIHRoaXMud3JpdGVOb25QYXJzYWJsZU9iamVjdFZhbHVlKGUsIHIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBlbmNvdW50ZXJlZCB1bmtub3duIHZhbHVlIHR5cGUgZHVyaW5nIHNlcmlhbGl6YXRpb24gJHtufWApO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHRoaXMud3JpdGVOdWxsVmFsdWUoZSk7XG4gICAgfTtcbiAgfVxufVxuTS5wcm9wZXJ0eVNlcGFyYXRvciA9IFwiLFwiO1xuY2xhc3MgV3Ige1xuICBnZXRWYWxpZENvbnRlbnRUeXBlKCkge1xuICAgIHJldHVybiBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgfVxuICBnZXRSb290UGFyc2VOb2RlKGUsIHIpIHtcbiAgICBpZiAocilcbiAgICAgIGlmIChlKSB7XG4gICAgICAgIGlmICh0aGlzLmdldFZhbGlkQ29udGVudFR5cGUoKSAhPT0gZSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkIGEgJHt0aGlzLmdldFZhbGlkQ29udGVudFR5cGUoKX0gY29udGVudCB0eXBlYCk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29udGVudCB0eXBlIGNhbm5vdCBiZSB1bmRlZmluZWQgb3IgZW1wdHlcIik7XG4gICAgZWxzZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29udGVudCBjYW5ub3QgYmUgdW5kZWZpbmVkIG9mIGVtcHR5XCIpO1xuICAgIHJldHVybiBuZXcgdWUodGhpcy5jb252ZXJ0QXJyYXlCdWZmZXJUb0pzb24ocikpO1xuICB9XG4gIGNvbnZlcnRBcnJheUJ1ZmZlclRvSnNvbihlKSB7XG4gICAgY29uc3QgbiA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShlKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShuKTtcbiAgfVxufVxuY2xhc3MgWXIge1xuICBnZXRWYWxpZENvbnRlbnRUeXBlKCkge1xuICAgIHJldHVybiBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgfVxuICBnZXRTZXJpYWxpemF0aW9uV3JpdGVyKGUpIHtcbiAgICBpZiAoZSkge1xuICAgICAgaWYgKHRoaXMuZ2V0VmFsaWRDb250ZW50VHlwZSgpICE9PSBlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkIGEgJHt0aGlzLmdldFZhbGlkQ29udGVudFR5cGUoKX0gY29udGVudCB0eXBlYCk7XG4gICAgfSBlbHNlXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb250ZW50IHR5cGUgY2Fubm90IGJlIHVuZGVmaW5lZCBvciBlbXB0eVwiKTtcbiAgICByZXR1cm4gbmV3IE0oKTtcbiAgfVxufVxuY2xhc3MgQ2kge1xuICAvKiogUGF0aCBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdCAqL1xuICBwYXRoUGFyYW1ldGVycztcbiAgLyoqIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLiAqL1xuICByZXF1ZXN0QWRhcHRlcjtcbiAgLyoqIFVybCB0ZW1wbGF0ZSB0byB1c2UgdG8gYnVpbGQgdGhlIFVSTCBmb3IgdGhlIGN1cnJlbnQgcmVxdWVzdCBidWlsZGVyICovXG4gIHVybFRlbXBsYXRlO1xuICAvKiogVGhlIHYxYWxwaGEgcHJvcGVydHkgKi9cbiAgZ2V0IHYxYWxwaGEoKSB7XG4gICAgcmV0dXJuIG5ldyBOaSh0aGlzLnBhdGhQYXJhbWV0ZXJzLCB0aGlzLnJlcXVlc3RBZGFwdGVyKTtcbiAgfVxuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IEF1dGh6IGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICogQHBhcmFtIHJlcXVlc3RBZGFwdGVyIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RBZGFwdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgdGhpcy5wYXRoUGFyYW1ldGVycyA9IHt9LCB0aGlzLnVybFRlbXBsYXRlID0gXCJ7K2Jhc2V1cmx9XCIsIHRoaXMucmVxdWVzdEFkYXB0ZXIgPSBlLCB5dChZciksIG10KFdyKSwgdGhpcy5wYXRoUGFyYW1ldGVycy5iYXNldXJsID0gXCJcIjtcbiAgfVxufVxuY2xhc3MgVmkge1xuICBjbGllbnQ7XG4gIHJlcXVlc3RDb25maWd1cmF0aW9uO1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgY29uc3QgciA9IG5ldyBndC5GZXRjaFJlcXVlc3RBZGFwdGVyKFxuICAgICAgbmV3IHZyKClcbiAgICApO1xuICAgIHIuYmFzZVVybCA9IGUgfHwgXCJcIiwgdGhpcy5jbGllbnQgPSBuZXcgQ2kociksIHRoaXMucmVxdWVzdENvbmZpZ3VyYXRpb24gPSBuZXcgTGEoKSwgdGhpcy5yZXF1ZXN0Q29uZmlndXJhdGlvbi5oZWFkZXJzID0geyBBdXRob3JpemF0aW9uOiBbXCJ0b2tlblwiXSB9O1xuICB9XG4gIGFzeW5jIGdldChlLCByKSB7XG4gICAgY29uc3QgbiA9IGF3YWl0IHRoaXMuY2xpZW50LnYxYWxwaGEub3Jnc0J5SWQoZSkubGljZW5zZXNCeUlkKHIpLmdldCh0aGlzLnJlcXVlc3RDb25maWd1cmF0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgYXZhaWxhYmxlOiBuPy5zZWF0c0F2YWlsYWJsZSB8fCAwLFxuICAgICAgdG90YWw6IG4/LnNlYXRzVG90YWwgfHwgMFxuICAgIH07XG4gIH1cbiAgYXN5bmMgc2VhdHMoZSwgciwgbiA9ICEwKSB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmNsaWVudC52MWFscGhhLm9yZ3NCeUlkKGUpLmxpY2Vuc2VzQnlJZChyKS5zZWF0cy5nZXQoe1xuICAgICAgaGVhZGVyczogdGhpcy5yZXF1ZXN0Q29uZmlndXJhdGlvbi5oZWFkZXJzLFxuICAgICAgcXVlcnlQYXJhbWV0ZXJzOiB7IGZpbHRlcjogbiA/IFwiYXNzaWduZWRcIiA6IFwiYXNzaWduYWJsZVwiIH1cbiAgICB9KSk/LnVzZXJzPy5tYXAoKHsgaWQ6IGksIGRpc3BsYXlOYW1lOiBvLCBhc3NpZ25lZDogbCB9KSA9PiAoe1xuICAgICAgaWQ6IGkgfHwgXCJcIixcbiAgICAgIG5hbWU6IG8gfHwgXCJcIixcbiAgICAgIGFzc2lnbmVkOiAhIWxcbiAgICB9KSkgfHwgW107XG4gIH1cbiAgYXN5bmMgYXNzaWduKGUsIHIsIG4pIHtcbiAgICBjb25zdCBhID0gbmV3IGZyKCk7XG4gICAgYS5hc3NpZ24gPSBuLCBhd2FpdCB0aGlzLm1vZGlmeShlLCByLCBhKTtcbiAgfVxuICBhc3luYyB1bkFzc2lnbihlLCByLCBuKSB7XG4gICAgY29uc3QgYSA9IG5ldyBmcigpO1xuICAgIGEudW5hc3NpZ24gPSBuLCBhd2FpdCB0aGlzLm1vZGlmeShlLCByLCBhKTtcbiAgfVxuICBhc3luYyBtb2RpZnkoZSwgciwgbikge1xuICAgIHRoaXMuY2xpZW50LnYxYWxwaGEub3Jnc0J5SWQoZSkubGljZW5zZXNCeUlkKHIpLnBvc3QobiwgdGhpcy5yZXF1ZXN0Q29uZmlndXJhdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIE1pKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IEhpKCk7XG59XG5jbGFzcyBJaSBleHRlbmRzIGoge1xuICAvKiogU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC4gKi9cbiAgX2FkZGl0aW9uYWxEYXRhO1xuICAvKiogVGhlIGVycm9ycyBwcm9wZXJ0eSAqL1xuICBfZXJyb3JzO1xuICAvKipcbiAgICogR2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgICovXG4gIGdldCBhZGRpdGlvbmFsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkaXRpb25hbERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgQWRkaXRpb25hbERhdGEgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgYWRkaXRpb25hbERhdGEoZSkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IENvbXBsaWFuY2VTY3JlZW5pbmdFcnJvclJlc3BvbnNlIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCksIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGVycm9ycyBwcm9wZXJ0eSB2YWx1ZS4gVGhlIGVycm9ycyBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIENvbXBsaWFuY2VTY3JlZW5pbmdFcnJvclJlc3BvbnNlX2Vycm9yc1xuICAgKi9cbiAgZ2V0IGVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5fZXJyb3JzO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBlcnJvcnMgcHJvcGVydHkgdmFsdWUuIFRoZSBlcnJvcnMgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGVycm9ycyBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBlcnJvcnMoZSkge1xuICAgIHRoaXMuX2Vycm9ycyA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLmVycm9ycyA9IGUuZ2V0Q29sbGVjdGlvbk9mT2JqZWN0VmFsdWVzKE1pKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlQ29sbGVjdGlvbk9mT2JqZWN0VmFsdWVzKFwiZXJyb3JzXCIsIHRoaXMuZXJyb3JzKSwgZS53cml0ZUFkZGl0aW9uYWxEYXRhKHRoaXMuYWRkaXRpb25hbERhdGEpO1xuICB9XG59XG5jbGFzcyBIaSB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKiBUaGUgZXJyb3IgcHJvcGVydHkgKi9cbiAgX2Vycm9yRXNjYXBlZDtcbiAgLyoqIFRoZSBpZGVudGl0eSBwcm9wZXJ0eSAqL1xuICBfaWRlbnRpdHk7XG4gIC8qKiBUaGUgaWRlbnRpdHlUeXBlIHByb3BlcnR5ICovXG4gIF9pZGVudGl0eVR5cGU7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgQ29tcGxpYW5jZVNjcmVlbmluZ0Vycm9yUmVzcG9uc2VfZXJyb3JzIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGVycm9yIHByb3BlcnR5IHZhbHVlLiBUaGUgZXJyb3IgcHJvcGVydHlcbiAgICogQHJldHVybnMgYSBzdHJpbmdcbiAgICovXG4gIGdldCBlcnJvckVzY2FwZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Vycm9yRXNjYXBlZDtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgZXJyb3IgcHJvcGVydHkgdmFsdWUuIFRoZSBlcnJvciBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgZXJyb3JFc2NhcGVkIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGVycm9yRXNjYXBlZChlKSB7XG4gICAgdGhpcy5fZXJyb3JFc2NhcGVkID0gZTtcbiAgfVxuICAvKipcbiAgICogVGhlIGRlc2VyaWFsaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCAobm9kZTogUGFyc2VOb2RlKSA9PiB2b2lkPlxuICAgKi9cbiAgZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogKGUpID0+IHtcbiAgICAgICAgdGhpcy5lcnJvckVzY2FwZWQgPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgaWRlbnRpdHk6IChlKSA9PiB7XG4gICAgICAgIHRoaXMuaWRlbnRpdHkgPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgaWRlbnRpdHlUeXBlOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLmlkZW50aXR5VHlwZSA9IGUuZ2V0U3RyaW5nVmFsdWUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBpZGVudGl0eSBwcm9wZXJ0eSB2YWx1ZS4gVGhlIGlkZW50aXR5IHByb3BlcnR5XG4gICAqIEByZXR1cm5zIGEgc3RyaW5nXG4gICAqL1xuICBnZXQgaWRlbnRpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lkZW50aXR5O1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBpZGVudGl0eSBwcm9wZXJ0eSB2YWx1ZS4gVGhlIGlkZW50aXR5IHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBpZGVudGl0eSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBpZGVudGl0eShlKSB7XG4gICAgdGhpcy5faWRlbnRpdHkgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBpZGVudGl0eVR5cGUgcHJvcGVydHkgdmFsdWUuIFRoZSBpZGVudGl0eVR5cGUgcHJvcGVydHlcbiAgICogQHJldHVybnMgYSBzdHJpbmdcbiAgICovXG4gIGdldCBpZGVudGl0eVR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lkZW50aXR5VHlwZTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgaWRlbnRpdHlUeXBlIHByb3BlcnR5IHZhbHVlLiBUaGUgaWRlbnRpdHlUeXBlIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBpZGVudGl0eVR5cGUgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgaWRlbnRpdHlUeXBlKGUpIHtcbiAgICB0aGlzLl9pZGVudGl0eVR5cGUgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlU3RyaW5nVmFsdWUoXCJlcnJvclwiLCB0aGlzLmVycm9yRXNjYXBlZCksIGUud3JpdGVTdHJpbmdWYWx1ZShcImlkZW50aXR5XCIsIHRoaXMuaWRlbnRpdHkpLCBlLndyaXRlU3RyaW5nVmFsdWUoXCJpZGVudGl0eVR5cGVcIiwgdGhpcy5pZGVudGl0eVR5cGUpLCBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbnZhciBRciA9IC8qIEBfX1BVUkVfXyAqLyAoKHQpID0+ICh0Lk9LID0gXCJPS1wiLCB0LkVSUk9SX1Q1ID0gXCJFUlJPUl9UNVwiLCB0LkVSUk9SX09GQUMgPSBcIkVSUk9SX09GQUNcIiwgdC5FUlJPUl9FWFBPUlRfQ09OVFJPTCA9IFwiRVJST1JfRVhQT1JUX0NPTlRST0xcIiwgdCkpKFFyIHx8IHt9KTtcbmNsYXNzIEZpIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBwcm9wZXJ0eSAqL1xuICBfZGVzY3JpcHRpb247XG4gIC8qKiBUaGUgcmVzdWx0IHByb3BlcnR5ICovXG4gIF9yZXN1bHQ7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgQ29tcGxpYW5jZVNjcmVlbmluZ1Jlc3BvbnNlIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGRlc2NyaXB0aW9uIHByb3BlcnR5IHZhbHVlLiBUaGUgZGVzY3JpcHRpb24gcHJvcGVydHlcbiAgICogQHJldHVybnMgYSBzdHJpbmdcbiAgICovXG4gIGdldCBkZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRlc2NyaXB0aW9uIHByb3BlcnR5IHZhbHVlLiBUaGUgZGVzY3JpcHRpb24gcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGRlc2NyaXB0aW9uIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGRlc2NyaXB0aW9uKGUpIHtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IChlKSA9PiB7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgcmVzdWx0OiAoZSkgPT4ge1xuICAgICAgICB0aGlzLnJlc3VsdCA9IGUuZ2V0RW51bVZhbHVlKFFyKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSByZXN1bHQgcHJvcGVydHkgdmFsdWUuIFRoZSByZXN1bHQgcHJvcGVydHlcbiAgICogQHJldHVybnMgYSBDb21wbGlhbmNlU2NyZWVuaW5nUmVzcG9uc2VfcmVzdWx0XG4gICAqL1xuICBnZXQgcmVzdWx0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIHJlc3VsdCBwcm9wZXJ0eSB2YWx1ZS4gVGhlIHJlc3VsdCBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgcmVzdWx0IHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IHJlc3VsdChlKSB7XG4gICAgdGhpcy5fcmVzdWx0ID0gZTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgZS53cml0ZVN0cmluZ1ZhbHVlKFwiZGVzY3JpcHRpb25cIiwgdGhpcy5kZXNjcmlwdGlvbiksIGUud3JpdGVFbnVtVmFsdWUoXCJyZXN1bHRcIiwgdGhpcy5yZXN1bHQpLCBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGppKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IFVpKCk7XG59XG5jbGFzcyBxaSBleHRlbmRzIGoge1xuICAvKiogU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC4gKi9cbiAgX2FkZGl0aW9uYWxEYXRhO1xuICAvKiogVGhlIGVycm9yIHByb3BlcnR5ICovXG4gIF9lcnJvckVzY2FwZWQ7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgRGVwZW5kZW5jeUVycm9yUmVzcG9uc2UgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKSwgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgZXJyb3IgcHJvcGVydHkgdmFsdWUuIFRoZSBlcnJvciBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIERlcGVuZGVuY3lFcnJvclJlc3BvbnNlX2Vycm9yXG4gICAqL1xuICBnZXQgZXJyb3JFc2NhcGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9lcnJvckVzY2FwZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGVycm9yIHByb3BlcnR5IHZhbHVlLiBUaGUgZXJyb3IgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGVycm9yRXNjYXBlZCBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBlcnJvckVzY2FwZWQoZSkge1xuICAgIHRoaXMuX2Vycm9yRXNjYXBlZCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IChlKSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3JFc2NhcGVkID0gZS5nZXRPYmplY3RWYWx1ZShqaSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgZS53cml0ZU9iamVjdFZhbHVlKFwiZXJyb3JcIiwgdGhpcy5lcnJvckVzY2FwZWQpLCBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmNsYXNzIFVpIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBEZXBlbmRlbmN5RXJyb3JSZXNwb25zZV9lcnJvciBhbmQgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmNsYXNzIHppIGV4dGVuZHMgaiB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKiBUaGUgZXJyb3IgcHJvcGVydHkgKi9cbiAgX2Vycm9yRXNjYXBlZDtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBFcnJvckVzY2FwZWQgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKSwgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgZXJyb3IgcHJvcGVydHkgdmFsdWUuIFRoZSBlcnJvciBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0IGVycm9yRXNjYXBlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZXJyb3JFc2NhcGVkO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBlcnJvciBwcm9wZXJ0eSB2YWx1ZS4gVGhlIGVycm9yIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBlcnJvckVzY2FwZWQgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgZXJyb3JFc2NhcGVkKGUpIHtcbiAgICB0aGlzLl9lcnJvckVzY2FwZWQgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLmVycm9yRXNjYXBlZCA9IGUuZ2V0U3RyaW5nVmFsdWUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlU3RyaW5nVmFsdWUoXCJlcnJvclwiLCB0aGlzLmVycm9yRXNjYXBlZCksIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuZnVuY3Rpb24geGkodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgS2koKTtcbn1cbmZ1bmN0aW9uIEJpKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IEdpKCk7XG59XG5jbGFzcyBMaSB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKiBUaGUgbGlua3MgcHJvcGVydHkgKi9cbiAgX2xpbmtzO1xuICAvKiogVGhlIG1ldGEgcHJvcGVydHkgKi9cbiAgX21ldGE7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgTGlzdFBhZ2luYXRpb24gYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogVGhlIGRlc2VyaWFsaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCAobm9kZTogUGFyc2VOb2RlKSA9PiB2b2lkPlxuICAgKi9cbiAgZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5rczogKGUpID0+IHtcbiAgICAgICAgdGhpcy5saW5rcyA9IGUuZ2V0T2JqZWN0VmFsdWUoeGkpO1xuICAgICAgfSxcbiAgICAgIG1ldGE6IChlKSA9PiB7XG4gICAgICAgIHRoaXMubWV0YSA9IGUuZ2V0T2JqZWN0VmFsdWUoQmkpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxpbmtzIHByb3BlcnR5IHZhbHVlLiBUaGUgbGlua3MgcHJvcGVydHlcbiAgICogQHJldHVybnMgYSBQYWdpbmF0aW9uTGlua3NcbiAgICovXG4gIGdldCBsaW5rcygpIHtcbiAgICByZXR1cm4gdGhpcy5fbGlua3M7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGxpbmtzIHByb3BlcnR5IHZhbHVlLiBUaGUgbGlua3MgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGxpbmtzIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGxpbmtzKGUpIHtcbiAgICB0aGlzLl9saW5rcyA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1ldGEgcHJvcGVydHkgdmFsdWUuIFRoZSBtZXRhIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIGEgUGFnaW5hdGlvbk1ldGFcbiAgICovXG4gIGdldCBtZXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9tZXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBtZXRhIHByb3BlcnR5IHZhbHVlLiBUaGUgbWV0YSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgbWV0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBtZXRhKGUpIHtcbiAgICB0aGlzLl9tZXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgZS53cml0ZU9iamVjdFZhbHVlKFwibGlua3NcIiwgdGhpcy5saW5rcyksIGUud3JpdGVPYmplY3RWYWx1ZShcIm1ldGFcIiwgdGhpcy5tZXRhKSwgZS53cml0ZUFkZGl0aW9uYWxEYXRhKHRoaXMuYWRkaXRpb25hbERhdGEpO1xuICB9XG59XG5jbGFzcyBLaSB7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKiBUaGUgZmlyc3QgcHJvcGVydHkgKi9cbiAgX2ZpcnN0O1xuICAvKiogVGhlIGxhc3QgcHJvcGVydHkgKi9cbiAgX2xhc3Q7XG4gIC8qKiBUaGUgbmV4dCBwcm9wZXJ0eSAqL1xuICBfbmV4dDtcbiAgLyoqIFRoZSBwcmV2aW91cyBwcm9wZXJ0eSAqL1xuICBfcHJldmlvdXM7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgUGFnaW5hdGlvbkxpbmtzIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGZpcnN0IHByb3BlcnR5IHZhbHVlLiBUaGUgZmlyc3QgcHJvcGVydHlcbiAgICogQHJldHVybnMgYSBzdHJpbmdcbiAgICovXG4gIGdldCBmaXJzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlyc3Q7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZpcnN0IHByb3BlcnR5IHZhbHVlLiBUaGUgZmlyc3QgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGZpcnN0IHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGZpcnN0KGUpIHtcbiAgICB0aGlzLl9maXJzdCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmlyc3Q6IChlKSA9PiB7XG4gICAgICAgIHRoaXMuZmlyc3QgPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgbGFzdDogKGUpID0+IHtcbiAgICAgICAgdGhpcy5sYXN0ID0gZS5nZXRTdHJpbmdWYWx1ZSgpO1xuICAgICAgfSxcbiAgICAgIG5leHQ6IChlKSA9PiB7XG4gICAgICAgIHRoaXMubmV4dCA9IGUuZ2V0U3RyaW5nVmFsdWUoKTtcbiAgICAgIH0sXG4gICAgICBwcmV2aW91czogKGUpID0+IHtcbiAgICAgICAgdGhpcy5wcmV2aW91cyA9IGUuZ2V0U3RyaW5nVmFsdWUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsYXN0IHByb3BlcnR5IHZhbHVlLiBUaGUgbGFzdCBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0IGxhc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3Q7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGxhc3QgcHJvcGVydHkgdmFsdWUuIFRoZSBsYXN0IHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBsYXN0IHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGxhc3QoZSkge1xuICAgIHRoaXMuX2xhc3QgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBuZXh0IHByb3BlcnR5IHZhbHVlLiBUaGUgbmV4dCBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0IG5leHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25leHQ7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIG5leHQgcHJvcGVydHkgdmFsdWUuIFRoZSBuZXh0IHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBuZXh0IHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IG5leHQoZSkge1xuICAgIHRoaXMuX25leHQgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZS4gVGhlIHByZXZpb3VzIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIGEgc3RyaW5nXG4gICAqL1xuICBnZXQgcHJldmlvdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZS4gVGhlIHByZXZpb3VzIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBwcmV2aW91cyBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBwcmV2aW91cyhlKSB7XG4gICAgdGhpcy5fcHJldmlvdXMgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlU3RyaW5nVmFsdWUoXCJmaXJzdFwiLCB0aGlzLmZpcnN0KSwgZS53cml0ZVN0cmluZ1ZhbHVlKFwibGFzdFwiLCB0aGlzLmxhc3QpLCBlLndyaXRlU3RyaW5nVmFsdWUoXCJuZXh0XCIsIHRoaXMubmV4dCksIGUud3JpdGVTdHJpbmdWYWx1ZShcInByZXZpb3VzXCIsIHRoaXMucHJldmlvdXMpLCBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmNsYXNzIEdpIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqIFRoZSBjb3VudCBwcm9wZXJ0eSAqL1xuICBfY291bnQ7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgUGFnaW5hdGlvbk1ldGEgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgY291bnQgcHJvcGVydHkgdmFsdWUuIFRoZSBjb3VudCBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIGludDY0XG4gICAqL1xuICBnZXQgY291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvdW50O1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjb3VudCBwcm9wZXJ0eSB2YWx1ZS4gVGhlIGNvdW50IHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBjb3VudCBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBjb3VudChlKSB7XG4gICAgdGhpcy5fY291bnQgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVzZXJpYWxpemF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBtb2RlbFxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIChub2RlOiBQYXJzZU5vZGUpID0+IHZvaWQ+XG4gICAqL1xuICBnZXRGaWVsZERlc2VyaWFsaXplcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvdW50OiAoZSkgPT4ge1xuICAgICAgICB0aGlzLmNvdW50ID0gZS5nZXROdW1iZXJWYWx1ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVOdW1iZXJWYWx1ZShcImNvdW50XCIsIHRoaXMuY291bnQpLCBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmNsYXNzIGtpIHtcbiAgLyoqIFRoZSBhY2NvdW50X3VzZXJuYW1lIHByb3BlcnR5ICovXG4gIF9hY2NvdW50X3VzZXJuYW1lO1xuICAvKiogU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC4gKi9cbiAgX2FkZGl0aW9uYWxEYXRhO1xuICAvKiogVGhlIHN1YnNjcmlwdGlvbl9pZCBwcm9wZXJ0eSAqL1xuICBfc3Vic2NyaXB0aW9uX2lkO1xuICAvKipcbiAgICogR2V0cyB0aGUgYWNjb3VudF91c2VybmFtZSBwcm9wZXJ0eSB2YWx1ZS4gVGhlIGFjY291bnRfdXNlcm5hbWUgcHJvcGVydHlcbiAgICogQHJldHVybnMgYSBzdHJpbmdcbiAgICovXG4gIGdldCBhY2NvdW50X3VzZXJuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9hY2NvdW50X3VzZXJuYW1lO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhY2NvdW50X3VzZXJuYW1lIHByb3BlcnR5IHZhbHVlLiBUaGUgYWNjb3VudF91c2VybmFtZSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgYWNjb3VudF91c2VybmFtZSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhY2NvdW50X3VzZXJuYW1lKGUpIHtcbiAgICB0aGlzLl9hY2NvdW50X3VzZXJuYW1lID0gZTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgICovXG4gIGdldCBhZGRpdGlvbmFsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkaXRpb25hbERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgQWRkaXRpb25hbERhdGEgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgYWRkaXRpb25hbERhdGEoZSkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFNlYXQgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogVGhlIGRlc2VyaWFsaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCAobm9kZTogUGFyc2VOb2RlKSA9PiB2b2lkPlxuICAgKi9cbiAgZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhY2NvdW50X3VzZXJuYW1lOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLmFjY291bnRfdXNlcm5hbWUgPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgc3Vic2NyaXB0aW9uX2lkOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbl9pZCA9IGUuZ2V0U3RyaW5nVmFsdWUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGluZm9ybWF0aW9uIHRoZSBjdXJyZW50IG9iamVjdFxuICAgKiBAcGFyYW0gd3JpdGVyIFNlcmlhbGl6YXRpb24gd3JpdGVyIHRvIHVzZSB0byBzZXJpYWxpemUgdGhpcyBtb2RlbFxuICAgKi9cbiAgc2VyaWFsaXplKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBlLndyaXRlU3RyaW5nVmFsdWUoXCJhY2NvdW50X3VzZXJuYW1lXCIsIHRoaXMuYWNjb3VudF91c2VybmFtZSksIGUud3JpdGVTdHJpbmdWYWx1ZShcInN1YnNjcmlwdGlvbl9pZFwiLCB0aGlzLnN1YnNjcmlwdGlvbl9pZCksIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgc3Vic2NyaXB0aW9uX2lkIHByb3BlcnR5IHZhbHVlLiBUaGUgc3Vic2NyaXB0aW9uX2lkIHByb3BlcnR5XG4gICAqIEByZXR1cm5zIGEgc3RyaW5nXG4gICAqL1xuICBnZXQgc3Vic2NyaXB0aW9uX2lkKCkge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25faWQ7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN1YnNjcmlwdGlvbl9pZCBwcm9wZXJ0eSB2YWx1ZS4gVGhlIHN1YnNjcmlwdGlvbl9pZCBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgc3Vic2NyaXB0aW9uX2lkIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IHN1YnNjcmlwdGlvbl9pZChlKSB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uX2lkID0gZTtcbiAgfVxufVxuY2xhc3MgJGkge1xuICAvKiogVGhlIGFjY291bnRfdXNlcm5hbWUgcHJvcGVydHkgKi9cbiAgX2FjY291bnRfdXNlcm5hbWU7XG4gIC8qKiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLiAqL1xuICBfYWRkaXRpb25hbERhdGE7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhY2NvdW50X3VzZXJuYW1lIHByb3BlcnR5IHZhbHVlLiBUaGUgYWNjb3VudF91c2VybmFtZSBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0IGFjY291bnRfdXNlcm5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjY291bnRfdXNlcm5hbWU7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFjY291bnRfdXNlcm5hbWUgcHJvcGVydHkgdmFsdWUuIFRoZSBhY2NvdW50X3VzZXJuYW1lIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBhY2NvdW50X3VzZXJuYW1lIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFjY291bnRfdXNlcm5hbWUoZSkge1xuICAgIHRoaXMuX2FjY291bnRfdXNlcm5hbWUgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICAgKi9cbiAgZ2V0IGFkZGl0aW9uYWxEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbmFsRGF0YTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWRkaXRpb25hbERhdGEgcHJvcGVydHkgdmFsdWUuIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBBZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBhZGRpdGlvbmFsRGF0YShlKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgU2VhdFJlcXVlc3QgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYWRkaXRpb25hbERhdGEgPSB7fTtcbiAgfVxuICAvKipcbiAgICogVGhlIGRlc2VyaWFsaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCAobm9kZTogUGFyc2VOb2RlKSA9PiB2b2lkPlxuICAgKi9cbiAgZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhY2NvdW50X3VzZXJuYW1lOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLmFjY291bnRfdXNlcm5hbWUgPSBlLmdldFN0cmluZ1ZhbHVlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgZS53cml0ZVN0cmluZ1ZhbHVlKFwiYWNjb3VudF91c2VybmFtZVwiLCB0aGlzLmFjY291bnRfdXNlcm5hbWUpLCBlLndyaXRlQWRkaXRpb25hbERhdGEodGhpcy5hZGRpdGlvbmFsRGF0YSk7XG4gIH1cbn1cbmNsYXNzIFhpIHtcbiAgLyoqIFN0b3JlcyBhZGRpdGlvbmFsIGRhdGEgbm90IGRlc2NyaWJlZCBpbiB0aGUgT3BlbkFQSSBkZXNjcmlwdGlvbiBmb3VuZCB3aGVuIGRlc2VyaWFsaXppbmcuIENhbiBiZSB1c2VkIGZvciBzZXJpYWxpemF0aW9uIGFzIHdlbGwuICovXG4gIF9hZGRpdGlvbmFsRGF0YTtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGFkZGl0aW9uYWxEYXRhIHByb3BlcnR5IHZhbHVlLiBTdG9yZXMgYWRkaXRpb25hbCBkYXRhIG5vdCBkZXNjcmliZWQgaW4gdGhlIE9wZW5BUEkgZGVzY3JpcHRpb24gZm91bmQgd2hlbiBkZXNlcmlhbGl6aW5nLiBDYW4gYmUgdXNlZCBmb3Igc2VyaWFsaXphdGlvbiBhcyB3ZWxsLlxuICAgKiBAcmV0dXJucyBhIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4gICAqL1xuICBnZXQgYWRkaXRpb25hbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRpdGlvbmFsRGF0YSBwcm9wZXJ0eSB2YWx1ZS4gU3RvcmVzIGFkZGl0aW9uYWwgZGF0YSBub3QgZGVzY3JpYmVkIGluIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIGZvdW5kIHdoZW4gZGVzZXJpYWxpemluZy4gQ2FuIGJlIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24gYXMgd2VsbC5cbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIEFkZGl0aW9uYWxEYXRhIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0IGFkZGl0aW9uYWxEYXRhKGUpIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsRGF0YSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBTZXJ2aWNlIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FkZGl0aW9uYWxEYXRhID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBkZXNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IG1vZGVsXG4gICAqIEByZXR1cm5zIGEgUmVjb3JkPHN0cmluZywgKG5vZGU6IFBhcnNlTm9kZSkgPT4gdm9pZD5cbiAgICovXG4gIGdldEZpZWxkRGVzZXJpYWxpemVycygpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgaW5mb3JtYXRpb24gdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB3cml0ZXIgU2VyaWFsaXphdGlvbiB3cml0ZXIgdG8gdXNlIHRvIHNlcmlhbGl6ZSB0aGlzIG1vZGVsXG4gICAqL1xuICBzZXJpYWxpemUoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlciBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGUud3JpdGVBZGRpdGlvbmFsRGF0YSh0aGlzLmFkZGl0aW9uYWxEYXRhKTtcbiAgfVxufVxuZnVuY3Rpb24gWnIodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcga2koKTtcbn1cbmNsYXNzIFdpIGV4dGVuZHMgTGkge1xuICAvKiogVGhlIGFsbG93ZWQgcHJvcGVydHkgKi9cbiAgX2FsbG93ZWQ7XG4gIC8qKiBUaGUgY29uc3VtZWQgcHJvcGVydHkgKi9cbiAgX2NvbnN1bWVkO1xuICAvKiogVGhlIGRhdGEgcHJvcGVydHkgKi9cbiAgX2RhdGE7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhbGxvd2VkIHByb3BlcnR5IHZhbHVlLiBUaGUgYWxsb3dlZCBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIGludDY0XG4gICAqL1xuICBnZXQgYWxsb3dlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dlZDtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYWxsb3dlZCBwcm9wZXJ0eSB2YWx1ZS4gVGhlIGFsbG93ZWQgcHJvcGVydHlcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldCBmb3IgdGhlIGFsbG93ZWQgcHJvcGVydHkuXG4gICAqL1xuICBzZXQgYWxsb3dlZChlKSB7XG4gICAgdGhpcy5fYWxsb3dlZCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBMaXN0U2VhdHNSZXNwb25zZVBhZ2luYXRpb24gYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgY29uc3VtZWQgcHJvcGVydHkgdmFsdWUuIFRoZSBjb25zdW1lZCBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIGludDY0XG4gICAqL1xuICBnZXQgY29uc3VtZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnN1bWVkO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjb25zdW1lZCBwcm9wZXJ0eSB2YWx1ZS4gVGhlIGNvbnN1bWVkIHByb3BlcnR5XG4gICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgZm9yIHRoZSBjb25zdW1lZCBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBjb25zdW1lZChlKSB7XG4gICAgdGhpcy5fY29uc3VtZWQgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBkYXRhIHByb3BlcnR5IHZhbHVlLiBUaGUgZGF0YSBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyBhIFNlYXRcbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkYXRhIHByb3BlcnR5IHZhbHVlLiBUaGUgZGF0YSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0IGZvciB0aGUgZGF0YSBwcm9wZXJ0eS5cbiAgICovXG4gIHNldCBkYXRhKGUpIHtcbiAgICB0aGlzLl9kYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogVGhlIGRlc2VyaWFsaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcbiAgICogQHJldHVybnMgYSBSZWNvcmQ8c3RyaW5nLCAobm9kZTogUGFyc2VOb2RlKSA9PiB2b2lkPlxuICAgKi9cbiAgZ2V0RmllbGREZXNlcmlhbGl6ZXJzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdXBlci5nZXRGaWVsZERlc2VyaWFsaXplcnMoKSxcbiAgICAgIGFsbG93ZWQ6IChlKSA9PiB7XG4gICAgICAgIHRoaXMuYWxsb3dlZCA9IGUuZ2V0TnVtYmVyVmFsdWUoKTtcbiAgICAgIH0sXG4gICAgICBjb25zdW1lZDogKGUpID0+IHtcbiAgICAgICAgdGhpcy5jb25zdW1lZCA9IGUuZ2V0TnVtYmVyVmFsdWUoKTtcbiAgICAgIH0sXG4gICAgICBkYXRhOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLmRhdGEgPSBlLmdldENvbGxlY3Rpb25PZk9iamVjdFZhbHVlcyhacik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2VyaWFsaXplcyBpbmZvcm1hdGlvbiB0aGUgY3VycmVudCBvYmplY3RcbiAgICogQHBhcmFtIHdyaXRlciBTZXJpYWxpemF0aW9uIHdyaXRlciB0byB1c2UgdG8gc2VyaWFsaXplIHRoaXMgbW9kZWxcbiAgICovXG4gIHNlcmlhbGl6ZShlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgc3VwZXIuc2VyaWFsaXplKGUpLCBlLndyaXRlTnVtYmVyVmFsdWUoXCJhbGxvd2VkXCIsIHRoaXMuYWxsb3dlZCksIGUud3JpdGVOdW1iZXJWYWx1ZShcImNvbnN1bWVkXCIsIHRoaXMuY29uc3VtZWQpLCBlLndyaXRlQ29sbGVjdGlvbk9mT2JqZWN0VmFsdWVzKFwiZGF0YVwiLCB0aGlzLmRhdGEpO1xuICB9XG59XG5mdW5jdGlvbiBZaSh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyBJaSgpO1xufVxuZnVuY3Rpb24gUWkodCkge1xuICBpZiAoIXQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VOb2RlIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gIHJldHVybiBuZXcgRmkoKTtcbn1cbmZ1bmN0aW9uIFppKHQpIHtcbiAgaWYgKCF0KVxuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlTm9kZSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gbmV3IHFpKCk7XG59XG5jbGFzcyBKaSB7XG4gIC8qKiBQYXRoIHBhcmFtZXRlcnMgZm9yIHRoZSByZXF1ZXN0ICovXG4gIHBhdGhQYXJhbWV0ZXJzO1xuICAvKiogVGhlIHJlcXVlc3QgYWRhcHRlciB0byB1c2UgdG8gZXhlY3V0ZSB0aGUgcmVxdWVzdHMuICovXG4gIHJlcXVlc3RBZGFwdGVyO1xuICAvKiogVXJsIHRlbXBsYXRlIHRvIHVzZSB0byBidWlsZCB0aGUgVVJMIGZvciB0aGUgY3VycmVudCByZXF1ZXN0IGJ1aWxkZXIgKi9cbiAgdXJsVGVtcGxhdGU7XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgQ29tcGxpYW5jZVJlcXVlc3RCdWlsZGVyIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICogQHBhcmFtIHBhdGhQYXJhbWV0ZXJzIFRoZSByYXcgdXJsIG9yIHRoZSBVcmwgdGVtcGxhdGUgcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSByZXF1ZXN0QWRhcHRlciBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXRoUGFyYW1ldGVycyBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGlmICghcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RBZGFwdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgdGhpcy51cmxUZW1wbGF0ZSA9IFwieytiYXNldXJsfS9jb21wbGlhbmNlXCI7XG4gICAgY29uc3QgbiA9IEYoZSk7XG4gICAgdGhpcy5wYXRoUGFyYW1ldGVycyA9IG4sIHRoaXMucmVxdWVzdEFkYXB0ZXIgPSByO1xuICB9XG4gIC8qKlxuICAgKiB2ZXJpZnkgZXhwb3J0cyBjb21wbGlhbmNlIGZvciBhIGdpdmVuIHVzZXJcbiAgICogQHBhcmFtIHJlcXVlc3RDb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZXF1ZXN0IHN1Y2ggYXMgaGVhZGVycywgcXVlcnkgcGFyYW1ldGVycywgYW5kIG1pZGRsZXdhcmUgb3B0aW9ucy5cbiAgICogQHBhcmFtIHJlc3BvbnNlSGFuZGxlciBSZXNwb25zZSBoYW5kbGVyIHRvIHVzZSBpbiBwbGFjZSBvZiB0aGUgZGVmYXVsdCByZXNwb25zZSBoYW5kbGluZyBwcm92aWRlZCBieSB0aGUgY29yZSBzZXJ2aWNlXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSBvZiBDb21wbGlhbmNlU2NyZWVuaW5nUmVzcG9uc2VcbiAgICovXG4gIGdldChlLCByKSB7XG4gICAgY29uc3QgbiA9IHRoaXMudG9HZXRSZXF1ZXN0SW5mb3JtYXRpb24oXG4gICAgICBlXG4gICAgKSwgYSA9IHtcbiAgICAgIDQwMDogWWksXG4gICAgICA1MDA6IFppXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0QWRhcHRlcj8uc2VuZEFzeW5jKG4sIFFpLCByLCBhKSA/PyBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJyZXF1ZXN0IGFkYXB0ZXIgaXMgbnVsbFwiKSk7XG4gIH1cbiAgLyoqXG4gICAqIHZlcmlmeSBleHBvcnRzIGNvbXBsaWFuY2UgZm9yIGEgZ2l2ZW4gdXNlclxuICAgKiBAcGFyYW0gcmVxdWVzdENvbmZpZ3VyYXRpb24gQ29uZmlndXJhdGlvbiBmb3IgdGhlIHJlcXVlc3Qgc3VjaCBhcyBoZWFkZXJzLCBxdWVyeSBwYXJhbWV0ZXJzLCBhbmQgbWlkZGxld2FyZSBvcHRpb25zLlxuICAgKiBAcmV0dXJucyBhIFJlcXVlc3RJbmZvcm1hdGlvblxuICAgKi9cbiAgdG9HZXRSZXF1ZXN0SW5mb3JtYXRpb24oZSkge1xuICAgIGNvbnN0IHIgPSBuZXcgUygpO1xuICAgIHJldHVybiByLnVybFRlbXBsYXRlID0gdGhpcy51cmxUZW1wbGF0ZSwgci5wYXRoUGFyYW1ldGVycyA9IHRoaXMucGF0aFBhcmFtZXRlcnMsIHIuaHR0cE1ldGhvZCA9IEIuR0VULCByLmhlYWRlcnMuQWNjZXB0ID0gW1wiYXBwbGljYXRpb24vanNvblwiXSwgZSAmJiAoci5hZGRSZXF1ZXN0SGVhZGVycyhlLmhlYWRlcnMpLCByLmFkZFJlcXVlc3RPcHRpb25zKGUub3B0aW9ucykpLCByO1xuICB9XG59XG5mdW5jdGlvbiBCZSh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyB6aSgpO1xufVxuY2xhc3MgZW8ge1xuICAvKiogUGF0aCBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdCAqL1xuICBwYXRoUGFyYW1ldGVycztcbiAgLyoqIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLiAqL1xuICByZXF1ZXN0QWRhcHRlcjtcbiAgLyoqIFVybCB0ZW1wbGF0ZSB0byB1c2UgdG8gYnVpbGQgdGhlIFVSTCBmb3IgdGhlIGN1cnJlbnQgcmVxdWVzdCBidWlsZGVyICovXG4gIHVybFRlbXBsYXRlO1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFNlYXRzSXRlbVJlcXVlc3RCdWlsZGVyIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICogQHBhcmFtIHBhdGhQYXJhbWV0ZXJzIFRoZSByYXcgdXJsIG9yIHRoZSBVcmwgdGVtcGxhdGUgcGFyYW1ldGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSByZXF1ZXN0QWRhcHRlciBUaGUgcmVxdWVzdCBhZGFwdGVyIHRvIHVzZSB0byBleGVjdXRlIHRoZSByZXF1ZXN0cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXRoUGFyYW1ldGVycyBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGlmICghcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3RBZGFwdGVyIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgdGhpcy51cmxUZW1wbGF0ZSA9IFwieytiYXNldXJsfS9zZWF0cy97aWR9XCI7XG4gICAgY29uc3QgbiA9IEYoZSk7XG4gICAgdGhpcy5wYXRoUGFyYW1ldGVycyA9IG4sIHRoaXMucmVxdWVzdEFkYXB0ZXIgPSByO1xuICB9XG4gIC8qKlxuICAgKiByZW1vdmUgYSB1c2VyIGZyb20gYSBzZWF0XG4gICAqIEBwYXJhbSByZXF1ZXN0Q29uZmlndXJhdGlvbiBDb25maWd1cmF0aW9uIGZvciB0aGUgcmVxdWVzdCBzdWNoIGFzIGhlYWRlcnMsIHF1ZXJ5IHBhcmFtZXRlcnMsIGFuZCBtaWRkbGV3YXJlIG9wdGlvbnMuXG4gICAqIEBwYXJhbSByZXNwb25zZUhhbmRsZXIgUmVzcG9uc2UgaGFuZGxlciB0byB1c2UgaW4gcGxhY2Ugb2YgdGhlIGRlZmF1bHQgcmVzcG9uc2UgaGFuZGxpbmcgcHJvdmlkZWQgYnkgdGhlIGNvcmUgc2VydmljZVxuICAgKi9cbiAgZGVsZXRlKGUsIHIpIHtcbiAgICBjb25zdCBuID0gdGhpcy50b0RlbGV0ZVJlcXVlc3RJbmZvcm1hdGlvbihcbiAgICAgIGVcbiAgICApLCBhID0ge1xuICAgICAgNDAwOiBCZSxcbiAgICAgIDQwMzogQmVcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RBZGFwdGVyPy5zZW5kTm9SZXNwb25zZUNvbnRlbnRBc3luYyhuLCByLCBhKSA/PyBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJyZXF1ZXN0IGFkYXB0ZXIgaXMgbnVsbFwiKSk7XG4gIH1cbiAgLyoqXG4gICAqIHJlbW92ZSBhIHVzZXIgZnJvbSBhIHNlYXRcbiAgICogQHBhcmFtIHJlcXVlc3RDb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZXF1ZXN0IHN1Y2ggYXMgaGVhZGVycywgcXVlcnkgcGFyYW1ldGVycywgYW5kIG1pZGRsZXdhcmUgb3B0aW9ucy5cbiAgICogQHJldHVybnMgYSBSZXF1ZXN0SW5mb3JtYXRpb25cbiAgICovXG4gIHRvRGVsZXRlUmVxdWVzdEluZm9ybWF0aW9uKGUpIHtcbiAgICBjb25zdCByID0gbmV3IFMoKTtcbiAgICByZXR1cm4gci51cmxUZW1wbGF0ZSA9IHRoaXMudXJsVGVtcGxhdGUsIHIucGF0aFBhcmFtZXRlcnMgPSB0aGlzLnBhdGhQYXJhbWV0ZXJzLCByLmh0dHBNZXRob2QgPSBCLkRFTEVURSwgZSAmJiAoci5hZGRSZXF1ZXN0SGVhZGVycyhlLmhlYWRlcnMpLCByLmFkZFJlcXVlc3RPcHRpb25zKGUub3B0aW9ucykpLCByO1xuICB9XG59XG5mdW5jdGlvbiB0byh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyBXaSgpO1xufVxuY2xhc3Mgcm8ge1xuICAvKiogUGF0aCBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdCAqL1xuICBwYXRoUGFyYW1ldGVycztcbiAgLyoqIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLiAqL1xuICByZXF1ZXN0QWRhcHRlcjtcbiAgLyoqIFVybCB0ZW1wbGF0ZSB0byB1c2UgdG8gYnVpbGQgdGhlIFVSTCBmb3IgdGhlIGN1cnJlbnQgcmVxdWVzdCBidWlsZGVyICovXG4gIHVybFRlbXBsYXRlO1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFNlYXRzUmVxdWVzdEJ1aWxkZXIgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKiBAcGFyYW0gcGF0aFBhcmFtZXRlcnMgVGhlIHJhdyB1cmwgb3IgdGhlIFVybCB0ZW1wbGF0ZSBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdC5cbiAgICogQHBhcmFtIHJlcXVlc3RBZGFwdGVyIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgcikge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhdGhQYXJhbWV0ZXJzIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgaWYgKCFyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEFkYXB0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICB0aGlzLnVybFRlbXBsYXRlID0gXCJ7K2Jhc2V1cmx9L3NlYXRzez9saW1pdCosb2Zmc2V0Kn1cIjtcbiAgICBjb25zdCBuID0gRihlKTtcbiAgICB0aGlzLnBhdGhQYXJhbWV0ZXJzID0gbiwgdGhpcy5yZXF1ZXN0QWRhcHRlciA9IHI7XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybnMgbGlzdCBvZiB1c2VycyBvY2N1cHlpbmcgc2VhdHNcbiAgICogQHBhcmFtIHJlcXVlc3RDb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZXF1ZXN0IHN1Y2ggYXMgaGVhZGVycywgcXVlcnkgcGFyYW1ldGVycywgYW5kIG1pZGRsZXdhcmUgb3B0aW9ucy5cbiAgICogQHBhcmFtIHJlc3BvbnNlSGFuZGxlciBSZXNwb25zZSBoYW5kbGVyIHRvIHVzZSBpbiBwbGFjZSBvZiB0aGUgZGVmYXVsdCByZXNwb25zZSBoYW5kbGluZyBwcm92aWRlZCBieSB0aGUgY29yZSBzZXJ2aWNlXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSBvZiBMaXN0U2VhdHNSZXNwb25zZVBhZ2luYXRpb25cbiAgICovXG4gIGdldChlLCByKSB7XG4gICAgY29uc3QgbiA9IHRoaXMudG9HZXRSZXF1ZXN0SW5mb3JtYXRpb24oXG4gICAgICBlXG4gICAgKSwgYSA9IHtcbiAgICAgIDUwMDogQmVcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RBZGFwdGVyPy5zZW5kQXN5bmMobiwgdG8sIHIsIGEpID8/IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInJlcXVlc3QgYWRhcHRlciBpcyBudWxsXCIpKTtcbiAgfVxuICAvKipcbiAgICogYXNzaWduIGEgdXNlciB0byBhIHNlYXRcbiAgICogQHBhcmFtIGJvZHkgVGhlIHJlcXVlc3QgYm9keVxuICAgKiBAcGFyYW0gcmVxdWVzdENvbmZpZ3VyYXRpb24gQ29uZmlndXJhdGlvbiBmb3IgdGhlIHJlcXVlc3Qgc3VjaCBhcyBoZWFkZXJzLCBxdWVyeSBwYXJhbWV0ZXJzLCBhbmQgbWlkZGxld2FyZSBvcHRpb25zLlxuICAgKiBAcGFyYW0gcmVzcG9uc2VIYW5kbGVyIFJlc3BvbnNlIGhhbmRsZXIgdG8gdXNlIGluIHBsYWNlIG9mIHRoZSBkZWZhdWx0IHJlc3BvbnNlIGhhbmRsaW5nIHByb3ZpZGVkIGJ5IHRoZSBjb3JlIHNlcnZpY2VcbiAgICogQHJldHVybnMgYSBQcm9taXNlIG9mIFNlYXRcbiAgICovXG4gIHBvc3QoZSwgciwgbikge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImJvZHkgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICBjb25zdCBhID0gdGhpcy50b1Bvc3RSZXF1ZXN0SW5mb3JtYXRpb24oXG4gICAgICBlLFxuICAgICAgclxuICAgICksIGkgPSB7XG4gICAgICA0MDA6IEJlXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0QWRhcHRlcj8uc2VuZEFzeW5jKGEsIFpyLCBuLCBpKSA/PyBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJyZXF1ZXN0IGFkYXB0ZXIgaXMgbnVsbFwiKSk7XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybnMgbGlzdCBvZiB1c2VycyBvY2N1cHlpbmcgc2VhdHNcbiAgICogQHBhcmFtIHJlcXVlc3RDb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZXF1ZXN0IHN1Y2ggYXMgaGVhZGVycywgcXVlcnkgcGFyYW1ldGVycywgYW5kIG1pZGRsZXdhcmUgb3B0aW9ucy5cbiAgICogQHJldHVybnMgYSBSZXF1ZXN0SW5mb3JtYXRpb25cbiAgICovXG4gIHRvR2V0UmVxdWVzdEluZm9ybWF0aW9uKGUpIHtcbiAgICBjb25zdCByID0gbmV3IFMoKTtcbiAgICByZXR1cm4gci51cmxUZW1wbGF0ZSA9IHRoaXMudXJsVGVtcGxhdGUsIHIucGF0aFBhcmFtZXRlcnMgPSB0aGlzLnBhdGhQYXJhbWV0ZXJzLCByLmh0dHBNZXRob2QgPSBCLkdFVCwgci5oZWFkZXJzLkFjY2VwdCA9IFtcImFwcGxpY2F0aW9uL2pzb25cIl0sIGUgJiYgKHIuYWRkUmVxdWVzdEhlYWRlcnMoZS5oZWFkZXJzKSwgci5zZXRRdWVyeVN0cmluZ1BhcmFtZXRlcnNGcm9tUmF3T2JqZWN0KGUucXVlcnlQYXJhbWV0ZXJzKSwgci5hZGRSZXF1ZXN0T3B0aW9ucyhlLm9wdGlvbnMpKSwgcjtcbiAgfVxuICAvKipcbiAgICogYXNzaWduIGEgdXNlciB0byBhIHNlYXRcbiAgICogQHBhcmFtIGJvZHkgVGhlIHJlcXVlc3QgYm9keVxuICAgKiBAcGFyYW0gcmVxdWVzdENvbmZpZ3VyYXRpb24gQ29uZmlndXJhdGlvbiBmb3IgdGhlIHJlcXVlc3Qgc3VjaCBhcyBoZWFkZXJzLCBxdWVyeSBwYXJhbWV0ZXJzLCBhbmQgbWlkZGxld2FyZSBvcHRpb25zLlxuICAgKiBAcmV0dXJucyBhIFJlcXVlc3RJbmZvcm1hdGlvblxuICAgKi9cbiAgdG9Qb3N0UmVxdWVzdEluZm9ybWF0aW9uKGUsIHIpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJib2R5IGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgY29uc3QgbiA9IG5ldyBTKCk7XG4gICAgcmV0dXJuIG4udXJsVGVtcGxhdGUgPSB0aGlzLnVybFRlbXBsYXRlLCBuLnBhdGhQYXJhbWV0ZXJzID0gdGhpcy5wYXRoUGFyYW1ldGVycywgbi5odHRwTWV0aG9kID0gQi5QT1NULCBuLmhlYWRlcnMuQWNjZXB0ID0gW1wiYXBwbGljYXRpb24vanNvblwiXSwgciAmJiAobi5hZGRSZXF1ZXN0SGVhZGVycyhyLmhlYWRlcnMpLCBuLmFkZFJlcXVlc3RPcHRpb25zKHIub3B0aW9ucykpLCBuLnNldENvbnRlbnRGcm9tUGFyc2FibGUodGhpcy5yZXF1ZXN0QWRhcHRlciwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIGUpLCBuO1xuICB9XG59XG5mdW5jdGlvbiBubyh0KSB7XG4gIGlmICghdClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZU5vZGUgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIG5ldyBYaSgpO1xufVxuY2xhc3MgYW8ge1xuICAvKiogUGF0aCBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdCAqL1xuICBwYXRoUGFyYW1ldGVycztcbiAgLyoqIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLiAqL1xuICByZXF1ZXN0QWRhcHRlcjtcbiAgLyoqIFVybCB0ZW1wbGF0ZSB0byB1c2UgdG8gYnVpbGQgdGhlIFVSTCBmb3IgdGhlIGN1cnJlbnQgcmVxdWVzdCBidWlsZGVyICovXG4gIHVybFRlbXBsYXRlO1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFNlcnZpY2VzUmVxdWVzdEJ1aWxkZXIgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKiBAcGFyYW0gcGF0aFBhcmFtZXRlcnMgVGhlIHJhdyB1cmwgb3IgdGhlIFVybCB0ZW1wbGF0ZSBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdC5cbiAgICogQHBhcmFtIHJlcXVlc3RBZGFwdGVyIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgcikge1xuICAgIGlmICghZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhdGhQYXJhbWV0ZXJzIGNhbm5vdCBiZSB1bmRlZmluZWRcIik7XG4gICAgaWYgKCFyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEFkYXB0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICB0aGlzLnVybFRlbXBsYXRlID0gXCJ7K2Jhc2V1cmx9L3NlcnZpY2VzXCI7XG4gICAgY29uc3QgbiA9IEYoZSk7XG4gICAgdGhpcy5wYXRoUGFyYW1ldGVycyA9IG4sIHRoaXMucmVxdWVzdEFkYXB0ZXIgPSByO1xuICB9XG4gIC8qKlxuICAgKiBnZXQgYSBsaXN0IG9mIHNlcnZpY2VzIGEgdXNlciBpcyBlbnRpdGxlZCB0b1xuICAgKiBAcGFyYW0gcmVxdWVzdENvbmZpZ3VyYXRpb24gQ29uZmlndXJhdGlvbiBmb3IgdGhlIHJlcXVlc3Qgc3VjaCBhcyBoZWFkZXJzLCBxdWVyeSBwYXJhbWV0ZXJzLCBhbmQgbWlkZGxld2FyZSBvcHRpb25zLlxuICAgKiBAcGFyYW0gcmVzcG9uc2VIYW5kbGVyIFJlc3BvbnNlIGhhbmRsZXIgdG8gdXNlIGluIHBsYWNlIG9mIHRoZSBkZWZhdWx0IHJlc3BvbnNlIGhhbmRsaW5nIHByb3ZpZGVkIGJ5IHRoZSBjb3JlIHNlcnZpY2VcbiAgICogQHJldHVybnMgYSBQcm9taXNlIG9mIFNlcnZpY2VcbiAgICovXG4gIGdldChlLCByKSB7XG4gICAgY29uc3QgbiA9IHRoaXMudG9HZXRSZXF1ZXN0SW5mb3JtYXRpb24oXG4gICAgICBlXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0QWRhcHRlcj8uc2VuZEFzeW5jKG4sIG5vLCByLCB2b2lkIDApID8/IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInJlcXVlc3QgYWRhcHRlciBpcyBudWxsXCIpKTtcbiAgfVxuICAvKipcbiAgICogZ2V0IGEgbGlzdCBvZiBzZXJ2aWNlcyBhIHVzZXIgaXMgZW50aXRsZWQgdG9cbiAgICogQHBhcmFtIHJlcXVlc3RDb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZXF1ZXN0IHN1Y2ggYXMgaGVhZGVycywgcXVlcnkgcGFyYW1ldGVycywgYW5kIG1pZGRsZXdhcmUgb3B0aW9ucy5cbiAgICogQHJldHVybnMgYSBSZXF1ZXN0SW5mb3JtYXRpb25cbiAgICovXG4gIHRvR2V0UmVxdWVzdEluZm9ybWF0aW9uKGUpIHtcbiAgICBjb25zdCByID0gbmV3IFMoKTtcbiAgICByZXR1cm4gci51cmxUZW1wbGF0ZSA9IHRoaXMudXJsVGVtcGxhdGUsIHIucGF0aFBhcmFtZXRlcnMgPSB0aGlzLnBhdGhQYXJhbWV0ZXJzLCByLmh0dHBNZXRob2QgPSBCLkdFVCwgci5oZWFkZXJzLkFjY2VwdCA9IFtcImFwcGxpY2F0aW9uL2pzb25cIl0sIGUgJiYgKHIuYWRkUmVxdWVzdEhlYWRlcnMoZS5oZWFkZXJzKSwgci5hZGRSZXF1ZXN0T3B0aW9ucyhlLm9wdGlvbnMpKSwgcjtcbiAgfVxufVxuY2xhc3MgaW8ge1xuICAvKiogVGhlIGNvbXBsaWFuY2UgcHJvcGVydHkgKi9cbiAgZ2V0IGNvbXBsaWFuY2UoKSB7XG4gICAgcmV0dXJuIG5ldyBKaSh0aGlzLnBhdGhQYXJhbWV0ZXJzLCB0aGlzLnJlcXVlc3RBZGFwdGVyKTtcbiAgfVxuICAvKiogUGF0aCBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdCAqL1xuICBwYXRoUGFyYW1ldGVycztcbiAgLyoqIFRoZSByZXF1ZXN0IGFkYXB0ZXIgdG8gdXNlIHRvIGV4ZWN1dGUgdGhlIHJlcXVlc3RzLiAqL1xuICByZXF1ZXN0QWRhcHRlcjtcbiAgLyoqIFRoZSBzZWF0cyBwcm9wZXJ0eSAqL1xuICBnZXQgc2VhdHMoKSB7XG4gICAgcmV0dXJuIG5ldyBybyh0aGlzLnBhdGhQYXJhbWV0ZXJzLCB0aGlzLnJlcXVlc3RBZGFwdGVyKTtcbiAgfVxuICAvKiogVGhlIHNlcnZpY2VzIHByb3BlcnR5ICovXG4gIGdldCBzZXJ2aWNlcygpIHtcbiAgICByZXR1cm4gbmV3IGFvKHRoaXMucGF0aFBhcmFtZXRlcnMsIHRoaXMucmVxdWVzdEFkYXB0ZXIpO1xuICB9XG4gIC8qKiBVcmwgdGVtcGxhdGUgdG8gdXNlIHRvIGJ1aWxkIHRoZSBVUkwgZm9yIHRoZSBjdXJyZW50IHJlcXVlc3QgYnVpbGRlciAqL1xuICB1cmxUZW1wbGF0ZTtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIG5ldyBFbnRpdGxlbWVudHMgYW5kIHNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLlxuICAgKiBAcGFyYW0gcmVxdWVzdEFkYXB0ZXIgVGhlIHJlcXVlc3QgYWRhcHRlciB0byB1c2UgdG8gZXhlY3V0ZSB0aGUgcmVxdWVzdHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEFkYXB0ZXIgY2Fubm90IGJlIHVuZGVmaW5lZFwiKTtcbiAgICB0aGlzLnBhdGhQYXJhbWV0ZXJzID0ge30sIHRoaXMudXJsVGVtcGxhdGUgPSBcInsrYmFzZXVybH1cIiwgdGhpcy5yZXF1ZXN0QWRhcHRlciA9IGUsIHl0KFlyKSwgbXQoV3IpLCAoZS5iYXNlVXJsID09PSB2b2lkIDAgfHwgZS5iYXNlVXJsID09PSBcIlwiKSAmJiAoZS5iYXNlVXJsID0gXCIvYXBpL2VudGl0bGVtZW50cy92MVwiKSwgdGhpcy5wYXRoUGFyYW1ldGVycy5iYXNldXJsID0gZS5iYXNlVXJsO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0gZnJvbSB0aGUgQXBpU2RrLnNlYXRzLml0ZW0gY29sbGVjdGlvblxuICAgKiBAcGFyYW0gaWQgVW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGl0ZW1cbiAgICogQHJldHVybnMgYSBTZWF0c0l0ZW1SZXF1ZXN0QnVpbGRlclxuICAgKi9cbiAgc2VhdHNCeUlkKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpZCBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpO1xuICAgIGNvbnN0IHIgPSBGKHRoaXMucGF0aFBhcmFtZXRlcnMpO1xuICAgIHJldHVybiByLmlkID0gZSwgbmV3IGVvKHIsIHRoaXMucmVxdWVzdEFkYXB0ZXIpO1xuICB9XG59XG5jbGFzcyBvbyB7XG4gIGNsaWVudDtcbiAgYWNjZXNzVG9rZW5Qcm92aWRlcjtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHRoaXMuYWNjZXNzVG9rZW5Qcm92aWRlciA9IG5ldyBzbygpO1xuICAgIGNvbnN0IHIgPSBuZXcgZ3QuRmV0Y2hSZXF1ZXN0QWRhcHRlcihcbiAgICAgIG5ldyBZKHRoaXMuYWNjZXNzVG9rZW5Qcm92aWRlcilcbiAgICApO1xuICAgIHIuYmFzZVVybCA9IGUgfHwgXCJcIiwgdGhpcy5jbGllbnQgPSBuZXcgaW8ocik7XG4gIH1cbiAgYXN5bmMgZ2V0KGUsIHIpIHtcbiAgICBjb25zdCBuID0gYXdhaXQgdGhpcy5jbGllbnQuc2VhdHMuZ2V0KCk7XG4gICAgcmV0dXJuIHsgdG90YWw6IG4/LmNvbnN1bWVkIHx8IDAsIGF2YWlsYWJsZTogbj8uYWxsb3dlZCB8fCAwIH07XG4gIH1cbiAgYXN5bmMgc2VhdHMoZSwgciwgbikge1xuICAgIGNvbnN0IGEgPSBhd2FpdCB0aGlzLmNsaWVudC5zZWF0cy5nZXQoKTtcbiAgICByZXR1cm4gYT8uZGF0YSA/IGEuZGF0YS5tYXAoKHsgc3Vic2NyaXB0aW9uX2lkOiBpLCBhY2NvdW50X3VzZXJuYW1lOiBvIH0pID0+ICh7XG4gICAgICBpZDogaSxcbiAgICAgIG5hbWU6IG8sXG4gICAgICBhc3NpZ25lZDogITBcbiAgICB9KSkgOiBbXTtcbiAgfVxuICBhc3luYyBhc3NpZ24oZSwgciwgbikge1xuICAgIGNvbnN0IGEgPSBuZXcgJGkoKTtcbiAgICBhLmFjY291bnRfdXNlcm5hbWUgPSBuWzBdLCBhd2FpdCB0aGlzLmNsaWVudC5zZWF0cy5wb3N0KGEpO1xuICB9XG4gIGFzeW5jIHVuQXNzaWduKGUsIHIsIG4pIHtcbiAgICBhd2FpdCB0aGlzLmNsaWVudC5zZWF0c0J5SWQoblswXSkuZGVsZXRlKCk7XG4gIH1cbn1cbmNsYXNzIHNvIHtcbiAgZ2V0QXV0aG9yaXphdGlvblRva2VuKGUsIHIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFwiZHVtbXlcIik7XG4gIH1cbiAgZ2V0QWxsb3dlZEhvc3RzVmFsaWRhdG9yKCkge1xuICAgIHJldHVybiBuZXcgd3QoLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVvKHQsIGUpIHtcbiAgc3dpdGNoICh0KSB7XG4gICAgY2FzZSBcIkNJQU1fQXV0aHpcIjpcbiAgICAgIHJldHVybiBuZXcgVmkoZSk7XG4gICAgY2FzZSBcImVudGl0bGVtZW50c1wiOlxuICAgICAgcmV0dXJuIG5ldyBvbyhlKTtcbiAgICBjYXNlIFwibW9ja1wiOlxuICAgICAgcmV0dXJuIG5ldyBlbigpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJubyBpbXBsZW1lbnRhdGlvbiBmb3VuZCBmb3IgXCIgKyB0KTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgdW8gYXMgZ2V0U2VydmljZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTJ4cFpXNTBMbXB6SWl3aWMyOTFjbU5sY3lJNld5SXVMaTloY0drdmJXOWpheTF6WlhKMmFXTmxMblJ6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMM1J6YkdsaUwzUnpiR2xpTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekwyUnBjM1F2WlhNdmMzSmpMM05sY21saGJHbDZZWFJwYjI0dmNHRnljMlZPYjJSbFJtRmpkRzl5ZVZKbFoybHpkSEo1TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekwyUnBjM1F2WlhNdmMzSmpMM05sY21saGJHbDZZWFJwYjI0dmNHRnljMlZPYjJSbFVISnZlSGxHWVdOMGIzSjVMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6TDJScGMzUXZaWE12YzNKakwzTmxjbWxoYkdsNllYUnBiMjR2YzJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2taaFkzUnZjbmxTWldkcGMzUnllUzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3k5a2FYTjBMMlZ6TDNOeVl5OXpaWEpwWVd4cGVtRjBhVzl1TDNObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhKUWNtOTRlVVpoWTNSdmNua3Vhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk12Ym05a1pWOXRiMlIxYkdWekwzVjFhV1F2WkdsemRDOWxjMjB0WW5KdmQzTmxjaTl5Ym1jdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxaFluTjBjbUZqZEdsdmJuTXZibTlrWlY5dGIyUjFiR1Z6TDNWMWFXUXZaR2x6ZEM5bGMyMHRZbkp2ZDNObGNpOXpkSEpwYm1kcFpua3Vhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk12Ym05a1pWOXRiMlIxYkdWekwzVjFhV1F2WkdsemRDOWxjMjB0WW5KdmQzTmxjaTl1WVhScGRtVXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk12Ym05a1pWOXRiMlIxYkdWekwzVjFhV1F2WkdsemRDOWxjMjB0WW5KdmQzTmxjaTkyTkM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5OWthWE4wTDJWekwzTnlZeTl6ZEc5eVpTOXBiazFsYlc5eWVVSmhZMnRwYm1kVGRHOXlaUzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3k5a2FYTjBMMlZ6TDNOeVl5OXpkRzl5WlM5cGJrMWxiVzl5ZVVKaFkydHBibWRUZEc5eVpVWmhZM1J2Y25rdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxaFluTjBjbUZqZEdsdmJuTXZaR2x6ZEM5bGN5OXpjbU12YzNSdmNtVXZZbUZqYTJsdVoxTjBiM0psUm1GamRHOXllVk5wYm1kc1pYUnZiaTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3k5a2FYTjBMMlZ6TDNOeVl5OXpkRzl5WlM5aVlXTnJhVzVuVTNSdmNtVlFZWEp6WlU1dlpHVkdZV04wYjNKNUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpMMlJwYzNRdlpYTXZjM0pqTDNOMGIzSmxMMkpoWTJ0cGJtZFRkRzl5WlZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhKUWNtOTRlVVpoWTNSdmNua3Vhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk12WkdsemRDOWxjeTl6Y21NdllYQnBRMnhwWlc1MFFuVnBiR1JsY2k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5OWthWE4wTDJWekwzTnlZeTloY0dsRmNuSnZjaTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3k5a2FYTjBMMlZ6TDNOeVl5OWhkWFJvWlc1MGFXTmhkR2x2Ymk5aGJHeHZkMlZrU0c5emRITldZV3hwWkdGMGIzSXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk12WkdsemRDOWxjeTl6Y21NdllYVjBhR1Z1ZEdsallYUnBiMjR2ZG1Gc2FXUmhkR1ZRY205MGIyTnZiQzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3k5a2FYTjBMMlZ6TDNOeVl5OWhkWFJvWlc1MGFXTmhkR2x2Ymk5aGNHbExaWGxCZFhSb1pXNTBhV05oZEdsdmJsQnliM1pwWkdWeUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpMMlJwYzNRdlpYTXZjM0pqTDJGMWRHaGxiblJwWTJGMGFXOXVMMkZ1YjI1NWJXOTFjMEYxZEdobGJuUnBZMkYwYVc5dVVISnZkbWxrWlhJdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxaFluTjBjbUZqZEdsdmJuTXZaR2x6ZEM5bGN5OXpjbU12WVhWMGFHVnVkR2xqWVhScGIyNHZZbUZ6WlVKbFlYSmxjbFJ2YTJWdVFYVjBhR1Z1ZEdsallYUnBiMjVRY205MmFXUmxjaTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYjNCbGJuUmxiR1Z0WlhSeWVTOWhjR2t2WW5WcGJHUXZaWE50TDNCc1lYUm1iM0p0TDJKeWIzZHpaWEl2WjJ4dlltRnNWR2hwY3k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWIzQmxiblJsYkdWdFpYUnllUzloY0drdlluVnBiR1F2WlhOdEwzWmxjbk5wYjI0dWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHOXdaVzUwWld4bGJXVjBjbmt2WVhCcEwySjFhV3hrTDJWemJTOXBiblJsY201aGJDOXpaVzEyWlhJdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHOXdaVzUwWld4bGJXVjBjbmt2WVhCcEwySjFhV3hrTDJWemJTOXBiblJsY201aGJDOW5iRzlpWVd3dGRYUnBiSE11YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUc5d1pXNTBaV3hsYldWMGNua3ZZWEJwTDJKMWFXeGtMMlZ6YlM5a2FXRm5MME52YlhCdmJtVnVkRXh2WjJkbGNpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiM0JsYm5SbGJHVnRaWFJ5ZVM5aGNHa3ZZblZwYkdRdlpYTnRMMlJwWVdjdmRIbHdaWE11YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUc5d1pXNTBaV3hsYldWMGNua3ZZWEJwTDJKMWFXeGtMMlZ6YlM5a2FXRm5MMmx1ZEdWeWJtRnNMMnh2WjB4bGRtVnNURzluWjJWeUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FTOWlkV2xzWkM5bGMyMHZZWEJwTDJScFlXY3Vhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzl3Wlc1MFpXeGxiV1YwY25rdllYQnBMMkoxYVd4a0wyVnpiUzlpWVdkbllXZGxMMmx1ZEdWeWJtRnNMMkpoWjJkaFoyVXRhVzF3YkM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWIzQmxiblJsYkdWdFpYUnllUzloY0drdlluVnBiR1F2WlhOdEwySmhaMmRoWjJVdmFXNTBaWEp1WVd3dmMzbHRZbTlzTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdmNHVnVkR1ZzWlcxbGRISjVMMkZ3YVM5aWRXbHNaQzlsYzIwdlltRm5aMkZuWlM5MWRHbHNjeTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYjNCbGJuUmxiR1Z0WlhSeWVTOWhjR2t2WW5WcGJHUXZaWE50TDJOdmJuUmxlSFF2WTI5dWRHVjRkQzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYjNCbGJuUmxiR1Z0WlhSeWVTOWhjR2t2WW5WcGJHUXZaWE50TDJScFlXY3ZZMjl1YzI5c1pVeHZaMmRsY2k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWIzQmxiblJsYkdWdFpYUnllUzloY0drdlluVnBiR1F2WlhOdEwyMWxkSEpwWTNNdlRtOXZjRTFsZEdWeUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FTOWlkV2xzWkM5bGMyMHZiV1YwY21samN5OU5aWFJ5YVdNdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHOXdaVzUwWld4bGJXVjBjbmt2WVhCcEwySjFhV3hrTDJWemJTOXdjbTl3WVdkaGRHbHZiaTlVWlhoMFRXRndVSEp2Y0dGbllYUnZjaTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYjNCbGJuUmxiR1Z0WlhSeWVTOWhjR2t2WW5WcGJHUXZaWE50TDJOdmJuUmxlSFF2VG05dmNFTnZiblJsZUhSTllXNWhaMlZ5TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdmNHVnVkR1ZzWlcxbGRISjVMMkZ3YVM5aWRXbHNaQzlsYzIwdllYQnBMMk52Ym5SbGVIUXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzl3Wlc1MFpXeGxiV1YwY25rdllYQnBMMkoxYVd4a0wyVnpiUzkwY21GalpTOTBjbUZqWlY5bWJHRm5jeTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYjNCbGJuUmxiR1Z0WlhSeWVTOWhjR2t2WW5WcGJHUXZaWE50TDNSeVlXTmxMMmx1ZG1Gc2FXUXRjM0JoYmkxamIyNXpkR0Z1ZEhNdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHOXdaVzUwWld4bGJXVjBjbmt2WVhCcEwySjFhV3hrTDJWemJTOTBjbUZqWlM5T2IyNVNaV052Y21ScGJtZFRjR0Z1TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdmNHVnVkR1ZzWlcxbGRISjVMMkZ3YVM5aWRXbHNaQzlsYzIwdmRISmhZMlV2WTI5dWRHVjRkQzExZEdsc2N5NXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiM0JsYm5SbGJHVnRaWFJ5ZVM5aGNHa3ZZblZwYkdRdlpYTnRMM1J5WVdObEwzTndZVzVqYjI1MFpYaDBMWFYwYVd4ekxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FTOWlkV2xzWkM5bGMyMHZkSEpoWTJVdlRtOXZjRlJ5WVdObGNpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiM0JsYm5SbGJHVnRaWFJ5ZVM5aGNHa3ZZblZwYkdRdlpYTnRMM1J5WVdObEwxQnliM2g1VkhKaFkyVnlMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ2Y0dWdWRHVnNaVzFsZEhKNUwyRndhUzlpZFdsc1pDOWxjMjB2ZEhKaFkyVXZUbTl2Y0ZSeVlXTmxjbEJ5YjNacFpHVnlMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ2Y0dWdWRHVnNaVzFsZEhKNUwyRndhUzlpZFdsc1pDOWxjMjB2ZEhKaFkyVXZVSEp2ZUhsVWNtRmpaWEpRY205MmFXUmxjaTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYjNCbGJuUmxiR1Z0WlhSeWVTOWhjR2t2WW5WcGJHUXZaWE50TDNSeVlXTmxMMU5oYlhCc2FXNW5VbVZ6ZFd4MExtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FTOWlkV2xzWkM5bGMyMHZkSEpoWTJVdmMzQmhibDlyYVc1a0xtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FTOWlkV2xzWkM5bGMyMHZkSEpoWTJVdmMzUmhkSFZ6TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdmNHVnVkR1ZzWlcxbGRISjVMMkZ3YVM5aWRXbHNaQzlsYzIwdmRISmhZMlV2YVc1MFpYSnVZV3d2ZEhKaFkyVnpkR0YwWlMxMllXeHBaR0YwYjNKekxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FTOWlkV2xzWkM5bGMyMHZkSEpoWTJVdmFXNTBaWEp1WVd3dmRISmhZMlZ6ZEdGMFpTMXBiWEJzTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdmNHVnVkR1ZzWlcxbGRISjVMMkZ3YVM5aWRXbHNaQzlsYzIwdmRISmhZMlV2YVc1MFpYSnVZV3d2ZFhScGJITXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzl3Wlc1MFpXeGxiV1YwY25rdllYQnBMMkoxYVd4a0wyVnpiUzlqYjI1MFpYaDBMV0Z3YVM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWIzQmxiblJsYkdWdFpYUnllUzloY0drdlluVnBiR1F2WlhOdEwyUnBZV2N0WVhCcExtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FTOWlkV2xzWkM5bGMyMHZiV1YwY21samN5OU9iMjl3VFdWMFpYSlFjbTkyYVdSbGNpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiM0JsYm5SbGJHVnRaWFJ5ZVM5aGNHa3ZZblZwYkdRdlpYTnRMMkZ3YVM5dFpYUnlhV056TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdmNHVnVkR1ZzWlcxbGRISjVMMkZ3YVM5aWRXbHNaQzlsYzIwdmJXVjBjbWxqY3kxaGNHa3Vhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzl3Wlc1MFpXeGxiV1YwY25rdllYQnBMMkoxYVd4a0wyVnpiUzl3Y205d1lXZGhkR2x2Ymk5T2IyOXdWR1Y0ZEUxaGNGQnliM0JoWjJGMGIzSXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzl3Wlc1MFpXeGxiV1YwY25rdllYQnBMMkoxYVd4a0wyVnpiUzlpWVdkbllXZGxMMk52Ym5SbGVIUXRhR1ZzY0dWeWN5NXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiM0JsYm5SbGJHVnRaWFJ5ZVM5aGNHa3ZZblZwYkdRdlpYTnRMMkZ3YVM5d2NtOXdZV2RoZEdsdmJpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiM0JsYm5SbGJHVnRaWFJ5ZVM5aGNHa3ZZblZwYkdRdlpYTnRMM0J5YjNCaFoyRjBhVzl1TFdGd2FTNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiM0JsYm5SbGJHVnRaWFJ5ZVM5aGNHa3ZZblZwYkdRdlpYTnRMMkZ3YVM5MGNtRmpaUzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYjNCbGJuUmxiR1Z0WlhSeWVTOWhjR2t2WW5WcGJHUXZaWE50TDNSeVlXTmxMV0Z3YVM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWIzQmxiblJsYkdWdFpYUnllUzloY0drdlluVnBiR1F2WlhOdEwybHVaR1Y0TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekwyUnBjM1F2WlhNdmMzSmpMMlJoZEdWUGJteDVMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMM1JwYm5sa2RYSmhkR2x2Ymk5a2FYTjBMMmx1WkdWNExtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpMMlJwYzNRdlpYTXZjM0pqTDJSMWNtRjBhVzl1TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekwyUnBjM1F2WlhNdmMzSmpMM1JwYldWUGJteDVMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6TDJScGMzUXZaWE12YzNKakwzSmxjWFZsYzNSSmJtWnZjbTFoZEdsdmJpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeTlrYVhOMEwyVnpMM055WXk5blpYUlFZWFJvVUdGeVlXMWxkR1Z5Y3k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5OWthWE4wTDJWekwzTnlZeTlpWVhObFVtVnhkV1Z6ZEVKMWFXeGtaWEl1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5NdlpHbHpkQzlsY3k5emNtTXZhSFIwY0UxbGRHaHZaQzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3k5a2FYTjBMMlZ6TDNOeVl5OXVZWFJwZG1WU1pYTndiMjV6WlVoaGJtUnNaWEl1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5NdlpHbHpkQzlsY3k5emNtTXZibUYwYVhabFVtVnpjRzl1YzJWWGNtRndjR1Z5TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekwyUnBjM1F2WlhNdmMzSmpMM1YwYVd4ekwzTjBjbWx1WjFWMGFXeHpMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRhSFIwY0MxbVpYUmphR3hwWW5KaGNua3ZaR2x6ZEM5amFuTXZjM0pqTDIxcFpHUnNaWGRoY21WekwyTjFjM1J2YlVabGRHTm9TR0Z1Wkd4bGNpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OXViMlJsTFdabGRHTm9MMkp5YjNkelpYSXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzFwWTNKdmMyOW1kQzlyYVc5MFlTMW9kSFJ3TFdabGRHTm9iR2xpY21GeWVTOWthWE4wTDJOcWN5OXpjbU12YjJKelpYSjJZV0pwYkdsMGVVOXdkR2x2Ym5NdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxb2RIUndMV1psZEdOb2JHbGljbUZ5ZVM5a2FYTjBMMk5xY3k5emNtTXZiV2xrWkd4bGQyRnlaWE12YjNCMGFXOXVjeTl3WVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blQzQjBhVzl1Y3k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWJXbGpjbTl6YjJaMEwydHBiM1JoTFdoMGRIQXRabVYwWTJoc2FXSnlZWEo1TDJScGMzUXZZMnB6TDNOeVl5OXRhV1JrYkdWM1lYSmxjeTl3WVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blNHRnVaR3hsY2k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWJXbGpjbTl6YjJaMEwydHBiM1JoTFdoMGRIQXRabVYwWTJoc2FXSnlZWEo1TDJScGMzUXZZMnB6TDNOeVl5OXRhV1JrYkdWM1lYSmxjeTl2Y0hScGIyNXpMM0psWkdseVpXTjBTR0Z1Wkd4bGNrOXdkR2x2Ym5NdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxb2RIUndMV1psZEdOb2JHbGljbUZ5ZVM5a2FYTjBMMk5xY3k5emNtTXZiV2xrWkd4bGQyRnlaWE12Y21Wa2FYSmxZM1JJWVc1a2JHVnlMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRhSFIwY0MxbVpYUmphR3hwWW5KaGNua3ZaR2x6ZEM5amFuTXZjM0pqTDNWMGFXeHpMMmhsWVdSbGNuTlZkR2xzTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdGFXTnliM052Wm5RdmEybHZkR0V0YUhSMGNDMW1aWFJqYUd4cFluSmhjbmt2WkdsemRDOWphbk12YzNKakwyMXBaR1JzWlhkaGNtVnpMMjl3ZEdsdmJuTXZjbVYwY25sSVlXNWtiR1Z5VDNCMGFXOXVjeTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV2gwZEhBdFptVjBZMmhzYVdKeVlYSjVMMlJwYzNRdlkycHpMM055WXk5dGFXUmtiR1YzWVhKbGN5OXlaWFJ5ZVVoaGJtUnNaWEl1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUcxcFkzSnZjMjltZEM5cmFXOTBZUzFvZEhSd0xXWmxkR05vYkdsaWNtRnllUzlrYVhOMEwyTnFjeTl6Y21NdmJXbGtaR3hsZDJGeVpYTXZiM0IwYVc5dWN5OTJaWEp6YVc5dUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnRhV055YjNOdlpuUXZhMmx2ZEdFdGFIUjBjQzFtWlhSamFHeHBZbkpoY25rdlpHbHpkQzlqYW5NdmMzSmpMMjFwWkdSc1pYZGhjbVZ6TDI5d2RHbHZibk12ZFhObGNrRm5aVzUwU0dGdVpHeGxjazl3ZEdsdmJuTXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRRzFwWTNKdmMyOW1kQzlyYVc5MFlTMW9kSFJ3TFdabGRHTm9iR2xpY21GeWVTOWthWE4wTDJOcWN5OXpjbU12Yldsa1pHeGxkMkZ5WlhNdmRYTmxja0ZuWlc1MFNHRnVaR3hsY2k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5QWJXbGpjbTl6YjJaMEwydHBiM1JoTFdoMGRIQXRabVYwWTJoc2FXSnlZWEo1TDJScGMzUXZZMnB6TDNOeVl5OXRhV1JrYkdWM1lYSmxjeTl0YVdSa2JHVjNZWEpsUm1GamRHOXllUzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV2gwZEhBdFptVjBZMmhzYVdKeVlYSjVMMlJwYzNRdlkycHpMM055WXk5b2RIUndRMnhwWlc1MExtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnRhV055YjNOdlpuUXZhMmx2ZEdFdGFIUjBjQzFtWlhSamFHeHBZbkpoY25rdlpHbHpkQzlqYW5NdmMzSmpMMlpsZEdOb1VtVnhkV1Z6ZEVGa1lYQjBaWEl1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUcxcFkzSnZjMjltZEM5cmFXOTBZUzFvZEhSd0xXWmxkR05vYkdsaWNtRnllUzlrYVhOMEwyTnFjeTl6Y21NdmJXbGtaR3hsZDJGeVpYTXZiV2xrWkd4bGQyRnlaUzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYldsamNtOXpiMlowTDJ0cGIzUmhMV2gwZEhBdFptVjBZMmhzYVdKeVlYSjVMMlJwYzNRdlkycHpMM055WXk5dGFXUmtiR1YzWVhKbGN5OXZjSFJwYjI1ekwwTm9ZVzl6U0dGdVpHeGxja1JoZEdFdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxb2RIUndMV1psZEdOb2JHbGljbUZ5ZVM5a2FYTjBMMk5xY3k5emNtTXZiV2xrWkd4bGQyRnlaWE12YjNCMGFXOXVjeTlqYUdGdmMxTjBjbUYwWldkNUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnRhV055YjNOdlpuUXZhMmx2ZEdFdGFIUjBjQzFtWlhSamFHeHBZbkpoY25rdlpHbHpkQzlqYW5NdmMzSmpMMjFwWkdSc1pYZGhjbVZ6TDJOb1lXOXpTR0Z1Wkd4bGNpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiV2xqY205emIyWjBMMnRwYjNSaExXaDBkSEF0Wm1WMFkyaHNhV0p5WVhKNUwyUnBjM1F2WTJwekwzTnlZeTl0YVdSa2JHVjNZWEpsY3k5dmNIUnBiMjV6TDJOb1lXOXpTR0Z1Wkd4bGNrOXdkR2x2Ym5NdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxb2RIUndMV1psZEdOb2JHbGljbUZ5ZVM5a2FYTjBMMk5xY3k5emNtTXZiV2xrWkd4bGQyRnlaWE12YjNCMGFXOXVjeTkwWld4bGJXVjBjbmxJWVc1a2JHVnlUM0IwYVc5dWN5NXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiV2xqY205emIyWjBMMnRwYjNSaExXaDBkSEF0Wm1WMFkyaHNhV0p5WVhKNUwyUnBjM1F2WTJwekwzTnlZeTl0YVdSa2JHVjNZWEpsY3k5MFpXeGxiV1YwY25sSVlXNWtiR1Z5TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCdGFXTnliM052Wm5RdmEybHZkR0V0YUhSMGNDMW1aWFJqYUd4cFluSmhjbmt2WkdsemRDOWphbk12YzNKakwzVjBhV3h6TDJabGRHTm9SR1ZtYVc1cGRHbHZibk11YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUcxcFkzSnZjMjltZEM5cmFXOTBZUzFvZEhSd0xXWmxkR05vYkdsaWNtRnllUzlrYVhOMEwyTnFjeTl6Y21NdmFXNWtaWGd1YW5NaUxDSXVMaTloY0drdmRqRmhiSEJvWVM5amFHVmpheTlqYUdWamExSmxjWFZsYzNSQ2RXbHNaR1Z5VUc5emRGSmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVMblJ6SWl3aUxpNHZZWEJwTDIxdlpHVnNjeTlzYVdObGJuTmxjMTl6WlhKMmFXTmxTV1JmWW05a2VTNTBjeUlzSWk0dUwyRndhUzl0YjJSbGJITXZkakZoYkhCb1lVTm9aV05yVUdWeWJXbHpjMmx2YmxKbGMzQnZibk5sTG5Seklpd2lMaTR2WVhCcEwyMXZaR1ZzY3k5Mk1XRnNjR2hoUjJWMFRHbGpaVzV6WlZKbGMzQnZibk5sTG5Seklpd2lMaTR2WVhCcEwyMXZaR1ZzY3k5amNtVmhkR1ZXTVdGc2NHaGhSMlYwVTJWaGRITlZjMlZ5VW1Wd2NtVnpaVzUwWVhScGIyNUdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsTG5Seklpd2lMaTR2WVhCcEwyMXZaR1ZzY3k5Mk1XRnNjR2hoUjJWMFUyVmhkSE5TWlhOd2IyNXpaUzUwY3lJc0lpNHVMMkZ3YVM5dGIyUmxiSE12ZGpGaGJIQm9ZVWRsZEZObFlYUnpWWE5sY2xKbGNISmxjMlZ1ZEdGMGFXOXVMblJ6SWl3aUxpNHZZWEJwTDIxdlpHVnNjeTkyTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaUzUwY3lJc0lpNHVMMkZ3YVM5dGIyUmxiSE12WTNKbFlYUmxWakZoYkhCb1lVTm9aV05yVUdWeWJXbHpjMmx2YmxKbGMzQnZibk5sUm5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTNTBjeUlzSWk0dUwyRndhUzkyTVdGc2NHaGhMMk5vWldOckwzWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaVFF3TVVWeWNtOXlMblJ6SWl3aUxpNHZZWEJwTDNZeFlXeHdhR0V2WTJobFkyc3ZkakZoYkhCb1lVTm9aV05yVUdWeWJXbHpjMmx2YmxKbGMzQnZibk5sTkRBelJYSnliM0l1ZEhNaUxDSXVMaTloY0drdmRqRmhiSEJvWVM5amFHVmpheTkyTVdGc2NHaGhRMmhsWTJ0UVpYSnRhWE56YVc5dVVtVnpjRzl1YzJVMU1EQkZjbkp2Y2k1MGN5SXNJaTR1TDJGd2FTOTJNV0ZzY0doaEwyTm9aV05yTDJOeVpXRjBaVll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlRRd01VVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTNTBjeUlzSWk0dUwyRndhUzkyTVdGc2NHaGhMMk5vWldOckwyTnlaV0YwWlZZeFlXeHdhR0ZEYUdWamExQmxjbTFwYzNOcGIyNVNaWE53YjI1elpUUXdNMFZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaUzUwY3lJc0lpNHVMMkZ3YVM5Mk1XRnNjR2hoTDJOb1pXTnJMMk55WldGMFpWWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaVFV3TUVWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlM1MGN5SXNJaTR1TDJGd2FTOTJNV0ZzY0doaEwyTm9aV05yTDJOb1pXTnJVbVZ4ZFdWemRFSjFhV3hrWlhJdWRITWlMQ0l1TGk5aGNHa3ZiVzlrWld4ekwyTnlaV0YwWlZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbExuUnpJaXdpTGk0dllYQnBMMjF2WkdWc2N5OWpjbVZoZEdWV01XRnNjR2hoVFc5a2FXWjVVMlZoZEhOU1pYTndiMjV6WlVaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVXVkSE1pTENJdUxpOWhjR2t2ZGpGaGJIQm9ZUzl2Y21kekwybDBaVzB2YkdsalpXNXpaWE12YVhSbGJTOTJNV0ZzY0doaFIyVjBUR2xqWlc1elpWSmxjM0J2Ym5ObE5EQXhSWEp5YjNJdWRITWlMQ0l1TGk5aGNHa3ZkakZoYkhCb1lTOXZjbWR6TDJsMFpXMHZiR2xqWlc1elpYTXZhWFJsYlM5Mk1XRnNjR2hoUjJWMFRHbGpaVzV6WlZKbGMzQnZibk5sTkRBelJYSnliM0l1ZEhNaUxDSXVMaTloY0drdmRqRmhiSEJvWVM5dmNtZHpMMmwwWlcwdmJHbGpaVzV6WlhNdmFYUmxiUzkyTVdGc2NHaGhSMlYwVEdsalpXNXpaVkpsYzNCdmJuTmxOVEF3UlhKeWIzSXVkSE1pTENJdUxpOWhjR2t2ZGpGaGJIQm9ZUzl2Y21kekwybDBaVzB2YkdsalpXNXpaWE12YVhSbGJTOTJNV0ZzY0doaFRXOWthV1o1VTJWaGRITlNaWE53YjI1elpUUXdNVVZ5Y205eUxuUnpJaXdpTGk0dllYQnBMM1l4WVd4d2FHRXZiM0puY3k5cGRHVnRMMnhwWTJWdWMyVnpMMmwwWlcwdmRqRmhiSEJvWVUxdlpHbG1lVk5sWVhSelVtVnpjRzl1YzJVME1ETkZjbkp2Y2k1MGN5SXNJaTR1TDJGd2FTOTJNV0ZzY0doaEwyOXlaM012YVhSbGJTOXNhV05sYm5ObGN5OXBkR1Z0TDNZeFlXeHdhR0ZOYjJScFpubFRaV0YwYzFKbGMzQnZibk5sTlRBd1JYSnliM0l1ZEhNaUxDSXVMaTloY0drdmRqRmhiSEJvWVM5dmNtZHpMMmwwWlcwdmJHbGpaVzV6WlhNdmFYUmxiUzlqY21WaGRHVldNV0ZzY0doaFIyVjBUR2xqWlc1elpWSmxjM0J2Ym5ObE5EQXhSWEp5YjNKR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxMblJ6SWl3aUxpNHZZWEJwTDNZeFlXeHdhR0V2YjNKbmN5OXBkR1Z0TDJ4cFkyVnVjMlZ6TDJsMFpXMHZZM0psWVhSbFZqRmhiSEJvWVVkbGRFeHBZMlZ1YzJWU1pYTndiMjV6WlRRd00wVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTNTBjeUlzSWk0dUwyRndhUzkyTVdGc2NHaGhMMjl5WjNNdmFYUmxiUzlzYVdObGJuTmxjeTlwZEdWdEwyTnlaV0YwWlZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUxTURCRmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVdWRITWlMQ0l1TGk5aGNHa3ZkakZoYkhCb1lTOXZjbWR6TDJsMFpXMHZiR2xqWlc1elpYTXZhWFJsYlM5amNtVmhkR1ZXTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaVFF3TVVWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlM1MGN5SXNJaTR1TDJGd2FTOTJNV0ZzY0doaEwyOXlaM012YVhSbGJTOXNhV05sYm5ObGN5OXBkR1Z0TDJOeVpXRjBaVll4WVd4d2FHRk5iMlJwWm5sVFpXRjBjMUpsYzNCdmJuTmxOREF6UlhKeWIzSkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsTG5Seklpd2lMaTR2WVhCcEwzWXhZV3h3YUdFdmIzSm5jeTlwZEdWdEwyeHBZMlZ1YzJWekwybDBaVzB2WTNKbFlYUmxWakZoYkhCb1lVMXZaR2xtZVZObFlYUnpVbVZ6Y0c5dWMyVTFNREJGY25KdmNrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1V1ZEhNaUxDSXVMaTloY0drdmJXOWtaV3h6TDJOeVpXRjBaVll4WVd4d2FHRkhaWFJUWldGMGMxSmxjM0J2Ym5ObFJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaUzUwY3lJc0lpNHVMMkZ3YVM5Mk1XRnNjR2hoTDI5eVozTXZhWFJsYlM5c2FXTmxibk5sY3k5cGRHVnRMM05sWVhSekwzWXhZV3h3YUdGSFpYUlRaV0YwYzFKbGMzQnZibk5sTkRBeFJYSnliM0l1ZEhNaUxDSXVMaTloY0drdmRqRmhiSEJvWVM5dmNtZHpMMmwwWlcwdmJHbGpaVzV6WlhNdmFYUmxiUzl6WldGMGN5OTJNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlRRd00wVnljbTl5TG5Seklpd2lMaTR2WVhCcEwzWXhZV3h3YUdFdmIzSm5jeTlwZEdWdEwyeHBZMlZ1YzJWekwybDBaVzB2YzJWaGRITXZkakZoYkhCb1lVZGxkRk5sWVhSelVtVnpjRzl1YzJVMU1EQkZjbkp2Y2k1MGN5SXNJaTR1TDJGd2FTOTJNV0ZzY0doaEwyOXlaM012YVhSbGJTOXNhV05sYm5ObGN5OXBkR1Z0TDNObFlYUnpMMk55WldGMFpWWXhZV3h3YUdGSFpYUlRaV0YwYzFKbGMzQnZibk5sTkRBeFJYSnliM0pHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbExuUnpJaXdpTGk0dllYQnBMM1l4WVd4d2FHRXZiM0puY3k5cGRHVnRMMnhwWTJWdWMyVnpMMmwwWlcwdmMyVmhkSE12WTNKbFlYUmxWakZoYkhCb1lVZGxkRk5sWVhSelVtVnpjRzl1YzJVME1ETkZjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVXVkSE1pTENJdUxpOWhjR2t2ZGpGaGJIQm9ZUzl2Y21kekwybDBaVzB2YkdsalpXNXpaWE12YVhSbGJTOXpaV0YwY3k5amNtVmhkR1ZXTVdGc2NHaGhSMlYwVTJWaGRITlNaWE53YjI1elpUVXdNRVZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaUzUwY3lJc0lpNHVMMkZ3YVM5Mk1XRnNjR2hoTDI5eVozTXZhWFJsYlM5c2FXTmxibk5sY3k5cGRHVnRMM05sWVhSekwzTmxZWFJ6VW1WeGRXVnpkRUoxYVd4a1pYSXVkSE1pTENJdUxpOWhjR2t2ZGpGaGJIQm9ZUzl2Y21kekwybDBaVzB2YkdsalpXNXpaWE12YVhSbGJTOTNhWFJvVTJWeWRtbGpaVWwwWlcxU1pYRjFaWE4wUW5WcGJHUmxjaTUwY3lJc0lpNHVMMkZ3YVM5Mk1XRnNjR2hoTDI5eVozTXZhWFJsYlM5c2FXTmxibk5sY3k5c2FXTmxibk5sYzFKbGNYVmxjM1JDZFdsc1pHVnlMblJ6SWl3aUxpNHZZWEJwTDNZeFlXeHdhR0V2YjNKbmN5OXBkR1Z0TDNkcGRHaFBjbWRKZEdWdFVtVnhkV1Z6ZEVKMWFXeGtaWEl1ZEhNaUxDSXVMaTloY0drdmRqRmhiSEJvWVM5dmNtZHpMMjl5WjNOU1pYRjFaWE4wUW5WcGJHUmxjaTUwY3lJc0lpNHVMMkZ3YVM5Mk1XRnNjR2hoTDNZeFlXeHdhR0ZTWlhGMVpYTjBRblZwYkdSbGNpNTBjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OUFiV2xqY205emIyWjBMMnRwYjNSaExYTmxjbWxoYkdsNllYUnBiMjR0YW5OdmJpOWthWE4wTDJWekwzTnlZeTlxYzI5dVVHRnljMlZPYjJSbExtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnRhV055YjNOdlpuUXZhMmx2ZEdFdGMyVnlhV0ZzYVhwaGRHbHZiaTFxYzI5dUwyUnBjM1F2WlhNdmMzSmpMMnB6YjI1VFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQnRhV055YjNOdlpuUXZhMmx2ZEdFdGMyVnlhV0ZzYVhwaGRHbHZiaTFxYzI5dUwyUnBjM1F2WlhNdmMzSmpMMkp5YjNkelpYSXZhbk52YmxCaGNuTmxUbTlrWlVaaFkzUnZjbmt1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUcxcFkzSnZjMjltZEM5cmFXOTBZUzF6WlhKcFlXeHBlbUYwYVc5dUxXcHpiMjR2WkdsemRDOWxjeTl6Y21NdmFuTnZibE5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEpHWVdOMGIzSjVMbXB6SWl3aUxpNHZZWEJwTDJGMWRHaDZMblJ6SWl3aUxpNHZZWEJwTDJOcFlXMHRjMlZ5ZG1salpTNTBjeUlzSWk0dUwyVnVkR2wwYkdWdFpXNTBjeTFoY0drdmJXOWtaV3h6TDJOeVpXRjBaVU52YlhCc2FXRnVZMlZUWTNKbFpXNXBibWRGY25KdmNsSmxjM0J2Ym5ObFgyVnljbTl5YzBaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVXVkSE1pTENJdUxpOWxiblJwZEd4bGJXVnVkSE10WVhCcEwyMXZaR1ZzY3k5amIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blJYSnliM0pTWlhOd2IyNXpaUzUwY3lJc0lpNHVMMlZ1ZEdsMGJHVnRaVzUwY3kxaGNHa3ZiVzlrWld4ekwyTnZiWEJzYVdGdVkyVlRZM0psWlc1cGJtZEZjbkp2Y2xKbGMzQnZibk5sWDJWeWNtOXljeTUwY3lJc0lpNHVMMlZ1ZEdsMGJHVnRaVzUwY3kxaGNHa3ZiVzlrWld4ekwyTnZiWEJzYVdGdVkyVlRZM0psWlc1cGJtZFNaWE53YjI1elpWOXlaWE4xYkhRdWRITWlMQ0l1TGk5bGJuUnBkR3hsYldWdWRITXRZWEJwTDIxdlpHVnNjeTlqYjIxd2JHbGhibU5sVTJOeVpXVnVhVzVuVW1WemNHOXVjMlV1ZEhNaUxDSXVMaTlsYm5ScGRHeGxiV1Z1ZEhNdFlYQnBMMjF2WkdWc2N5OWpjbVZoZEdWRVpYQmxibVJsYm1ONVJYSnliM0pTWlhOd2IyNXpaVjlsY25KdmNrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1V1ZEhNaUxDSXVMaTlsYm5ScGRHeGxiV1Z1ZEhNdFlYQnBMMjF2WkdWc2N5OWtaWEJsYm1SbGJtTjVSWEp5YjNKU1pYTndiMjV6WlM1MGN5SXNJaTR1TDJWdWRHbDBiR1Z0Wlc1MGN5MWhjR2t2Ylc5a1pXeHpMMlJsY0dWdVpHVnVZM2xGY25KdmNsSmxjM0J2Ym5ObFgyVnljbTl5TG5Seklpd2lMaTR2Wlc1MGFYUnNaVzFsYm5SekxXRndhUzl0YjJSbGJITXZaWEp5YjNKRmMyTmhjR1ZrTG5Seklpd2lMaTR2Wlc1MGFYUnNaVzFsYm5SekxXRndhUzl0YjJSbGJITXZZM0psWVhSbFVHRm5hVzVoZEdsdmJreHBibXR6Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTNTBjeUlzSWk0dUwyVnVkR2wwYkdWdFpXNTBjeTFoY0drdmJXOWtaV3h6TDJOeVpXRjBaVkJoWjJsdVlYUnBiMjVOWlhSaFJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaUzUwY3lJc0lpNHVMMlZ1ZEdsMGJHVnRaVzUwY3kxaGNHa3ZiVzlrWld4ekwyeHBjM1JRWVdkcGJtRjBhVzl1TG5Seklpd2lMaTR2Wlc1MGFYUnNaVzFsYm5SekxXRndhUzl0YjJSbGJITXZjR0ZuYVc1aGRHbHZia3hwYm10ekxuUnpJaXdpTGk0dlpXNTBhWFJzWlcxbGJuUnpMV0Z3YVM5dGIyUmxiSE12Y0dGbmFXNWhkR2x2YmsxbGRHRXVkSE1pTENJdUxpOWxiblJwZEd4bGJXVnVkSE10WVhCcEwyMXZaR1ZzY3k5elpXRjBMblJ6SWl3aUxpNHZaVzUwYVhSc1pXMWxiblJ6TFdGd2FTOXRiMlJsYkhNdmMyVmhkRkpsY1hWbGMzUXVkSE1pTENJdUxpOWxiblJwZEd4bGJXVnVkSE10WVhCcEwyMXZaR1ZzY3k5elpYSjJhV05sTG5Seklpd2lMaTR2Wlc1MGFYUnNaVzFsYm5SekxXRndhUzl0YjJSbGJITXZZM0psWVhSbFUyVmhkRVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVdWRITWlMQ0l1TGk5bGJuUnBkR3hsYldWdWRITXRZWEJwTDIxdlpHVnNjeTlzYVhOMFUyVmhkSE5TWlhOd2IyNXpaVkJoWjJsdVlYUnBiMjR1ZEhNaUxDSXVMaTlsYm5ScGRHeGxiV1Z1ZEhNdFlYQnBMMjF2WkdWc2N5OWpjbVZoZEdWRGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blJYSnliM0pTWlhOd2IyNXpaVVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVdWRITWlMQ0l1TGk5bGJuUnBkR3hsYldWdWRITXRZWEJwTDIxdlpHVnNjeTlqY21WaGRHVkRiMjF3YkdsaGJtTmxVMk55WldWdWFXNW5VbVZ6Y0c5dWMyVkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsTG5Seklpd2lMaTR2Wlc1MGFYUnNaVzFsYm5SekxXRndhUzl0YjJSbGJITXZZM0psWVhSbFJHVndaVzVrWlc1amVVVnljbTl5VW1WemNHOXVjMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbExuUnpJaXdpTGk0dlpXNTBhWFJzWlcxbGJuUnpMV0Z3YVM5amIyMXdiR2xoYm1ObEwyTnZiWEJzYVdGdVkyVlNaWEYxWlhOMFFuVnBiR1JsY2k1MGN5SXNJaTR1TDJWdWRHbDBiR1Z0Wlc1MGN5MWhjR2t2Ylc5a1pXeHpMMk55WldGMFpVVnljbTl5UlhOallYQmxaRVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVdWRITWlMQ0l1TGk5bGJuUnBkR3hsYldWdWRITXRZWEJwTDNObFlYUnpMMmwwWlcwdmMyVmhkSE5KZEdWdFVtVnhkV1Z6ZEVKMWFXeGtaWEl1ZEhNaUxDSXVMaTlsYm5ScGRHeGxiV1Z1ZEhNdFlYQnBMMjF2WkdWc2N5OWpjbVZoZEdWTWFYTjBVMlZoZEhOU1pYTndiMjV6WlZCaFoybHVZWFJwYjI1R2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxMblJ6SWl3aUxpNHZaVzUwYVhSc1pXMWxiblJ6TFdGd2FTOXpaV0YwY3k5elpXRjBjMUpsY1hWbGMzUkNkV2xzWkdWeUxuUnpJaXdpTGk0dlpXNTBhWFJzWlcxbGJuUnpMV0Z3YVM5dGIyUmxiSE12WTNKbFlYUmxVMlZ5ZG1salpVWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1V1ZEhNaUxDSXVMaTlsYm5ScGRHeGxiV1Z1ZEhNdFlYQnBMM05sY25acFkyVnpMM05sY25acFkyVnpVbVZ4ZFdWemRFSjFhV3hrWlhJdWRITWlMQ0l1TGk5bGJuUnBkR3hsYldWdWRITXRZWEJwTDJWdWRHbDBiR1Z0Wlc1MGN5NTBjeUlzSWk0dUwyVnVkR2wwYkdWdFpXNTBjeTFoY0drdlpXNTBhWFJzWlcxbGJuUnpMWE5sY25acFkyVXVkSE1pTENJdUxpOXpaWEoyYVdObExuUnpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUV4cFkyVnVjMlVzSUV4cFkyVnVjMlZUWlhKMmFXTmxMQ0JWYzJWeUlIMGdabkp2YlNCY0lpNHVMM05sY25acFkyVmNJanRjYmx4dWRIbHdaU0JOYjJOclZYTmxjaUE5SUh0Y2JpQWdkWE5sY201aGJXVTZJSE4wY21sdVp6dGNiaUFnWm1seWMzUk9ZVzFsT2lCemRISnBibWM3WEc0Z0lHeGhjM1JPWVcxbE9pQnpkSEpwYm1jN1hHNTlPMXh1WEc1MGVYQmxJRTF2WTJ0TWFXTmxibk5sSUQwZ2UxeHVJQ0IwYjNSaGJGTmxZWFJ6T2lCdWRXMWlaWEk3WEc0Z0lHRjJZV2xzWVdKc1pWTmxZWFJ6T2lCdWRXMWlaWEk3WEc0Z0lHRnpjMmxuYm1Wa1UyVmhkSE02SUc1MWJXSmxjanRjYm4wN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTmIyTnJVMlZ5ZG1salpTQnBiWEJzWlcxbGJuUnpJRXhwWTJWdWMyVlRaWEoyYVdObElIdGNiaUFnWVhONWJtTWdaMlYwS0c5eVowbGtPaUJ6ZEhKcGJtY3NJSE5sY25acFkyVkpaRG9nYzNSeWFXNW5LVG9nVUhKdmJXbHpaVHhNYVdObGJuTmxQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QjBiM1JoYkZObFlYUnpMQ0JoZG1GcGJHRmliR1ZUWldGMGN5QjlPaUJOYjJOclRHbGpaVzV6WlNBOUlHRjNZV2wwSUNoY2JpQWdJQ0FnSUdGM1lXbDBJR1psZEdOb0tGd2lMMkYzTFdGd2FTOXpkV0p6WTNKcGNIUnBiMjV6WENJcFhHNGdJQ0FnS1M1cWMyOXVLQ2s3WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lIUnZkR0ZzT2lCMGIzUmhiRk5sWVhSekxGeHVJQ0FnSUNBZ1lYWmhhV3hoWW14bE9pQmhkbUZwYkdGaWJHVlRaV0YwY3l4Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ1lYTjVibU1nYzJWaGRITW9YRzRnSUNBZ2IzSm5TV1E2SUhOMGNtbHVaeXhjYmlBZ0lDQnpaWEoyYVdObFNXUTZJSE4wY21sdVp5eGNiaUFnSUNCaGMzTnBaMjVsWkQ4NklHSnZiMnhsWVc0Z2ZDQjFibVJsWm1sdVpXUmNiaUFnS1RvZ1VISnZiV2x6WlR4VmMyVnlXMTArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLR0YzWVdsMElDaGhkMkZwZENCbVpYUmphQ2hjSWk5aGR5MWhjR2t2ZFhObGNuTmNJaWtwTG1wemIyNG9LU2t1ZFhObGNuTXViV0Z3S0Z4dUlDQWdJQ0FnS0hzZ2RYTmxjbTVoYldVc0lHWnBjbk4wVG1GdFpTd2diR0Z6ZEU1aGJXVWdmVG9nVFc5amExVnpaWElwSUQwK0lDaDdYRzRnSUNBZ0lDQWdJR2xrT2lCMWMyVnlibUZ0WlN4Y2JpQWdJQ0FnSUNBZ2JtRnRaVG9nWUNSN1ptbHljM1JPWVcxbGZTQWtlMnhoYzNST1lXMWxmV0FzWEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNCaGMzTnBaMjRvYjNKblNXUTZJSE4wY21sdVp5d2djMlZ5ZG1salpVbGtPaUJ6ZEhKcGJtY3NJSFZ6WlhKSlpITTZJSE4wY21sdVoxdGRLVG9nVUhKdmJXbHpaVHgyYjJsa1BpQjdYRzRnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTzF4dUlDQjlYRzVjYmlBZ2RXNUJjM05wWjI0b2IzSm5TV1E2SUhOMGNtbHVaeXdnYzJWeWRtbGpaVWxrT2lCemRISnBibWNzSUhWelpYSkpaSE02SUhOMGNtbHVaMXRkS1RvZ1VISnZiV2x6WlR4MmIybGtQaUI3WEc0Z0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNncE8xeHVJQ0I5WEc1OVhHNGlMQ0l2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYSEpjYmtOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGx4eVhHNWNjbHh1VUdWeWJXbHpjMmx2YmlCMGJ5QjFjMlVzSUdOdmNIa3NJRzF2WkdsbWVTd2dZVzVrTDI5eUlHUnBjM1J5YVdKMWRHVWdkR2hwY3lCemIyWjBkMkZ5WlNCbWIzSWdZVzU1WEhKY2JuQjFjbkJ2YzJVZ2QybDBhQ0J2Y2lCM2FYUm9iM1YwSUdabFpTQnBjeUJvWlhKbFlua2daM0poYm5SbFpDNWNjbHh1WEhKY2JsUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJZ1FVNUVJRlJJUlNCQlZWUklUMUlnUkVsVFEweEJTVTFUSUVGTVRDQlhRVkpTUVU1VVNVVlRJRmRKVkVoY2NseHVVa1ZIUVZKRUlGUlBJRlJJU1ZNZ1UwOUdWRmRCVWtVZ1NVNURURlZFU1U1SElFRk1UQ0JKVFZCTVNVVkVJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaWEhKY2JrRk9SQ0JHU1ZST1JWTlRMaUJKVGlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VVZ1FWVlVTRTlTSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUZOUVJVTkpRVXdzSUVSSlVrVkRWQ3hjY2x4dVNVNUVTVkpGUTFRc0lFOVNJRU5QVGxORlVWVkZUbFJKUVV3Z1JFRk5RVWRGVXlCUFVpQkJUbGtnUkVGTlFVZEZVeUJYU0VGVVUwOUZWa1ZTSUZKRlUxVk1WRWxPUnlCR1VrOU5YSEpjYmt4UFUxTWdUMFlnVlZORkxDQkVRVlJCSUU5U0lGQlNUMFpKVkZNc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCT1JVZE1TVWRGVGtORklFOVNYSEpjYms5VVNFVlNJRlJQVWxSSlQxVlRJRUZEVkVsUFRpd2dRVkpKVTBsT1J5QlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVlUwVWdUMUpjY2x4dVVFVlNSazlTVFVGT1EwVWdUMFlnVkVoSlV5QlRUMFpVVjBGU1JTNWNjbHh1S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb2dLaTljY2x4dUx5b2daMnh2WW1Gc0lHZHNiMkpoYkN3Z1pHVm1hVzVsTENCVGVYTjBaVzBzSUZKbFpteGxZM1FzSUZCeWIyMXBjMlVnS2k5Y2NseHVkbUZ5SUY5ZlpYaDBaVzVrY3p0Y2NseHVkbUZ5SUY5ZllYTnphV2R1TzF4eVhHNTJZWElnWDE5eVpYTjBPMXh5WEc1MllYSWdYMTlrWldOdmNtRjBaVHRjY2x4dWRtRnlJRjlmY0dGeVlXMDdYSEpjYm5aaGNpQmZYMlZ6UkdWamIzSmhkR1U3WEhKY2JuWmhjaUJmWDNKMWJrbHVhWFJwWVd4cGVtVnljenRjY2x4dWRtRnlJRjlmY0hKdmNFdGxlVHRjY2x4dWRtRnlJRjlmYzJWMFJuVnVZM1JwYjI1T1lXMWxPMXh5WEc1MllYSWdYMTl0WlhSaFpHRjBZVHRjY2x4dWRtRnlJRjlmWVhkaGFYUmxjanRjY2x4dWRtRnlJRjlmWjJWdVpYSmhkRzl5TzF4eVhHNTJZWElnWDE5bGVIQnZjblJUZEdGeU8xeHlYRzUyWVhJZ1gxOTJZV3gxWlhNN1hISmNiblpoY2lCZlgzSmxZV1E3WEhKY2JuWmhjaUJmWDNOd2NtVmhaRHRjY2x4dWRtRnlJRjlmYzNCeVpXRmtRWEp5WVhsek8xeHlYRzUyWVhJZ1gxOXpjSEpsWVdSQmNuSmhlVHRjY2x4dWRtRnlJRjlmWVhkaGFYUTdYSEpjYm5aaGNpQmZYMkZ6ZVc1alIyVnVaWEpoZEc5eU8xeHlYRzUyWVhJZ1gxOWhjM2x1WTBSbGJHVm5ZWFJ2Y2p0Y2NseHVkbUZ5SUY5ZllYTjVibU5XWVd4MVpYTTdYSEpjYm5aaGNpQmZYMjFoYTJWVVpXMXdiR0YwWlU5aWFtVmpkRHRjY2x4dWRtRnlJRjlmYVcxd2IzSjBVM1JoY2p0Y2NseHVkbUZ5SUY5ZmFXMXdiM0owUkdWbVlYVnNkRHRjY2x4dWRtRnlJRjlmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JIWlhRN1hISmNiblpoY2lCZlgyTnNZWE56VUhKcGRtRjBaVVpwWld4a1UyVjBPMXh5WEc1MllYSWdYMTlqYkdGemMxQnlhWFpoZEdWR2FXVnNaRWx1TzF4eVhHNTJZWElnWDE5amNtVmhkR1ZDYVc1a2FXNW5PMXh5WEc0b1puVnVZM1JwYjI0Z0tHWmhZM1J2Y25rcElIdGNjbHh1SUNBZ0lIWmhjaUJ5YjI5MElEMGdkSGx3Wlc5bUlHZHNiMkpoYkNBOVBUMGdYQ0p2WW1wbFkzUmNJaUEvSUdkc2IySmhiQ0E2SUhSNWNHVnZaaUJ6Wld4bUlEMDlQU0JjSW05aWFtVmpkRndpSUQ4Z2MyVnNaaUE2SUhSNWNHVnZaaUIwYUdseklEMDlQU0JjSW05aWFtVmpkRndpSUQ4Z2RHaHBjeUE2SUh0OU8xeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmtaV1pwYm1VZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQmtaV1pwYm1VdVlXMWtLU0I3WEhKY2JpQWdJQ0FnSUNBZ1pHVm1hVzVsS0Z3aWRITnNhV0pjSWl3Z1cxd2laWGh3YjNKMGMxd2lYU3dnWm5WdVkzUnBiMjRnS0dWNGNHOXlkSE1wSUhzZ1ptRmpkRzl5ZVNoamNtVmhkR1ZGZUhCdmNuUmxjaWh5YjI5MExDQmpjbVZoZEdWRmVIQnZjblJsY2lobGVIQnZjblJ6S1NrcE95QjlLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnRiMlIxYkdVZ1BUMDlJRndpYjJKcVpXTjBYQ0lnSmlZZ2RIbHdaVzltSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDA5UFNCY0ltOWlhbVZqZEZ3aUtTQjdYSEpjYmlBZ0lDQWdJQ0FnWm1GamRHOXllU2hqY21WaGRHVkZlSEJ2Y25SbGNpaHliMjkwTENCamNtVmhkR1ZGZUhCdmNuUmxjaWh0YjJSMWJHVXVaWGh3YjNKMGN5a3BLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJR1poWTNSdmNua29ZM0psWVhSbFJYaHdiM0owWlhJb2NtOXZkQ2twTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnWTNKbFlYUmxSWGh3YjNKMFpYSW9aWGh3YjNKMGN5d2djSEpsZG1sdmRYTXBJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9aWGh3YjNKMGN5QWhQVDBnY205dmRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRTlpYW1WamRDNWpjbVZoZEdVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLR2xrTENCMktTQjdJSEpsZEhWeWJpQmxlSEJ2Y25SelcybGtYU0E5SUhCeVpYWnBiM1Z6SUQ4Z2NISmxkbWx2ZFhNb2FXUXNJSFlwSURvZ2Rqc2dmVHRjY2x4dUlDQWdJSDFjY2x4dWZTbGNjbHh1S0daMWJtTjBhVzl1SUNobGVIQnZjblJsY2lrZ2UxeHlYRzRnSUNBZ2RtRnlJR1Y0ZEdWdVpGTjBZWFJwWTNNZ1BTQlBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMllnZkh4Y2NseHVJQ0FnSUNBZ0lDQW9leUJmWDNCeWIzUnZYMTg2SUZ0ZElIMGdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTQW1KaUJtZFc1amRHbHZiaUFvWkN3Z1lpa2dleUJrTGw5ZmNISnZkRzlmWHlBOUlHSTdJSDBwSUh4OFhISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdLR1FzSUdJcElIc2dabTl5SUNoMllYSWdjQ0JwYmlCaUtTQnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0dJc0lIQXBLU0JrVzNCZElEMGdZbHR3WFRzZ2ZUdGNjbHh1WEhKY2JpQWdJQ0JmWDJWNGRHVnVaSE1nUFNCbWRXNWpkR2x2YmlBb1pDd2dZaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZaUFoUFQwZ1hDSm1kVzVqZEdsdmJsd2lJQ1ltSUdJZ0lUMDlJRzUxYkd3cFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRiR0Z6Y3lCbGVIUmxibVJ6SUhaaGJIVmxJRndpSUNzZ1UzUnlhVzVuS0dJcElDc2dYQ0lnYVhNZ2JtOTBJR0VnWTI5dWMzUnlkV04wYjNJZ2IzSWdiblZzYkZ3aUtUdGNjbHh1SUNBZ0lDQWdJQ0JsZUhSbGJtUlRkR0YwYVdOektHUXNJR0lwTzF4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlGOWZLQ2tnZXlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5SUQwZ1pEc2dmVnh5WEc0Z0lDQWdJQ0FnSUdRdWNISnZkRzkwZVhCbElEMGdZaUE5UFQwZ2JuVnNiQ0EvSUU5aWFtVmpkQzVqY21WaGRHVW9ZaWtnT2lBb1gxOHVjSEp2ZEc5MGVYQmxJRDBnWWk1d2NtOTBiM1I1Y0dVc0lHNWxkeUJmWHlncEtUdGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnWDE5aGMzTnBaMjRnUFNCUFltcGxZM1F1WVhOemFXZHVJSHg4SUdaMWJtTjBhVzl1SUNoMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY3l3Z2FTQTlJREVzSUc0Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBJRHdnYmpzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE1nUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnY3lrZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h6TENCd0tTa2dkRnR3WFNBOUlITmJjRjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBPMXh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCZlgzSmxjM1FnUFNCbWRXNWpkR2x2YmlBb2N5d2daU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwSUQwZ2UzMDdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY0NCcGJpQnpLU0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tITXNJSEFwSUNZbUlHVXVhVzVrWlhoUFppaHdLU0E4SURBcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSYmNGMGdQU0J6VzNCZE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoeklDRTlJRzUxYkd3Z0ppWWdkSGx3Wlc5bUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUhBZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpLSE1wT3lCcElEd2djQzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dVdWFXNWtaWGhQWmlod1cybGRLU0E4SURBZ0ppWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaUzVqWVd4c0tITXNJSEJiYVYwcEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSYmNGdHBYVjBnUFNCelczQmJhVjFkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJRjlmWkdWamIzSmhkR1VnUFNCbWRXNWpkR2x2YmlBb1pHVmpiM0poZEc5eWN5d2dkR0Z5WjJWMExDQnJaWGtzSUdSbGMyTXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZeUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dzSUhJZ1BTQmpJRHdnTXlBL0lIUmhjbWRsZENBNklHUmxjMk1nUFQwOUlHNTFiR3dnUHlCa1pYTmpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaDBZWEpuWlhRc0lHdGxlU2tnT2lCa1pYTmpMQ0JrTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdVbVZtYkdWamRDQTlQVDBnWENKdlltcGxZM1JjSWlBbUppQjBlWEJsYjJZZ1VtVm1iR1ZqZEM1a1pXTnZjbUYwWlNBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCeUlEMGdVbVZtYkdWamRDNWtaV052Y21GMFpTaGtaV052Y21GMGIzSnpMQ0IwWVhKblpYUXNJR3RsZVN3Z1pHVnpZeWs3WEhKY2JpQWdJQ0FnSUNBZ1pXeHpaU0JtYjNJZ0tIWmhjaUJwSUQwZ1pHVmpiM0poZEc5eWN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrZ2FXWWdLR1FnUFNCa1pXTnZjbUYwYjNKelcybGRLU0J5SUQwZ0tHTWdQQ0F6SUQ4Z1pDaHlLU0E2SUdNZ1BpQXpJRDhnWkNoMFlYSm5aWFFzSUd0bGVTd2djaWtnT2lCa0tIUmhjbWRsZEN3Z2EyVjVLU2tnZkh3Z2NqdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZeUErSURNZ0ppWWdjaUFtSmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQnJaWGtzSUhJcExDQnlPMXh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCZlgzQmhjbUZ0SUQwZ1puVnVZM1JwYjI0Z0tIQmhjbUZ0U1c1a1pYZ3NJR1JsWTI5eVlYUnZjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2RHRnlaMlYwTENCclpYa3BJSHNnWkdWamIzSmhkRzl5S0hSaGNtZGxkQ3dnYTJWNUxDQndZWEpoYlVsdVpHVjRLVHNnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQmZYMlZ6UkdWamIzSmhkR1VnUFNCbWRXNWpkR2x2YmlBb1kzUnZjaXdnWkdWelkzSnBjSFJ2Y2tsdUxDQmtaV052Y21GMGIzSnpMQ0JqYjI1MFpYaDBTVzRzSUdsdWFYUnBZV3hwZW1WeWN5d2daWGgwY21GSmJtbDBhV0ZzYVhwbGNuTXBJSHRjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCaFkyTmxjSFFvWmlrZ2V5QnBaaUFvWmlBaFBUMGdkbTlwWkNBd0lDWW1JSFI1Y0dWdlppQm1JQ0U5UFNCY0ltWjFibU4wYVc5dVhDSXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKR2RXNWpkR2x2YmlCbGVIQmxZM1JsWkZ3aUtUc2djbVYwZFhKdUlHWTdJSDFjY2x4dUlDQWdJQ0FnSUNCMllYSWdhMmx1WkNBOUlHTnZiblJsZUhSSmJpNXJhVzVrTENCclpYa2dQU0JyYVc1a0lEMDlQU0JjSW1kbGRIUmxjbHdpSUQ4Z1hDSm5aWFJjSWlBNklHdHBibVFnUFQwOUlGd2ljMlYwZEdWeVhDSWdQeUJjSW5ObGRGd2lJRG9nWENKMllXeDFaVndpTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwWVhKblpYUWdQU0FoWkdWelkzSnBjSFJ2Y2tsdUlDWW1JR04wYjNJZ1B5QmpiMjUwWlhoMFNXNWJYQ0p6ZEdGMGFXTmNJbDBnUHlCamRHOXlJRG9nWTNSdmNpNXdjbTkwYjNSNWNHVWdPaUJ1ZFd4c08xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCa1pYTmpjbWx3ZEc5eUlEMGdaR1Z6WTNKcGNIUnZja2x1SUh4OElDaDBZWEpuWlhRZ1B5QlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0hSaGNtZGxkQ3dnWTI5dWRHVjRkRWx1TG01aGJXVXBJRG9nZTMwcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCZkxDQmtiMjVsSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJR1JsWTI5eVlYUnZjbk11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lCcExTMHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJuUmxlSFFnUFNCN2ZUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2NDQnBiaUJqYjI1MFpYaDBTVzRwSUdOdmJuUmxlSFJiY0YwZ1BTQndJRDA5UFNCY0ltRmpZMlZ6YzF3aUlEOGdlMzBnT2lCamIyNTBaWGgwU1c1YmNGMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnWTI5dWRHVjRkRWx1TG1GalkyVnpjeWtnWTI5dWRHVjRkQzVoWTJObGMzTmJjRjBnUFNCamIyNTBaWGgwU1c0dVlXTmpaWE56VzNCZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBaWGgwTG1Ga1pFbHVhWFJwWVd4cGVtVnlJRDBnWm5WdVkzUnBiMjRnS0dZcElIc2dhV1lnS0dSdmJtVXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRFlXNXViM1FnWVdSa0lHbHVhWFJwWVd4cGVtVnljeUJoWm5SbGNpQmtaV052Y21GMGFXOXVJR2hoY3lCamIyMXdiR1YwWldSY0lpazdJR1Y0ZEhKaFNXNXBkR2xoYkdsNlpYSnpMbkIxYzJnb1lXTmpaWEIwS0dZZ2ZId2diblZzYkNrcE95QjlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnS0RBc0lHUmxZMjl5WVhSdmNuTmJhVjBwS0d0cGJtUWdQVDA5SUZ3aVlXTmpaWE56YjNKY0lpQS9JSHNnWjJWME9pQmtaWE5qY21sd2RHOXlMbWRsZEN3Z2MyVjBPaUJrWlhOamNtbHdkRzl5TG5ObGRDQjlJRG9nWkdWelkzSnBjSFJ2Y2x0clpYbGRMQ0JqYjI1MFpYaDBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0cGJtUWdQVDA5SUZ3aVlXTmpaWE56YjNKY0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdkbTlwWkNBd0tTQmpiMjUwYVc1MVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwOUlHNTFiR3dnZkh3Z2RIbHdaVzltSUhKbGMzVnNkQ0FoUFQwZ1hDSnZZbXBsWTNSY0lpa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWs5aWFtVmpkQ0JsZUhCbFkzUmxaRndpS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmSUQwZ1lXTmpaWEIwS0hKbGMzVnNkQzVuWlhRcEtTQmtaWE5qY21sd2RHOXlMbWRsZENBOUlGODdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1h5QTlJR0ZqWTJWd2RDaHlaWE4xYkhRdWMyVjBLU2tnWkdWelkzSnBjSFJ2Y2k1elpYUWdQU0JmTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRjhnUFNCaFkyTmxjSFFvY21WemRXeDBMbWx1YVhRcEtTQnBibWwwYVdGc2FYcGxjbk11Y0hWemFDaGZLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGZJRDBnWVdOalpYQjBLSEpsYzNWc2RDa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHJhVzVrSUQwOVBTQmNJbVpwWld4a1hDSXBJR2x1YVhScFlXeHBlbVZ5Y3k1d2RYTm9LRjhwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JrWlhOamNtbHdkRzl5VzJ0bGVWMGdQU0JmTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFFwSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lHTnZiblJsZUhSSmJpNXVZVzFsTENCa1pYTmpjbWx3ZEc5eUtUdGNjbHh1SUNBZ0lDQWdJQ0JrYjI1bElEMGdkSEoxWlR0Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdYMTl5ZFc1SmJtbDBhV0ZzYVhwbGNuTWdQU0JtZFc1amRHbHZiaUFvZEdocGMwRnlaeXdnYVc1cGRHbGhiR2w2WlhKekxDQjJZV3gxWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCMWMyVldZV3gxWlNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXlPMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2FXNXBkR2xoYkdsNlpYSnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnZFhObFZtRnNkV1VnUHlCcGJtbDBhV0ZzYVhwbGNuTmJhVjB1WTJGc2JDaDBhR2x6UVhKbkxDQjJZV3gxWlNrZ09pQnBibWwwYVdGc2FYcGxjbk5iYVYwdVkyRnNiQ2gwYUdselFYSm5LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIVnpaVlpoYkhWbElEOGdkbUZzZFdVZ09pQjJiMmxrSURBN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJRjlmY0hKdmNFdGxlU0E5SUdaMWJtTjBhVzl1SUNoNEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQjRJRDA5UFNCY0luTjViV0p2YkZ3aUlEOGdlQ0E2SUZ3aVhDSXVZMjl1WTJGMEtIZ3BPMXh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCZlgzTmxkRVoxYm1OMGFXOXVUbUZ0WlNBOUlHWjFibU4wYVc5dUlDaG1MQ0J1WVcxbExDQndjbVZtYVhncElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc1aGJXVWdQVDA5SUZ3aWMzbHRZbTlzWENJcElHNWhiV1VnUFNCdVlXMWxMbVJsYzJOeWFYQjBhVzl1SUQ4Z1hDSmJYQ0l1WTI5dVkyRjBLRzVoYldVdVpHVnpZM0pwY0hScGIyNHNJRndpWFZ3aUtTQTZJRndpWENJN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2htTENCY0ltNWhiV1ZjSWl3Z2V5QmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNJSFpoYkhWbE9pQndjbVZtYVhnZ1B5QmNJbHdpTG1OdmJtTmhkQ2h3Y21WbWFYZ3NJRndpSUZ3aUxDQnVZVzFsS1NBNklHNWhiV1VnZlNrN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJRjlmYldWMFlXUmhkR0VnUFNCbWRXNWpkR2x2YmlBb2JXVjBZV1JoZEdGTFpYa3NJRzFsZEdGa1lYUmhWbUZzZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUZKbFpteGxZM1FnUFQwOUlGd2liMkpxWldOMFhDSWdKaVlnZEhsd1pXOW1JRkpsWm14bFkzUXViV1YwWVdSaGRHRWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2djbVYwZFhKdUlGSmxabXhsWTNRdWJXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJRzFsZEdGa1lYUmhWbUZzZFdVcE8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0JmWDJGM1lXbDBaWElnUFNCbWRXNWpkR2x2YmlBb2RHaHBjMEZ5Wnl3Z1gyRnlaM1Z0Wlc1MGN5d2dVQ3dnWjJWdVpYSmhkRzl5S1NCN1hISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdZV1J2Y0hRb2RtRnNkV1VwSUhzZ2NtVjBkWEp1SUhaaGJIVmxJR2x1YzNSaGJtTmxiMllnVUNBL0lIWmhiSFZsSURvZ2JtVjNJRkFvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVwSUhzZ2NtVnpiMngyWlNoMllXeDFaU2s3SUgwcE95QjlYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlBb1VDQjhmQ0FvVUNBOUlGQnliMjFwYzJVcEtTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWjFiR1pwYkd4bFpDaDJZV3gxWlNrZ2V5QjBjbmtnZXlCemRHVndLR2RsYm1WeVlYUnZjaTV1WlhoMEtIWmhiSFZsS1NrN0lIMGdZMkYwWTJnZ0tHVXBJSHNnY21WcVpXTjBLR1VwT3lCOUlIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2NtVnFaV04wWldRb2RtRnNkV1VwSUhzZ2RISjVJSHNnYzNSbGNDaG5aVzVsY21GMGIzSmJYQ0owYUhKdmQxd2lYU2gyWVd4MVpTa3BPeUI5SUdOaGRHTm9JQ2hsS1NCN0lISmxhbVZqZENobEtUc2dmU0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSE4wWlhBb2NtVnpkV3gwS1NCN0lISmxjM1ZzZEM1a2IyNWxJRDhnY21WemIyeDJaU2h5WlhOMWJIUXVkbUZzZFdVcElEb2dZV1J2Y0hRb2NtVnpkV3gwTG5aaGJIVmxLUzUwYUdWdUtHWjFiR1pwYkd4bFpDd2djbVZxWldOMFpXUXBPeUI5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWlhBb0tHZGxibVZ5WVhSdmNpQTlJR2RsYm1WeVlYUnZjaTVoY0hCc2VTaDBhR2x6UVhKbkxDQmZZWEpuZFcxbGJuUnpJSHg4SUZ0ZEtTa3VibVY0ZENncEtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdYMTluWlc1bGNtRjBiM0lnUFNCbWRXNWpkR2x2YmlBb2RHaHBjMEZ5Wnl3Z1ltOWtlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJmSUQwZ2V5QnNZV0psYkRvZ01Dd2djMlZ1ZERvZ1puVnVZM1JwYjI0b0tTQjdJR2xtSUNoMFd6QmRJQ1lnTVNrZ2RHaHliM2NnZEZzeFhUc2djbVYwZFhKdUlIUmJNVjA3SUgwc0lIUnllWE02SUZ0ZExDQnZjSE02SUZ0ZElIMHNJR1lzSUhrc0lIUXNJR2M3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdjZ1BTQjdJRzVsZUhRNklIWmxjbUlvTUNrc0lGd2lkR2h5YjNkY0lqb2dkbVZ5WWlneEtTd2dYQ0p5WlhSMWNtNWNJam9nZG1WeVlpZ3lLU0I5TENCMGVYQmxiMllnVTNsdFltOXNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnS0dkYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTa3NJR2M3WEhKY2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2RtVnlZaWh1S1NCN0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdjM1JsY0NoYmJpd2dkbDBwT3lCOU95QjlYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYzNSbGNDaHZjQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ppa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtkbGJtVnlZWFJ2Y2lCcGN5QmhiSEpsWVdSNUlHVjRaV04xZEdsdVp5NWNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDaG5JQ1ltSUNobklEMGdNQ3dnYjNCYk1GMGdKaVlnS0Y4Z1BTQXdLU2tzSUY4cElIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aaUE5SURFc0lIa2dKaVlnS0hRZ1BTQnZjRnN3WFNBbUlESWdQeUI1VzF3aWNtVjBkWEp1WENKZElEb2diM0JiTUYwZ1B5QjVXMXdpZEdoeWIzZGNJbDBnZkh3Z0tDaDBJRDBnZVZ0Y0luSmxkSFZ5Ymx3aVhTa2dKaVlnZEM1allXeHNLSGtwTENBd0tTQTZJSGt1Ym1WNGRDa2dKaVlnSVNoMElEMGdkQzVqWVd4c0tIa3NJRzl3V3pGZEtTa3VaRzl1WlNrZ2NtVjBkWEp1SUhRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZVNBOUlEQXNJSFFwSUc5d0lEMGdXMjl3V3pCZElDWWdNaXdnZEM1MllXeDFaVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0c5d1d6QmRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBd09pQmpZWE5sSURFNklIUWdQU0J2Y0RzZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBME9pQmZMbXhoWW1Wc0t5czdJSEpsZEhWeWJpQjdJSFpoYkhWbE9pQnZjRnN4WFN3Z1pHOXVaVG9nWm1Gc2MyVWdmVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURVNklGOHViR0ZpWld3ckt6c2dlU0E5SUc5d1d6RmRPeUJ2Y0NBOUlGc3dYVHNnWTI5dWRHbHVkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBM09pQnZjQ0E5SUY4dWIzQnpMbkJ2Y0NncE95QmZMblJ5ZVhNdWNHOXdLQ2s3SUdOdmJuUnBiblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtIUWdQU0JmTG5SeWVYTXNJSFFnUFNCMExteGxibWQwYUNBK0lEQWdKaVlnZEZ0MExteGxibWQwYUNBdElERmRLU0FtSmlBb2IzQmJNRjBnUFQwOUlEWWdmSHdnYjNCYk1GMGdQVDA5SURJcEtTQjdJRjhnUFNBd095QmpiMjUwYVc1MVpUc2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2IzQmJNRjBnUFQwOUlETWdKaVlnS0NGMElIeDhJQ2h2Y0ZzeFhTQStJSFJiTUYwZ0ppWWdiM0JiTVYwZ1BDQjBXek5kS1NrcElIc2dYeTVzWVdKbGJDQTlJRzl3V3pGZE95QmljbVZoYXpzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCYk1GMGdQVDA5SURZZ0ppWWdYeTVzWVdKbGJDQThJSFJiTVYwcElIc2dYeTVzWVdKbGJDQTlJSFJiTVYwN0lIUWdQU0J2Y0RzZ1luSmxZV3M3SUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFFnSmlZZ1h5NXNZV0psYkNBOElIUmJNbDBwSUhzZ1h5NXNZV0psYkNBOUlIUmJNbDA3SUY4dWIzQnpMbkIxYzJnb2IzQXBPeUJpY21WaGF6c2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RGc3lYU2tnWHk1dmNITXVjRzl3S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOHVkSEo1Y3k1d2IzQW9LVHNnWTI5dWRHbHVkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjQ0E5SUdKdlpIa3VZMkZzYkNoMGFHbHpRWEpuTENCZktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dleUJ2Y0NBOUlGczJMQ0JsWFRzZ2VTQTlJREE3SUgwZ1ptbHVZV3hzZVNCN0lHWWdQU0IwSUQwZ01Ec2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCYk1GMGdKaUExS1NCMGFISnZkeUJ2Y0ZzeFhUc2djbVYwZFhKdUlIc2dkbUZzZFdVNklHOXdXekJkSUQ4Z2IzQmJNVjBnT2lCMmIybGtJREFzSUdSdmJtVTZJSFJ5ZFdVZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lGOWZaWGh3YjNKMFUzUmhjaUE5SUdaMWJtTjBhVzl1S0cwc0lHOHBJSHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCd0lHbHVJRzBwSUdsbUlDaHdJQ0U5UFNCY0ltUmxabUYxYkhSY0lpQW1KaUFoVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c4c0lIQXBLU0JmWDJOeVpXRjBaVUpwYm1ScGJtY29ieXdnYlN3Z2NDazdYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUY5ZlkzSmxZWFJsUW1sdVpHbHVaeUE5SUU5aWFtVmpkQzVqY21WaGRHVWdQeUFvWm5WdVkzUnBiMjRvYnl3Z2JTd2dheXdnYXpJcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2F6SWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2F6SWdQU0JyTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJrWlhOaklEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lodExDQnJLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9JV1JsYzJNZ2ZId2dLRndpWjJWMFhDSWdhVzRnWkdWell5QS9JQ0Z0TGw5ZlpYTk5iMlIxYkdVZ09pQmtaWE5qTG5keWFYUmhZbXhsSUh4OElHUmxjMk11WTI5dVptbG5kWEpoWW14bEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaWE5qSUQwZ2V5QmxiblZ0WlhKaFlteGxPaUIwY25WbExDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V5QnlaWFIxY200Z2JWdHJYVHNnZlNCOU8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ieXdnYXpJc0lHUmxjMk1wTzF4eVhHNGdJQ0FnZlNrZ09pQW9ablZ1WTNScGIyNG9ieXdnYlN3Z2F5d2dheklwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYXpJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnYXpJZ1BTQnJPMXh5WEc0Z0lDQWdJQ0FnSUc5YmF6SmRJRDBnYlZ0clhUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUY5ZmRtRnNkV1Z6SUQwZ1puVnVZM1JwYjI0Z0tHOHBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjeUE5SUhSNWNHVnZaaUJUZVcxaWIyd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJUZVcxaWIyd3VhWFJsY21GMGIzSXNJRzBnUFNCeklDWW1JRzliYzEwc0lHa2dQU0F3TzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h0S1NCeVpYUjFjbTRnYlM1allXeHNLRzhwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h2SUNZbUlIUjVjR1Z2WmlCdkxteGxibWQwYUNBOVBUMGdYQ0p1ZFcxaVpYSmNJaWtnY21WMGRYSnVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibVY0ZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOGdKaVlnYVNBK1BTQnZMbXhsYm1kMGFDa2dieUE5SUhadmFXUWdNRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3SUhaaGJIVmxPaUJ2SUNZbUlHOWJhU3NyWFN3Z1pHOXVaVG9nSVc4Z2ZUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaHpJRDhnWENKUFltcGxZM1FnYVhNZ2JtOTBJR2wwWlhKaFlteGxMbHdpSURvZ1hDSlRlVzFpYjJ3dWFYUmxjbUYwYjNJZ2FYTWdibTkwSUdSbFptbHVaV1F1WENJcE8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0JmWDNKbFlXUWdQU0JtZFc1amRHbHZiaUFvYnl3Z2Jpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnRJRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JRzliVTNsdFltOXNMbWwwWlhKaGRHOXlYVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9JVzBwSUhKbGRIVnliaUJ2TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwSUQwZ2JTNWpZV3hzS0c4cExDQnlMQ0JoY2lBOUlGdGRMQ0JsTzF4eVhHNGdJQ0FnSUNBZ0lIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDZ29iaUE5UFQwZ2RtOXBaQ0F3SUh4OElHNHRMU0ErSURBcElDWW1JQ0VvY2lBOUlHa3VibVY0ZENncEtTNWtiMjVsS1NCaGNpNXdkWE5vS0hJdWRtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JqWVhSamFDQW9aWEp5YjNJcElIc2daU0E5SUhzZ1pYSnliM0k2SUdWeWNtOXlJSDA3SUgxY2NseHVJQ0FnSUNBZ0lDQm1hVzVoYkd4NUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJQ1ltSUNGeUxtUnZibVVnSmlZZ0tHMGdQU0JwVzF3aWNtVjBkWEp1WENKZEtTa2diUzVqWVd4c0tHa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBibUZzYkhrZ2V5QnBaaUFvWlNrZ2RHaHliM2NnWlM1bGNuSnZjanNnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEk3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDOHFLaUJBWkdWd2NtVmpZWFJsWkNBcUwxeHlYRzRnSUNBZ1gxOXpjSEpsWVdRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1lYSWdQU0JiWFN3Z2FTQTlJREE3SUdrZ1BDQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBLeXNwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5SUQwZ1lYSXVZMjl1WTJGMEtGOWZjbVZoWkNoaGNtZDFiV1Z1ZEhOYmFWMHBLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVhJN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQzhxS2lCQVpHVndjbVZqWVhSbFpDQXFMMXh5WEc0Z0lDQWdYMTl6Y0hKbFlXUkJjbkpoZVhNZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2N5QTlJREFzSUdrZ1BTQXdMQ0JwYkNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0J6SUNzOUlHRnlaM1Z0Wlc1MGMxdHBYUzVzWlc1bmRHZzdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY2lBOUlFRnljbUY1S0hNcExDQnJJRDBnTUN3Z2FTQTlJREE3SUdrZ1BDQnBiRHNnYVNzcktWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCaElEMGdZWEpuZFcxbGJuUnpXMmxkTENCcUlEMGdNQ3dnYW13Z1BTQmhMbXhsYm1kMGFEc2dhaUE4SUdwc095QnFLeXNzSUdzckt5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpiYTEwZ1BTQmhXMnBkTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeU8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0JmWDNOd2NtVmhaRUZ5Y21GNUlEMGdablZ1WTNScGIyNGdLSFJ2TENCbWNtOXRMQ0J3WVdOcktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIQmhZMnNnZkh3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNaWtnWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCbWNtOXRMbXhsYm1kMGFDd2dZWEk3SUdrZ1BDQnNPeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0Z5SUh4OElDRW9hU0JwYmlCbWNtOXRLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZoY2lrZ1lYSWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2htY205dExDQXdMQ0JwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlXMmxkSUQwZ1puSnZiVnRwWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRzh1WTI5dVkyRjBLR0Z5SUh4OElFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHWnliMjBwS1R0Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdYMTloZDJGcGRDQTlJR1oxYm1OMGFXOXVJQ2gyS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE1nYVc1emRHRnVZMlZ2WmlCZlgyRjNZV2wwSUQ4Z0tIUm9hWE11ZGlBOUlIWXNJSFJvYVhNcElEb2dibVYzSUY5ZllYZGhhWFFvZGlrN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJRjlmWVhONWJtTkhaVzVsY21GMGIzSWdQU0JtZFc1amRHbHZiaUFvZEdocGMwRnlaeXdnWDJGeVozVnRaVzUwY3l3Z1oyVnVaWEpoZEc5eUtTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRlRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaWtnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdaeUE5SUdkbGJtVnlZWFJ2Y2k1aGNIQnNlU2gwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6SUh4OElGdGRLU3dnYVN3Z2NTQTlJRnRkTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcElEMGdlMzBzSUhabGNtSW9YQ0p1WlhoMFhDSXBMQ0IyWlhKaUtGd2lkR2h5YjNkY0lpa3NJSFpsY21Jb1hDSnlaWFIxY201Y0lpa3NJR2xiVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNKZElEMGdablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnZEdocGN6c2dmU3dnYVR0Y2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQjJaWEppS0c0cElIc2dhV1lnS0dkYmJsMHBJR2xiYmwwZ1BTQm1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0Z0tHRXNJR0lwSUhzZ2NTNXdkWE5vS0Z0dUxDQjJMQ0JoTENCaVhTa2dQaUF4SUh4OElISmxjM1Z0WlNodUxDQjJLVHNnZlNrN0lIMDdJSDFjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCeVpYTjFiV1VvYml3Z2Rpa2dleUIwY25rZ2V5QnpkR1Z3S0dkYmJsMG9kaWtwT3lCOUlHTmhkR05vSUNobEtTQjdJSE5sZEhSc1pTaHhXekJkV3pOZExDQmxLVHNnZlNCOVhISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdjM1JsY0NoeUtTQjdJSEl1ZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJmWDJGM1lXbDBJRDhnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSEl1ZG1Gc2RXVXVkaWt1ZEdobGJpaG1kV3htYVd4c0xDQnlaV3BsWTNRcElEb2djMlYwZEd4bEtIRmJNRjFiTWwwc0lISXBPeUFnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWjFiR1pwYkd3b2RtRnNkV1VwSUhzZ2NtVnpkVzFsS0Z3aWJtVjRkRndpTENCMllXeDFaU2s3SUgxY2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnlaV3BsWTNRb2RtRnNkV1VwSUhzZ2NtVnpkVzFsS0Z3aWRHaHliM2RjSWl3Z2RtRnNkV1VwT3lCOVhISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdjMlYwZEd4bEtHWXNJSFlwSUhzZ2FXWWdLR1lvZGlrc0lIRXVjMmhwWm5Rb0tTd2djUzVzWlc1bmRHZ3BJSEpsYzNWdFpTaHhXekJkV3pCZExDQnhXekJkV3pGZEtUc2dmVnh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCZlgyRnplVzVqUkdWc1pXZGhkRzl5SUQwZ1puVnVZM1JwYjI0Z0tHOHBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdhU3dnY0R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FTQTlJSHQ5TENCMlpYSmlLRndpYm1WNGRGd2lLU3dnZG1WeVlpaGNJblJvY205M1hDSXNJR1oxYm1OMGFXOXVJQ2hsS1NCN0lIUm9jbTkzSUdVN0lIMHBMQ0IyWlhKaUtGd2ljbVYwZFhKdVhDSXBMQ0JwVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQjBhR2x6T3lCOUxDQnBPMXh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhabGNtSW9iaXdnWmlrZ2V5QnBXMjVkSUQwZ2IxdHVYU0EvSUdaMWJtTjBhVzl1SUNoMktTQjdJSEpsZEhWeWJpQW9jQ0E5SUNGd0tTQS9JSHNnZG1Gc2RXVTZJRjlmWVhkaGFYUW9iMXR1WFNoMktTa3NJR1J2Ym1VNklHWmhiSE5sSUgwZ09pQm1JRDhnWmloMktTQTZJSFk3SUgwZ09pQm1PeUI5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lGOWZZWE41Ym1OV1lXeDFaWE1nUFNCbWRXNWpkR2x2YmlBb2J5a2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaUJwY3lCdWIzUWdaR1ZtYVc1bFpDNWNJaWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzBnUFNCdlcxTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlYU3dnYVR0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JTQS9JRzB1WTJGc2JDaHZLU0E2SUNodklEMGdkSGx3Wlc5bUlGOWZkbUZzZFdWeklEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QmZYM1poYkhWbGN5aHZLU0E2SUc5YlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNncExDQnBJRDBnZTMwc0lIWmxjbUlvWENKdVpYaDBYQ0lwTENCMlpYSmlLRndpZEdoeWIzZGNJaWtzSUhabGNtSW9YQ0p5WlhSMWNtNWNJaWtzSUdsYlUzbHRZbTlzTG1GemVXNWpTWFJsY21GMGIzSmRJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2RHaHBjenNnZlN3Z2FTazdYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZG1WeVlpaHVLU0I3SUdsYmJsMGdQU0J2VzI1ZElDWW1JR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdJSFlnUFNCdlcyNWRLSFlwTENCelpYUjBiR1VvY21WemIyeDJaU3dnY21WcVpXTjBMQ0IyTG1SdmJtVXNJSFl1ZG1Gc2RXVXBPeUI5S1RzZ2ZUc2dmVnh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhObGRIUnNaU2h5WlhOdmJIWmxMQ0J5WldwbFkzUXNJR1FzSUhZcElIc2dVSEp2YldselpTNXlaWE52YkhabEtIWXBMblJvWlc0b1puVnVZM1JwYjI0b2Rpa2dleUJ5WlhOdmJIWmxLSHNnZG1Gc2RXVTZJSFlzSUdSdmJtVTZJR1FnZlNrN0lIMHNJSEpsYW1WamRDazdJSDFjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ1gxOXRZV3RsVkdWdGNHeGhkR1ZQWW1wbFkzUWdQU0JtZFc1amRHbHZiaUFvWTI5dmEyVmtMQ0J5WVhjcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLU0I3SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGpiMjlyWldRc0lGd2ljbUYzWENJc0lIc2dkbUZzZFdVNklISmhkeUI5S1RzZ2ZTQmxiSE5sSUhzZ1kyOXZhMlZrTG5KaGR5QTlJSEpoZHpzZ2ZWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjlyWldRN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSFpoY2lCZlgzTmxkRTF2WkhWc1pVUmxabUYxYkhRZ1BTQlBZbXBsWTNRdVkzSmxZWFJsSUQ4Z0tHWjFibU4wYVc5dUtHOHNJSFlwSUh0Y2NseHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYnl3Z1hDSmtaV1poZFd4MFhDSXNJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnZG1Gc2RXVTZJSFlnZlNrN1hISmNiaUFnSUNCOUtTQTZJR1oxYm1OMGFXOXVLRzhzSUhZcElIdGNjbHh1SUNBZ0lDQWdJQ0J2VzF3aVpHVm1ZWFZzZEZ3aVhTQTlJSFk3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lGOWZhVzF3YjNKMFUzUmhjaUE5SUdaMWJtTjBhVzl1SUNodGIyUXBJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9iVzlrSUNZbUlHMXZaQzVmWDJWelRXOWtkV3hsS1NCeVpYUjFjbTRnYlc5a08xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNCN2ZUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2JXOWtJQ0U5SUc1MWJHd3BJR1p2Y2lBb2RtRnlJR3NnYVc0Z2JXOWtLU0JwWmlBb2F5QWhQVDBnWENKa1pXWmhkV3gwWENJZ0ppWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzF2WkN3Z2F5a3BJRjlmWTNKbFlYUmxRbWx1WkdsdVp5aHlaWE4xYkhRc0lHMXZaQ3dnYXlrN1hISmNiaUFnSUNBZ0lDQWdYMTl6WlhSTmIyUjFiR1ZFWldaaGRXeDBLSEpsYzNWc2RDd2diVzlrS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQmZYMmx0Y0c5eWRFUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9iVzlrS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaHRiMlFnSmlZZ2JXOWtMbDlmWlhOTmIyUjFiR1VwSUQ4Z2JXOWtJRG9nZXlCY0ltUmxabUYxYkhSY0lqb2diVzlrSUgwN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJRjlmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JIWlhRZ1BTQm1kVzVqZEdsdmJpQW9jbVZqWldsMlpYSXNJSE4wWVhSbExDQnJhVzVrTENCbUtTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHdHBibVFnUFQwOUlGd2lZVndpSUNZbUlDRm1LU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVVISnBkbUYwWlNCaFkyTmxjM052Y2lCM1lYTWdaR1ZtYVc1bFpDQjNhWFJvYjNWMElHRWdaMlYwZEdWeVhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MzUmhkR1VnUFQwOUlGd2lablZ1WTNScGIyNWNJaUEvSUhKbFkyVnBkbVZ5SUNFOVBTQnpkR0YwWlNCOGZDQWhaaUE2SUNGemRHRjBaUzVvWVhNb2NtVmpaV2wyWlhJcEtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJSEpsWVdRZ2NISnBkbUYwWlNCdFpXMWlaWElnWm5KdmJTQmhiaUJ2WW1wbFkzUWdkMmh2YzJVZ1kyeGhjM01nWkdsa0lHNXZkQ0JrWldOc1lYSmxJR2wwWENJcE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnJhVzVrSUQwOVBTQmNJbTFjSWlBL0lHWWdPaUJyYVc1a0lEMDlQU0JjSW1GY0lpQS9JR1l1WTJGc2JDaHlaV05sYVhabGNpa2dPaUJtSUQ4Z1ppNTJZV3gxWlNBNklITjBZWFJsTG1kbGRDaHlaV05sYVhabGNpazdYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUY5ZlkyeGhjM05RY21sMllYUmxSbWxsYkdSVFpYUWdQU0JtZFc1amRHbHZiaUFvY21WalpXbDJaWElzSUhOMFlYUmxMQ0IyWVd4MVpTd2dhMmx1WkN3Z1ppa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHJhVzVrSUQwOVBTQmNJbTFjSWlrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbEJ5YVhaaGRHVWdiV1YwYUc5a0lHbHpJRzV2ZENCM2NtbDBZV0pzWlZ3aUtUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2EybHVaQ0E5UFQwZ1hDSmhYQ0lnSmlZZ0lXWXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUWNtbDJZWFJsSUdGalkyVnpjMjl5SUhkaGN5QmtaV1pwYm1Wa0lIZHBkR2h2ZFhRZ1lTQnpaWFIwWlhKY0lpazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCemRHRjBaU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnY21WalpXbDJaWElnSVQwOUlITjBZWFJsSUh4OElDRm1JRG9nSVhOMFlYUmxMbWhoY3loeVpXTmxhWFpsY2lrcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pEWVc1dWIzUWdkM0pwZEdVZ2NISnBkbUYwWlNCdFpXMWlaWElnZEc4Z1lXNGdiMkpxWldOMElIZG9iM05sSUdOc1lYTnpJR1JwWkNCdWIzUWdaR1ZqYkdGeVpTQnBkRndpS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tHdHBibVFnUFQwOUlGd2lZVndpSUQ4Z1ppNWpZV3hzS0hKbFkyVnBkbVZ5TENCMllXeDFaU2tnT2lCbUlEOGdaaTUyWVd4MVpTQTlJSFpoYkhWbElEb2djM1JoZEdVdWMyVjBLSEpsWTJWcGRtVnlMQ0IyWVd4MVpTa3BMQ0IyWVd4MVpUdGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnWDE5amJHRnpjMUJ5YVhaaGRHVkdhV1ZzWkVsdUlEMGdablZ1WTNScGIyNGdLSE4wWVhSbExDQnlaV05sYVhabGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV05sYVhabGNpQTlQVDBnYm5Wc2JDQjhmQ0FvZEhsd1pXOW1JSEpsWTJWcGRtVnlJQ0U5UFNCY0ltOWlhbVZqZEZ3aUlDWW1JSFI1Y0dWdlppQnlaV05sYVhabGNpQWhQVDBnWENKbWRXNWpkR2x2Ymx3aUtTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0IxYzJVZ0oybHVKeUJ2Y0dWeVlYUnZjaUJ2YmlCdWIyNHRiMkpxWldOMFhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdjM1JoZEdVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBL0lISmxZMlZwZG1WeUlEMDlQU0J6ZEdGMFpTQTZJSE4wWVhSbExtaGhjeWh5WldObGFYWmxjaWs3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lHVjRjRzl5ZEdWeUtGd2lYMTlsZUhSbGJtUnpYQ0lzSUY5ZlpYaDBaVzVrY3lrN1hISmNiaUFnSUNCbGVIQnZjblJsY2loY0lsOWZZWE56YVdkdVhDSXNJRjlmWVhOemFXZHVLVHRjY2x4dUlDQWdJR1Y0Y0c5eWRHVnlLRndpWDE5eVpYTjBYQ0lzSUY5ZmNtVnpkQ2s3WEhKY2JpQWdJQ0JsZUhCdmNuUmxjaWhjSWw5ZlpHVmpiM0poZEdWY0lpd2dYMTlrWldOdmNtRjBaU2s3WEhKY2JpQWdJQ0JsZUhCdmNuUmxjaWhjSWw5ZmNHRnlZVzFjSWl3Z1gxOXdZWEpoYlNrN1hISmNiaUFnSUNCbGVIQnZjblJsY2loY0lsOWZaWE5FWldOdmNtRjBaVndpTENCZlgyVnpSR1ZqYjNKaGRHVXBPMXh5WEc0Z0lDQWdaWGh3YjNKMFpYSW9YQ0pmWDNKMWJrbHVhWFJwWVd4cGVtVnljMXdpTENCZlgzSjFia2x1YVhScFlXeHBlbVZ5Y3lrN1hISmNiaUFnSUNCbGVIQnZjblJsY2loY0lsOWZjSEp2Y0V0bGVWd2lMQ0JmWDNCeWIzQkxaWGtwTzF4eVhHNGdJQ0FnWlhod2IzSjBaWElvWENKZlgzTmxkRVoxYm1OMGFXOXVUbUZ0WlZ3aUxDQmZYM05sZEVaMWJtTjBhVzl1VG1GdFpTazdYSEpjYmlBZ0lDQmxlSEJ2Y25SbGNpaGNJbDlmYldWMFlXUmhkR0ZjSWl3Z1gxOXRaWFJoWkdGMFlTazdYSEpjYmlBZ0lDQmxlSEJ2Y25SbGNpaGNJbDlmWVhkaGFYUmxjbHdpTENCZlgyRjNZV2wwWlhJcE8xeHlYRzRnSUNBZ1pYaHdiM0owWlhJb1hDSmZYMmRsYm1WeVlYUnZjbHdpTENCZlgyZGxibVZ5WVhSdmNpazdYSEpjYmlBZ0lDQmxlSEJ2Y25SbGNpaGNJbDlmWlhod2IzSjBVM1JoY2x3aUxDQmZYMlY0Y0c5eWRGTjBZWElwTzF4eVhHNGdJQ0FnWlhod2IzSjBaWElvWENKZlgyTnlaV0YwWlVKcGJtUnBibWRjSWl3Z1gxOWpjbVZoZEdWQ2FXNWthVzVuS1R0Y2NseHVJQ0FnSUdWNGNHOXlkR1Z5S0Z3aVgxOTJZV3gxWlhOY0lpd2dYMTkyWVd4MVpYTXBPMXh5WEc0Z0lDQWdaWGh3YjNKMFpYSW9YQ0pmWDNKbFlXUmNJaXdnWDE5eVpXRmtLVHRjY2x4dUlDQWdJR1Y0Y0c5eWRHVnlLRndpWDE5emNISmxZV1JjSWl3Z1gxOXpjSEpsWVdRcE8xeHlYRzRnSUNBZ1pYaHdiM0owWlhJb1hDSmZYM053Y21WaFpFRnljbUY1YzF3aUxDQmZYM053Y21WaFpFRnljbUY1Y3lrN1hISmNiaUFnSUNCbGVIQnZjblJsY2loY0lsOWZjM0J5WldGa1FYSnlZWGxjSWl3Z1gxOXpjSEpsWVdSQmNuSmhlU2s3WEhKY2JpQWdJQ0JsZUhCdmNuUmxjaWhjSWw5ZllYZGhhWFJjSWl3Z1gxOWhkMkZwZENrN1hISmNiaUFnSUNCbGVIQnZjblJsY2loY0lsOWZZWE41Ym1OSFpXNWxjbUYwYjNKY0lpd2dYMTloYzNsdVkwZGxibVZ5WVhSdmNpazdYSEpjYmlBZ0lDQmxlSEJ2Y25SbGNpaGNJbDlmWVhONWJtTkVaV3hsWjJGMGIzSmNJaXdnWDE5aGMzbHVZMFJsYkdWbllYUnZjaWs3WEhKY2JpQWdJQ0JsZUhCdmNuUmxjaWhjSWw5ZllYTjVibU5XWVd4MVpYTmNJaXdnWDE5aGMzbHVZMVpoYkhWbGN5azdYSEpjYmlBZ0lDQmxlSEJ2Y25SbGNpaGNJbDlmYldGclpWUmxiWEJzWVhSbFQySnFaV04wWENJc0lGOWZiV0ZyWlZSbGJYQnNZWFJsVDJKcVpXTjBLVHRjY2x4dUlDQWdJR1Y0Y0c5eWRHVnlLRndpWDE5cGJYQnZjblJUZEdGeVhDSXNJRjlmYVcxd2IzSjBVM1JoY2lrN1hISmNiaUFnSUNCbGVIQnZjblJsY2loY0lsOWZhVzF3YjNKMFJHVm1ZWFZzZEZ3aUxDQmZYMmx0Y0c5eWRFUmxabUYxYkhRcE8xeHlYRzRnSUNBZ1pYaHdiM0owWlhJb1hDSmZYMk5zWVhOelVISnBkbUYwWlVacFpXeGtSMlYwWENJc0lGOWZZMnhoYzNOUWNtbDJZWFJsUm1sbGJHUkhaWFFwTzF4eVhHNGdJQ0FnWlhod2IzSjBaWElvWENKZlgyTnNZWE56VUhKcGRtRjBaVVpwWld4a1UyVjBYQ0lzSUY5ZlkyeGhjM05RY21sMllYUmxSbWxsYkdSVFpYUXBPMXh5WEc0Z0lDQWdaWGh3YjNKMFpYSW9YQ0pmWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrU1c1Y0lpd2dYMTlqYkdGemMxQnlhWFpoZEdWR2FXVnNaRWx1S1R0Y2NseHVmU2s3WEhKY2JpSXNJaThxS2x4dUlDb2dWR2hwY3lCbVlXTjBiM0o1SUdodmJHUnpJR0VnYkdsemRDQnZaaUJoYkd3Z2RHaGxJSEpsWjJsemRHVnlaV1FnWm1GamRHOXlhV1Z6SUdadmNpQjBhR1VnZG1GeWFXOTFjeUIwZVhCbGN5QnZaaUJ1YjJSbGN5NWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRkJoY25ObFRtOWtaVVpoWTNSdmNubFNaV2RwYzNSeWVTQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUM4cUtpQk1hWE4wSUc5bUlHWmhZM1J2Y21sbGN5QjBhR0YwSUdGeVpTQnlaV2RwYzNSbGNtVmtJR0o1SUdOdmJuUmxiblFnZEhsd1pTNGdLaTljYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwWlc1MFZIbHdaVUZ6YzI5amFXRjBaV1JHWVdOMGIzSnBaWE1nUFNCdVpYY2dUV0Z3S0NrN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZEZaaGJHbGtRMjl1ZEdWdWRGUjVjR1VvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lsUm9aU0J5WldkcGMzUnllU0J6ZFhCd2IzSjBjeUJ0ZFd4MGFYQnNaU0JqYjI1MFpXNTBJSFI1Y0dWekxpQkhaWFFnZEdobElISmxaMmx6ZEdWeVpXUWdabUZqZEc5eWVTQnBibk4wWldGa0xsd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBVbTl2ZEZCaGNuTmxUbTlrWlNoamIyNTBaVzUwVkhsd1pTd2dZMjl1ZEdWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXTnZiblJsYm5SVWVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSmpiMjUwWlc1MElIUjVjR1VnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkNCdmNpQmxiWEIwZVZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lXTnZiblJsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1OdmJuUmxiblFnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkNCdmNpQmxiWEIwZVZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQjJaVzVrYjNKVGNHVmphV1pwWTBOdmJuUmxiblJVZVhCbElEMGdZMjl1ZEdWdWRGUjVjR1V1YzNCc2FYUW9YQ0k3WENJcFd6QmRPMXh1SUNBZ0lDQWdJQ0JzWlhRZ1ptRmpkRzl5ZVNBOUlIUm9hWE11WTI5dWRHVnVkRlI1Y0dWQmMzTnZZMmxoZEdWa1JtRmpkRzl5YVdWekxtZGxkQ2gyWlc1a2IzSlRjR1ZqYVdacFkwTnZiblJsYm5SVWVYQmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHWmhZM1J2Y25rcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVdOMGIzSjVMbWRsZEZKdmIzUlFZWEp6WlU1dlpHVW9kbVZ1Wkc5eVUzQmxZMmxtYVdORGIyNTBaVzUwVkhsd1pTd2dZMjl1ZEdWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMnhsWVc1bFpFTnZiblJsYm5SVWVYQmxJRDBnZG1WdVpHOXlVM0JsWTJsbWFXTkRiMjUwWlc1MFZIbHdaUzV5WlhCc1lXTmxLQzliWGk5ZEsxeGNLeTluYVN3Z1hDSmNJaWs3WEc0Z0lDQWdJQ0FnSUdaaFkzUnZjbmtnUFNCMGFHbHpMbU52Ym5SbGJuUlVlWEJsUVhOemIyTnBZWFJsWkVaaFkzUnZjbWxsY3k1blpYUW9ZMnhsWVc1bFpFTnZiblJsYm5SVWVYQmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHWmhZM1J2Y25rcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVdOMGIzSjVMbWRsZEZKdmIzUlFZWEp6WlU1dlpHVW9ZMnhsWVc1bFpFTnZiblJsYm5SVWVYQmxMQ0JqYjI1MFpXNTBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVOdmJuUmxiblFnZEhsd1pTQWtlMk5zWldGdVpXUkRiMjUwWlc1MFZIbHdaWDBnWkc5bGN5QnViM1FnYUdGMlpTQmhJR1poWTNSdmNua2djbVZuYVhOMFpYSmxaQ0IwYnlCaVpTQndZWEp6WldSZ0tUdGNiaUFnSUNCOVhHNTlYRzR2S2lvZ1JHVm1ZWFZzZENCemFXNW5iR1YwYjI0Z2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUhKbFoybHpkSEo1SUhSdklHSmxJSFZ6WldRZ2QyaGxiaUJ5WldkcGMzUnlhVzVuSUc1bGR5Qm1ZV04wYjNKcFpYTWdkR2hoZENCemFHOTFiR1FnWW1VZ1lYWmhhV3hoWW14bElHSjVJR1JsWm1GMWJIUXVJQ292WEc1UVlYSnpaVTV2WkdWR1lXTjBiM0o1VW1WbmFYTjBjbmt1WkdWbVlYVnNkRWx1YzNSaGJtTmxJRDBnYm1WM0lGQmhjbk5sVG05a1pVWmhZM1J2Y25sU1pXZHBjM1J5ZVNncE8xeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5Y0dGeWMyVk9iMlJsUm1GamRHOXllVkpsWjJsemRISjVMbXB6TG0xaGNDSXNJaThxS2lCUWNtOTRlU0JtWVdOMGIzSjVJSFJvWVhRZ1lXeHNiM2R6SUhSb1pTQmpiMjF3YjNOcGRHbHZiaUJ2WmlCaVpXWnZjbVVnWVc1a0lHRm1kR1Z5SUdOaGJHeGlZV05yY3lCdmJpQmxlR2x6ZEdsdVp5Qm1ZV04wYjNKcFpYTXVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVR0Z5YzJWT2IyUmxVSEp2ZUhsR1lXTjBiM0o1SUh0Y2JpQWdJQ0JuWlhSV1lXeHBaRU52Ym5SbGJuUlVlWEJsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTI5dVkzSmxkR1V1WjJWMFZtRnNhV1JEYjI1MFpXNTBWSGx3WlNncE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJSEJ5YjNoNUlHWmhZM1J2Y25rZ2RHaGhkQ0IzY21Gd2N5QjBhR1VnYzNCbFkybG1hV1ZrSUdOdmJtTnlaWFJsSUdaaFkzUnZjbmtnZDJocGJHVWdZMjl0Y0c5emFXNW5JSFJvWlNCaVpXWnZjbVVnWVc1a0lHRm1kR1Z5SUdOaGJHeGlZV05yY3k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWDJOdmJtTnlaWFJsSUhSb1pTQmpiMjVqY21WMFpTQm1ZV04wYjNKNUlIUnZJSGR5WVhCY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWDI5dVFtVm1iM0psSUhSb1pTQmpZV3hzWW1GamF5QjBieUJwYm5admEyVWdZbVZtYjNKbElIUm9aU0JrWlhObGNtbGhiR2w2WVhScGIyNGdiMllnWVc1NUlHMXZaR1ZzSUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdYMjl1UVdaMFpYSWdkR2hsSUdOaGJHeGlZV05ySUhSdklHbHVkbTlyWlNCaFpuUmxjaUIwYUdVZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUc5bUlHRnVlU0J0YjJSbGJDQnZZbXBsWTNRdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1gyTnZibU55WlhSbExDQmZiMjVDWldadmNtVXNJRjl2YmtGbWRHVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym1OeVpYUmxJRDBnWDJOdmJtTnlaWFJsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2YmtKbFptOXlaU0E5SUY5dmJrSmxabTl5WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYjI1QlpuUmxjaUE5SUY5dmJrRm1kR1Z5TzF4dUlDQWdJQ0FnSUNCcFppQW9JVjlqYjI1amNtVjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lYMk52Ym1OeVpYUmxJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWjJWMFVtOXZkRkJoY25ObFRtOWtaU2hqYjI1MFpXNTBWSGx3WlN3Z1kyOXVkR1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIyUmxJRDBnZEdocGN5NWZZMjl1WTNKbGRHVXVaMlYwVW05dmRGQmhjbk5sVG05a1pTaGpiMjUwWlc1MFZIbHdaU3dnWTI5dWRHVnVkQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzl5YVdkcGJtRnNRbVZtYjNKbElEMGdibTlrWlM1dmJrSmxabTl5WlVGemMybG5ia1pwWld4a1ZtRnNkV1Z6TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2Y21sbmFXNWhiRUZtZEdWeUlEMGdibTlrWlM1dmJrRm1kR1Z5UVhOemFXZHVSbWxsYkdSV1lXeDFaWE03WEc0Z0lDQWdJQ0FnSUc1dlpHVXViMjVDWldadmNtVkJjM05wWjI1R2FXVnNaRlpoYkhWbGN5QTlJQ2gyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmIyNUNaV1p2Y21VZ0ppWWdkR2hwY3k1ZmIyNUNaV1p2Y21Vb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiM0pwWjJsdVlXeENaV1p2Y21VZ0ppWWdiM0pwWjJsdVlXeENaV1p2Y21Vb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQnViMlJsTG05dVFXWjBaWEpCYzNOcFoyNUdhV1ZzWkZaaGJIVmxjeUE5SUNoMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiMjVCWm5SbGNpQW1KaUIwYUdsekxsOXZia0ZtZEdWeUtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl5YVdkcGJtRnNRV1owWlhJZ0ppWWdiM0pwWjJsdVlXeEJablJsY2loMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWIyUmxPMXh1SUNBZ0lIMWNibjFjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBYQmhjbk5sVG05a1pWQnliM2g1Um1GamRHOXllUzVxY3k1dFlYQWlMQ0l2S2lvZ1ZHaHBjeUJtWVdOMGIzSjVJR2h2YkdSeklHRWdiR2x6ZENCdlppQmhiR3dnZEdobElISmxaMmx6ZEdWeVpXUWdabUZqZEc5eWFXVnpJR1p2Y2lCMGFHVWdkbUZ5YVc5MWN5QjBlWEJsY3lCdlppQnViMlJsY3k0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVZKbFoybHpkSEo1SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdMeW9xSUV4cGMzUWdiMllnWm1GamRHOXlhV1Z6SUhSb1lYUWdZWEpsSUhKbFoybHpkR1Z5WldRZ1lua2dZMjl1ZEdWdWRDQjBlWEJsTGlBcUwxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUmxiblJVZVhCbFFYTnpiMk5wWVhSbFpFWmhZM1J2Y21sbGN5QTlJRzVsZHlCTllYQW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBWbUZzYVdSRGIyNTBaVzUwVkhsd1pTZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVkdobElISmxaMmx6ZEhKNUlITjFjSEJ2Y25SeklHMTFiSFJwY0d4bElHTnZiblJsYm5RZ2RIbHdaWE11SUVkbGRDQjBhR1VnY21WbmFYTjBaWEpsWkNCbVlXTjBiM0o1SUdsdWMzUmxZV1F1WENJcE8xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhSVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeUtHTnZiblJsYm5SVWVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZMjl1ZEdWdWRGUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbU52Ym5SbGJuUWdkSGx3WlNCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa0lHOXlJR1Z0Y0hSNVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpsYm1SdmNsTndaV05wWm1salEyOXVkR1Z1ZEZSNWNHVWdQU0JqYjI1MFpXNTBWSGx3WlM1emNHeHBkQ2hjSWp0Y0lpbGJNRjA3WEc0Z0lDQWdJQ0FnSUd4bGRDQm1ZV04wYjNKNUlEMGdkR2hwY3k1amIyNTBaVzUwVkhsd1pVRnpjMjlqYVdGMFpXUkdZV04wYjNKcFpYTXVaMlYwS0habGJtUnZjbE53WldOcFptbGpRMjl1ZEdWdWRGUjVjR1VwTzF4dUlDQWdJQ0FnSUNCcFppQW9abUZqZEc5eWVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaFkzUnZjbmt1WjJWMFUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNpaDJaVzVrYjNKVGNHVmphV1pwWTBOdmJuUmxiblJVZVhCbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiR1ZoYm1Wa1EyOXVkR1Z1ZEZSNWNHVWdQU0IyWlc1a2IzSlRjR1ZqYVdacFkwTnZiblJsYm5SVWVYQmxMbkpsY0d4aFkyVW9MMXRlTDEwclhGd3JMMmRwTENCY0lsd2lLVHRjYmlBZ0lDQWdJQ0FnWm1GamRHOXllU0E5SUhSb2FYTXVZMjl1ZEdWdWRGUjVjR1ZCYzNOdlkybGhkR1ZrUm1GamRHOXlhV1Z6TG1kbGRDaGpiR1ZoYm1Wa1EyOXVkR1Z1ZEZSNWNHVXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptRmpkRzl5ZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poWTNSdmNua3VaMlYwVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2loamJHVmhibVZrUTI5dWRHVnVkRlI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdRMjl1ZEdWdWRDQjBlWEJsSUNSN1kyeGxZVzVsWkVOdmJuUmxiblJVZVhCbGZTQmtiMlZ6SUc1dmRDQm9ZWFpsSUdFZ1ptRmpkRzl5ZVNCeVpXZHBjM1JsY21Wa0lIUnZJR0psSUhObGNtbGhiR2w2WldSZ0tUdGNiaUFnSUNCOVhHNTlYRzR2S2lvZ1JHVm1ZWFZzZENCemFXNW5iR1YwYjI0Z2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUhKbFoybHpkSEo1SUhSdklHSmxJSFZ6WldRZ2QyaGxiaUJ5WldkcGMzUnlhVzVuSUc1bGR5Qm1ZV04wYjNKcFpYTWdkR2hoZENCemFHOTFiR1FnWW1VZ1lYWmhhV3hoWW14bElHSjVJR1JsWm1GMWJIUXVJQ292WEc1VFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVZKbFoybHpkSEo1TG1SbFptRjFiSFJKYm5OMFlXNWpaU0E5SUc1bGR5QlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlSbUZqZEc5eWVWSmxaMmx6ZEhKNUtDazdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxelpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVZKbFoybHpkSEo1TG1wekxtMWhjQ0lzSWk4cUtpQlFjbTk0ZVNCbVlXTjBiM0o1SUhSb1lYUWdZV3hzYjNkeklIUm9aU0JqYjIxd2IzTnBkR2x2YmlCdlppQmlaV1p2Y21VZ1lXNWtJR0ZtZEdWeUlHTmhiR3hpWVdOcmN5QnZiaUJsZUdsemRHbHVaeUJtWVdOMGIzSnBaWE11SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2xCeWIzaDVSbUZqZEc5eWVTQjdYRzRnSUNBZ1oyVjBWbUZzYVdSRGIyNTBaVzUwVkhsd1pTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTnZibU55WlhSbExtZGxkRlpoYkdsa1EyOXVkR1Z1ZEZSNWNHVW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZHlCd2NtOTRlU0JtWVdOMGIzSjVJSFJvWVhRZ2QzSmhjSE1nZEdobElITndaV05wWm1sbFpDQmpiMjVqY21WMFpTQm1ZV04wYjNKNUlIZG9hV3hsSUdOdmJYQnZjMmx1WnlCMGFHVWdZbVZtYjNKbElHRnVaQ0JoWm5SbGNpQmpZV3hzWW1GamEzTXVYRzRnSUNBZ0lDb2dRSEJoY21GdElGOWpiMjVqY21WMFpTQjBhR1VnWTI5dVkzSmxkR1VnWm1GamRHOXllU0IwYnlCM2NtRndYRzRnSUNBZ0lDb2dRSEJoY21GdElGOXZia0psWm05eVpTQjBhR1VnWTJGc2JHSmhZMnNnZEc4Z2FXNTJiMnRsSUdKbFptOXlaU0IwYUdVZ2MyVnlhV0ZzYVhwaGRHbHZiaUJ2WmlCaGJua2diVzlrWld3Z2IySnFaV04wTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JmYjI1QlpuUmxjaUIwYUdVZ1kyRnNiR0poWTJzZ2RHOGdhVzUyYjJ0bElHRm1kR1Z5SUhSb1pTQnpaWEpwWVd4cGVtRjBhVzl1SUc5bUlHRnVlU0J0YjJSbGJDQnZZbXBsWTNRdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUY5dmJsTjBZWEowSUhSb1pTQmpZV3hzWW1GamF5QjBieUJwYm5admEyVWdkMmhsYmlCMGFHVWdjMlZ5YVdGc2FYcGhkR2x2YmlCdlppQmhJRzF2WkdWc0lHOWlhbVZqZENCemRHRnlkSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhmWTI5dVkzSmxkR1VzSUY5dmJrSmxabTl5WlN3Z1gyOXVRV1owWlhJc0lGOXZibE4wWVhKMEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnZibU55WlhSbElEMGdYMk52Ym1OeVpYUmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZia0psWm05eVpTQTlJRjl2YmtKbFptOXlaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiMjVCWm5SbGNpQTlJRjl2YmtGbWRHVnlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZibE4wWVhKMElEMGdYMjl1VTNSaGNuUTdYRzRnSUNBZ0lDQWdJR2xtSUNnaFgyTnZibU55WlhSbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKZlkyOXVZM0psZEdVZ1kyRnVibTkwSUdKbElIVnVaR1ZtYVc1bFpGd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQm5aWFJUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5S0dOdmJuUmxiblJVZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIZHlhWFJsY2lBOUlIUm9hWE11WDJOdmJtTnlaWFJsTG1kbGRGTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSW9ZMjl1ZEdWdWRGUjVjR1VwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2Y21sbmFXNWhiRUpsWm05eVpTQTlJSGR5YVhSbGNpNXZia0psWm05eVpVOWlhbVZqZEZObGNtbGhiR2w2WVhScGIyNDdYRzRnSUNBZ0lDQWdJR052Ym5OMElHOXlhV2RwYm1Gc1FXWjBaWElnUFNCM2NtbDBaWEl1YjI1QlpuUmxjazlpYW1WamRGTmxjbWxoYkdsNllYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzl5YVdkcGJtRnNVM1JoY25RZ1BTQjNjbWwwWlhJdWIyNVRkR0Z5ZEU5aWFtVmpkRk5sY21saGJHbDZZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lIZHlhWFJsY2k1dmJrSmxabTl5WlU5aWFtVmpkRk5sY21saGJHbDZZWFJwYjI0Z1BTQW9kbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI5dVFtVm1iM0psSUNZbUlIUm9hWE11WDI5dVFtVm1iM0psS0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXlhV2RwYm1Gc1FtVm1iM0psSUNZbUlHOXlhV2RwYm1Gc1FtVm1iM0psS0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2QzSnBkR1Z5TG05dVFXWjBaWEpQWW1wbFkzUlRaWEpwWVd4cGVtRjBhVzl1SUQwZ0tIWmhiSFZsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl2YmtGbWRHVnlJQ1ltSUhSb2FYTXVYMjl1UVdaMFpYSW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNKcFoybHVZV3hCWm5SbGNpQW1KaUJ2Y21sbmFXNWhiRUZtZEdWeUtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkM0pwZEdWeUxtOXVVM1JoY25SUFltcGxZM1JUWlhKcFlXeHBlbUYwYVc5dUlEMGdLSFpoYkhWbExDQjNjbWwwWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI5dVUzUmhjblFnSmlZZ2RHaHBjeTVmYjI1VGRHRnlkQ2gyWVd4MVpTd2dkM0pwZEdWeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5eWFXZHBibUZzVTNSaGNuUWdKaVlnYjNKcFoybHVZV3hUZEdGeWRDaDJZV3gxWlN3Z2QzSnBkR1Z5S1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIZHlhWFJsY2p0Y2JpQWdJQ0I5WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDF6WlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5VUhKdmVIbEdZV04wYjNKNUxtcHpMbTFoY0NJc0lpOHZJRlZ1YVhGMVpTQkpSQ0JqY21WaGRHbHZiaUJ5WlhGMWFYSmxjeUJoSUdocFoyZ2djWFZoYkdsMGVTQnlZVzVrYjIwZ0l5Qm5aVzVsY21GMGIzSXVJRWx1SUhSb1pTQmljbTkzYzJWeUlIZGxJSFJvWlhKbFptOXlaVnh1THk4Z2NtVnhkV2x5WlNCMGFHVWdZM0o1Y0hSdklFRlFTU0JoYm1RZ1pHOGdibTkwSUhOMWNIQnZjblFnWW5WcGJIUXRhVzRnWm1Gc2JHSmhZMnNnZEc4Z2JHOTNaWElnY1hWaGJHbDBlU0J5WVc1a2IyMGdiblZ0WW1WeVhHNHZMeUJuWlc1bGNtRjBiM0p6SUNoc2FXdGxJRTFoZEdndWNtRnVaRzl0S0NrcExseHViR1YwSUdkbGRGSmhibVJ2YlZaaGJIVmxjenRjYm1OdmJuTjBJSEp1WkhNNElEMGdibVYzSUZWcGJuUTRRWEp5WVhrb01UWXBPMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdjbTVuS0NrZ2UxeHVJQ0F2THlCc1lYcDVJR3h2WVdRZ2MyOGdkR2hoZENCbGJuWnBjbTl1YldWdWRITWdkR2hoZENCdVpXVmtJSFJ2SUhCdmJIbG1hV3hzSUdoaGRtVWdZU0JqYUdGdVkyVWdkRzhnWkc4Z2MyOWNiaUFnYVdZZ0tDRm5aWFJTWVc1a2IyMVdZV3gxWlhNcElIdGNiaUFnSUNBdkx5Qm5aWFJTWVc1a2IyMVdZV3gxWlhNZ2JtVmxaSE1nZEc4Z1ltVWdhVzUyYjJ0bFpDQnBiaUJoSUdOdmJuUmxlSFFnZDJobGNtVWdYQ0owYUdselhDSWdhWE1nWVNCRGNubHdkRzhnYVcxd2JHVnRaVzUwWVhScGIyNHVYRzRnSUNBZ1oyVjBVbUZ1Wkc5dFZtRnNkV1Z6SUQwZ2RIbHdaVzltSUdOeWVYQjBieUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnWTNKNWNIUnZMbWRsZEZKaGJtUnZiVlpoYkhWbGN5QW1KaUJqY25sd2RHOHVaMlYwVW1GdVpHOXRWbUZzZFdWekxtSnBibVFvWTNKNWNIUnZLVHRjYmx4dUlDQWdJR2xtSUNnaFoyVjBVbUZ1Wkc5dFZtRnNkV1Z6S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJOeWVYQjBieTVuWlhSU1lXNWtiMjFXWVd4MVpYTW9LU0J1YjNRZ2MzVndjRzl5ZEdWa0xpQlRaV1VnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNWMWFXUnFjeTkxZFdsa0kyZGxkSEpoYm1SdmJYWmhiSFZsY3kxdWIzUXRjM1Z3Y0c5eWRHVmtKeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR2RsZEZKaGJtUnZiVlpoYkhWbGN5aHlibVJ6T0NrN1hHNTlJaXdpYVcxd2IzSjBJSFpoYkdsa1lYUmxJR1p5YjIwZ0p5NHZkbUZzYVdSaGRHVXVhbk1uTzF4dUx5b3FYRzRnS2lCRGIyNTJaWEowSUdGeWNtRjVJRzltSURFMklHSjVkR1VnZG1Gc2RXVnpJSFJ2SUZWVlNVUWdjM1J5YVc1bklHWnZjbTFoZENCdlppQjBhR1VnWm05eWJUcGNiaUFxSUZoWVdGaFlXRmhZTFZoWVdGZ3RXRmhZV0MxWVdGaFlMVmhZV0ZoWVdGaFlXRmhZV0Z4dUlDb3ZYRzVjYm1OdmJuTjBJR0o1ZEdWVWIwaGxlQ0E5SUZ0ZE8xeHVYRzVtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SURJMU5qc2dLeXRwS1NCN1hHNGdJR0o1ZEdWVWIwaGxlQzV3ZFhOb0tDaHBJQ3NnTUhneE1EQXBMblJ2VTNSeWFXNW5LREUyS1M1emJHbGpaU2d4S1NrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUIxYm5OaFptVlRkSEpwYm1kcFpua29ZWEp5TENCdlptWnpaWFFnUFNBd0tTQjdYRzRnSUM4dklFNXZkR1U2SUVKbElHTmhjbVZtZFd3Z1pXUnBkR2x1WnlCMGFHbHpJR052WkdVaElDQkpkQ2R6SUdKbFpXNGdkSFZ1WldRZ1ptOXlJSEJsY21admNtMWhibU5sWEc0Z0lDOHZJR0Z1WkNCM2IzSnJjeUJwYmlCM1lYbHpJSGx2ZFNCdFlYa2dibTkwSUdWNGNHVmpkQzRnVTJWbElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTFkV2xrYW5NdmRYVnBaQzl3ZFd4c0x6UXpORnh1SUNCeVpYUjFjbTRnS0dKNWRHVlViMGhsZUZ0aGNuSmJiMlptYzJWMElDc2dNRjFkSUNzZ1lubDBaVlJ2U0dWNFcyRnljbHR2Wm1aelpYUWdLeUF4WFYwZ0t5QmllWFJsVkc5SVpYaGJZWEp5VzI5bVpuTmxkQ0FySURKZFhTQXJJR0o1ZEdWVWIwaGxlRnRoY25KYmIyWm1jMlYwSUNzZ00xMWRJQ3NnSnkwbklDc2dZbmwwWlZSdlNHVjRXMkZ5Y2x0dlptWnpaWFFnS3lBMFhWMGdLeUJpZVhSbFZHOUlaWGhiWVhKeVcyOW1abk5sZENBcklEVmRYU0FySUNjdEp5QXJJR0o1ZEdWVWIwaGxlRnRoY25KYmIyWm1jMlYwSUNzZ05sMWRJQ3NnWW5sMFpWUnZTR1Y0VzJGeWNsdHZabVp6WlhRZ0t5QTNYVjBnS3lBbkxTY2dLeUJpZVhSbFZHOUlaWGhiWVhKeVcyOW1abk5sZENBcklEaGRYU0FySUdKNWRHVlViMGhsZUZ0aGNuSmJiMlptYzJWMElDc2dPVjFkSUNzZ0p5MG5JQ3NnWW5sMFpWUnZTR1Y0VzJGeWNsdHZabVp6WlhRZ0t5QXhNRjFkSUNzZ1lubDBaVlJ2U0dWNFcyRnljbHR2Wm1aelpYUWdLeUF4TVYxZElDc2dZbmwwWlZSdlNHVjRXMkZ5Y2x0dlptWnpaWFFnS3lBeE1sMWRJQ3NnWW5sMFpWUnZTR1Y0VzJGeWNsdHZabVp6WlhRZ0t5QXhNMTFkSUNzZ1lubDBaVlJ2U0dWNFcyRnljbHR2Wm1aelpYUWdLeUF4TkYxZElDc2dZbmwwWlZSdlNHVjRXMkZ5Y2x0dlptWnpaWFFnS3lBeE5WMWRLUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCemRISnBibWRwWm5rb1lYSnlMQ0J2Wm1aelpYUWdQU0F3S1NCN1hHNGdJR052Ym5OMElIVjFhV1FnUFNCMWJuTmhabVZUZEhKcGJtZHBabmtvWVhKeUxDQnZabVp6WlhRcE95QXZMeUJEYjI1emFYTjBaVzVqZVNCamFHVmpheUJtYjNJZ2RtRnNhV1FnVlZWSlJDNGdJRWxtSUhSb2FYTWdkR2h5YjNkekxDQnBkQ2R6SUd4cGEyVnNlU0JrZFdVZ2RHOGdiMjVsWEc0Z0lDOHZJRzltSUhSb1pTQm1iMnhzYjNkcGJtYzZYRzRnSUM4dklDMGdUMjVsSUc5eUlHMXZjbVVnYVc1d2RYUWdZWEp5WVhrZ2RtRnNkV1Z6SUdSdmJpZDBJRzFoY0NCMGJ5QmhJR2hsZUNCdlkzUmxkQ0FvYkdWaFpHbHVaeUIwYjF4dUlDQXZMeUJjSW5WdVpHVm1hVzVsWkZ3aUlHbHVJSFJvWlNCMWRXbGtLVnh1SUNBdkx5QXRJRWx1ZG1Gc2FXUWdhVzV3ZFhRZ2RtRnNkV1Z6SUdadmNpQjBhR1VnVWtaRElHQjJaWEp6YVc5dVlDQnZjaUJnZG1GeWFXRnVkR0FnWm1sbGJHUnpYRzVjYmlBZ2FXWWdLQ0YyWVd4cFpHRjBaU2gxZFdsa0tTa2dlMXh1SUNBZ0lIUm9jbTkzSUZSNWNHVkZjbkp2Y2lnblUzUnlhVzVuYVdacFpXUWdWVlZKUkNCcGN5QnBiblpoYkdsa0p5azdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdkWFZwWkR0Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdjM1J5YVc1bmFXWjVPeUlzSW1OdmJuTjBJSEpoYm1SdmJWVlZTVVFnUFNCMGVYQmxiMllnWTNKNWNIUnZJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJqY25sd2RHOHVjbUZ1Wkc5dFZWVkpSQ0FtSmlCamNubHdkRzh1Y21GdVpHOXRWVlZKUkM1aWFXNWtLR055ZVhCMGJ5azdYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUhKaGJtUnZiVlZWU1VSY2JuMDdJaXdpYVcxd2IzSjBJRzVoZEdsMlpTQm1jbTl0SUNjdUwyNWhkR2wyWlM1cWN5YzdYRzVwYlhCdmNuUWdjbTVuSUdaeWIyMGdKeTR2Y201bkxtcHpKenRjYm1sdGNHOXlkQ0I3SUhWdWMyRm1aVk4wY21sdVoybG1lU0I5SUdaeWIyMGdKeTR2YzNSeWFXNW5hV1o1TG1wekp6dGNibHh1Wm5WdVkzUnBiMjRnZGpRb2IzQjBhVzl1Y3l3Z1luVm1MQ0J2Wm1aelpYUXBJSHRjYmlBZ2FXWWdLRzVoZEdsMlpTNXlZVzVrYjIxVlZVbEVJQ1ltSUNGaWRXWWdKaVlnSVc5d2RHbHZibk1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibUYwYVhabExuSmhibVJ2YlZWVlNVUW9LVHRjYmlBZ2ZWeHVYRzRnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1SUNCamIyNXpkQ0J5Ym1SeklEMGdiM0IwYVc5dWN5NXlZVzVrYjIwZ2ZId2dLRzl3ZEdsdmJuTXVjbTVuSUh4OElISnVaeWtvS1RzZ0x5OGdVR1Z5SURRdU5Dd2djMlYwSUdKcGRITWdabTl5SUhabGNuTnBiMjRnWVc1a0lHQmpiRzlqYTE5elpYRmZhR2xmWVc1a1gzSmxjMlZ5ZG1Wa1lGeHVYRzRnSUhKdVpITmJObDBnUFNCeWJtUnpXelpkSUNZZ01IZ3daaUI4SURCNE5EQTdYRzRnSUhKdVpITmJPRjBnUFNCeWJtUnpXemhkSUNZZ01IZ3paaUI4SURCNE9EQTdJQzh2SUVOdmNIa2dZbmwwWlhNZ2RHOGdZblZtWm1WeUxDQnBaaUJ3Y205MmFXUmxaRnh1WEc0Z0lHbG1JQ2hpZFdZcElIdGNiaUFnSUNCdlptWnpaWFFnUFNCdlptWnpaWFFnZkh3Z01EdGNibHh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dNVFk3SUNzcmFTa2dlMXh1SUNBZ0lDQWdZblZtVzI5bVpuTmxkQ0FySUdsZElEMGdjbTVrYzF0cFhUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWW5WbU8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIVnVjMkZtWlZOMGNtbHVaMmxtZVNoeWJtUnpLVHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2RqUTdJaXdpYVcxd2IzSjBJSHNnZGpRZ1lYTWdkWFZwWkhZMElIMGdabkp2YlNCY0luVjFhV1JjSWp0Y2JpOHFLaUJKYmkxdFpXMXZjbmtnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnZEdobElHSmhZMnRwYm1jZ2MzUnZjbVV1SUVGc2JHOTNjeUJtYjNJZ1pHbHlkSGtnZEhKaFkydHBibWNnYjJZZ1kyaGhibWRsY3k0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSmJrMWxiVzl5ZVVKaFkydHBibWRUZEc5eVpTQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1ZpYzJOeWFYQjBhVzl1Y3lBOUlHNWxkeUJOWVhBb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHOXlaU0E5SUc1bGR5Qk5ZWEFvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhSMWNtNVBibXg1UTJoaGJtZGxaRlpoYkhWbGN5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJtbDBhV0ZzYVhwaGRHbHZia052YlhCc1pYUmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRDaHJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZDNKaGNIQmxjaUE5SUhSb2FYTXVjM1J2Y21VdVoyVjBLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gzY21Gd2NHVnlJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9LSFJvYVhNdWNtVjBkWEp1VDI1c2VVTm9ZVzVuWldSV1lXeDFaWE1nSmlZZ2QzSmhjSEJsY2k1amFHRnVaMlZrS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRjBhR2x6TG5KbGRIVnliazl1YkhsRGFHRnVaMlZrVm1Gc2RXVnpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIZHlZWEJ3WlhJdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0I5WEc0Z0lDQWdjMlYwS0d0bGVTd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyeGtWbUZzZFdWWGNtRndjR1Z5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFFvYTJWNUtUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyeGtWbUZzZFdVZ1BTQnZiR1JXWVd4MVpWZHlZWEJ3WlhJZ1BUMDlJRzUxYkd3Z2ZId2diMnhrVm1Gc2RXVlhjbUZ3Y0dWeUlEMDlQU0IyYjJsa0lEQWdQeUIyYjJsa0lEQWdPaUJ2YkdSV1lXeDFaVmR5WVhCd1pYSXVkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2YkdSV1lXeDFaVmR5WVhCd1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXNaRlpoYkhWbFYzSmhjSEJsY2k1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IyeGtWbUZzZFdWWGNtRndjR1Z5TG1Ob1lXNW5aV1FnUFNCMGFHbHpMbWx1YVhScFlXeHBlbUYwYVc5dVEyOXRjR3hsZEdWa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkRzl5WlM1elpYUW9hMlY1TENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGhibWRsWkRvZ2RHaHBjeTVwYm1sMGFXRnNhWHBoZEdsdmJrTnZiWEJzWlhSbFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzNWaWMyTnlhWEIwYVc5dWN5NW1iM0pGWVdOb0tDaHpkV0lwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMVlpaHJaWGtzSUc5c1pGWmhiSFZsTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdJQ0JsYm5WdFpYSmhkR1VvS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JtYVd4MFpYSmhZbXhsUVhKeVlYa2dQU0JiTGk0dWRHaHBjeTV6ZEc5eVpTNWxiblJ5YVdWektDbGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5WlhSMWNtNVBibXg1UTJoaGJtZGxaRlpoYkhWbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNkR1Z5WVdKc1pVRnljbUY1SUQwZ1ptbHNkR1Z5WVdKc1pVRnljbUY1TG1acGJIUmxjaWdvVzE4c0lIWmRLU0E5UGlCMkxtTm9ZVzVuWldRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1hV3gwWlhKaFlteGxRWEp5WVhrdWJXRndLQ2hiYTJWNUxDQjJZV3gxWlYwcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN0lHdGxlU3dnZG1Gc2RXVWdmVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR1Z1ZFcxbGNtRjBaVXRsZVhOR2IzSldZV3gxWlhORGFHRnVaMlZrVkc5T2RXeHNLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhseklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ1cydGxlU3dnWlc1MGNubGRJRzltSUhSb2FYTXVjM1J2Y21VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxiblJ5ZVM1amFHRnVaMlZrSUNZbUlDRmxiblJ5ZVM1MllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd0bGVYTXVjSFZ6YUNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnJaWGx6TzF4dUlDQWdJSDFjYmlBZ0lDQnpkV0p6WTNKcFltVW9ZMkZzYkdKaFkyc3NJSE4xWW5OamNtbHdkR2x2Ymtsa0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaFkyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1OaGJHeGlZV05ySUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYzNWaWMyTnlhWEIwYVc5dVNXUWdQU0J6ZFdKelkzSnBjSFJwYjI1SlpDQWhQVDBnYm5Wc2JDQW1KaUJ6ZFdKelkzSnBjSFJwYjI1SlpDQWhQVDBnZG05cFpDQXdJRDhnYzNWaWMyTnlhWEIwYVc5dVNXUWdPaUIxZFdsa2RqUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkV0p6WTNKcGNIUnBiMjV6TG5ObGRDaHpkV0p6WTNKcGNIUnBiMjVKWkN3Z1kyRnNiR0poWTJzcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVmljMk55YVhCMGFXOXVTV1E3WEc0Z0lDQWdmVnh1SUNBZ0lIVnVjM1ZpYzJOeWFXSmxLSE4xWW5OamNtbHdkR2x2Ymtsa0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzVmljMk55YVhCMGFXOXVjeTVrWld4bGRHVW9jM1ZpYzJOeWFYQjBhVzl1U1dRcE8xeHVJQ0FnSUgxY2JpQWdJQ0JqYkdWaGNpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkRzl5WlM1amJHVmhjaWdwTzF4dUlDQWdJSDFjYmlBZ0lDQnpaWFFnYVc1cGRHbGhiR2w2WVhScGIyNURiMjF3YkdWMFpXUW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXNXBkR2xoYkdsNllYUnBiMjVEYjIxd2JHVjBaV1FnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkRzl5WlM1bWIzSkZZV05vS0NoMktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJMbU5vWVc1blpXUWdQU0FoZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lDQm5aWFFnYVc1cGRHbGhiR2w2WVhScGIyNURiMjF3YkdWMFpXUW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBibWwwYVdGc2FYcGhkR2x2YmtOdmJYQnNaWFJsWkR0Y2JpQWdJQ0I5WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFwYmsxbGJXOXllVUpoWTJ0cGJtZFRkRzl5WlM1cWN5NXRZWEFpTENKcGJYQnZjblFnZXlCSmJrMWxiVzl5ZVVKaFkydHBibWRUZEc5eVpTQjlJR1p5YjIwZ1hDSXVMMmx1VFdWdGIzSjVRbUZqYTJsdVoxTjBiM0psWENJN1hHNHZLaW9nVkdocGN5QmpiR0Z6Y3lCcGN5QjFjMlZrSUhSdklHTnlaV0YwWlNCcGJuTjBZVzVqWlhNZ2IyWWdTVzVOWlcxdmNubENZV05yYVc1blUzUnZjbVVnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJKYmsxbGJXOXllVUpoWTJ0cGJtZFRkRzl5WlVaaFkzUnZjbmtnZTF4dUlDQWdJR055WldGMFpVSmhZMnRwYm1kVGRHOXlaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkpiazFsYlc5eWVVSmhZMnRwYm1kVGRHOXlaU2dwTzF4dUlDQWdJSDFjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV2x1VFdWdGIzSjVRbUZqYTJsdVoxTjBiM0psUm1GamRHOXllUzVxY3k1dFlYQWlMQ0pwYlhCdmNuUWdleUJKYmsxbGJXOXllVUpoWTJ0cGJtZFRkRzl5WlVaaFkzUnZjbmtnZlNCbWNtOXRJRndpTGk5cGJrMWxiVzl5ZVVKaFkydHBibWRUZEc5eVpVWmhZM1J2Y25sY0lqdGNibVY0Y0c5eWRDQmpiR0Z6Y3lCQ1lXTnJhVzVuVTNSdmNtVkdZV04wYjNKNVUybHVaMnhsZEc5dUlIdGNibjFjYmtKaFkydHBibWRUZEc5eVpVWmhZM1J2Y25sVGFXNW5iR1YwYjI0dWFXNXpkR0Z1WTJVZ1BTQnVaWGNnU1c1TlpXMXZjbmxDWVdOcmFXNW5VM1J2Y21WR1lXTjBiM0o1S0NrN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFpWVdOcmFXNW5VM1J2Y21WR1lXTjBiM0o1VTJsdVoyeGxkRzl1TG1wekxtMWhjQ0lzSW1sdGNHOXlkQ0I3SUZCaGNuTmxUbTlrWlZCeWIzaDVSbUZqZEc5eWVTQjlJR1p5YjIwZ1hDSXVMaTl6WlhKcFlXeHBlbUYwYVc5dVhDSTdYRzR2S2lvZ1VISnZlSGtnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnVUdGeWMyVk9iMlJsUm1GamRHOXllU0JtYjNJZ2RHaGxJR0poWTJ0cGJtY2djM1J2Y21VZ2RHaGhkQ0JoZFhSdmJXRjBhV05oYkd4NUlITmxkSE1nZEdobElITjBZWFJsSUc5bUlIUm9aU0JpWVdOcmFXNW5JSE4wYjNKbElIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkNZV05yYVc1blUzUnZjbVZRWVhKelpVNXZaR1ZHWVdOMGIzSjVJR1Y0ZEdWdVpITWdVR0Z5YzJWT2IyUmxVSEp2ZUhsR1lXTjBiM0o1SUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJtbDBhV0ZzYVhwbGN5QmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQjBhR1VnUW1GamEybHVaMU4wYjNKbFVHRnljMlZPYjJSbFJtRmpkRzl5ZVNCamJHRnpjeUJuYVhabGJpQjBhR1VnWTI5dVkzSmxkR1VnYVcxd2JHVnRaVzUwWVhScGIyNHVYRzRnSUNBZ0lDb2dRSEJoY21GdElHTnZibU55WlhSbElIUm9aU0JqYjI1amNtVjBaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUIwYUdVZ1VHRnljMlZPYjJSbFJtRmpkRzl5ZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dOdmJtTnlaWFJsS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0dOdmJtTnlaWFJsTENBb2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0poWTJ0bFpFMXZaR1ZzSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWW1GamEyVmtUVzlrWld3Z0ppWWdZbUZqYTJWa1RXOWtaV3d1WW1GamEybHVaMU4wYjNKbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbUZqYTJWa1RXOWtaV3d1WW1GamEybHVaMU4wYjNKbExtbHVhWFJwWVd4cGVtRjBhVzl1UTI5dGNHeGxkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzSUNoMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZbUZqYTJWa1RXOWtaV3dnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hpWVdOclpXUk5iMlJsYkNBbUppQmlZV05yWldSTmIyUmxiQzVpWVdOcmFXNW5VM1J2Y21VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZV05yWldSTmIyUmxiQzVpWVdOcmFXNW5VM1J2Y21VdWFXNXBkR2xoYkdsNllYUnBiMjVEYjIxd2JHVjBaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzU5WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWlZV05yYVc1blUzUnZjbVZRWVhKelpVNXZaR1ZHWVdOMGIzSjVMbXB6TG0xaGNDSXNJbWx0Y0c5eWRDQjdJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEpRY205NGVVWmhZM1J2Y25rc0lIMGdabkp2YlNCY0lpNHVMM05sY21saGJHbDZZWFJwYjI1Y0lqdGNiaThxS2xCeWIzaDVJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOW1JRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEpHWVdOMGIzSjVJR1p2Y2lCMGFHVWdZbUZqYTJsdVp5QnpkRzl5WlNCMGFHRjBJR0YxZEc5dFlYUnBZMkZzYkhrZ2MyVjBjeUIwYUdVZ2MzUmhkR1VnYjJZZ2RHaGxJR0poWTJ0cGJtY2djM1J2Y21VZ2QyaGxiaUJ6WlhKcFlXeHBlbWx1Wnk0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCQ1lXTnJhVzVuVTNSdmNtVlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlVSEp2ZUhsR1lXTjBiM0o1SUdWNGRHVnVaSE1nVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2xCeWIzaDVSbUZqZEc5eWVTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nWVNCdVpYY2dhVzV6ZEdGdVkyVWdiMllnZEdobElFSmhZMnRwYm1kVGRHOXlaVk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEpRY205NGVVWmhZM1J2Y25rZ1kyeGhjM01nWjJsMlpXNGdZU0JqYjI1amNtVjBaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5Um1GamRHOXllUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZMjl1WTNKbGRHVWdZU0JqYjI1amNtVjBaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5Um1GamRHOXllU0IwYnlCM2NtRndMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR052Ym1OeVpYUmxLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLR052Ym1OeVpYUmxMQ0FvZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHSmhZMnRsWkUxdlpHVnNJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZbUZqYTJWa1RXOWtaV3dnSmlZZ1ltRmphMlZrVFc5a1pXd3VZbUZqYTJsdVoxTjBiM0psS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRmphMlZrVFc5a1pXd3VZbUZqYTJsdVoxTjBiM0psTG5KbGRIVnliazl1YkhsRGFHRnVaMlZrVm1Gc2RXVnpJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTd2dLSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaVlXTnJaV1JOYjJSbGJDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHSmhZMnRsWkUxdlpHVnNJQ1ltSUdKaFkydGxaRTF2WkdWc0xtSmhZMnRwYm1kVGRHOXlaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaFkydGxaRTF2WkdWc0xtSmhZMnRwYm1kVGRHOXlaUzV5WlhSMWNtNVBibXg1UTJoaGJtZGxaRlpoYkhWbGN5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmhZMnRsWkUxdlpHVnNMbUpoWTJ0cGJtZFRkRzl5WlM1cGJtbDBhV0ZzYVhwaGRHbHZia052YlhCc1pYUmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNJQ2gyWVd4MVpTd2dkM0pwZEdWeUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaVlXTnJaV1JOYjJSbGJDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHSmhZMnRsWkUxdlpHVnNJQ1ltSUdKaFkydGxaRTF2WkdWc0xtSmhZMnRwYm1kVGRHOXlaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR3RsZVhNZ1BTQmlZV05yWldSTmIyUmxiQzVpWVdOcmFXNW5VM1J2Y21VdVpXNTFiV1Z5WVhSbFMyVjVjMFp2Y2xaaGJIVmxjME5vWVc1blpXUlViMDUxYkd3b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR3RsZVNCdlppQnJaWGx6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlU1MWJHeFdZV3gxWlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1ZlZ4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlZbUZqYTJsdVoxTjBiM0psVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2xCeWIzaDVSbUZqZEc5eWVTNXFjeTV0WVhBaUxDSnBiWEJ2Y25RZ2V5QlFZWEp6WlU1dlpHVkdZV04wYjNKNVVtVm5hWE4wY25rc0lGTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSkdZV04wYjNKNVVtVm5hWE4wY25rc0lIMGdabkp2YlNCY0lpNHZjMlZ5YVdGc2FYcGhkR2x2Ymx3aU8xeHVhVzF3YjNKMElIc2dRbUZqYTJsdVoxTjBiM0psVUdGeWMyVk9iMlJsUm1GamRHOXllU3dnUW1GamEybHVaMU4wYjNKbFUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNsQnliM2g1Um1GamRHOXllU3dnZlNCbWNtOXRJRndpTGk5emRHOXlaVndpTzF4dUx5b3FYRzRnS2lCU1pXZHBjM1JsY25NZ2RHaGxJR1JsWm1GMWJIUWdjMlZ5YVdGc2FYcGxjaUIwYnlCMGFHVWdjbVZuYVhOMGNua3VYRzRnS2lCQWNHRnlZVzBnZEhsd1pTQjBhR1VnWTJ4aGMzTWdiMllnZEdobElHWmhZM1J2Y25rZ2RHOGdZbVVnY21WbmFYTjBaWEpsWkM1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEpsWjJsemRHVnlSR1ZtWVhWc2RGTmxjbWxoYkdsNlpYSW9kSGx3WlNrZ2UxeHVJQ0FnSUdsbUlDZ2hkSGx3WlNsY2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVZIbHdaU0JwY3lCeVpYRjFhWEpsWkZ3aUtUdGNiaUFnSUNCamIyNXpkQ0J6WlhKcFlXeHBlbVZ5SUQwZ2JtVjNJSFI1Y0dVb0tUdGNiaUFnSUNCVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVZKbFoybHpkSEo1TG1SbFptRjFiSFJKYm5OMFlXNWpaUzVqYjI1MFpXNTBWSGx3WlVGemMyOWphV0YwWldSR1lXTjBiM0pwWlhNdWMyVjBLSE5sY21saGJHbDZaWEl1WjJWMFZtRnNhV1JEYjI1MFpXNTBWSGx3WlNncExDQnpaWEpwWVd4cGVtVnlLVHRjYm4xY2JpOHFLbHh1SUNvZ1VtVm5hWE4wWlhKeklIUm9aU0JrWldaaGRXeDBJR1JsYzJWeWFXRnNhWHBsY2lCMGJ5QjBhR1VnY21WbmFYTjBjbmt1WEc0Z0tpQkFjR0Z5WVcwZ2RIbHdaU0IwYUdVZ1kyeGhjM01nYjJZZ2RHaGxJR1poWTNSdmNua2dkRzhnWW1VZ2NtVm5hWE4wWlhKbFpDNWNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhKbFoybHpkR1Z5UkdWbVlYVnNkRVJsYzJWeWFXRnNhWHBsY2loMGVYQmxLU0I3WEc0Z0lDQWdhV1lnS0NGMGVYQmxLVnh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pVZVhCbElHbHpJSEpsY1hWcGNtVmtYQ0lwTzF4dUlDQWdJR052Ym5OMElHUmxjMlZ5YVdGc2FYcGxjaUE5SUc1bGR5QjBlWEJsS0NrN1hHNGdJQ0FnVUdGeWMyVk9iMlJsUm1GamRHOXllVkpsWjJsemRISjVMbVJsWm1GMWJIUkpibk4wWVc1alpTNWpiMjUwWlc1MFZIbHdaVUZ6YzI5amFXRjBaV1JHWVdOMGIzSnBaWE11YzJWMEtHUmxjMlZ5YVdGc2FYcGxjaTVuWlhSV1lXeHBaRU52Ym5SbGJuUlVlWEJsS0Nrc0lHUmxjMlZ5YVdGc2FYcGxjaWs3WEc1OVhHNHZLaXBjYmlBcUlFVnVZV0pzWlhNZ2RHaGxJR0poWTJ0cGJtY2djM1J2Y21VZ2IyNGdaR1ZtWVhWc2RDQnpaWEpwWVd4cGVtRjBhVzl1SUhkeWFYUmxjbk1nWVc1a0lIUm9aU0JuYVhabGJpQnpaWEpwWVd4cGVtRjBhVzl1SUhkeWFYUmxjaTVjYmlBcUlFQndZWEpoYlNCdmNtbG5hVzVoYkNCVWFHVWdjMlZ5YVdGc2FYcGhkR2x2YmlCM2NtbDBaWElnZEc4Z1pXNWhZbXhsSUhSb1pTQmlZV05yYVc1bklITjBiM0psSUc5dUxseHVJQ29nUUhKbGRIVnliaUJCSUc1bGR5QnpaWEpwWVd4cGVtRjBhVzl1SUhkeWFYUmxjaUIzYVhSb0lIUm9aU0JpWVdOcmFXNW5JSE4wYjNKbElHVnVZV0pzWldRdVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJsYm1GaWJHVkNZV05yYVc1blUzUnZjbVZHYjNKVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVNodmNtbG5hVzVoYkNrZ2UxeHVJQ0FnSUdsbUlDZ2hiM0pwWjJsdVlXd3BYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJazl5YVdkcGJtRnNJRzExYzNRZ1ltVWdjM0JsWTJsbWFXVmtYQ0lwTzF4dUlDQWdJR3hsZENCeVpYTjFiSFFnUFNCdmNtbG5hVzVoYkR0Y2JpQWdJQ0JwWmlBb2IzSnBaMmx1WVd3Z2FXNXpkR0Z1WTJWdlppQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlSbUZqZEc5eWVWSmxaMmx6ZEhKNUtTQjdYRzRnSUNBZ0lDQWdJR1Z1WVdKc1pVSmhZMnRwYm1kVGRHOXlaVVp2Y2xObGNtbGhiR2w2WVhScGIyNVNaV2RwYzNSeWVTaHZjbWxuYVc1aGJDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0J1WlhjZ1FtRmphMmx1WjFOMGIzSmxVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjbEJ5YjNoNVJtRmpkRzl5ZVNodmNtbG5hVzVoYkNrN1hHNGdJQ0FnZlZ4dUlDQWdJR1Z1WVdKc1pVSmhZMnRwYm1kVGRHOXlaVVp2Y2xObGNtbGhiR2w2WVhScGIyNVNaV2RwYzNSeWVTaFRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlSbUZqZEc5eWVWSmxaMmx6ZEhKNUxtUmxabUYxYkhSSmJuTjBZVzVqWlNrN1hHNGdJQ0FnWlc1aFlteGxRbUZqYTJsdVoxTjBiM0psUm05eVVHRnljMlZPYjJSbFVtVm5hWE4wY25rb1VHRnljMlZPYjJSbFJtRmpkRzl5ZVZKbFoybHpkSEo1TG1SbFptRjFiSFJKYm5OMFlXNWpaU2s3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMWNiaThxS2x4dUlDb2dSVzVoWW14bGN5QjBhR1VnWW1GamEybHVaeUJ6ZEc5eVpTQnZiaUJrWldaaGRXeDBJSEJoY25ObElHNXZaR1VnWm1GamRHOXlhV1Z6SUdGdVpDQjBhR1VnWjJsMlpXNGdjR0Z5YzJVZ2JtOWtaU0JtWVdOMGIzSjVMbHh1SUNvZ1FIQmhjbUZ0SUc5eWFXZHBibUZzSUZSb1pTQndZWEp6WlNCdWIyUmxJR1poWTNSdmNua2dkRzhnWlc1aFlteGxJSFJvWlNCaVlXTnJhVzVuSUhOMGIzSmxJRzl1TGx4dUlDb2dRSEpsZEhWeWJpQkJJRzVsZHlCd1lYSnpaU0J1YjJSbElHWmhZM1J2Y25rZ2QybDBhQ0IwYUdVZ1ltRmphMmx1WnlCemRHOXlaU0JsYm1GaWJHVmtMbHh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1pXNWhZbXhsUW1GamEybHVaMU4wYjNKbFJtOXlVR0Z5YzJWT2IyUmxSbUZqZEc5eWVTaHZjbWxuYVc1aGJDa2dlMXh1SUNBZ0lHbG1JQ2doYjNKcFoybHVZV3dwWEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWs5eWFXZHBibUZzSUcxMWMzUWdZbVVnYzNCbFkybG1hV1ZrWENJcE8xeHVJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQnZjbWxuYVc1aGJEdGNiaUFnSUNCcFppQW9iM0pwWjJsdVlXd2dhVzV6ZEdGdVkyVnZaaUJRWVhKelpVNXZaR1ZHWVdOMGIzSjVVbVZuYVhOMGNua3BJSHRjYmlBZ0lDQWdJQ0FnWlc1aFlteGxRbUZqYTJsdVoxTjBiM0psUm05eVVHRnljMlZPYjJSbFVtVm5hWE4wY25rb2IzSnBaMmx1WVd3cE8xeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdibVYzSUVKaFkydHBibWRUZEc5eVpWQmhjbk5sVG05a1pVWmhZM1J2Y25rb2IzSnBaMmx1WVd3cE8xeHVJQ0FnSUgxY2JpQWdJQ0JsYm1GaWJHVkNZV05yYVc1blUzUnZjbVZHYjNKUVlYSnpaVTV2WkdWU1pXZHBjM1J5ZVNoUVlYSnpaVTV2WkdWR1lXTjBiM0o1VW1WbmFYTjBjbmt1WkdWbVlYVnNkRWx1YzNSaGJtTmxLVHRjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVablZ1WTNScGIyNGdaVzVoWW14bFFtRmphMmx1WjFOMGIzSmxSbTl5VUdGeWMyVk9iMlJsVW1WbmFYTjBjbmtvY21WbmFYTjBjbmtwSUh0Y2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUZ0ckxDQjJYU0J2WmlCeVpXZHBjM1J5ZVM1amIyNTBaVzUwVkhsd1pVRnpjMjlqYVdGMFpXUkdZV04wYjNKcFpYTXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9kaUJwYm5OMFlXNWpaVzltSUVKaFkydHBibWRUZEc5eVpWQmhjbk5sVG05a1pVWmhZM1J2Y25rZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUhZZ2FXNXpkR0Z1WTJWdlppQlFZWEp6WlU1dlpHVkdZV04wYjNKNVVtVm5hWE4wY25rcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXZHBjM1J5ZVM1amIyNTBaVzUwVkhsd1pVRnpjMjlqYVdGMFpXUkdZV04wYjNKcFpYTXVjMlYwS0dzc0lHNWxkeUJDWVdOcmFXNW5VM1J2Y21WUVlYSnpaVTV2WkdWR1lXTjBiM0o1S0hZcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYm1aMWJtTjBhVzl1SUdWdVlXSnNaVUpoWTJ0cGJtZFRkRzl5WlVadmNsTmxjbWxoYkdsNllYUnBiMjVTWldkcGMzUnllU2h5WldkcGMzUnllU2tnZTF4dUlDQWdJR1p2Y2lBb1kyOXVjM1FnVzJzc0lIWmRJRzltSUhKbFoybHpkSEo1TG1OdmJuUmxiblJVZVhCbFFYTnpiMk5wWVhSbFpFWmhZM1J2Y21sbGN5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTaDJJR2x1YzNSaGJtTmxiMllnUW1GamEybHVaMU4wYjNKbFUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNsQnliM2g1Um1GamRHOXllU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdkaUJwYm5OMFlXNWpaVzltSUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhKR1lXTjBiM0o1VW1WbmFYTjBjbmtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldkcGMzUnllUzVqYjI1MFpXNTBWSGx3WlVGemMyOWphV0YwWldSR1lXTjBiM0pwWlhNdWMyVjBLR3NzSUc1bGR5QkNZV05yYVc1blUzUnZjbVZUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5VUhKdmVIbEdZV04wYjNKNUtIWXBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV0Z3YVVOc2FXVnVkRUoxYVd4a1pYSXVhbk11YldGd0lpd2lMeW9xSUZCaGNtVnVkQ0JwYm5SbGNtWmhZMlVnWm05eUlHVnljbTl5Y3lCMGFISnZkMjRnWW5rZ2RHaGxJR05zYVdWdWRDQjNhR1Z1SUhKbFkyVnBkbWx1WnlCbVlXbHNaV1FnY21WemNHOXVjMlZ6SUhSdklHbDBjeUJ5WlhGMVpYTjBjeTRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJCY0dsRmNuSnZjaUJsZUhSbGJtUnpJRVZ5Y205eUlIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHRaWE56WVdkbEtTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtHMWxjM05oWjJVcE8xeHVJQ0FnSUgxY2JuMWNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdGd2FVVnljbTl5TG1wekxtMWhjQ0lzSWk4cUtpQk5ZV2x1ZEdGcGJuTWdZU0JzYVhOMElHOW1JSFpoYkdsa0lHaHZjM1J6SUdGdVpDQmhiR3h2ZDNNZ1lYVjBhR1Z1ZEdsallYUnBiMjRnY0hKdmRtbGtaWEp6SUhSdklHTm9aV05ySUhkb1pYUm9aWElnWVNCb2IzTjBJR2x6SUhaaGJHbGtJR0psWm05eVpTQmhkWFJvWlc1MGFXTmhkR2x1WnlCaElISmxjWFZsYzNRZ0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCQmJHeHZkMlZrU0c5emRITldZV3hwWkdGMGIzSWdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU55WldGMFpYTWdZU0J1WlhjZ1FXeHNiM2RsWkVodmMzUnpWbUZzYVdSaGRHOXlJRzlpYW1WamRDQjNhWFJvSUhCeWIzWnBaR1ZrSUhaaGJIVmxjeTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZV3hzYjNkbFpFaHZjM1J6SUVFZ2JHbHpkQ0J2WmlCMllXeHBaQ0JvYjNOMGN5NGdJRWxtSUhSb1pTQnNhWE4wSUdseklHVnRjSFI1TENCaGJHd2dhRzl6ZEhNZ1lYSmxJSFpoYkdsa0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHRnNiRzkzWldSSWIzTjBjeUE5SUc1bGR5QlRaWFFvS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Gc2JHOTNaV1JJYjNOMGN5QTlJR0ZzYkc5M1pXUkliM04wY3lBaFBUMGdiblZzYkNBbUppQmhiR3h2ZDJWa1NHOXpkSE1nSVQwOUlIWnZhV1FnTUNBL0lHRnNiRzkzWldSSWIzTjBjeUE2SUc1bGR5QlRaWFFvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMGN5QjBhR1VnYkdsemRDQnZaaUIyWVd4cFpDQm9iM04wY3k0Z0lFbG1JSFJvWlNCc2FYTjBJR2x6SUdWdGNIUjVMQ0JoYkd3Z2FHOXpkSE1nWVhKbElIWmhiR2xrTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUVFZ2JHbHpkQ0J2WmlCMllXeHBaQ0JvYjNOMGN5NGdJRWxtSUhSb1pTQnNhWE4wSUdseklHVnRjSFI1TENCaGJHd2dhRzl6ZEhNZ1lYSmxJSFpoYkdsa0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRFRnNiRzkzWldSSWIzTjBjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVGeWNtRjVMbVp5YjIwb2RHaHBjeTVoYkd4dmQyVmtTRzl6ZEhNcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCc2FYTjBJRzltSUhaaGJHbGtJR2h2YzNSekxpQWdTV1lnZEdobElHeHBjM1FnYVhNZ1pXMXdkSGtzSUdGc2JDQm9iM04wY3lCaGNtVWdkbUZzYVdRdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdGc2JHOTNaV1JJYjNOMGN5QkJJR3hwYzNRZ2IyWWdkbUZzYVdRZ2FHOXpkSE11SUNCSlppQjBhR1VnYkdsemRDQnBjeUJsYlhCMGVTd2dZV3hzSUdodmMzUnpJR0Z5WlNCMllXeHBaQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJCYkd4dmQyVmtTRzl6ZEhNb1lXeHNiM2RsWkVodmMzUnpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV3hzYjNkbFpFaHZjM1J6SUQwZ1lXeHNiM2RsWkVodmMzUnpPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRhR1ZqYTNNZ2QyaGxkR2hsY2lCMGFHVWdjSEp2ZG1sa1pXUWdhRzl6ZENCcGN5QjJZV3hwWkM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZFhKc0lGUm9aU0IxY213Z2RHOGdZMmhsWTJzdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYVhOVmNteEliM04wVm1Gc2FXUW9kWEpzS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmWVR0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YxY213cFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtRnNiRzkzWldSSWIzTjBjeTV6YVhwbElEMDlQU0F3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5qYUdWdFpVRnVaRkpsYzNRZ1BTQjFjbXd1YzNCc2FYUW9YQ0k2THk5Y0lpazdYRzRnSUNBZ0lDQWdJR2xtSUNoelkyaGxiV1ZCYm1SU1pYTjBMbXhsYm1kMGFDQStQU0F5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlaWE4wSUQwZ2MyTm9aVzFsUVc1a1VtVnpkRnN4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFYTkliM04wUVc1a1VHRjBhRlpoYkdsa0tISmxjM1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0NGMWNtd3VjM1JoY25SelYybDBhQ2hjSW1oMGRIQmNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhCeWIzUnZZMjlzSUhKbGJHRjBhWFpsSUZWU1RDQmtiMjFoYVc0dWRHeGtMM0JoZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1selNHOXpkRUZ1WkZCaGRHaFdZV3hwWkNoMWNtd3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dlFIUnpMV2xuYm05eVpWeHVJQ0FnSUNBZ0lDQnBaaUFvZDJsdVpHOTNJQ1ltSUhkcGJtUnZkeTVzYjJOaGRHbHZiaUFtSmlCM2FXNWtiM2N1Ykc5allYUnBiMjR1YUc5emRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMlVuY21VZ2FXNGdZU0JpY205M2MyVnlMQ0JoYm1RZ2QyVW5jbVVnZFhOcGJtY2djR0YwYUhNZ2IyNXNlU0F1TGk5d1lYUm9MQ0F1TDNCaGRHZ3NJQzl3WVhSb0xDQmxkR011WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMEIwY3kxcFoyNXZjbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZzYkc5M1pXUkliM04wY3k1b1lYTW9LRjloSUQwZ2QybHVaRzkzTG14dlkyRjBhVzl1TG1odmMzUXBJRDA5UFNCdWRXeHNJSHg4SUY5aElEMDlQU0IyYjJsa0lEQWdQeUIyYjJsa0lEQWdPaUJmWVM1MGIweHZkMlZ5UTJGelpTZ3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdselNHOXpkRUZ1WkZCaGRHaFdZV3hwWkNoeVpYTjBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2h2YzNSQmJtUlNaWE4wSUQwZ2NtVnpkQzV6Y0d4cGRDaGNJaTljSWlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hvYjNOMFFXNWtVbVZ6ZEM1c1pXNW5kR2dnUGowZ01pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYUc5emRDQTlJR2h2YzNSQmJtUlNaWE4wV3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHaHZjM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhiR3h2ZDJWa1NHOXpkSE11YUdGektHaHZjM1F1ZEc5TWIzZGxja05oYzJVb0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV0ZzYkc5M1pXUkliM04wYzFaaGJHbGtZWFJ2Y2k1cWN5NXRZWEFpTENKbGVIQnZjblFnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZRY205MGIyTnZiQ2gxY213cElIdGNiaUFnSUNCcFppQW9JWFZ5YkM1MGIweHZZMkZzWlV4dmQyVnlRMkZ6WlNncExuTjBZWEowYzFkcGRHZ29KMmgwZEhCek9pOHZKeWtnSmlZZ0lYZHBibVJ2ZDFWeWJGTjBZWEowYzFkcGRHaElkSFJ3Y3lncEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RWFYwYUdWdWRHbGpZWFJwYjI0Z2MyTm9aVzFsSUdOaGJpQnZibXg1SUdKbElIVnpaV1FnZDJsMGFDQm9kSFJ3Y3lCeVpYRjFaWE4wY3ljcE8xeHVJQ0FnSUgxY2JuMWNibVoxYm1OMGFXOXVJSGRwYm1SdmQxVnliRk4wWVhKMGMxZHBkR2hJZEhSd2N5Z3BJSHRjYmlBZ0lDQXZMeUJBZEhNdGFXZHViM0psWEc0Z0lDQWdjbVYwZFhKdUlIZHBibVJ2ZHlBbUppQjNhVzVrYjNjdWJHOWpZWFJwYjI0Z0ppWWdkMmx1Wkc5M0xteHZZMkYwYVc5dUxuQnliM1J2WTI5c0xuUnZURzkzWlhKRFlYTmxLQ2tnSVQwOUlDZG9kSFJ3Y3pvbk8xeHVmVnh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OWRtRnNhV1JoZEdWUWNtOTBiMk52YkM1cWN5NXRZWEFpTENKcGJYQnZjblFnZXlCQmJHeHZkMlZrU0c5emRITldZV3hwWkdGMGIzSWdmU0JtY205dElGd2lMaTloYkd4dmQyVmtTRzl6ZEhOV1lXeHBaR0YwYjNKY0lqdGNibWx0Y0c5eWRDQjdJSFpoYkdsa1lYUmxVSEp2ZEc5amIyd2dmU0JtY205dElGd2lMaTkyWVd4cFpHRjBaVkJ5YjNSdlkyOXNYQ0k3WEc0dktpb2dRWFYwYUdWdWRHbGpZWFJsSUdFZ2NtVnhkV1Z6ZENCaWVTQjFjMmx1WnlCaGJpQkJVRWtnUzJWNUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1FYQnBTMlY1UVhWMGFHVnVkR2xqWVhScGIyNVFjbTkyYVdSbGNpQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRR052Ym5OMGNuVmpkRzl5SUVOeVpXRjBaWE1nWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdRWEJwUzJWNVFYVjBhR1Z1ZEdsallYUnBiMjVRY205MmFXUmxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmhjR2xMWlhrZ1ZHaGxJRUZRU1NCTFpYa2dkRzhnZFhObElHWnZjaUJoZFhSb1pXNTBhV05oZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCd1lYSmhiV1YwWlhKT1lXMWxJRlJvWlNCdVlXMWxJRzltSUhSb1pTQndZWEpoYldWMFpYSWdkRzhnZFhObElHWnZjaUJoZFhSb1pXNTBhV05oZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCc2IyTmhkR2x2YmlCVWFHVWdiRzlqWVhScGIyNGdiMllnZEdobElIQmhjbUZ0WlhSbGNpQjBieUIxYzJVZ1ptOXlJR0YxZEdobGJuUnBZMkYwYVc5dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJHbGtTRzl6ZEhNZ1ZHaGxJR2h2YzNSeklIUm9ZWFFnWVhKbElHRnNiRzkzWldRZ2RHOGdkWE5sSUhSb2FYTWdZWFYwYUdWdWRHbGpZWFJwYjI0Z2NISnZkbWxrWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loaGNHbExaWGtzSUhCaGNtRnRaWFJsY2s1aGJXVXNJR3h2WTJGMGFXOXVMQ0IyWVd4cFpFaHZjM1J6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhCcFMyVjVJRDBnWVhCcFMyVjVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhjbUZ0WlhSbGNrNWhiV1VnUFNCd1lYSmhiV1YwWlhKT1lXMWxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHZZMkYwYVc5dUlEMGdiRzlqWVhScGIyNDdYRzRnSUNBZ0lDQWdJR2xtSUNoaGNHbExaWGtnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0JoY0dsTFpYa2dQVDA5SUZ3aVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltRndhVXRsZVNCallXNXViM1FnWW1VZ2JuVnNiQ0J2Y2lCbGJYQjBlVndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvY0dGeVlXMWxkR1Z5VG1GdFpTQTlQVDBnZFc1a1pXWnBibVZrSUh4OElIQmhjbUZ0WlhSbGNrNWhiV1VnUFQwOUlGd2lYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkJoY21GdFpYUmxjazVoYldVZ1kyRnVibTkwSUdKbElHNTFiR3dnYjNJZ1pXMXdkSGxjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0d4dlkyRjBhVzl1SUNFOVBTQkJjR2xMWlhsTWIyTmhkR2x2Ymk1UmRXVnllVkJoY21GdFpYUmxjaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdiRzlqWVhScGIyNGdJVDA5SUVGd2FVdGxlVXh2WTJGMGFXOXVMa2hsWVdSbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWJHOWpZWFJwYjI0Z2JYVnpkQ0JpWlNCbGFYUm9aWElnVVhWbGNubFFZWEpoYldWMFpYSWdiM0lnU0dWaFpHVnlYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2FXUmhkRzl5SUQwZ2JtVjNJRUZzYkc5M1pXUkliM04wYzFaaGJHbGtZWFJ2Y2loMllXeHBaRWh2YzNSektUdGNiaUFnSUNCOVhHNGdJQ0FnWVhWMGFHVnVkR2xqWVhSbFVtVnhkV1Z6ZENoeVpYRjFaWE4wTENCY2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ1lXUmthWFJwYjI1aGJFRjFkR2hsYm5ScFkyRjBhVzl1UTI5dWRHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IxY213Z1BTQnlaWEYxWlhOMExsVlNURHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjFjbXdnZkh3Z0lYUm9hWE11ZG1Gc2FXUmhkRzl5TG1selZYSnNTRzl6ZEZaaGJHbGtLSFZ5YkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllXeHBaR0YwWlZCeWIzUnZZMjlzS0hWeWJDazdYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kR2hwY3k1c2IyTmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQkJjR2xMWlhsTWIyTmhkR2x2Ymk1UmRXVnllVkJoY21GdFpYUmxjanBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhGMVpYTjBMbFZTVENBclBWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvZFhKc0xtbHVaR1Y0VDJZb1hDSS9YQ0lwSUQwOVBTQXRNU0EvSUZ3aVAxd2lJRG9nWENJbVhDSXBJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHRnlZVzFsZEdWeVRtRnRaU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWoxY0lpQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Gd2FVdGxlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdRWEJwUzJWNVRHOWpZWFJwYjI0dVNHVmhaR1Z5T2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWEYxWlhOMExtaGxZV1JsY25OYmRHaHBjeTV3WVhKaGJXVjBaWEpPWVcxbFhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wTG1obFlXUmxjbk5iZEdocGN5NXdZWEpoYldWMFpYSk9ZVzFsWFM1d2RYTm9LSFJvYVhNdVlYQnBTMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZsYzNRdWFHVmhaR1Z5YzF0MGFHbHpMbkJoY21GdFpYUmxjazVoYldWZElEMGdXM1JvYVhNdVlYQnBTMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTzF4dUlDQWdJSDFjYm4xY2JpOHFLaUJVYUdVZ2JHOWpZWFJwYjI0Z1ptOXlJSFJvWlNCQlVFa2dhMlY1SUNvdlhHNWxlSEJ2Y25RZ2RtRnlJRUZ3YVV0bGVVeHZZMkYwYVc5dU8xeHVLR1oxYm1OMGFXOXVJQ2hCY0dsTFpYbE1iMk5oZEdsdmJpa2dlMXh1SUNBZ0lDOHFLaUJVYUdVZ1FWQkpJR3RsZVNCcGN5QnBiaUIwYUdVZ2NYVmxjbmtnY0dGeVlXMWxkR1Z5Y3lBcUwxeHVJQ0FnSUVGd2FVdGxlVXh2WTJGMGFXOXVXMEZ3YVV0bGVVeHZZMkYwYVc5dVcxd2lVWFZsY25sUVlYSmhiV1YwWlhKY0lsMGdQU0F3WFNBOUlGd2lVWFZsY25sUVlYSmhiV1YwWlhKY0lqdGNiaUFnSUNBdktpb2dWR2hsSUVGUVNTQnJaWGtnYVhNZ2FXNGdkR2hsSUdobFlXUmxjbk1nS2k5Y2JpQWdJQ0JCY0dsTFpYbE1iMk5oZEdsdmJsdEJjR2xMWlhsTWIyTmhkR2x2Ymx0Y0lraGxZV1JsY2x3aVhTQTlJREZkSUQwZ1hDSklaV0ZrWlhKY0lqdGNibjBwS0VGd2FVdGxlVXh2WTJGMGFXOXVJSHg4SUNoQmNHbExaWGxNYjJOaGRHbHZiaUE5SUh0OUtTazdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxaGNHbExaWGxCZFhSb1pXNTBhV05oZEdsdmJsQnliM1pwWkdWeUxtcHpMbTFoY0NJc0lpOHFLaUJVYUdseklHRjFkR2hsYm5ScFkyRjBhVzl1SUhCeWIzWnBaR1Z5SUdSdlpYTWdibTkwSUhCbGNtWnZjbTBnWVc1NUlHRjFkR2hsYm5ScFkyRjBhVzl1TGlBZ0lDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1FXNXZibmx0YjNWelFYVjBhR1Z1ZEdsallYUnBiMjVRY205MmFXUmxjaUI3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhWMGFHVnVkR2xqWVhSbFVtVnhkV1Z6ZENBOUlDaGNiaUFnSUNBZ0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0FnSUNBZ0lDQmZMQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MTFiblZ6WldRdGRtRnljMXh1SUNBZ0lDQWdJQ0JmTWlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JuMWNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdGdWIyNTViVzkxYzBGMWRHaGxiblJwWTJGMGFXOXVVSEp2ZG1sa1pYSXVhbk11YldGd0lpd2lMeW9xSUZCeWIzWnBaR1Z6SUdFZ1ltRnpaU0JqYkdGemN5Qm1iM0lnYVcxd2JHVnRaVzUwYVc1bklFRjFkR2hsYm5ScFkyRjBhVzl1VUhKdmRtbGtaWElnWm05eUlFSmxZWEpsY2lCMGIydGxiaUJ6WTJobGJXVXVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdRbUZ6WlVKbFlYSmxjbFJ2YTJWdVFYVjBhR1Z1ZEdsallYUnBiMjVRY205MmFXUmxjaUI3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZV05qWlhOelZHOXJaVzVRY205MmFXUmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR0ZqWTJWemMxUnZhMlZ1VUhKdmRtbGtaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWTJObGMzTlViMnRsYmxCeWIzWnBaR1Z5SUQwZ1lXTmpaWE56Vkc5clpXNVFjbTkyYVdSbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGRYUm9aVzUwYVdOaGRHVlNaWEYxWlhOMElEMGdZWE41Ym1NZ0tISmxjWFZsYzNRc0lHRmtaR2wwYVc5dVlXeEJkWFJvWlc1MGFXTmhkR2x2YmtOdmJuUmxlSFFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjbVZ4ZFdWemRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkpsY1hWbGMzUWdhVzVtYnlCallXNXViM1FnWW1VZ2JuVnNiRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoWkdScGRHbHZibUZzUVhWMGFHVnVkR2xqWVhScGIyNURiMjUwWlhoMElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRUYxZEdobGJuUnBZMkYwYVc5dVEyOXVkR1Y0ZEZ0Y0ltTnNZV2x0YzF3aVhTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUXVhR1ZoWkdWeWMxdENZWE5sUW1WaGNtVnlWRzlyWlc1QmRYUm9aVzUwYVdOaGRHbHZibEJ5YjNacFpHVnlMbUYxZEdodmNtbDZZWFJwYjI1SVpXRmtaWEpMWlhsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElISmxjWFZsYzNRdWFHVmhaR1Z5YzF0Q1lYTmxRbVZoY21WeVZHOXJaVzVCZFhSb1pXNTBhV05oZEdsdmJsQnliM1pwWkdWeUxtRjFkR2h2Y21sNllYUnBiMjVJWldGa1pYSkxaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z5WlhGMVpYTjBMbWhsWVdSbGNuTWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FoY21WeGRXVnpkQzVvWldGa1pYSnpXMEpoYzJWQ1pXRnlaWEpVYjJ0bGJrRjFkR2hsYm5ScFkyRjBhVzl1VUhKdmRtbGtaWEl1WVhWMGFHOXlhWHBoZEdsdmJraGxZV1JsY2t0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjBiMnRsYmlBOUlHRjNZV2wwSUhSb2FYTXVZV05qWlhOelZHOXJaVzVRY205MmFXUmxjaTVuWlhSQmRYUm9iM0pwZW1GMGFXOXVWRzlyWlc0b2NtVnhkV1Z6ZEM1VlVrd3NJR0ZrWkdsMGFXOXVZV3hCZFhSb1pXNTBhV05oZEdsdmJrTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY21WeGRXVnpkQzVvWldGa1pYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZsYzNRdWFHVmhaR1Z5Y3lBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHOXJaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ4ZFdWemRDNW9aV0ZrWlhKelcwSmhjMlZDWldGeVpYSlViMnRsYmtGMWRHaGxiblJwWTJGMGFXOXVVSEp2ZG1sa1pYSXVZWFYwYUc5eWFYcGhkR2x2YmtobFlXUmxja3RsZVYwZ1BTQmJZRUpsWVhKbGNpQWtlM1J2YTJWdWZXQmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzU5WEc1Q1lYTmxRbVZoY21WeVZHOXJaVzVCZFhSb1pXNTBhV05oZEdsdmJsQnliM1pwWkdWeUxtRjFkR2h2Y21sNllYUnBiMjVJWldGa1pYSkxaWGtnUFNCY0lrRjFkR2h2Y21sNllYUnBiMjVjSWp0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV0poYzJWQ1pXRnlaWEpVYjJ0bGJrRjFkR2hsYm5ScFkyRjBhVzl1VUhKdmRtbGtaWEl1YW5NdWJXRndJaXdpTHlwY2JpQXFJRU52Y0hseWFXZG9kQ0JVYUdVZ1QzQmxibFJsYkdWdFpYUnllU0JCZFhSb2IzSnpYRzRnS2x4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjYmlBcUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaUFxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdJQ0FnYUhSMGNITTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2JpQXFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1SUNvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1SUNvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JpOHZJRlZ3WkdGMFpYTWdkRzhnZEdocGN5Qm1hV3hsSUhOb2IzVnNaQ0JoYkhOdklHSmxJSEpsY0d4cFkyRjBaV1FnZEc4Z1FHOXdaVzUwWld4bGJXVjBjbmt2WTI5eVpTQjBiMjh1WEc0dktpcGNiaUFxSUMwZ1oyeHZZbUZzVkdocGN5QW9UbVYzSUhOMFlXNWtZWEprS1Z4dUlDb2dMU0J6Wld4bUlDaFhhV3hzSUhKbGRIVnliaUIwYUdVZ1kzVnljbVZ1ZENCM2FXNWtiM2NnYVc1emRHRnVZMlVnWm05eUlITjFjSEJ2Y25SbFpDQmljbTkzYzJWeWN5bGNiaUFxSUMwZ2QybHVaRzkzSUNobVlXeHNZbUZqYXlCbWIzSWdiMnhrWlhJZ1luSnZkM05sY2lCcGJYQnNaVzFsYm5SaGRHbHZibk1wWEc0Z0tpQXRJR2RzYjJKaGJDQW9UbTlrWlVwVElHbHRjR3hsYldWdWRHRjBhVzl1S1Z4dUlDb2dMU0E4YjJKcVpXTjBQaUFvVjJobGJpQmhiR3dnWld4elpTQm1ZV2xzY3lsY2JpQXFMMXh1THlvcUlHOXViSGtnWjJ4dlltRnNjeUIwYUdGMElHTnZiVzF2YmlCMGJ5QnViMlJsSUdGdVpDQmljbTkzYzJWeWN5QmhjbVVnWVd4c2IzZGxaQ0FxTDF4dUx5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZaR1V2Ym04dGRXNXpkWEJ3YjNKMFpXUXRabVZoZEhWeVpYTXZaWE10WW5WcGJIUnBibk1zSUc1dkxYVnVaR1ZtWEc1bGVIQnZjblFnZG1GeUlGOW5iRzlpWVd4VWFHbHpJRDBnZEhsd1pXOW1JR2RzYjJKaGJGUm9hWE1nUFQwOUlDZHZZbXBsWTNRblhHNGdJQ0FnUHlCbmJHOWlZV3hVYUdselhHNGdJQ0FnT2lCMGVYQmxiMllnYzJWc1ppQTlQVDBnSjI5aWFtVmpkQ2RjYmlBZ0lDQWdJQ0FnUHlCelpXeG1YRzRnSUNBZ0lDQWdJRG9nZEhsd1pXOW1JSGRwYm1SdmR5QTlQVDBnSjI5aWFtVmpkQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdkMmx1Wkc5M1hHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUhSNWNHVnZaaUJuYkc5aVlXd2dQVDA5SUNkdlltcGxZM1FuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCbmJHOWlZV3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUh0OU8xeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WjJ4dlltRnNWR2hwY3k1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVMeThnZEdocGN5QnBjeUJoZFhSdloyVnVaWEpoZEdWa0lHWnBiR1VzSUhObFpTQnpZM0pwY0hSekwzWmxjbk5wYjI0dGRYQmtZWFJsTG1welhHNWxlSEJ2Y25RZ2RtRnlJRlpGVWxOSlQwNGdQU0FuTVM0MExqRW5PMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OWRtVnljMmx2Ymk1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVhVzF3YjNKMElIc2dWa1ZTVTBsUFRpQjlJR1p5YjIwZ0p5NHVMM1psY25OcGIyNG5PMXh1ZG1GeUlISmxJRDBnTDE0b1hGeGtLeWxjWEM0b1hGeGtLeWxjWEM0b1hGeGtLeWtvTFNndUt5a3BQeVF2TzF4dUx5b3FYRzRnS2lCRGNtVmhkR1VnWVNCbWRXNWpkR2x2YmlCMGJ5QjBaWE4wSUdGdUlFRlFTU0IyWlhKemFXOXVJSFJ2SUhObFpTQnBaaUJwZENCcGN5QmpiMjF3WVhScFlteGxJSGRwZEdnZ2RHaGxJSEJ5YjNacFpHVmtJRzkzYmxabGNuTnBiMjR1WEc0Z0tseHVJQ29nVkdobElISmxkSFZ5Ym1Wa0lHWjFibU4wYVc5dUlHaGhjeUIwYUdVZ1ptOXNiRzkzYVc1bklITmxiV0Z1ZEdsamN6cGNiaUFxSUMwZ1JYaGhZM1FnYldGMFkyZ2dhWE1nWVd4M1lYbHpJR052YlhCaGRHbGliR1ZjYmlBcUlDMGdUV0ZxYjNJZ2RtVnljMmx2Ym5NZ2JYVnpkQ0J0WVhSamFDQmxlR0ZqZEd4NVhHNGdLaUFnSUNBdElERXVlQ0J3WVdOcllXZGxJR05oYm01dmRDQjFjMlVnWjJ4dlltRnNJREl1ZUNCd1lXTnJZV2RsWEc0Z0tpQWdJQ0F0SURJdWVDQndZV05yWVdkbElHTmhibTV2ZENCMWMyVWdaMnh2WW1Gc0lERXVlQ0J3WVdOcllXZGxYRzRnS2lBdElGUm9aU0J0YVc1dmNpQjJaWEp6YVc5dUlHOW1JSFJvWlNCQlVFa2diVzlrZFd4bElISmxjWFZsYzNScGJtY2dZV05qWlhOeklIUnZJSFJvWlNCbmJHOWlZV3dnUVZCSklHMTFjM1FnWW1VZ2JHVnpjeUIwYUdGdUlHOXlJR1Z4ZFdGc0lIUnZJSFJvWlNCdGFXNXZjaUIyWlhKemFXOXVJRzltSUhSb2FYTWdRVkJKWEc0Z0tpQWdJQ0F0SURFdU15QndZV05yWVdkbElHMWhlU0IxYzJVZ01TNDBJR2RzYjJKaGJDQmlaV05oZFhObElIUm9aU0JzWVhSbGNpQm5iRzlpWVd3Z1kyOXVkR0ZwYm5NZ1lXeHNJR1oxYm1OMGFXOXVjeUF4TGpNZ1pYaHdaV04wYzF4dUlDb2dJQ0FnTFNBeExqUWdjR0ZqYTJGblpTQnRZWGtnVGs5VUlIVnpaU0F4TGpNZ1oyeHZZbUZzSUdKbFkyRjFjMlVnYVhRZ2JXRjVJSFJ5ZVNCMGJ5QmpZV3hzSUdaMWJtTjBhVzl1Y3lCM2FHbGphQ0JrYjI0bmRDQmxlR2x6ZENCdmJpQXhMak5jYmlBcUlDMGdTV1lnZEdobElHMWhhbTl5SUhabGNuTnBiMjRnYVhNZ01Dd2dkR2hsSUcxcGJtOXlJSFpsY25OcGIyNGdhWE1nZEhKbFlYUmxaQ0JoY3lCMGFHVWdiV0ZxYjNJZ1lXNWtJSFJvWlNCd1lYUmphQ0JwY3lCMGNtVmhkR1ZrSUdGeklIUm9aU0J0YVc1dmNseHVJQ29nTFNCUVlYUmphQ0JoYm1RZ1luVnBiR1FnZEdGbklHUnBabVpsY21WdVkyVnpJR0Z5WlNCdWIzUWdZMjl1YzJsa1pYSmxaQ0JoZENCMGFHbHpJSFJwYldWY2JpQXFYRzRnS2lCQWNHRnlZVzBnYjNkdVZtVnljMmx2YmlCMlpYSnphVzl1SUhkb2FXTm9JSE5vYjNWc1pDQmlaU0JqYUdWamEyVmtJR0ZuWVdsdWMzUmNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5dFlXdGxRMjl0Y0dGMGFXSnBiR2wwZVVOb1pXTnJLRzkzYmxabGNuTnBiMjRwSUh0Y2JpQWdJQ0IyWVhJZ1lXTmpaWEIwWldSV1pYSnphVzl1Y3lBOUlHNWxkeUJUWlhRb1cyOTNibFpsY25OcGIyNWRLVHRjYmlBZ0lDQjJZWElnY21WcVpXTjBaV1JXWlhKemFXOXVjeUE5SUc1bGR5QlRaWFFvS1R0Y2JpQWdJQ0IyWVhJZ2JYbFdaWEp6YVc5dVRXRjBZMmdnUFNCdmQyNVdaWEp6YVc5dUxtMWhkR05vS0hKbEtUdGNiaUFnSUNCcFppQW9JVzE1Vm1WeWMybHZiazFoZEdOb0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkbElHTmhibTV2ZENCbmRXRnlZVzUwWldVZ1kyOXRjR0YwYVdKcGJHbDBlU0J6YnlCM1pTQmhiSGRoZVhNZ2NtVjBkWEp1SUc1dmIzQmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJR1poYkhObE95QjlPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdiM2R1Vm1WeWMybHZibEJoY25ObFpDQTlJSHRjYmlBZ0lDQWdJQ0FnYldGcWIzSTZJQ3R0ZVZabGNuTnBiMjVOWVhSamFGc3hYU3hjYmlBZ0lDQWdJQ0FnYldsdWIzSTZJQ3R0ZVZabGNuTnBiMjVOWVhSamFGc3lYU3hjYmlBZ0lDQWdJQ0FnY0dGMFkyZzZJQ3R0ZVZabGNuTnBiMjVOWVhSamFGc3pYU3hjYmlBZ0lDQWdJQ0FnY0hKbGNtVnNaV0Z6WlRvZ2JYbFdaWEp6YVc5dVRXRjBZMmhiTkYwc1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2THlCcFppQnZkMjVXWlhKemFXOXVJR2hoY3lCaElIQnlaWEpsYkdWaGMyVWdkR0ZuTENCMlpYSnphVzl1Y3lCdGRYTjBJRzFoZEdOb0lHVjRZV04wYkhsY2JpQWdJQ0JwWmlBb2IzZHVWbVZ5YzJsdmJsQmhjbk5sWkM1d2NtVnlaV3hsWVhObElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHbHpSWGhoWTNSdFlYUmphQ2huYkc5aVlXeFdaWEp6YVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWjJ4dlltRnNWbVZ5YzJsdmJpQTlQVDBnYjNkdVZtVnljMmx2Ymp0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNGdJQ0FnWm5WdVkzUnBiMjRnWDNKbGFtVmpkQ2gyS1NCN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZEdWa1ZtVnljMmx2Ym5NdVlXUmtLSFlwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdaMWJtTjBhVzl1SUY5aFkyTmxjSFFvZGlrZ2UxeHVJQ0FnSUNBZ0lDQmhZMk5sY0hSbFpGWmxjbk5wYjI1ekxtRmtaQ2gyS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJwYzBOdmJYQmhkR2xpYkdVb1oyeHZZbUZzVm1WeWMybHZiaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZV05qWlhCMFpXUldaWEp6YVc5dWN5NW9ZWE1vWjJ4dlltRnNWbVZ5YzJsdmJpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV3BsWTNSbFpGWmxjbk5wYjI1ekxtaGhjeWhuYkc5aVlXeFdaWEp6YVc5dUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQm5iRzlpWVd4V1pYSnphVzl1VFdGMFkyZ2dQU0JuYkc5aVlXeFdaWEp6YVc5dUxtMWhkR05vS0hKbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGbmJHOWlZV3hXWlhKemFXOXVUV0YwWTJncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTmhibTV2ZENCd1lYSnpaU0J2ZEdobGNpQjJaWEp6YVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCM1pTQmpZVzV1YjNRZ1ozVmhjbUZ1ZEdWbElHTnZiWEJoZEdsaWFXeHBkSGtnYzI4Z2QyVWdZV3gzWVhseklHNXZiM0JjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmNtVnFaV04wS0dkc2IySmhiRlpsY25OcGIyNHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQm5iRzlpWVd4V1pYSnphVzl1VUdGeWMyVmtJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV0ZxYjNJNklDdG5iRzlpWVd4V1pYSnphVzl1VFdGMFkyaGJNVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRhVzV2Y2pvZ0syZHNiMkpoYkZabGNuTnBiMjVOWVhSamFGc3lYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkR05vT2lBcloyeHZZbUZzVm1WeWMybHZiazFoZEdOb1d6TmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISmxjbVZzWldGelpUb2daMnh2WW1Gc1ZtVnljMmx2YmsxaGRHTm9XelJkTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQXZMeUJwWmlCbmJHOWlZV3hXWlhKemFXOXVJR2hoY3lCaElIQnlaWEpsYkdWaGMyVWdkR0ZuTENCMlpYSnphVzl1Y3lCdGRYTjBJRzFoZEdOb0lHVjRZV04wYkhsY2JpQWdJQ0FnSUNBZ2FXWWdLR2RzYjJKaGJGWmxjbk5wYjI1UVlYSnpaV1F1Y0hKbGNtVnNaV0Z6WlNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM0psYW1WamRDaG5iRzlpWVd4V1pYSnphVzl1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJ0WVdwdmNpQjJaWEp6YVc5dWN5QnRkWE4wSUcxaGRHTm9YRzRnSUNBZ0lDQWdJR2xtSUNodmQyNVdaWEp6YVc5dVVHRnljMlZrTG0xaGFtOXlJQ0U5UFNCbmJHOWlZV3hXWlhKemFXOXVVR0Z5YzJWa0xtMWhhbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM0psYW1WamRDaG5iRzlpWVd4V1pYSnphVzl1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYjNkdVZtVnljMmx2YmxCaGNuTmxaQzV0WVdwdmNpQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOTNibFpsY25OcGIyNVFZWEp6WldRdWJXbHViM0lnUFQwOUlHZHNiMkpoYkZabGNuTnBiMjVRWVhKelpXUXViV2x1YjNJZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZkMjVXWlhKemFXOXVVR0Z5YzJWa0xuQmhkR05vSUR3OUlHZHNiMkpoYkZabGNuTnBiMjVRWVhKelpXUXVjR0YwWTJncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyRmpZMlZ3ZENobmJHOWlZV3hXWlhKemFXOXVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmY21WcVpXTjBLR2RzYjJKaGJGWmxjbk5wYjI0cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNodmQyNVdaWEp6YVc5dVVHRnljMlZrTG0xcGJtOXlJRHc5SUdkc2IySmhiRlpsY25OcGIyNVFZWEp6WldRdWJXbHViM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZZV05qWlhCMEtHZHNiMkpoYkZabGNuTnBiMjRwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmNtVnFaV04wS0dkc2IySmhiRlpsY25OcGIyNHBPMXh1SUNBZ0lIMDdYRzU5WEc0dktpcGNiaUFxSUZSbGMzUWdZVzRnUVZCSklIWmxjbk5wYjI0Z2RHOGdjMlZsSUdsbUlHbDBJR2x6SUdOdmJYQmhkR2xpYkdVZ2QybDBhQ0IwYUdseklFRlFTUzVjYmlBcVhHNGdLaUF0SUVWNFlXTjBJRzFoZEdOb0lHbHpJR0ZzZDJGNWN5QmpiMjF3WVhScFlteGxYRzRnS2lBdElFMWhhbTl5SUhabGNuTnBiMjV6SUcxMWMzUWdiV0YwWTJnZ1pYaGhZM1JzZVZ4dUlDb2dJQ0FnTFNBeExuZ2djR0ZqYTJGblpTQmpZVzV1YjNRZ2RYTmxJR2RzYjJKaGJDQXlMbmdnY0dGamEyRm5aVnh1SUNvZ0lDQWdMU0F5TG5nZ2NHRmphMkZuWlNCallXNXViM1FnZFhObElHZHNiMkpoYkNBeExuZ2djR0ZqYTJGblpWeHVJQ29nTFNCVWFHVWdiV2x1YjNJZ2RtVnljMmx2YmlCdlppQjBhR1VnUVZCSklHMXZaSFZzWlNCeVpYRjFaWE4wYVc1bklHRmpZMlZ6Y3lCMGJ5QjBhR1VnWjJ4dlltRnNJRUZRU1NCdGRYTjBJR0psSUd4bGMzTWdkR2hoYmlCdmNpQmxjWFZoYkNCMGJ5QjBhR1VnYldsdWIzSWdkbVZ5YzJsdmJpQnZaaUIwYUdseklFRlFTVnh1SUNvZ0lDQWdMU0F4TGpNZ2NHRmphMkZuWlNCdFlYa2dkWE5sSURFdU5DQm5iRzlpWVd3Z1ltVmpZWFZ6WlNCMGFHVWdiR0YwWlhJZ1oyeHZZbUZzSUdOdmJuUmhhVzV6SUdGc2JDQm1kVzVqZEdsdmJuTWdNUzR6SUdWNGNHVmpkSE5jYmlBcUlDQWdJQzBnTVM0MElIQmhZMnRoWjJVZ2JXRjVJRTVQVkNCMWMyVWdNUzR6SUdkc2IySmhiQ0JpWldOaGRYTmxJR2wwSUcxaGVTQjBjbmtnZEc4Z1kyRnNiQ0JtZFc1amRHbHZibk1nZDJocFkyZ2daRzl1SjNRZ1pYaHBjM1FnYjI0Z01TNHpYRzRnS2lBdElFbG1JSFJvWlNCdFlXcHZjaUIyWlhKemFXOXVJR2x6SURBc0lIUm9aU0J0YVc1dmNpQjJaWEp6YVc5dUlHbHpJSFJ5WldGMFpXUWdZWE1nZEdobElHMWhhbTl5SUdGdVpDQjBhR1VnY0dGMFkyZ2dhWE1nZEhKbFlYUmxaQ0JoY3lCMGFHVWdiV2x1YjNKY2JpQXFJQzBnVUdGMFkyZ2dZVzVrSUdKMWFXeGtJSFJoWnlCa2FXWm1aWEpsYm1ObGN5QmhjbVVnYm05MElHTnZibk5wWkdWeVpXUWdZWFFnZEdocGN5QjBhVzFsWEc0Z0tseHVJQ29nUUhCaGNtRnRJSFpsY25OcGIyNGdkbVZ5YzJsdmJpQnZaaUIwYUdVZ1FWQkpJSEpsY1hWbGMzUnBibWNnWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUdkc2IySmhiQ0JCVUVsY2JpQXFMMXh1Wlhod2IzSjBJSFpoY2lCcGMwTnZiWEJoZEdsaWJHVWdQU0JmYldGclpVTnZiWEJoZEdsaWFXeHBkSGxEYUdWamF5aFdSVkpUU1U5T0tUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFhObGJYWmxjaTVxY3k1dFlYQWlMQ0l2S2x4dUlDb2dRMjl3ZVhKcFoyaDBJRlJvWlNCUGNHVnVWR1ZzWlcxbGRISjVJRUYxZEdodmNuTmNiaUFxWEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1SUNvZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExseHVJQ29nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQWdJQ0JvZEhSd2N6b3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTENCemIyWjBkMkZ5WlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUlDb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRnS2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRnS2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWFXMXdiM0owSUhzZ1gyZHNiMkpoYkZSb2FYTWdmU0JtY205dElDY3VMaTl3YkdGMFptOXliU2M3WEc1cGJYQnZjblFnZXlCV1JWSlRTVTlPSUgwZ1puSnZiU0FuTGk0dmRtVnljMmx2YmljN1hHNXBiWEJ2Y25RZ2V5QnBjME52YlhCaGRHbGliR1VnZlNCbWNtOXRJQ2N1TDNObGJYWmxjaWM3WEc1MllYSWdiV0ZxYjNJZ1BTQldSVkpUU1U5T0xuTndiR2wwS0NjdUp5bGJNRjA3WEc1MllYSWdSMHhQUWtGTVgwOVFSVTVVUlV4RlRVVlVVbGxmUVZCSlgwdEZXU0E5SUZONWJXSnZiQzVtYjNJb1hDSnZjR1Z1ZEdWc1pXMWxkSEo1TG1wekxtRndhUzVjSWlBcklHMWhhbTl5S1R0Y2JuWmhjaUJmWjJ4dlltRnNJRDBnWDJkc2IySmhiRlJvYVhNN1hHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NtVm5hWE4wWlhKSGJHOWlZV3dvZEhsd1pTd2dhVzV6ZEdGdVkyVXNJR1JwWVdjc0lHRnNiRzkzVDNabGNuSnBaR1VwSUh0Y2JpQWdJQ0IyWVhJZ1gyRTdYRzRnSUNBZ2FXWWdLR0ZzYkc5M1QzWmxjbkpwWkdVZ1BUMDlJSFp2YVdRZ01Da2dleUJoYkd4dmQwOTJaWEp5YVdSbElEMGdabUZzYzJVN0lIMWNiaUFnSUNCMllYSWdZWEJwSUQwZ0tGOW5iRzlpWVd4YlIweFBRa0ZNWDA5UVJVNVVSVXhGVFVWVVVsbGZRVkJKWDB0RldWMGdQU0FvWDJFZ1BTQmZaMnh2WW1Gc1cwZE1UMEpCVEY5UFVFVk9WRVZNUlUxRlZGSlpYMEZRU1Y5TFJWbGRLU0FoUFQwZ2JuVnNiQ0FtSmlCZllTQWhQVDBnZG05cFpDQXdJRDhnWDJFZ09pQjdYRzRnSUNBZ0lDQWdJSFpsY25OcGIyNDZJRlpGVWxOSlQwNHNYRzRnSUNBZ2ZTazdYRzRnSUNBZ2FXWWdLQ0ZoYkd4dmQwOTJaWEp5YVdSbElDWW1JR0Z3YVZ0MGVYQmxYU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QmhiSEpsWVdSNUlISmxaMmx6ZEdWeVpXUWdZVzRnUVZCSklHOW1JSFJvYVhNZ2RIbHdaVnh1SUNBZ0lDQWdJQ0IyWVhJZ1pYSnlJRDBnYm1WM0lFVnljbTl5S0Z3aVFHOXdaVzUwWld4bGJXVjBjbmt2WVhCcE9pQkJkSFJsYlhCMFpXUWdaSFZ3YkdsallYUmxJSEpsWjJsemRISmhkR2x2YmlCdlppQkJVRWs2SUZ3aUlDc2dkSGx3WlNrN1hHNGdJQ0FnSUNBZ0lHUnBZV2N1WlhKeWIzSW9aWEp5TG5OMFlXTnJJSHg4SUdWeWNpNXRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWVhCcExuWmxjbk5wYjI0Z0lUMDlJRlpGVWxOSlQwNHBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1FXeHNJSEpsWjJsemRHVnlaV1FnUVZCSmN5QnRkWE4wSUdKbElHOW1JSFJvWlNCellXMWxJSFpsY25OcGIyNGdaWGhoWTNSc2VWeHVJQ0FnSUNBZ0lDQjJZWElnWlhKeUlEMGdibVYzSUVWeWNtOXlLRndpUUc5d1pXNTBaV3hsYldWMGNua3ZZWEJwT2lCU1pXZHBjM1J5WVhScGIyNGdiMllnZG1WeWMybHZiaUIyWENJZ0t5QmhjR2t1ZG1WeWMybHZiaUFySUZ3aUlHWnZjaUJjSWlBcklIUjVjR1VnS3lCY0lpQmtiMlZ6SUc1dmRDQnRZWFJqYUNCd2NtVjJhVzkxYzJ4NUlISmxaMmx6ZEdWeVpXUWdRVkJKSUhaY0lpQXJJRlpGVWxOSlQwNHBPMXh1SUNBZ0lDQWdJQ0JrYVdGbkxtVnljbTl5S0dWeWNpNXpkR0ZqYXlCOGZDQmxjbkl1YldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJQ0FnWVhCcFczUjVjR1ZkSUQwZ2FXNXpkR0Z1WTJVN1hHNGdJQ0FnWkdsaFp5NWtaV0oxWnloY0lrQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FUb2dVbVZuYVhOMFpYSmxaQ0JoSUdkc2IySmhiQ0JtYjNJZ1hDSWdLeUIwZVhCbElDc2dYQ0lnZGx3aUlDc2dWa1ZTVTBsUFRpQXJJRndpTGx3aUtUdGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibjFjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSSGJHOWlZV3dvZEhsd1pTa2dlMXh1SUNBZ0lIWmhjaUJmWVN3Z1gySTdYRzRnSUNBZ2RtRnlJR2RzYjJKaGJGWmxjbk5wYjI0Z1BTQW9YMkVnUFNCZloyeHZZbUZzVzBkTVQwSkJURjlQVUVWT1ZFVk1SVTFGVkZKWlgwRlFTVjlMUlZsZEtTQTlQVDBnYm5Wc2JDQjhmQ0JmWVNBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dYMkV1ZG1WeWMybHZianRjYmlBZ0lDQnBaaUFvSVdkc2IySmhiRlpsY25OcGIyNGdmSHdnSVdselEyOXRjR0YwYVdKc1pTaG5iRzlpWVd4V1pYSnphVzl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQW9YMklnUFNCZloyeHZZbUZzVzBkTVQwSkJURjlQVUVWT1ZFVk1SVTFGVkZKWlgwRlFTVjlMUlZsZEtTQTlQVDBnYm5Wc2JDQjhmQ0JmWWlBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dYMkpiZEhsd1pWMDdYRzU5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnZFc1eVpXZHBjM1JsY2tkc2IySmhiQ2gwZVhCbExDQmthV0ZuS1NCN1hHNGdJQ0FnWkdsaFp5NWtaV0oxWnloY0lrQnZjR1Z1ZEdWc1pXMWxkSEo1TDJGd2FUb2dWVzV5WldkcGMzUmxjbWx1WnlCaElHZHNiMkpoYkNCbWIzSWdYQ0lnS3lCMGVYQmxJQ3NnWENJZ2Rsd2lJQ3NnVmtWU1UwbFBUaUFySUZ3aUxsd2lLVHRjYmlBZ0lDQjJZWElnWVhCcElEMGdYMmRzYjJKaGJGdEhURTlDUVV4ZlQxQkZUbFJGVEVWTlJWUlNXVjlCVUVsZlMwVlpYVHRjYmlBZ0lDQnBaaUFvWVhCcEtTQjdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQmhjR2xiZEhsd1pWMDdYRzRnSUNBZ2ZWeHVmVnh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVoyeHZZbUZzTFhWMGFXeHpMbXB6TG0xaGNDSXNJaThxWEc0Z0tpQkRiM0I1Y21sbmFIUWdWR2hsSUU5d1pXNVVaV3hsYldWMGNua2dRWFYwYUc5eWMxeHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdJR2gwZEhCek9pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEc0Z0tpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaUFxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaUFxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1MllYSWdYMTl5WldGa0lEMGdLSFJvYVhNZ0ppWWdkR2hwY3k1ZlgzSmxZV1FwSUh4OElHWjFibU4wYVc5dUlDaHZMQ0J1S1NCN1hHNGdJQ0FnZG1GeUlHMGdQU0IwZVhCbGIyWWdVM2x0WW05c0lEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdiMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRPMXh1SUNBZ0lHbG1JQ2doYlNrZ2NtVjBkWEp1SUc4N1hHNGdJQ0FnZG1GeUlHa2dQU0J0TG1OaGJHd29ieWtzSUhJc0lHRnlJRDBnVzEwc0lHVTdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ2h1SUQwOVBTQjJiMmxrSURBZ2ZId2diaTB0SUQ0Z01Da2dKaVlnSVNoeUlEMGdhUzV1WlhoMEtDa3BMbVJ2Ym1VcElHRnlMbkIxYzJnb2NpNTJZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR05oZEdOb0lDaGxjbkp2Y2lrZ2V5QmxJRDBnZXlCbGNuSnZjam9nWlhKeWIzSWdmVHNnZlZ4dUlDQWdJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISWdKaVlnSVhJdVpHOXVaU0FtSmlBb2JTQTlJR2xiWENKeVpYUjFjbTVjSWwwcEtTQnRMbU5oYkd3b2FTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3SUdsbUlDaGxLU0IwYUhKdmR5QmxMbVZ5Y205eU95QjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJoY2p0Y2JuMDdYRzUyWVhJZ1gxOXpjSEpsWVdSQmNuSmhlU0E5SUNoMGFHbHpJQ1ltSUhSb2FYTXVYMTl6Y0hKbFlXUkJjbkpoZVNrZ2ZId2dablZ1WTNScGIyNGdLSFJ2TENCbWNtOXRMQ0J3WVdOcktTQjdYRzRnSUNBZ2FXWWdLSEJoWTJzZ2ZId2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTWlrZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQm1jbTl0TG14bGJtZDBhQ3dnWVhJN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnlJSHg4SUNFb2FTQnBiaUJtY205dEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZoY2lrZ1lYSWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2htY205dExDQXdMQ0JwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5VzJsZElEMGdabkp2YlZ0cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEc4dVkyOXVZMkYwS0dGeUlIeDhJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLR1p5YjIwcEtUdGNibjA3WEc1cGJYQnZjblFnZXlCblpYUkhiRzlpWVd3Z2ZTQm1jbTl0SUNjdUxpOXBiblJsY201aGJDOW5iRzlpWVd3dGRYUnBiSE1uTzF4dUx5b3FYRzRnS2lCRGIyMXdiMjVsYm5RZ1RHOW5aMlZ5SUhkb2FXTm9JR2x6SUcxbFlXNTBJSFJ2SUdKbElIVnpaV1FnWVhNZ2NHRnlkQ0J2WmlCaGJua2dZMjl0Y0c5dVpXNTBJSGRvYVdOb1hHNGdLaUIzYVd4c0lHRmtaQ0JoZFhSdmJXRjBhV05oYkd4NUlHRmtaR2wwYVc5dVlXd2dibUZ0WlhOd1lXTmxJR2x1SUdaeWIyNTBJRzltSUhSb1pTQnNiMmNnYldWemMyRm5aUzVjYmlBcUlFbDBJSGRwYkd3Z2RHaGxiaUJtYjNKM1lYSmtJR0ZzYkNCdFpYTnpZV2RsSUhSdklHZHNiMkpoYkNCa2FXRm5JR3h2WjJkbGNseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlHTnZibk4wSUdOTWIyZG5aWElnUFNCa2FXRm5MbU55WldGMFpVTnZiWEJ2Ym1WdWRFeHZaMmRsY2loN0lHNWhiV1Z6Y0dGalpUb2dKMEJ2Y0dWdWRHVnNaVzFsZEhKNUwybHVjM1J5ZFcxbGJuUmhkR2x2Ymkxb2RIUndKeUI5S1R0Y2JpQXFJR05NYjJkblpYSXVaR1ZpZFdjb0ozUmxjM1FuS1R0Y2JpQXFJQzh2SUVCdmNHVnVkR1ZzWlcxbGRISjVMMmx1YzNSeWRXMWxiblJoZEdsdmJpMW9kSFJ3SUhSbGMzUmNiaUFxTDF4dWRtRnlJRVJwWVdkRGIyMXdiMjVsYm5STWIyZG5aWElnUFNBdktpb2dRR05zWVhOeklDb3ZJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnUkdsaFowTnZiWEJ2Ym1WdWRFeHZaMmRsY2lod2NtOXdjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl1WVcxbGMzQmhZMlVnUFNCd2NtOXdjeTV1WVcxbGMzQmhZMlVnZkh3Z0owUnBZV2REYjIxd2IyNWxiblJNYjJkblpYSW5PMXh1SUNBZ0lIMWNiaUFnSUNCRWFXRm5RMjl0Y0c5dVpXNTBURzluWjJWeUxuQnliM1J2ZEhsd1pTNWtaV0oxWnlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRnlaM01nUFNCYlhUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdYMmtnUFNBd095QmZhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUY5cEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlaM05iWDJsZElEMGdZWEpuZFcxbGJuUnpXMTlwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JHOW5VSEp2ZUhrb0oyUmxZblZuSnl3Z2RHaHBjeTVmYm1GdFpYTndZV05sTENCaGNtZHpLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lFUnBZV2REYjIxd2IyNWxiblJNYjJkblpYSXVjSEp2ZEc5MGVYQmxMbVZ5Y205eUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZWEpuY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJmYVNBOUlEQTdJRjlwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ1gya3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZWEpuYzF0ZmFWMGdQU0JoY21kMWJXVnVkSE5iWDJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnNiMmRRY205NGVTZ25aWEp5YjNJbkxDQjBhR2x6TGw5dVlXMWxjM0JoWTJVc0lHRnlaM01wTzF4dUlDQWdJSDA3WEc0Z0lDQWdSR2xoWjBOdmJYQnZibVZ1ZEV4dloyZGxjaTV3Y205MGIzUjVjR1V1YVc1bWJ5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnWDJrZ1BTQXdPeUJmYVNBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lGOXBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNOYlgybGRJRDBnWVhKbmRXMWxiblJ6VzE5cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiRzluVUhKdmVIa29KMmx1Wm04bkxDQjBhR2x6TGw5dVlXMWxjM0JoWTJVc0lHRnlaM01wTzF4dUlDQWdJSDA3WEc0Z0lDQWdSR2xoWjBOdmJYQnZibVZ1ZEV4dloyZGxjaTV3Y205MGIzUjVjR1V1ZDJGeWJpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnWDJrZ1BTQXdPeUJmYVNBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lGOXBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNOYlgybGRJRDBnWVhKbmRXMWxiblJ6VzE5cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiRzluVUhKdmVIa29KM2RoY200bkxDQjBhR2x6TGw5dVlXMWxjM0JoWTJVc0lHRnlaM01wTzF4dUlDQWdJSDA3WEc0Z0lDQWdSR2xoWjBOdmJYQnZibVZ1ZEV4dloyZGxjaTV3Y205MGIzUjVjR1V1ZG1WeVltOXpaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGeVozTWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1gya2dQU0F3T3lCZmFTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJRjlwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeVozTmJYMmxkSUQwZ1lYSm5kVzFsYm5SelcxOXBYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYkc5blVISnZlSGtvSjNabGNtSnZjMlVuTENCMGFHbHpMbDl1WVcxbGMzQmhZMlVzSUdGeVozTXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUVScFlXZERiMjF3YjI1bGJuUk1iMmRuWlhJN1hHNTlLQ2twTzF4dVpYaHdiM0owSUhzZ1JHbGhaME52YlhCdmJtVnVkRXh2WjJkbGNpQjlPMXh1Wm5WdVkzUnBiMjRnYkc5blVISnZlSGtvWm5WdVkwNWhiV1VzSUc1aGJXVnpjR0ZqWlN3Z1lYSm5jeWtnZTF4dUlDQWdJSFpoY2lCc2IyZG5aWElnUFNCblpYUkhiRzlpWVd3b0oyUnBZV2NuS1R0Y2JpQWdJQ0F2THlCemFHOXlkR04xZENCcFppQnNiMmRuWlhJZ2JtOTBJSE5sZEZ4dUlDQWdJR2xtSUNnaGJHOW5aMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdZWEpuY3k1MWJuTm9hV1owS0c1aGJXVnpjR0ZqWlNrN1hHNGdJQ0FnY21WMGRYSnVJR3h2WjJkbGNsdG1kVzVqVG1GdFpWMHVZWEJ3Ykhrb2JHOW5aMlZ5TENCZlgzTndjbVZoWkVGeWNtRjVLRnRkTENCZlgzSmxZV1FvWVhKbmN5a3NJR1poYkhObEtTazdYRzU5WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMURiMjF3YjI1bGJuUk1iMmRuWlhJdWFuTXViV0Z3SWl3aUx5cGNiaUFxSUVOdmNIbHlhV2RvZENCVWFHVWdUM0JsYmxSbGJHVnRaWFJ5ZVNCQmRYUm9iM0p6WEc0Z0tseHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2JpQXFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlBcUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnSUNBZ2FIUjBjSE02THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5d2djMjltZEhkaGNtVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaUFxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUlDb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUlDb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNiaThxS2x4dUlDb2dSR1ZtYVc1bGN5QjBhR1VnWVhaaGFXeGhZbXhsSUdsdWRHVnlibUZzSUd4dloyZHBibWNnYkdWMlpXeHpJR1p2Y2lCMGFHVWdaR2xoWjI1dmMzUnBZeUJzYjJkblpYSXNJSFJvWlNCdWRXMWxjbWxqSUhaaGJIVmxjMXh1SUNvZ2IyWWdkR2hsSUd4bGRtVnNjeUJoY21VZ1pHVm1hVzVsWkNCMGJ5QnRZWFJqYUNCMGFHVWdiM0pwWjJsdVlXd2dkbUZzZFdWeklHWnliMjBnZEdobElHbHVhWFJwWVd3Z1RHOW5UR1YyWld3Z2RHOGdZWFp2YVdSY2JpQXFJR052YlhCaGRHbGlhV3hwZEhrdmJXbG5jbUYwYVc5dUlHbHpjM1ZsY3lCbWIzSWdZVzU1SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJSFJvWVhRZ1lYTnpkVzFsSUhSb1pTQnVkVzFsY21saklHOXlaR1Z5YVc1bkxseHVJQ292WEc1bGVIQnZjblFnZG1GeUlFUnBZV2RNYjJkTVpYWmxiRHRjYmlobWRXNWpkR2x2YmlBb1JHbGhaMHh2WjB4bGRtVnNLU0I3WEc0Z0lDQWdMeW9xSUVScFlXZHViM04wYVdNZ1RHOW5aMmx1WnlCc1pYWmxiQ0J6WlhSMGFXNW5JSFJ2SUdScGMyRmliR1VnWVd4c0lHeHZaMmRwYm1jZ0tHVjRZMlZ3ZENCaGJtUWdabTl5WTJWa0lHeHZaM01wSUNvdlhHNGdJQ0FnUkdsaFoweHZaMHhsZG1Wc1cwUnBZV2RNYjJkTVpYWmxiRnRjSWs1UFRrVmNJbDBnUFNBd1hTQTlJRndpVGs5T1JWd2lPMXh1SUNBZ0lDOHFLaUJKWkdWdWRHbG1hV1Z6SUdGdUlHVnljbTl5SUhOalpXNWhjbWx2SUNvdlhHNGdJQ0FnUkdsaFoweHZaMHhsZG1Wc1cwUnBZV2RNYjJkTVpYWmxiRnRjSWtWU1VrOVNYQ0pkSUQwZ016QmRJRDBnWENKRlVsSlBVbHdpTzF4dUlDQWdJQzhxS2lCSlpHVnVkR2xtYVdWeklHRWdkMkZ5Ym1sdVp5QnpZMlZ1WVhKcGJ5QXFMMXh1SUNBZ0lFUnBZV2RNYjJkTVpYWmxiRnRFYVdGblRHOW5UR1YyWld4YlhDSlhRVkpPWENKZElEMGdOVEJkSUQwZ1hDSlhRVkpPWENJN1hHNGdJQ0FnTHlvcUlFZGxibVZ5WVd3Z2FXNW1iM0p0WVhScGIyNWhiQ0JzYjJjZ2JXVnpjMkZuWlNBcUwxeHVJQ0FnSUVScFlXZE1iMmRNWlhabGJGdEVhV0ZuVEc5blRHVjJaV3hiWENKSlRrWlBYQ0pkSUQwZ05qQmRJRDBnWENKSlRrWlBYQ0k3WEc0Z0lDQWdMeW9xSUVkbGJtVnlZV3dnWkdWaWRXY2diRzluSUcxbGMzTmhaMlVnS2k5Y2JpQWdJQ0JFYVdGblRHOW5UR1YyWld4YlJHbGhaMHh2WjB4bGRtVnNXMXdpUkVWQ1ZVZGNJbDBnUFNBM01GMGdQU0JjSWtSRlFsVkhYQ0k3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUkdWMFlXbHNaV1FnZEhKaFkyVWdiR1YyWld3Z2JHOW5aMmx1WnlCemFHOTFiR1FnYjI1c2VTQmlaU0IxYzJWa0lHWnZjaUJrWlhabGJHOXdiV1Z1ZEN3Z2MyaHZkV3hrSUc5dWJIa2dZbVVnYzJWMFhHNGdJQ0FnSUNvZ2FXNGdZU0JrWlhabGJHOXdiV1Z1ZENCbGJuWnBjbTl1YldWdWRDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCRWFXRm5URzluVEdWMlpXeGJSR2xoWjB4dloweGxkbVZzVzF3aVZrVlNRazlUUlZ3aVhTQTlJRGd3WFNBOUlGd2lWa1ZTUWs5VFJWd2lPMXh1SUNBZ0lDOHFLaUJWYzJWa0lIUnZJSE5sZENCMGFHVWdiRzluWjJsdVp5QnNaWFpsYkNCMGJ5QnBibU5zZFdSbElHRnNiQ0JzYjJkbmFXNW5JQ292WEc0Z0lDQWdSR2xoWjB4dloweGxkbVZzVzBScFlXZE1iMmRNWlhabGJGdGNJa0ZNVEZ3aVhTQTlJRGs1T1RsZElEMGdYQ0pCVEV4Y0lqdGNibjBwS0VScFlXZE1iMmRNWlhabGJDQjhmQ0FvUkdsaFoweHZaMHhsZG1Wc0lEMGdlMzBwS1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QWFI1Y0dWekxtcHpMbTFoY0NJc0lpOHFYRzRnS2lCRGIzQjVjbWxuYUhRZ1ZHaGxJRTl3Wlc1VVpXeGxiV1YwY25rZ1FYVjBhRzl5YzF4dUlDcGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUNBZ0lHaDBkSEJ6T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRnS2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2JpQXFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2JpQXFJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdleUJFYVdGblRHOW5UR1YyWld3Z2ZTQm1jbTl0SUNjdUxpOTBlWEJsY3ljN1hHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kzSmxZWFJsVEc5blRHVjJaV3hFYVdGblRHOW5aMlZ5S0cxaGVFeGxkbVZzTENCc2IyZG5aWElwSUh0Y2JpQWdJQ0JwWmlBb2JXRjRUR1YyWld3Z1BDQkVhV0ZuVEc5blRHVjJaV3d1VGs5T1JTa2dlMXh1SUNBZ0lDQWdJQ0J0WVhoTVpYWmxiQ0E5SUVScFlXZE1iMmRNWlhabGJDNU9UMDVGTzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUdsbUlDaHRZWGhNWlhabGJDQStJRVJwWVdkTWIyZE1aWFpsYkM1QlRFd3BJSHRjYmlBZ0lDQWdJQ0FnYldGNFRHVjJaV3dnUFNCRWFXRm5URzluVEdWMlpXd3VRVXhNTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJKYmlCallYTmxJSFJvWlNCc2IyZG5aWElnYVhNZ2JuVnNiQ0J2Y2lCMWJtUmxabWx1WldSY2JpQWdJQ0JzYjJkblpYSWdQU0JzYjJkblpYSWdmSHdnZTMwN1hHNGdJQ0FnWm5WdVkzUnBiMjRnWDJacGJIUmxja1oxYm1Nb1puVnVZMDVoYldVc0lIUm9aVXhsZG1Wc0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMGFHVkdkVzVqSUQwZ2JHOW5aMlZ5VzJaMWJtTk9ZVzFsWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjBhR1ZHZFc1aklEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHMWhlRXhsZG1Wc0lENDlJSFJvWlV4bGRtVnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaGxSblZ1WXk1aWFXNWtLR3h2WjJkbGNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUhzZ2ZUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnWlhKeWIzSTZJRjltYVd4MFpYSkdkVzVqS0NkbGNuSnZjaWNzSUVScFlXZE1iMmRNWlhabGJDNUZVbEpQVWlrc1hHNGdJQ0FnSUNBZ0lIZGhjbTQ2SUY5bWFXeDBaWEpHZFc1aktDZDNZWEp1Snl3Z1JHbGhaMHh2WjB4bGRtVnNMbGRCVWs0cExGeHVJQ0FnSUNBZ0lDQnBibVp2T2lCZlptbHNkR1Z5Um5WdVl5Z25hVzVtYnljc0lFUnBZV2RNYjJkTVpYWmxiQzVKVGtaUEtTeGNiaUFnSUNBZ0lDQWdaR1ZpZFdjNklGOW1hV3gwWlhKR2RXNWpLQ2RrWldKMVp5Y3NJRVJwWVdkTWIyZE1aWFpsYkM1RVJVSlZSeWtzWEc0Z0lDQWdJQ0FnSUhabGNtSnZjMlU2SUY5bWFXeDBaWEpHZFc1aktDZDJaWEppYjNObEp5d2dSR2xoWjB4dloweGxkbVZzTGxaRlVrSlBVMFVwTEZ4dUlDQWdJSDA3WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFzYjJkTVpYWmxiRXh2WjJkbGNpNXFjeTV0WVhBaUxDSXZLbHh1SUNvZ1EyOXdlWEpwWjJoMElGUm9aU0JQY0dWdVZHVnNaVzFsZEhKNUlFRjFkR2h2Y25OY2JpQXFYRzRnS2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVJQ29nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUlDb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNBZ0lDQm9kSFJ3Y3pvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1ZG1GeUlGOWZjbVZoWkNBOUlDaDBhR2x6SUNZbUlIUm9hWE11WDE5eVpXRmtLU0I4ZkNCbWRXNWpkR2x2YmlBb2J5d2diaWtnZTF4dUlDQWdJSFpoY2lCdElEMGdkSGx3Wlc5bUlGTjViV0p2YkNBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHOWJVM2x0WW05c0xtbDBaWEpoZEc5eVhUdGNiaUFnSUNCcFppQW9JVzBwSUhKbGRIVnliaUJ2TzF4dUlDQWdJSFpoY2lCcElEMGdiUzVqWVd4c0tHOHBMQ0J5TENCaGNpQTlJRnRkTENCbE8xeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDZ29iaUE5UFQwZ2RtOXBaQ0F3SUh4OElHNHRMU0ErSURBcElDWW1JQ0VvY2lBOUlHa3VibVY0ZENncEtTNWtiMjVsS1NCaGNpNXdkWE5vS0hJdWRtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ0lDQmpZWFJqYUNBb1pYSnliM0lwSUhzZ1pTQTlJSHNnWlhKeWIzSTZJR1Z5Y205eUlIMDdJSDFjYmlBZ0lDQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlDWW1JQ0Z5TG1SdmJtVWdKaVlnS0cwZ1BTQnBXMXdpY21WMGRYSnVYQ0pkS1NrZ2JTNWpZV3hzS0drcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1pwYm1Gc2JIa2dleUJwWmlBb1pTa2dkR2h5YjNjZ1pTNWxjbkp2Y2pzZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZWEk3WEc1OU8xeHVkbUZ5SUY5ZmMzQnlaV0ZrUVhKeVlYa2dQU0FvZEdocGN5QW1KaUIwYUdsekxsOWZjM0J5WldGa1FYSnlZWGtwSUh4OElHWjFibU4wYVc5dUlDaDBieXdnWm5KdmJTd2djR0ZqYXlrZ2UxeHVJQ0FnSUdsbUlDaHdZV05ySUh4OElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJRElwSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1puSnZiUzVzWlc1bmRHZ3NJR0Z5T3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoaGNpQjhmQ0FoS0drZ2FXNGdabkp2YlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hZWElwSUdGeUlEMGdRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29abkp2YlN3Z01Dd2dhU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbHRwWFNBOUlHWnliMjFiYVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJ2TG1OdmJtTmhkQ2hoY2lCOGZDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaG1jbTl0S1NrN1hHNTlPMXh1YVcxd2IzSjBJSHNnUkdsaFowTnZiWEJ2Ym1WdWRFeHZaMmRsY2lCOUlHWnliMjBnSnk0dUwyUnBZV2N2UTI5dGNHOXVaVzUwVEc5bloyVnlKenRjYm1sdGNHOXlkQ0I3SUdOeVpXRjBaVXh2WjB4bGRtVnNSR2xoWjB4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDJScFlXY3ZhVzUwWlhKdVlXd3ZiRzluVEdWMlpXeE1iMmRuWlhJbk8xeHVhVzF3YjNKMElIc2dSR2xoWjB4dloweGxkbVZzTENCOUlHWnliMjBnSnk0dUwyUnBZV2N2ZEhsd1pYTW5PMXh1YVcxd2IzSjBJSHNnWjJWMFIyeHZZbUZzTENCeVpXZHBjM1JsY2tkc2IySmhiQ3dnZFc1eVpXZHBjM1JsY2tkc2IySmhiQ3dnZlNCbWNtOXRJQ2N1TGk5cGJuUmxjbTVoYkM5bmJHOWlZV3d0ZFhScGJITW5PMXh1ZG1GeUlFRlFTVjlPUVUxRklEMGdKMlJwWVdjbk8xeHVMeW9xWEc0Z0tpQlRhVzVuYkdWMGIyNGdiMkpxWldOMElIZG9hV05vSUhKbGNISmxjMlZ1ZEhNZ2RHaGxJR1Z1ZEhKNUlIQnZhVzUwSUhSdklIUm9aU0JQY0dWdVZHVnNaVzFsZEhKNUlHbHVkR1Z5Ym1Gc1hHNGdLaUJrYVdGbmJtOXpkR2xqSUVGUVNWeHVJQ292WEc1MllYSWdSR2xoWjBGUVNTQTlJQzhxS2lCQVkyeGhjM01nS2k4Z0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJRY21sMllYUmxJR2x1ZEdWeWJtRnNJR052Ym5OMGNuVmpkRzl5WEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQm1kVzVqZEdsdmJpQkVhV0ZuUVZCSktDa2dlMXh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJmYkc5blVISnZlSGtvWm5WdVkwNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRnlaM01nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmZhU0E5SURBN0lGOXBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnWDJrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtZHpXMTlwWFNBOUlHRnlaM1Z0Wlc1MGMxdGZhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnNiMmRuWlhJZ1BTQm5aWFJIYkc5aVlXd29KMlJwWVdjbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6YUc5eWRHTjFkQ0JwWmlCc2IyZG5aWElnYm05MElITmxkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGJHOW5aMlZ5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4dloyZGxjbHRtZFc1alRtRnRaVjB1WVhCd2JIa29iRzluWjJWeUxDQmZYM053Y21WaFpFRnljbUY1S0Z0ZExDQmZYM0psWVdRb1lYSm5jeWtzSUdaaGJITmxLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklGVnphVzVuSUhObGJHWWdiRzlqWVd3Z2RtRnlhV0ZpYkdVZ1ptOXlJRzFwYm1sbWFXTmhkR2x2YmlCd2RYSndiM05sY3lCaGN5QW5kR2hwY3ljZ1kyRnVibTkwSUdKbElHMXBibWxtYVdWa1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ0x5OGdSR2xoWjBGUVNTQnpjR1ZqYVdacFl5Qm1kVzVqZEdsdmJuTmNiaUFnSUNBZ0lDQWdkbUZ5SUhObGRFeHZaMmRsY2lBOUlHWjFibU4wYVc5dUlDaHNiMmRuWlhJc0lHOXdkR2x2Ym5OUGNreHZaMHhsZG1Wc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYMkVzSUY5aUxDQmZZenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpUM0pNYjJkTVpYWmxiQ0E5UFQwZ2RtOXBaQ0F3S1NCN0lHOXdkR2x2Ym5OUGNreHZaMHhsZG1Wc0lEMGdleUJzYjJkTVpYWmxiRG9nUkdsaFoweHZaMHhsZG1Wc0xrbE9SazhnZlRzZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHeHZaMmRsY2lBOVBUMGdjMlZzWmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvWlhKbElHbHpiaWQwSUcxMVkyZ2dkMlVnWTJGdUlHUnZJR2hsY21VdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdURzluWjJsdVp5QjBieUIwYUdVZ1kyOXVjMjlzWlNCdGFXZG9kQ0JpY21WaGF5QjBhR1VnZFhObGNpQmhjSEJzYVdOaGRHbHZiaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWNua2dkRzhnYkc5bklIUnZJSE5sYkdZdUlFbG1JR0VnYkc5bloyVnlJSGRoY3lCd2NtVjJhVzkxYzJ4NUlISmxaMmx6ZEdWeVpXUWdhWFFnZDJsc2JDQnlaV05sYVhabElIUm9aU0JzYjJjdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z5Y2lBOUlHNWxkeUJGY25KdmNpZ25RMkZ1Ym05MElIVnpaU0JrYVdGbklHRnpJSFJvWlNCc2IyZG5aWElnWm05eUlHbDBjMlZzWmk0Z1VHeGxZWE5sSUhWelpTQmhJRVJwWVdkTWIyZG5aWElnYVcxd2JHVnRaVzUwWVhScGIyNGdiR2xyWlNCRGIyNXpiMnhsUkdsaFoweHZaMmRsY2lCdmNpQmhJR04xYzNSdmJTQnBiWEJzWlcxbGJuUmhkR2x2YmljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WlhKeWIzSW9LRjloSUQwZ1pYSnlMbk4wWVdOcktTQWhQVDBnYm5Wc2JDQW1KaUJmWVNBaFBUMGdkbTlwWkNBd0lEOGdYMkVnT2lCbGNuSXViV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1elQzSk1iMmRNWlhabGJDQTlQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6VDNKTWIyZE1aWFpsYkNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5blRHVjJaV3c2SUc5d2RHbHZibk5QY2t4dloweGxkbVZzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjJ4a1RHOW5aMlZ5SUQwZ1oyVjBSMnh2WW1Gc0tDZGthV0ZuSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JtVjNURzluWjJWeUlEMGdZM0psWVhSbFRHOW5UR1YyWld4RWFXRm5URzluWjJWeUtDaGZZaUE5SUc5d2RHbHZibk5QY2t4dloweGxkbVZzTG14dloweGxkbVZzS1NBaFBUMGdiblZzYkNBbUppQmZZaUFoUFQwZ2RtOXBaQ0F3SUQ4Z1gySWdPaUJFYVdGblRHOW5UR1YyWld3dVNVNUdUeXdnYkc5bloyVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvWlhKbElHRnNjbVZoWkhrZ2FYTWdZVzRnYkc5bloyVnlJSEpsWjJsemRHVnlaV1F1SUZkbEoyeHNJR3hsZENCcGRDQnJibTkzSUdKbFptOXlaU0J2ZG1WeWQzSnBkR2x1WnlCcGRDNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZiR1JNYjJkblpYSWdKaVlnSVc5d2RHbHZibk5QY2t4dloweGxkbVZzTG5OMWNIQnlaWE56VDNabGNuSnBaR1ZOWlhOellXZGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjBZV05ySUQwZ0tGOWpJRDBnYm1WM0lFVnljbTl5S0NrdWMzUmhZMnNwSUNFOVBTQnVkV3hzSUNZbUlGOWpJQ0U5UFNCMmIybGtJREFnUHlCZll5QTZJQ2M4Wm1GcGJHVmtJSFJ2SUdkbGJtVnlZWFJsSUhOMFlXTnJkSEpoWTJVK0p6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZiR1JNYjJkblpYSXVkMkZ5YmloY0lrTjFjbkpsYm5RZ2JHOW5aMlZ5SUhkcGJHd2dZbVVnYjNabGNuZHlhWFIwWlc0Z1puSnZiU0JjSWlBcklITjBZV05yS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYZE1iMmRuWlhJdWQyRnliaWhjSWtOMWNuSmxiblFnYkc5bloyVnlJSGRwYkd3Z2IzWmxjbmR5YVhSbElHOXVaU0JoYkhKbFlXUjVJSEpsWjJsemRHVnlaV1FnWm5KdmJTQmNJaUFySUhOMFlXTnJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WldkcGMzUmxja2RzYjJKaGJDZ25aR2xoWnljc0lHNWxkMHh2WjJkbGNpd2djMlZzWml3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lITmxiR1l1YzJWMFRHOW5aMlZ5SUQwZ2MyVjBURzluWjJWeU8xeHVJQ0FnSUNBZ0lDQnpaV3htTG1ScGMyRmliR1VnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMWJuSmxaMmx6ZEdWeVIyeHZZbUZzS0VGUVNWOU9RVTFGTENCelpXeG1LVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVqY21WaGRHVkRiMjF3YjI1bGJuUk1iMmRuWlhJZ1BTQm1kVzVqZEdsdmJpQW9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkVhV0ZuUTI5dGNHOXVaVzUwVEc5bloyVnlLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCelpXeG1MblpsY21KdmMyVWdQU0JmYkc5blVISnZlSGtvSjNabGNtSnZjMlVuS1R0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVrWldKMVp5QTlJRjlzYjJkUWNtOTRlU2duWkdWaWRXY25LVHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNXBibVp2SUQwZ1gyeHZaMUJ5YjNoNUtDZHBibVp2SnlrN1hHNGdJQ0FnSUNBZ0lITmxiR1l1ZDJGeWJpQTlJRjlzYjJkUWNtOTRlU2duZDJGeWJpY3BPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxtVnljbTl5SUQwZ1gyeHZaMUJ5YjNoNUtDZGxjbkp2Y2ljcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lvZ1IyVjBJSFJvWlNCemFXNW5iR1YwYjI0Z2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUVScFlXZEJVRWtnUVZCSklDb3ZYRzRnSUNBZ1JHbGhaMEZRU1M1cGJuTjBZVzVqWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5cGJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhVzV6ZEdGdVkyVWdQU0J1WlhjZ1JHbGhaMEZRU1NncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJuTjBZVzVqWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQkVhV0ZuUVZCSk8xeHVmU2dwS1R0Y2JtVjRjRzl5ZENCN0lFUnBZV2RCVUVrZ2ZUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdScFlXY3Vhbk11YldGd0lpd2lMeXBjYmlBcUlFTnZjSGx5YVdkb2RDQlVhR1VnVDNCbGJsUmxiR1Z0WlhSeWVTQkJkWFJvYjNKelhHNGdLbHh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaUFxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ0lDQWdhSFIwY0hNNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlBcUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHVJQ29nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVJQ29nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYm5aaGNpQmZYM0psWVdRZ1BTQW9kR2hwY3lBbUppQjBhR2x6TGw5ZmNtVmhaQ2tnZkh3Z1puVnVZM1JwYjI0Z0tHOHNJRzRwSUh0Y2JpQWdJQ0IyWVhJZ2JTQTlJSFI1Y0dWdlppQlRlVzFpYjJ3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQnZXMU41YldKdmJDNXBkR1Z5WVhSdmNsMDdYRzRnSUNBZ2FXWWdLQ0Z0S1NCeVpYUjFjbTRnYnp0Y2JpQWdJQ0IyWVhJZ2FTQTlJRzB1WTJGc2JDaHZLU3dnY2l3Z1lYSWdQU0JiWFN3Z1pUdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9LRzRnUFQwOUlIWnZhV1FnTUNCOGZDQnVMUzBnUGlBd0tTQW1KaUFoS0hJZ1BTQnBMbTVsZUhRb0tTa3VaRzl1WlNrZ1lYSXVjSFZ6YUNoeUxuWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMkYwWTJnZ0tHVnljbTl5S1NCN0lHVWdQU0I3SUdWeWNtOXlPaUJsY25KdmNpQjlPeUI5WEc0Z0lDQWdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQW1KaUFoY2k1a2IyNWxJQ1ltSUNodElEMGdhVnRjSW5KbGRIVnlibHdpWFNrcElHMHVZMkZzYkNocEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYVc1aGJHeDVJSHNnYVdZZ0tHVXBJSFJvY205M0lHVXVaWEp5YjNJN0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR0Z5TzF4dWZUdGNiblpoY2lCZlgzWmhiSFZsY3lBOUlDaDBhR2x6SUNZbUlIUm9hWE11WDE5MllXeDFaWE1wSUh4OElHWjFibU4wYVc5dUtHOHBJSHRjYmlBZ0lDQjJZWElnY3lBOUlIUjVjR1Z2WmlCVGVXMWliMndnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCVGVXMWliMnd1YVhSbGNtRjBiM0lzSUcwZ1BTQnpJQ1ltSUc5YmMxMHNJR2tnUFNBd08xeHVJQ0FnSUdsbUlDaHRLU0J5WlhSMWNtNGdiUzVqWVd4c0tHOHBPMXh1SUNBZ0lHbG1JQ2h2SUNZbUlIUjVjR1Z2WmlCdkxteGxibWQwYUNBOVBUMGdYQ0p1ZFcxaVpYSmNJaWtnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnYm1WNGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c4Z0ppWWdhU0ErUFNCdkxteGxibWQwYUNrZ2J5QTlJSFp2YVdRZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3SUhaaGJIVmxPaUJ2SUNZbUlHOWJhU3NyWFN3Z1pHOXVaVG9nSVc4Z2ZUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaHpJRDhnWENKUFltcGxZM1FnYVhNZ2JtOTBJR2wwWlhKaFlteGxMbHdpSURvZ1hDSlRlVzFpYjJ3dWFYUmxjbUYwYjNJZ2FYTWdibTkwSUdSbFptbHVaV1F1WENJcE8xeHVmVHRjYm5aaGNpQkNZV2RuWVdkbFNXMXdiQ0E5SUM4cUtpQkFZMnhoYzNNZ0tpOGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJDWVdkbllXZGxTVzF3YkNobGJuUnlhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWdWRISnBaWE1nUFNCbGJuUnlhV1Z6SUQ4Z2JtVjNJRTFoY0NobGJuUnlhV1Z6S1NBNklHNWxkeUJOWVhBb0tUdGNiaUFnSUNCOVhHNGdJQ0FnUW1GbloyRm5aVWx0Y0d3dWNISnZkRzkwZVhCbExtZGxkRVZ1ZEhKNUlEMGdablZ1WTNScGIyNGdLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlc1MGNua2dQU0IwYUdsekxsOWxiblJ5YVdWekxtZGxkQ2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdWdWRISjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmxiblJ5ZVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JDWVdkbllXZGxTVzF3YkM1d2NtOTBiM1I1Y0dVdVoyVjBRV3hzUlc1MGNtbGxjeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFRnljbUY1TG1aeWIyMG9kR2hwY3k1ZlpXNTBjbWxsY3k1bGJuUnlhV1Z6S0NrcExtMWhjQ2htZFc1amRHbHZiaUFvWDJFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZZaUE5SUY5ZmNtVmhaQ2hmWVN3Z01pa3NJR3NnUFNCZllsc3dYU3dnZGlBOUlGOWlXekZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGdHJMQ0IyWFR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCQ1lXZG5ZV2RsU1cxd2JDNXdjbTkwYjNSNWNHVXVjMlYwUlc1MGNua2dQU0JtZFc1amRHbHZiaUFvYTJWNUxDQmxiblJ5ZVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1FtRm5aMkZuWlNBOUlHNWxkeUJDWVdkbllXZGxTVzF3YkNoMGFHbHpMbDlsYm5SeWFXVnpLVHRjYmlBZ0lDQWdJQ0FnYm1WM1FtRm5aMkZuWlM1ZlpXNTBjbWxsY3k1elpYUW9hMlY1TENCbGJuUnllU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhkQ1lXZG5ZV2RsTzF4dUlDQWdJSDA3WEc0Z0lDQWdRbUZuWjJGblpVbHRjR3d1Y0hKdmRHOTBlWEJsTG5KbGJXOTJaVVZ1ZEhKNUlEMGdablZ1WTNScGIyNGdLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1FtRm5aMkZuWlNBOUlHNWxkeUJDWVdkbllXZGxTVzF3YkNoMGFHbHpMbDlsYm5SeWFXVnpLVHRjYmlBZ0lDQWdJQ0FnYm1WM1FtRm5aMkZuWlM1ZlpXNTBjbWxsY3k1a1pXeGxkR1VvYTJWNUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkMEpoWjJkaFoyVTdYRzRnSUNBZ2ZUdGNiaUFnSUNCQ1lXZG5ZV2RsU1cxd2JDNXdjbTkwYjNSNWNHVXVjbVZ0YjNabFJXNTBjbWxsY3lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVmZNU3dnWDJFN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhseklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUY5cElEMGdNRHNnWDJrZ1BDQmhjbWQxYldWdWRITXViR1Z1WjNSb095QmZhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhselcxOXBYU0E5SUdGeVozVnRaVzUwYzF0ZmFWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlHNWxkMEpoWjJkaFoyVWdQU0J1WlhjZ1FtRm5aMkZuWlVsdGNHd29kR2hwY3k1ZlpXNTBjbWxsY3lrN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnJaWGx6WHpFZ1BTQmZYM1poYkhWbGN5aHJaWGx6S1N3Z2EyVjVjMTh4WHpFZ1BTQnJaWGx6WHpFdWJtVjRkQ2dwT3lBaGEyVjVjMTh4WHpFdVpHOXVaVHNnYTJWNWMxOHhYekVnUFNCclpYbHpYekV1Ym1WNGRDZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHdGxlU0E5SUd0bGVYTmZNVjh4TG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZDBKaFoyZGhaMlV1WDJWdWRISnBaWE11WkdWc1pYUmxLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyRjBZMmdnS0dWZk1WOHhLU0I3SUdWZk1TQTlJSHNnWlhKeWIzSTZJR1ZmTVY4eElIMDdJSDFjYmlBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHJaWGx6WHpGZk1TQW1KaUFoYTJWNWMxOHhYekV1Wkc5dVpTQW1KaUFvWDJFZ1BTQnJaWGx6WHpFdWNtVjBkWEp1S1NrZ1gyRXVZMkZzYkNoclpYbHpYekVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHVZV3hzZVNCN0lHbG1JQ2hsWHpFcElIUm9jbTkzSUdWZk1TNWxjbkp2Y2pzZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGRDWVdkbllXZGxPMXh1SUNBZ0lIMDdYRzRnSUNBZ1FtRm5aMkZuWlVsdGNHd3VjSEp2ZEc5MGVYQmxMbU5zWldGeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFSmhaMmRoWjJWSmJYQnNLQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1FtRm5aMkZuWlVsdGNHdzdYRzU5S0NrcE8xeHVaWGh3YjNKMElIc2dRbUZuWjJGblpVbHRjR3dnZlR0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV0poWjJkaFoyVXRhVzF3YkM1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVMeW9xWEc0Z0tpQlRlVzFpYjJ3Z2RYTmxaQ0IwYnlCdFlXdGxJRUpoWjJkaFoyVkZiblJ5ZVUxbGRHRmtZWFJoSUdGdUlHOXdZWEYxWlNCMGVYQmxYRzRnS2k5Y2JtVjRjRzl5ZENCMllYSWdZbUZuWjJGblpVVnVkSEo1VFdWMFlXUmhkR0ZUZVcxaWIyd2dQU0JUZVcxaWIyd29KMEpoWjJkaFoyVkZiblJ5ZVUxbGRHRmtZWFJoSnlrN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDF6ZVcxaWIyd3Vhbk11YldGd0lpd2lMeXBjYmlBcUlFTnZjSGx5YVdkb2RDQlVhR1VnVDNCbGJsUmxiR1Z0WlhSeWVTQkJkWFJvYjNKelhHNGdLbHh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaUFxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ0lDQWdhSFIwY0hNNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlBcUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHVJQ29nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVJQ29nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYm1sdGNHOXlkQ0I3SUVScFlXZEJVRWtnZlNCbWNtOXRJQ2N1TGk5aGNHa3ZaR2xoWnljN1hHNXBiWEJ2Y25RZ2V5QkNZV2RuWVdkbFNXMXdiQ0I5SUdaeWIyMGdKeTR2YVc1MFpYSnVZV3d2WW1GbloyRm5aUzFwYlhCc0p6dGNibWx0Y0c5eWRDQjdJR0poWjJkaFoyVkZiblJ5ZVUxbGRHRmtZWFJoVTNsdFltOXNJSDBnWm5KdmJTQW5MaTlwYm5SbGNtNWhiQzl6ZVcxaWIyd25PMXh1ZG1GeUlHUnBZV2NnUFNCRWFXRm5RVkJKTG1sdWMzUmhibU5sS0NrN1hHNHZLaXBjYmlBcUlFTnlaV0YwWlNCaElHNWxkeUJDWVdkbllXZGxJSGRwZEdnZ2IzQjBhVzl1WVd3Z1pXNTBjbWxsYzF4dUlDcGNiaUFxSUVCd1lYSmhiU0JsYm5SeWFXVnpJRUZ1SUdGeWNtRjVJRzltSUdKaFoyZGhaMlVnWlc1MGNtbGxjeUIwYUdVZ2JtVjNJR0poWjJkaFoyVWdjMmh2ZFd4a0lHTnZiblJoYVc1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpVSmhaMmRoWjJVb1pXNTBjbWxsY3lrZ2UxeHVJQ0FnSUdsbUlDaGxiblJ5YVdWeklEMDlQU0IyYjJsa0lEQXBJSHNnWlc1MGNtbGxjeUE5SUh0OU95QjlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkNZV2RuWVdkbFNXMXdiQ2h1WlhjZ1RXRndLRTlpYW1WamRDNWxiblJ5YVdWektHVnVkSEpwWlhNcEtTazdYRzU5WEc0dktpcGNiaUFxSUVOeVpXRjBaU0JoSUhObGNtbGhiR2w2WVdKc1pTQkNZV2RuWVdkbFJXNTBjbmxOWlhSaFpHRjBZU0J2WW1wbFkzUWdabkp2YlNCaElITjBjbWx1Wnk1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnYzNSeUlITjBjbWx1WnlCdFpYUmhaR0YwWVM0Z1JtOXliV0YwSUdseklHTjFjbkpsYm5Sc2VTQnViM1FnWkdWbWFXNWxaQ0JpZVNCMGFHVWdjM0JsWXlCaGJtUWdhR0Z6SUc1dklITndaV05wWVd3Z2JXVmhibWx1Wnk1Y2JpQXFYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCaVlXZG5ZV2RsUlc1MGNubE5aWFJoWkdGMFlVWnliMjFUZEhKcGJtY29jM1J5S1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCemRISWdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lHUnBZV2N1WlhKeWIzSW9YQ0pEWVc1dWIzUWdZM0psWVhSbElHSmhaMmRoWjJVZ2JXVjBZV1JoZEdFZ1puSnZiU0IxYm10dWIzZHVJSFI1Y0dVNklGd2lJQ3NnZEhsd1pXOW1JSE4wY2lrN1hHNGdJQ0FnSUNBZ0lITjBjaUE5SUNjbk8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0JmWDFSWlVFVmZYem9nWW1GbloyRm5aVVZ1ZEhKNVRXVjBZV1JoZEdGVGVXMWliMndzWEc0Z0lDQWdJQ0FnSUhSdlUzUnlhVzVuT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNSeU8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lIMDdYRzU5WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMTFkR2xzY3k1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVMeW9xSUVkbGRDQmhJR3RsZVNCMGJ5QjFibWx4ZFdWc2VTQnBaR1Z1ZEdsbWVTQmhJR052Ym5SbGVIUWdkbUZzZFdVZ0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWRGIyNTBaWGgwUzJWNUtHUmxjMk55YVhCMGFXOXVLU0I3WEc0Z0lDQWdMeThnVkdobElITndaV05wWm1sallYUnBiMjRnYzNSaGRHVnpJSFJvWVhRZ1ptOXlJSFJvWlNCellXMWxJR2x1Y0hWMExDQnRkV3gwYVhCc1pTQmpZV3hzY3lCemFHOTFiR1JjYmlBZ0lDQXZMeUJ5WlhSMWNtNGdaR2xtWm1WeVpXNTBJR3RsZVhNdUlFUjFaU0IwYnlCMGFHVWdibUYwZFhKbElHOW1JSFJvWlNCS1V5QmtaWEJsYm1SbGJtTjVJRzFoYm1GblpXMWxiblJjYmlBZ0lDQXZMeUJ6ZVhOMFpXMHNJSFJvYVhNZ1kzSmxZWFJsY3lCd2NtOWliR1Z0Y3lCM2FHVnlaU0J0ZFd4MGFYQnNaU0IyWlhKemFXOXVjeUJ2WmlCemIyMWxJSEJoWTJ0aFoyVmNiaUFnSUNBdkx5QmpiM1ZzWkNCb2IyeGtJR1JwWm1abGNtVnVkQ0JyWlhseklHWnZjaUIwYUdVZ2MyRnRaU0J3Y205d1pYSjBlUzVjYmlBZ0lDQXZMMXh1SUNBZ0lDOHZJRlJvWlhKbFptOXlaU3dnZDJVZ2RYTmxJRk41YldKdmJDNW1iM0lnZDJocFkyZ2djbVYwZFhKdWN5QjBhR1VnYzJGdFpTQnJaWGtnWm05eUlIUm9aU0J6WVcxbElHbHVjSFYwTGx4dUlDQWdJSEpsZEhWeWJpQlRlVzFpYjJ3dVptOXlLR1JsYzJOeWFYQjBhVzl1S1R0Y2JuMWNiblpoY2lCQ1lYTmxRMjl1ZEdWNGRDQTlJQzhxS2lCQVkyeGhjM01nS2k4Z0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYjI1emRISjFZM1FnWVNCdVpYY2dZMjl1ZEdWNGRDQjNhR2xqYUNCcGJtaGxjbWwwY3lCMllXeDFaWE1nWm5KdmJTQmhiaUJ2Y0hScGIyNWhiQ0J3WVhKbGJuUWdZMjl1ZEdWNGRDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCd1lYSmxiblJEYjI1MFpYaDBJR0VnWTI5dWRHVjRkQ0JtY205dElIZG9hV05vSUhSdklHbHVhR1Z5YVhRZ2RtRnNkV1Z6WEc0Z0lDQWdJQ292WEc0Z0lDQWdablZ1WTNScGIyNGdRbUZ6WlVOdmJuUmxlSFFvY0dGeVpXNTBRMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCbWIzSWdiV2x1YVdacFkyRjBhVzl1WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWZZM1Z5Y21WdWRFTnZiblJsZUhRZ1BTQndZWEpsYm5SRGIyNTBaWGgwSUQ4Z2JtVjNJRTFoY0Nod1lYSmxiblJEYjI1MFpYaDBLU0E2SUc1bGR5Qk5ZWEFvS1R0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVuWlhSV1lXeDFaU0E5SUdaMWJtTjBhVzl1SUNoclpYa3BJSHNnY21WMGRYSnVJSE5sYkdZdVgyTjFjbkpsYm5SRGIyNTBaWGgwTG1kbGRDaHJaWGtwT3lCOU8xeHVJQ0FnSUNBZ0lDQnpaV3htTG5ObGRGWmhiSFZsSUQwZ1puVnVZM1JwYjI0Z0tHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjI1MFpYaDBJRDBnYm1WM0lFSmhjMlZEYjI1MFpYaDBLSE5sYkdZdVgyTjFjbkpsYm5SRGIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVYMk4xY25KbGJuUkRiMjUwWlhoMExuTmxkQ2hyWlhrc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjUwWlhoME8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxtUmxiR1YwWlZaaGJIVmxJRDBnWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR052Ym5SbGVIUWdQU0J1WlhjZ1FtRnpaVU52Ym5SbGVIUW9jMlZzWmk1ZlkzVnljbVZ1ZEVOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWNGRDNWZZM1Z5Y21WdWRFTnZiblJsZUhRdVpHVnNaWFJsS0d0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dWRHVjRkRHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlFSmhjMlZEYjI1MFpYaDBPMXh1ZlNncEtUdGNiaThxS2lCVWFHVWdjbTl2ZENCamIyNTBaWGgwSUdseklIVnpaV1FnWVhNZ2RHaGxJR1JsWm1GMWJIUWdjR0Z5Wlc1MElHTnZiblJsZUhRZ2QyaGxiaUIwYUdWeVpTQnBjeUJ1YnlCaFkzUnBkbVVnWTI5dWRHVjRkQ0FxTDF4dVpYaHdiM0owSUhaaGNpQlNUMDlVWDBOUFRsUkZXRlFnUFNCdVpYY2dRbUZ6WlVOdmJuUmxlSFFvS1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV052Ym5SbGVIUXVhbk11YldGd0lpd2lMeXBjYmlBcUlFTnZjSGx5YVdkb2RDQlVhR1VnVDNCbGJsUmxiR1Z0WlhSeWVTQkJkWFJvYjNKelhHNGdLbHh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaUFxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ0lDQWdhSFIwY0hNNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlBcUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHVJQ29nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVJQ29nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYm5aaGNpQmpiMjV6YjJ4bFRXRndJRDBnVzF4dUlDQWdJSHNnYmpvZ0oyVnljbTl5Snl3Z1l6b2dKMlZ5Y205eUp5QjlMRnh1SUNBZ0lIc2diam9nSjNkaGNtNG5MQ0JqT2lBbmQyRnliaWNnZlN4Y2JpQWdJQ0I3SUc0NklDZHBibVp2Snl3Z1l6b2dKMmx1Wm04bklIMHNYRzRnSUNBZ2V5QnVPaUFuWkdWaWRXY25MQ0JqT2lBblpHVmlkV2NuSUgwc1hHNGdJQ0FnZXlCdU9pQW5kbVZ5WW05elpTY3NJR002SUNkMGNtRmpaU2NnZlN4Y2JsMDdYRzR2S2lwY2JpQXFJRUVnYzJsdGNHeGxJRWx0YlhWMFlXSnNaU0JEYjI1emIyeGxJR0poYzJWa0lHUnBZV2R1YjNOMGFXTWdiRzluWjJWeUlIZG9hV05vSUhkcGJHd2diM1YwY0hWMElHRnVlU0J0WlhOellXZGxjeUIwYnlCMGFHVWdRMjl1YzI5c1pTNWNiaUFxSUVsbUlIbHZkU0IzWVc1MElIUnZJR3hwYldsMElIUm9aU0JoYlc5MWJuUWdiMllnYkc5bloybHVaeUIwYnlCaElITndaV05wWm1saklHeGxkbVZzSUc5eUlHeHZkMlZ5SUhWelpTQjBhR1ZjYmlBcUlIdEFiR2x1YXlCamNtVmhkR1ZNYjJkTVpYWmxiRVJwWVdkTWIyZG5aWEo5WEc0Z0tpOWNiblpoY2lCRWFXRm5RMjl1YzI5c1pVeHZaMmRsY2lBOUlDOHFLaUJBWTJ4aGMzTWdLaThnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCRWFXRm5RMjl1YzI5c1pVeHZaMmRsY2lncElIdGNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdYMk52Ym5OdmJHVkdkVzVqS0daMWJtTk9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhjbWR6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdYMmtnUFNBd095QmZhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUY5cEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jMXRmYVYwZ1BTQmhjbWQxYldWdWRITmJYMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMjl1YzI5c1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRiMjFsSUdWdWRtbHliMjV0Wlc1MGN5QnZibXg1SUdWNGNHOXpaU0IwYUdVZ1kyOXVjMjlzWlNCM2FHVnVJSFJvWlNCR01USWdaR1YyWld4dmNHVnlJR052Ym5OdmJHVWdhWE1nYjNCbGJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dFkyOXVjMjlzWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEdobFJuVnVZeUE5SUdOdmJuTnZiR1ZiWm5WdVkwNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvWlVaMWJtTWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTV2ZENCaGJHd2daVzUyYVhKdmJtMWxiblJ6SUhOMWNIQnZjblFnWVd4c0lHWjFibU4wYVc5dWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMV052Ym5OdmJHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9aVVoxYm1NZ1BTQmpiMjV6YjJ4bExteHZaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCUGJtVWdiR0Z6ZENCbWFXNWhiQ0JqYUdWamExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhSb1pVWjFibU1nUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR1ZHZFc1akxtRndjR3g1S0dOdmJuTnZiR1VzSUdGeVozTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR052Ym5OdmJHVk5ZWEF1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTmJZMjl1YzI5c1pVMWhjRnRwWFM1dVhTQTlJRjlqYjI1emIyeGxSblZ1WXloamIyNXpiMnhsVFdGd1cybGRMbU1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQkVhV0ZuUTI5dWMyOXNaVXh2WjJkbGNqdGNibjBvS1NrN1hHNWxlSEJ2Y25RZ2V5QkVhV0ZuUTI5dWMyOXNaVXh2WjJkbGNpQjlPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVkyOXVjMjlzWlV4dloyZGxjaTVxY3k1dFlYQWlMQ0l2S2x4dUlDb2dRMjl3ZVhKcFoyaDBJRlJvWlNCUGNHVnVWR1ZzWlcxbGRISjVJRUYxZEdodmNuTmNiaUFxWEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1SUNvZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExseHVJQ29nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQWdJQ0JvZEhSd2N6b3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTENCemIyWjBkMkZ5WlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUlDb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRnS2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRnS2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWRtRnlJRjlmWlhoMFpXNWtjeUE5SUNoMGFHbHpJQ1ltSUhSb2FYTXVYMTlsZUhSbGJtUnpLU0I4ZkNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIWmhjaUJsZUhSbGJtUlRkR0YwYVdOeklEMGdablZ1WTNScGIyNGdLR1FzSUdJcElIdGNiaUFnSUNBZ0lDQWdaWGgwWlc1a1UzUmhkR2xqY3lBOUlFOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBaaUI4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdLSHNnWDE5d2NtOTBiMTlmT2lCYlhTQjlJR2x1YzNSaGJtTmxiMllnUVhKeVlYa2dKaVlnWm5WdVkzUnBiMjRnS0dRc0lHSXBJSHNnWkM1ZlgzQnliM1J2WDE4Z1BTQmlPeUI5S1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnS0dRc0lHSXBJSHNnWm05eUlDaDJZWElnY0NCcGJpQmlLU0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHSXNJSEFwS1NCa1czQmRJRDBnWWx0d1hUc2dmVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1Y0ZEdWdVpGTjBZWFJwWTNNb1pDd2dZaWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tHUXNJR0lwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmlJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnWWlBaFBUMGdiblZzYkNsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRGJHRnpjeUJsZUhSbGJtUnpJSFpoYkhWbElGd2lJQ3NnVTNSeWFXNW5LR0lwSUNzZ1hDSWdhWE1nYm05MElHRWdZMjl1YzNSeWRXTjBiM0lnYjNJZ2JuVnNiRndpS1R0Y2JpQWdJQ0FnSUNBZ1pYaDBaVzVrVTNSaGRHbGpjeWhrTENCaUtUdGNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdYMThvS1NCN0lIUm9hWE11WTI5dWMzUnlkV04wYjNJZ1BTQmtPeUI5WEc0Z0lDQWdJQ0FnSUdRdWNISnZkRzkwZVhCbElEMGdZaUE5UFQwZ2JuVnNiQ0EvSUU5aWFtVmpkQzVqY21WaGRHVW9ZaWtnT2lBb1gxOHVjSEp2ZEc5MGVYQmxJRDBnWWk1d2NtOTBiM1I1Y0dVc0lHNWxkeUJmWHlncEtUdGNiaUFnSUNCOU8xeHVmU2tvS1R0Y2JpOHFLbHh1SUNvZ1RtOXZjRTFsZEdWeUlHbHpJR0VnYm05dmNDQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQjBhR1VnZTBCc2FXNXJJRTFsZEdWeWZTQnBiblJsY21aaFkyVXVJRWwwSUhKbGRYTmxjMXh1SUNvZ1kyOXVjM1JoYm5RZ1RtOXZjRTFsZEhKcFkzTWdabTl5SUdGc2JDQnZaaUJwZEhNZ2JXVjBhRzlrY3k1Y2JpQXFMMXh1ZG1GeUlFNXZiM0JOWlhSbGNpQTlJQzhxS2lCQVkyeGhjM01nS2k4Z0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQk9iMjl3VFdWMFpYSW9LU0I3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ6WldVZ2UwQnNhVzVySUUxbGRHVnlMbU55WldGMFpVaHBjM1J2WjNKaGJYMWNiaUFnSUNBZ0tpOWNiaUFnSUNCT2IyOXdUV1YwWlhJdWNISnZkRzkwZVhCbExtTnlaV0YwWlVocGMzUnZaM0poYlNBOUlHWjFibU4wYVc5dUlDaGZibUZ0WlN3Z1gyOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFNVBUMUJmU0VsVFZFOUhVa0ZOWDAxRlZGSkpRenRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ6WldVZ2UwQnNhVzVySUUxbGRHVnlMbU55WldGMFpVTnZkVzUwWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVG05dmNFMWxkR1Z5TG5CeWIzUnZkSGx3WlM1amNtVmhkR1ZEYjNWdWRHVnlJRDBnWm5WdVkzUnBiMjRnS0Y5dVlXMWxMQ0JmYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVGs5UFVGOURUMVZPVkVWU1gwMUZWRkpKUXp0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCelpXVWdlMEJzYVc1cklFMWxkR1Z5TG1OeVpXRjBaVlZ3Ukc5M2JrTnZkVzUwWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVG05dmNFMWxkR1Z5TG5CeWIzUnZkSGx3WlM1amNtVmhkR1ZWY0VSdmQyNURiM1Z1ZEdWeUlEMGdablZ1WTNScGIyNGdLRjl1WVcxbExDQmZiM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdUazlQVUY5VlVGOUVUMWRPWDBOUFZVNVVSVkpmVFVWVVVrbERPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSE5sWlNCN1FHeHBibXNnVFdWMFpYSXVZM0psWVhSbFQySnpaWEoyWVdKc1pVZGhkV2RsZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRTV2YjNCTlpYUmxjaTV3Y205MGIzUjVjR1V1WTNKbFlYUmxUMkp6WlhKMllXSnNaVWRoZFdkbElEMGdablZ1WTNScGIyNGdLRjl1WVcxbExDQmZiM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdUazlQVUY5UFFsTkZVbFpCUWt4RlgwZEJWVWRGWDAxRlZGSkpRenRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ6WldVZ2UwQnNhVzVySUUxbGRHVnlMbU55WldGMFpVOWljMlZ5ZG1GaWJHVkRiM1Z1ZEdWeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUU1dmIzQk5aWFJsY2k1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsVDJKelpYSjJZV0pzWlVOdmRXNTBaWElnUFNCbWRXNWpkR2x2YmlBb1gyNWhiV1VzSUY5dmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCT1QwOVFYMDlDVTBWU1ZrRkNURVZmUTA5VlRsUkZVbDlOUlZSU1NVTTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjMlZsSUh0QWJHbHVheUJOWlhSbGNpNWpjbVZoZEdWUFluTmxjblpoWW14bFZYQkViM2R1UTI5MWJuUmxjbjFjYmlBZ0lDQWdLaTljYmlBZ0lDQk9iMjl3VFdWMFpYSXVjSEp2ZEc5MGVYQmxMbU55WldGMFpVOWljMlZ5ZG1GaWJHVlZjRVJ2ZDI1RGIzVnVkR1Z5SUQwZ1puVnVZM1JwYjI0Z0tGOXVZVzFsTENCZmIzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1RrOVBVRjlQUWxORlVsWkJRa3hGWDFWUVgwUlBWMDVmUTA5VlRsUkZVbDlOUlZSU1NVTTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjMlZsSUh0QWJHbHVheUJOWlhSbGNpNWhaR1JDWVhSamFFOWljMlZ5ZG1GaWJHVkRZV3hzWW1GamEzMWNiaUFnSUNBZ0tpOWNiaUFnSUNCT2IyOXdUV1YwWlhJdWNISnZkRzkwZVhCbExtRmtaRUpoZEdOb1QySnpaWEoyWVdKc1pVTmhiR3hpWVdOcklEMGdablZ1WTNScGIyNGdLRjlqWVd4c1ltRmpheXdnWDI5aWMyVnlkbUZpYkdWektTQjdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhObFpTQjdRR3hwYm1zZ1RXVjBaWEl1Y21WdGIzWmxRbUYwWTJoUFluTmxjblpoWW14bFEyRnNiR0poWTJ0OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVG05dmNFMWxkR1Z5TG5CeWIzUnZkSGx3WlM1eVpXMXZkbVZDWVhSamFFOWljMlZ5ZG1GaWJHVkRZV3hzWW1GamF5QTlJR1oxYm1OMGFXOXVJQ2hmWTJGc2JHSmhZMnNwSUhzZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnVG05dmNFMWxkR1Z5TzF4dWZTZ3BLVHRjYm1WNGNHOXlkQ0I3SUU1dmIzQk5aWFJsY2lCOU8xeHVkbUZ5SUU1dmIzQk5aWFJ5YVdNZ1BTQXZLaW9nUUdOc1lYTnpJQ292SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1RtOXZjRTFsZEhKcFl5Z3BJSHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUU1dmIzQk5aWFJ5YVdNN1hHNTlLQ2twTzF4dVpYaHdiM0owSUhzZ1RtOXZjRTFsZEhKcFl5QjlPMXh1ZG1GeUlFNXZiM0JEYjNWdWRHVnlUV1YwY21saklEMGdMeW9xSUVCamJHRnpjeUFxTHlBb1puVnVZM1JwYjI0Z0tGOXpkWEJsY2lrZ2UxeHVJQ0FnSUY5ZlpYaDBaVzVrY3loT2IyOXdRMjkxYm5SbGNrMWxkSEpwWXl3Z1gzTjFjR1Z5S1R0Y2JpQWdJQ0JtZFc1amRHbHZiaUJPYjI5d1EyOTFiblJsY2sxbGRISnBZeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5emRYQmxjaUFoUFQwZ2JuVnNiQ0FtSmlCZmMzVndaWEl1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektTQjhmQ0IwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0JPYjI5d1EyOTFiblJsY2sxbGRISnBZeTV3Y205MGIzUjVjR1V1WVdSa0lEMGdablZ1WTNScGIyNGdLRjkyWVd4MVpTd2dYMkYwZEhKcFluVjBaWE1wSUhzZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnVG05dmNFTnZkVzUwWlhKTlpYUnlhV003WEc1OUtFNXZiM0JOWlhSeWFXTXBLVHRjYm1WNGNHOXlkQ0I3SUU1dmIzQkRiM1Z1ZEdWeVRXVjBjbWxqSUgwN1hHNTJZWElnVG05dmNGVndSRzkzYmtOdmRXNTBaWEpOWlhSeWFXTWdQU0F2S2lvZ1FHTnNZWE56SUNvdklDaG1kVzVqZEdsdmJpQW9YM04xY0dWeUtTQjdYRzRnSUNBZ1gxOWxlSFJsYm1SektFNXZiM0JWY0VSdmQyNURiM1Z1ZEdWeVRXVjBjbWxqTENCZmMzVndaWElwTzF4dUlDQWdJR1oxYm1OMGFXOXVJRTV2YjNCVmNFUnZkMjVEYjNWdWRHVnlUV1YwY21saktDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM04xY0dWeUlDRTlQU0J1ZFd4c0lDWW1JRjl6ZFhCbGNpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wSUh4OElIUm9hWE03WEc0Z0lDQWdmVnh1SUNBZ0lFNXZiM0JWY0VSdmQyNURiM1Z1ZEdWeVRXVjBjbWxqTG5CeWIzUnZkSGx3WlM1aFpHUWdQU0JtZFc1amRHbHZiaUFvWDNaaGJIVmxMQ0JmWVhSMGNtbGlkWFJsY3lrZ2V5QjlPMXh1SUNBZ0lISmxkSFZ5YmlCT2IyOXdWWEJFYjNkdVEyOTFiblJsY2sxbGRISnBZenRjYm4wb1RtOXZjRTFsZEhKcFl5a3BPMXh1Wlhod2IzSjBJSHNnVG05dmNGVndSRzkzYmtOdmRXNTBaWEpOWlhSeWFXTWdmVHRjYm5aaGNpQk9iMjl3U0dsemRHOW5jbUZ0VFdWMGNtbGpJRDBnTHlvcUlFQmpiR0Z6Y3lBcUx5QW9ablZ1WTNScGIyNGdLRjl6ZFhCbGNpa2dlMXh1SUNBZ0lGOWZaWGgwWlc1a2N5aE9iMjl3U0dsemRHOW5jbUZ0VFdWMGNtbGpMQ0JmYzNWd1pYSXBPMXh1SUNBZ0lHWjFibU4wYVc5dUlFNXZiM0JJYVhOMGIyZHlZVzFOWlhSeWFXTW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmYzNWd1pYSWdJVDA5SUc1MWJHd2dKaVlnWDNOMWNHVnlMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrZ2ZId2dkR2hwY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdUbTl2Y0VocGMzUnZaM0poYlUxbGRISnBZeTV3Y205MGIzUjVjR1V1Y21WamIzSmtJRDBnWm5WdVkzUnBiMjRnS0Y5MllXeDFaU3dnWDJGMGRISnBZblYwWlhNcElIc2dmVHRjYmlBZ0lDQnlaWFIxY200Z1RtOXZjRWhwYzNSdlozSmhiVTFsZEhKcFl6dGNibjBvVG05dmNFMWxkSEpwWXlrcE8xeHVaWGh3YjNKMElIc2dUbTl2Y0VocGMzUnZaM0poYlUxbGRISnBZeUI5TzF4dWRtRnlJRTV2YjNCUFluTmxjblpoWW14bFRXVjBjbWxqSUQwZ0x5b3FJRUJqYkdGemN5QXFMeUFvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUU1dmIzQlBZbk5sY25aaFlteGxUV1YwY21saktDa2dlMXh1SUNBZ0lIMWNiaUFnSUNCT2IyOXdUMkp6WlhKMllXSnNaVTFsZEhKcFl5NXdjbTkwYjNSNWNHVXVZV1JrUTJGc2JHSmhZMnNnUFNCbWRXNWpkR2x2YmlBb1gyTmhiR3hpWVdOcktTQjdJSDA3WEc0Z0lDQWdUbTl2Y0U5aWMyVnlkbUZpYkdWTlpYUnlhV011Y0hKdmRHOTBlWEJsTG5KbGJXOTJaVU5oYkd4aVlXTnJJRDBnWm5WdVkzUnBiMjRnS0Y5allXeHNZbUZqYXlrZ2V5QjlPMXh1SUNBZ0lISmxkSFZ5YmlCT2IyOXdUMkp6WlhKMllXSnNaVTFsZEhKcFl6dGNibjBvS1NrN1hHNWxlSEJ2Y25RZ2V5Qk9iMjl3VDJKelpYSjJZV0pzWlUxbGRISnBZeUI5TzF4dWRtRnlJRTV2YjNCUFluTmxjblpoWW14bFEyOTFiblJsY2sxbGRISnBZeUE5SUM4cUtpQkFZMnhoYzNNZ0tpOGdLR1oxYm1OMGFXOXVJQ2hmYzNWd1pYSXBJSHRjYmlBZ0lDQmZYMlY0ZEdWdVpITW9UbTl2Y0U5aWMyVnlkbUZpYkdWRGIzVnVkR1Z5VFdWMGNtbGpMQ0JmYzNWd1pYSXBPMXh1SUNBZ0lHWjFibU4wYVc5dUlFNXZiM0JQWW5ObGNuWmhZbXhsUTI5MWJuUmxjazFsZEhKcFl5Z3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjl6ZFhCbGNpQWhQVDBnYm5Wc2JDQW1KaUJmYzNWd1pYSXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1NCOGZDQjBhR2x6TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1RtOXZjRTlpYzJWeWRtRmliR1ZEYjNWdWRHVnlUV1YwY21sak8xeHVmU2hPYjI5d1QySnpaWEoyWVdKc1pVMWxkSEpwWXlrcE8xeHVaWGh3YjNKMElIc2dUbTl2Y0U5aWMyVnlkbUZpYkdWRGIzVnVkR1Z5VFdWMGNtbGpJSDA3WEc1MllYSWdUbTl2Y0U5aWMyVnlkbUZpYkdWSFlYVm5aVTFsZEhKcFl5QTlJQzhxS2lCQVkyeGhjM01nS2k4Z0tHWjFibU4wYVc5dUlDaGZjM1Z3WlhJcElIdGNiaUFnSUNCZlgyVjRkR1Z1WkhNb1RtOXZjRTlpYzJWeWRtRmliR1ZIWVhWblpVMWxkSEpwWXl3Z1gzTjFjR1Z5S1R0Y2JpQWdJQ0JtZFc1amRHbHZiaUJPYjI5d1QySnpaWEoyWVdKc1pVZGhkV2RsVFdWMGNtbGpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDNOMWNHVnlJQ0U5UFNCdWRXeHNJQ1ltSUY5emRYQmxjaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcElIeDhJSFJvYVhNN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQk9iMjl3VDJKelpYSjJZV0pzWlVkaGRXZGxUV1YwY21sak8xeHVmU2hPYjI5d1QySnpaWEoyWVdKc1pVMWxkSEpwWXlrcE8xeHVaWGh3YjNKMElIc2dUbTl2Y0U5aWMyVnlkbUZpYkdWSFlYVm5aVTFsZEhKcFl5QjlPMXh1ZG1GeUlFNXZiM0JQWW5ObGNuWmhZbXhsVlhCRWIzZHVRMjkxYm5SbGNrMWxkSEpwWXlBOUlDOHFLaUJBWTJ4aGMzTWdLaThnS0daMWJtTjBhVzl1SUNoZmMzVndaWElwSUh0Y2JpQWdJQ0JmWDJWNGRHVnVaSE1vVG05dmNFOWljMlZ5ZG1GaWJHVlZjRVJ2ZDI1RGIzVnVkR1Z5VFdWMGNtbGpMQ0JmYzNWd1pYSXBPMXh1SUNBZ0lHWjFibU4wYVc5dUlFNXZiM0JQWW5ObGNuWmhZbXhsVlhCRWIzZHVRMjkxYm5SbGNrMWxkSEpwWXlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOXpkWEJsY2lBaFBUMGdiblZzYkNBbUppQmZjM1Z3WlhJdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLU0I4ZkNCMGFHbHpPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVG05dmNFOWljMlZ5ZG1GaWJHVlZjRVJ2ZDI1RGIzVnVkR1Z5VFdWMGNtbGpPMXh1ZlNoT2IyOXdUMkp6WlhKMllXSnNaVTFsZEhKcFl5a3BPMXh1Wlhod2IzSjBJSHNnVG05dmNFOWljMlZ5ZG1GaWJHVlZjRVJ2ZDI1RGIzVnVkR1Z5VFdWMGNtbGpJSDA3WEc1bGVIQnZjblFnZG1GeUlFNVBUMUJmVFVWVVJWSWdQU0J1WlhjZ1RtOXZjRTFsZEdWeUtDazdYRzR2THlCVGVXNWphSEp2Ym05MWN5QnBibk4wY25WdFpXNTBjMXh1Wlhod2IzSjBJSFpoY2lCT1QwOVFYME5QVlU1VVJWSmZUVVZVVWtsRElEMGdibVYzSUU1dmIzQkRiM1Z1ZEdWeVRXVjBjbWxqS0NrN1hHNWxlSEJ2Y25RZ2RtRnlJRTVQVDFCZlNFbFRWRTlIVWtGTlgwMUZWRkpKUXlBOUlHNWxkeUJPYjI5d1NHbHpkRzluY21GdFRXVjBjbWxqS0NrN1hHNWxlSEJ2Y25RZ2RtRnlJRTVQVDFCZlZWQmZSRTlYVGw5RFQxVk9WRVZTWDAxRlZGSkpReUE5SUc1bGR5Qk9iMjl3VlhCRWIzZHVRMjkxYm5SbGNrMWxkSEpwWXlncE8xeHVMeThnUVhONWJtTm9jbTl1YjNWeklHbHVjM1J5ZFcxbGJuUnpYRzVsZUhCdmNuUWdkbUZ5SUU1UFQxQmZUMEpUUlZKV1FVSk1SVjlEVDFWT1ZFVlNYMDFGVkZKSlF5QTlJRzVsZHlCT2IyOXdUMkp6WlhKMllXSnNaVU52ZFc1MFpYSk5aWFJ5YVdNb0tUdGNibVY0Y0c5eWRDQjJZWElnVGs5UFVGOVBRbE5GVWxaQlFreEZYMGRCVlVkRlgwMUZWRkpKUXlBOUlHNWxkeUJPYjI5d1QySnpaWEoyWVdKc1pVZGhkV2RsVFdWMGNtbGpLQ2s3WEc1bGVIQnZjblFnZG1GeUlFNVBUMUJmVDBKVFJWSldRVUpNUlY5VlVGOUVUMWRPWDBOUFZVNVVSVkpmVFVWVVVrbERJRDBnYm1WM0lFNXZiM0JQWW5ObGNuWmhZbXhsVlhCRWIzZHVRMjkxYm5SbGNrMWxkSEpwWXlncE8xeHVMeW9xWEc0Z0tpQkRjbVZoZEdVZ1lTQnVieTF2Y0NCTlpYUmxjbHh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kzSmxZWFJsVG05dmNFMWxkR1Z5S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJPVDA5UVgwMUZWRVZTTzF4dWZWeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5VG05dmNFMWxkR1Z5TG1wekxtMWhjQ0lzSWk4cVhHNGdLaUJEYjNCNWNtbG5hSFFnVkdobElFOXdaVzVVWld4bGJXVjBjbmtnUVhWMGFHOXljMXh1SUNwY2JpQXFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0Z0tpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaUFxWEc0Z0tpQWdJQ0FnSUdoMGRIQnpPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNGdLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlBcUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlBcUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNHZLaW9nVkdobElGUjVjR1VnYjJZZ2RtRnNkV1V1SUVsMElHUmxjMk55YVdKbGN5Qm9iM2NnZEdobElHUmhkR0VnYVhNZ2NtVndiM0owWldRdUlDb3ZYRzVsZUhCdmNuUWdkbUZ5SUZaaGJIVmxWSGx3WlR0Y2JpaG1kVzVqZEdsdmJpQW9WbUZzZFdWVWVYQmxLU0I3WEc0Z0lDQWdWbUZzZFdWVWVYQmxXMVpoYkhWbFZIbHdaVnRjSWtsT1ZGd2lYU0E5SURCZElEMGdYQ0pKVGxSY0lqdGNiaUFnSUNCV1lXeDFaVlI1Y0dWYlZtRnNkV1ZVZVhCbFcxd2lSRTlWUWt4RlhDSmRJRDBnTVYwZ1BTQmNJa1JQVlVKTVJWd2lPMXh1ZlNrb1ZtRnNkV1ZVZVhCbElIeDhJQ2hXWVd4MVpWUjVjR1VnUFNCN2ZTa3BPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVRXVjBjbWxqTG1wekxtMWhjQ0lzSWk4cVhHNGdLaUJEYjNCNWNtbG5hSFFnVkdobElFOXdaVzVVWld4bGJXVjBjbmtnUVhWMGFHOXljMXh1SUNwY2JpQXFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0Z0tpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaUFxWEc0Z0tpQWdJQ0FnSUdoMGRIQnpPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNGdLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlBcUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlBcUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWxlSEJ2Y25RZ2RtRnlJR1JsWm1GMWJIUlVaWGgwVFdGd1IyVjBkR1Z5SUQwZ2UxeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLR05oY25KcFpYSXNJR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTJGeWNtbGxjaUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZWEp5YVdWeVcydGxlVjA3WEc0Z0lDQWdmU3hjYmlBZ0lDQnJaWGx6T2lCbWRXNWpkR2x2YmlBb1kyRnljbWxsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTJGeWNtbGxjaUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRTlpYW1WamRDNXJaWGx6S0dOaGNuSnBaWElwTzF4dUlDQWdJSDBzWEc1OU8xeHVaWGh3YjNKMElIWmhjaUJrWldaaGRXeDBWR1Y0ZEUxaGNGTmxkSFJsY2lBOUlIdGNiaUFnSUNCelpYUTZJR1oxYm1OMGFXOXVJQ2hqWVhKeWFXVnlMQ0JyWlhrc0lIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqWVhKeWFXVnlJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpZWEp5YVdWeVcydGxlVjBnUFNCMllXeDFaVHRjYmlBZ0lDQjlMRnh1ZlR0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QVlJsZUhSTllYQlFjbTl3WVdkaGRHOXlMbXB6TG0xaGNDSXNJaThxWEc0Z0tpQkRiM0I1Y21sbmFIUWdWR2hsSUU5d1pXNVVaV3hsYldWMGNua2dRWFYwYUc5eWMxeHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdJR2gwZEhCek9pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEc0Z0tpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaUFxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaUFxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1MllYSWdYMTl5WldGa0lEMGdLSFJvYVhNZ0ppWWdkR2hwY3k1ZlgzSmxZV1FwSUh4OElHWjFibU4wYVc5dUlDaHZMQ0J1S1NCN1hHNGdJQ0FnZG1GeUlHMGdQU0IwZVhCbGIyWWdVM2x0WW05c0lEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdiMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRPMXh1SUNBZ0lHbG1JQ2doYlNrZ2NtVjBkWEp1SUc4N1hHNGdJQ0FnZG1GeUlHa2dQU0J0TG1OaGJHd29ieWtzSUhJc0lHRnlJRDBnVzEwc0lHVTdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ2h1SUQwOVBTQjJiMmxrSURBZ2ZId2diaTB0SUQ0Z01Da2dKaVlnSVNoeUlEMGdhUzV1WlhoMEtDa3BMbVJ2Ym1VcElHRnlMbkIxYzJnb2NpNTJZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR05oZEdOb0lDaGxjbkp2Y2lrZ2V5QmxJRDBnZXlCbGNuSnZjam9nWlhKeWIzSWdmVHNnZlZ4dUlDQWdJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISWdKaVlnSVhJdVpHOXVaU0FtSmlBb2JTQTlJR2xiWENKeVpYUjFjbTVjSWwwcEtTQnRMbU5oYkd3b2FTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3SUdsbUlDaGxLU0IwYUhKdmR5QmxMbVZ5Y205eU95QjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJoY2p0Y2JuMDdYRzUyWVhJZ1gxOXpjSEpsWVdSQmNuSmhlU0E5SUNoMGFHbHpJQ1ltSUhSb2FYTXVYMTl6Y0hKbFlXUkJjbkpoZVNrZ2ZId2dablZ1WTNScGIyNGdLSFJ2TENCbWNtOXRMQ0J3WVdOcktTQjdYRzRnSUNBZ2FXWWdLSEJoWTJzZ2ZId2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTWlrZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQm1jbTl0TG14bGJtZDBhQ3dnWVhJN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnlJSHg4SUNFb2FTQnBiaUJtY205dEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZoY2lrZ1lYSWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2htY205dExDQXdMQ0JwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5VzJsZElEMGdabkp2YlZ0cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEc4dVkyOXVZMkYwS0dGeUlIeDhJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLR1p5YjIwcEtUdGNibjA3WEc1cGJYQnZjblFnZXlCU1QwOVVYME5QVGxSRldGUWdmU0JtY205dElDY3VMMk52Ym5SbGVIUW5PMXh1ZG1GeUlFNXZiM0JEYjI1MFpYaDBUV0Z1WVdkbGNpQTlJQzhxS2lCQVkyeGhjM01nS2k4Z0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQk9iMjl3UTI5dWRHVjRkRTFoYm1GblpYSW9LU0I3WEc0Z0lDQWdmVnh1SUNBZ0lFNXZiM0JEYjI1MFpYaDBUV0Z1WVdkbGNpNXdjbTkwYjNSNWNHVXVZV04wYVhabElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVWs5UFZGOURUMDVVUlZoVU8xeHVJQ0FnSUgwN1hHNGdJQ0FnVG05dmNFTnZiblJsZUhSTllXNWhaMlZ5TG5CeWIzUnZkSGx3WlM1M2FYUm9JRDBnWm5WdVkzUnBiMjRnS0Y5amIyNTBaWGgwTENCbWJpd2dkR2hwYzBGeVp5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lYSm5jeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmZhU0E5SURNN0lGOXBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnWDJrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jMXRmYVNBdElETmRJRDBnWVhKbmRXMWxiblJ6VzE5cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabTR1WTJGc2JDNWhjSEJzZVNobWJpd2dYMTl6Y0hKbFlXUkJjbkpoZVNoYmRHaHBjMEZ5WjEwc0lGOWZjbVZoWkNoaGNtZHpLU3dnWm1Gc2MyVXBLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lFNXZiM0JEYjI1MFpYaDBUV0Z1WVdkbGNpNXdjbTkwYjNSNWNHVXVZbWx1WkNBOUlHWjFibU4wYVc5dUlDaGZZMjl1ZEdWNGRDd2dkR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBZWEpuWlhRN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JPYjI5d1EyOXVkR1Y0ZEUxaGJtRm5aWEl1Y0hKdmRHOTBlWEJsTG1WdVlXSnNaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQk9iMjl3UTI5dWRHVjRkRTFoYm1GblpYSXVjSEp2ZEc5MGVYQmxMbVJwYzJGaWJHVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUU1dmIzQkRiMjUwWlhoMFRXRnVZV2RsY2p0Y2JuMG9LU2s3WEc1bGVIQnZjblFnZXlCT2IyOXdRMjl1ZEdWNGRFMWhibUZuWlhJZ2ZUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFU1dmIzQkRiMjUwWlhoMFRXRnVZV2RsY2k1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVkbUZ5SUY5ZmNtVmhaQ0E5SUNoMGFHbHpJQ1ltSUhSb2FYTXVYMTl5WldGa0tTQjhmQ0JtZFc1amRHbHZiaUFvYnl3Z2Jpa2dlMXh1SUNBZ0lIWmhjaUJ0SUQwZ2RIbHdaVzltSUZONWJXSnZiQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJQ1ltSUc5YlUzbHRZbTlzTG1sMFpYSmhkRzl5WFR0Y2JpQWdJQ0JwWmlBb0lXMHBJSEpsZEhWeWJpQnZPMXh1SUNBZ0lIWmhjaUJwSUQwZ2JTNWpZV3hzS0c4cExDQnlMQ0JoY2lBOUlGdGRMQ0JsTzF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNnb2JpQTlQVDBnZG05cFpDQXdJSHg4SUc0dExTQStJREFwSUNZbUlDRW9jaUE5SUdrdWJtVjRkQ2dwS1M1a2IyNWxLU0JoY2k1d2RYTm9LSEl1ZG1Gc2RXVXBPMXh1SUNBZ0lIMWNiaUFnSUNCallYUmphQ0FvWlhKeWIzSXBJSHNnWlNBOUlIc2daWEp5YjNJNklHVnljbTl5SUgwN0lIMWNiaUFnSUNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUNZbUlDRnlMbVJ2Ym1VZ0ppWWdLRzBnUFNCcFcxd2ljbVYwZFhKdVhDSmRLU2tnYlM1allXeHNLR2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHWnBibUZzYkhrZ2V5QnBaaUFvWlNrZ2RHaHliM2NnWlM1bGNuSnZjanNnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1lYSTdYRzU5TzF4dWRtRnlJRjlmYzNCeVpXRmtRWEp5WVhrZ1BTQW9kR2hwY3lBbUppQjBhR2x6TGw5ZmMzQnlaV0ZrUVhKeVlYa3BJSHg4SUdaMWJtTjBhVzl1SUNoMGJ5d2dabkp2YlN3Z2NHRmpheWtnZTF4dUlDQWdJR2xtSUNod1lXTnJJSHg4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUFQwOUlESXBJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnWm5KdmJTNXNaVzVuZEdnc0lHRnlPeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoY2lCOGZDQWhLR2tnYVc0Z1puSnZiU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFlYSXBJR0Z5SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b1puSnZiU3dnTUN3Z2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNsdHBYU0E5SUdaeWIyMWJhVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUnZMbU52Ym1OaGRDaGhjaUI4ZkNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNobWNtOXRLU2s3WEc1OU8xeHVhVzF3YjNKMElIc2dUbTl2Y0VOdmJuUmxlSFJOWVc1aFoyVnlJSDBnWm5KdmJTQW5MaTR2WTI5dWRHVjRkQzlPYjI5d1EyOXVkR1Y0ZEUxaGJtRm5aWEluTzF4dWFXMXdiM0owSUhzZ1oyVjBSMnh2WW1Gc0xDQnlaV2RwYzNSbGNrZHNiMkpoYkN3Z2RXNXlaV2RwYzNSbGNrZHNiMkpoYkN3Z2ZTQm1jbTl0SUNjdUxpOXBiblJsY201aGJDOW5iRzlpWVd3dGRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ1JHbGhaMEZRU1NCOUlHWnliMjBnSnk0dlpHbGhaeWM3WEc1MllYSWdRVkJKWDA1QlRVVWdQU0FuWTI5dWRHVjRkQ2M3WEc1MllYSWdUazlQVUY5RFQwNVVSVmhVWDAxQlRrRkhSVklnUFNCdVpYY2dUbTl2Y0VOdmJuUmxlSFJOWVc1aFoyVnlLQ2s3WEc0dktpcGNiaUFxSUZOcGJtZHNaWFJ2YmlCdlltcGxZM1FnZDJocFkyZ2djbVZ3Y21WelpXNTBjeUIwYUdVZ1pXNTBjbmtnY0c5cGJuUWdkRzhnZEdobElFOXdaVzVVWld4bGJXVjBjbmtnUTI5dWRHVjRkQ0JCVUVsY2JpQXFMMXh1ZG1GeUlFTnZiblJsZUhSQlVFa2dQU0F2S2lvZ1FHTnNZWE56SUNvdklDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdMeW9xSUVWdGNIUjVJSEJ5YVhaaGRHVWdZMjl1YzNSeWRXTjBiM0lnY0hKbGRtVnVkSE1nWlc1a0lIVnpaWEp6SUdaeWIyMGdZMjl1YzNSeWRXTjBhVzVuSUdFZ2JtVjNJR2x1YzNSaGJtTmxJRzltSUhSb1pTQkJVRWtnS2k5Y2JpQWdJQ0JtZFc1amRHbHZiaUJEYjI1MFpYaDBRVkJKS0NrZ2UxeHVJQ0FnSUgxY2JpQWdJQ0F2S2lvZ1IyVjBJSFJvWlNCemFXNW5iR1YwYjI0Z2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUVOdmJuUmxlSFFnUVZCSklDb3ZYRzRnSUNBZ1EyOXVkR1Y0ZEVGUVNTNW5aWFJKYm5OMFlXNWpaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDlwYm5OMFlXNWpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFXNXpkR0Z1WTJVZ1BTQnVaWGNnUTI5dWRHVjRkRUZRU1NncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJuTjBZVzVqWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRDQjBhR1VnWTNWeWNtVnVkQ0JqYjI1MFpYaDBJRzFoYm1GblpYSXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjBjblZsSUdsbUlIUm9aU0JqYjI1MFpYaDBJRzFoYm1GblpYSWdkMkZ6SUhOMVkyTmxjM05tZFd4c2VTQnlaV2RwYzNSbGNtVmtMQ0JsYkhObElHWmhiSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdRMjl1ZEdWNGRFRlFTUzV3Y205MGIzUjVjR1V1YzJWMFIyeHZZbUZzUTI5dWRHVjRkRTFoYm1GblpYSWdQU0JtZFc1amRHbHZiaUFvWTI5dWRHVjRkRTFoYm1GblpYSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsWjJsemRHVnlSMnh2WW1Gc0tFRlFTVjlPUVUxRkxDQmpiMjUwWlhoMFRXRnVZV2RsY2l3Z1JHbGhaMEZRU1M1cGJuTjBZVzVqWlNncEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkQ0IwYUdVZ1kzVnljbVZ1ZEd4NUlHRmpkR2wyWlNCamIyNTBaWGgwWEc0Z0lDQWdJQ292WEc0Z0lDQWdRMjl1ZEdWNGRFRlFTUzV3Y205MGIzUjVjR1V1WVdOMGFYWmxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWjJWMFEyOXVkR1Y0ZEUxaGJtRm5aWElvS1M1aFkzUnBkbVVvS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWNFpXTjFkR1VnWVNCbWRXNWpkR2x2YmlCM2FYUm9JR0Z1SUdGamRHbDJaU0JqYjI1MFpYaDBYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1kyOXVkR1Y0ZENCamIyNTBaWGgwSUhSdklHSmxJR0ZqZEdsMlpTQmtkWEpwYm1jZ1puVnVZM1JwYjI0Z1pYaGxZM1YwYVc5dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdadUlHWjFibU4wYVc5dUlIUnZJR1Y0WldOMWRHVWdhVzRnWVNCamIyNTBaWGgwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFJvYVhOQmNtY2diM0IwYVc5dVlXd2djbVZqWldsMlpYSWdkRzhnWW1VZ2RYTmxaQ0JtYjNJZ1kyRnNiR2x1WnlCbWJseHVJQ0FnSUNBcUlFQndZWEpoYlNCaGNtZHpJRzl3ZEdsdmJtRnNJR0Z5WjNWdFpXNTBjeUJtYjNKM1lYSmtaV1FnZEc4Z1ptNWNiaUFnSUNBZ0tpOWNiaUFnSUNCRGIyNTBaWGgwUVZCSkxuQnliM1J2ZEhsd1pTNTNhWFJvSUQwZ1puVnVZM1JwYjI0Z0tHTnZiblJsZUhRc0lHWnVMQ0IwYUdselFYSm5LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZZVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRnlaM01nUFNCYlhUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdYMmtnUFNBek95QmZhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUY5cEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlaM05iWDJrZ0xTQXpYU0E5SUdGeVozVnRaVzUwYzF0ZmFWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2hmWVNBOUlIUm9hWE11WDJkbGRFTnZiblJsZUhSTllXNWhaMlZ5S0NrcExuZHBkR2d1WVhCd2JIa29YMkVzSUY5ZmMzQnlaV0ZrUVhKeVlYa29XMk52Ym5SbGVIUXNJR1p1TENCMGFHbHpRWEpuWFN3Z1gxOXlaV0ZrS0dGeVozTXBMQ0JtWVd4elpTa3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRbWx1WkNCaElHTnZiblJsZUhRZ2RHOGdZU0IwWVhKblpYUWdablZ1WTNScGIyNGdiM0lnWlhabGJuUWdaVzFwZEhSbGNseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdOdmJuUmxlSFFnWTI5dWRHVjRkQ0IwYnlCaWFXNWtJSFJ2SUhSb1pTQmxkbVZ1ZENCbGJXbDBkR1Z5SUc5eUlHWjFibU4wYVc5dUxpQkVaV1poZFd4MGN5QjBieUIwYUdVZ1kzVnljbVZ1ZEd4NUlHRmpkR2wyWlNCamIyNTBaWGgwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFJoY21kbGRDQm1kVzVqZEdsdmJpQnZjaUJsZG1WdWRDQmxiV2wwZEdWeUlIUnZJR0pwYm1SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JEYjI1MFpYaDBRVkJKTG5CeWIzUnZkSGx3WlM1aWFXNWtJRDBnWm5WdVkzUnBiMjRnS0dOdmJuUmxlSFFzSUhSaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaMlYwUTI5dWRHVjRkRTFoYm1GblpYSW9LUzVpYVc1a0tHTnZiblJsZUhRc0lIUmhjbWRsZENrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JEYjI1MFpYaDBRVkJKTG5CeWIzUnZkSGx3WlM1ZloyVjBRMjl1ZEdWNGRFMWhibUZuWlhJZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJuWlhSSGJHOWlZV3dvUVZCSlgwNUJUVVVwSUh4OElFNVBUMUJmUTA5T1ZFVllWRjlOUVU1QlIwVlNPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FJRVJwYzJGaWJHVWdZVzVrSUhKbGJXOTJaU0IwYUdVZ1oyeHZZbUZzSUdOdmJuUmxlSFFnYldGdVlXZGxjaUFxTDF4dUlDQWdJRU52Ym5SbGVIUkJVRWt1Y0hKdmRHOTBlWEJsTG1ScGMyRmliR1VnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyZGxkRU52Ym5SbGVIUk5ZVzVoWjJWeUtDa3VaR2x6WVdKc1pTZ3BPMXh1SUNBZ0lDQWdJQ0IxYm5KbFoybHpkR1Z5UjJ4dlltRnNLRUZRU1Y5T1FVMUZMQ0JFYVdGblFWQkpMbWx1YzNSaGJtTmxLQ2twTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFTnZiblJsZUhSQlVFazdYRzU5S0NrcE8xeHVaWGh3YjNKMElIc2dRMjl1ZEdWNGRFRlFTU0I5TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlZMjl1ZEdWNGRDNXFjeTV0WVhBaUxDSXZLbHh1SUNvZ1EyOXdlWEpwWjJoMElGUm9aU0JQY0dWdVZHVnNaVzFsZEhKNUlFRjFkR2h2Y25OY2JpQXFYRzRnS2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVJQ29nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUlDb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNBZ0lDQm9kSFJ3Y3pvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1Wlhod2IzSjBJSFpoY2lCVWNtRmpaVVpzWVdkek8xeHVLR1oxYm1OMGFXOXVJQ2hVY21GalpVWnNZV2R6S1NCN1hHNGdJQ0FnTHlvcUlGSmxjSEpsYzJWdWRITWdibThnWm14aFp5QnpaWFF1SUNvdlhHNGdJQ0FnVkhKaFkyVkdiR0ZuYzF0VWNtRmpaVVpzWVdkelcxd2lUazlPUlZ3aVhTQTlJREJkSUQwZ1hDSk9UMDVGWENJN1hHNGdJQ0FnTHlvcUlFSnBkQ0IwYnlCeVpYQnlaWE5sYm5RZ2QyaGxkR2hsY2lCMGNtRmpaU0JwY3lCellXMXdiR1ZrSUdsdUlIUnlZV05sSUdac1lXZHpMaUFxTDF4dUlDQWdJRlJ5WVdObFJteGhaM05iVkhKaFkyVkdiR0ZuYzF0Y0lsTkJUVkJNUlVSY0lsMGdQU0F4WFNBOUlGd2lVMEZOVUV4RlJGd2lPMXh1ZlNrb1ZISmhZMlZHYkdGbmN5QjhmQ0FvVkhKaFkyVkdiR0ZuY3lBOUlIdDlLU2s3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMTBjbUZqWlY5bWJHRm5jeTVxY3k1dFlYQWlMQ0l2S2x4dUlDb2dRMjl3ZVhKcFoyaDBJRlJvWlNCUGNHVnVWR1ZzWlcxbGRISjVJRUYxZEdodmNuTmNiaUFxWEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1SUNvZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExseHVJQ29nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQWdJQ0JvZEhSd2N6b3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTENCemIyWjBkMkZ5WlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUlDb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRnS2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRnS2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWFXMXdiM0owSUhzZ1ZISmhZMlZHYkdGbmN5QjlJR1p5YjIwZ0p5NHZkSEpoWTJWZlpteGhaM01uTzF4dVpYaHdiM0owSUhaaGNpQkpUbFpCVEVsRVgxTlFRVTVKUkNBOUlDY3dNREF3TURBd01EQXdNREF3TURBd0p6dGNibVY0Y0c5eWRDQjJZWElnU1U1V1FVeEpSRjlVVWtGRFJVbEVJRDBnSnpBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdKenRjYm1WNGNHOXlkQ0IyWVhJZ1NVNVdRVXhKUkY5VFVFRk9YME5QVGxSRldGUWdQU0I3WEc0Z0lDQWdkSEpoWTJWSlpEb2dTVTVXUVV4SlJGOVVVa0ZEUlVsRUxGeHVJQ0FnSUhOd1lXNUpaRG9nU1U1V1FVeEpSRjlUVUVGT1NVUXNYRzRnSUNBZ2RISmhZMlZHYkdGbmN6b2dWSEpoWTJWR2JHRm5jeTVPVDA1RkxGeHVmVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXbHVkbUZzYVdRdGMzQmhiaTFqYjI1emRHRnVkSE11YW5NdWJXRndJaXdpTHlwY2JpQXFJRU52Y0hseWFXZG9kQ0JVYUdVZ1QzQmxibFJsYkdWdFpYUnllU0JCZFhSb2IzSnpYRzRnS2x4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjYmlBcUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaUFxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdJQ0FnYUhSMGNITTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2JpQXFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1SUNvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1SUNvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JtbHRjRzl5ZENCN0lFbE9Wa0ZNU1VSZlUxQkJUbDlEVDA1VVJWaFVJSDBnWm5KdmJTQW5MaTlwYm5aaGJHbGtMWE53WVc0dFkyOXVjM1JoYm5Sekp6dGNiaThxS2x4dUlDb2dWR2hsSUU1dmJsSmxZMjl5WkdsdVoxTndZVzRnYVhNZ2RHaGxJR1JsWm1GMWJIUWdlMEJzYVc1cklGTndZVzU5SUhSb1lYUWdhWE1nZFhObFpDQjNhR1Z1SUc1dklGTndZVzVjYmlBcUlHbHRjR3hsYldWdWRHRjBhVzl1SUdseklHRjJZV2xzWVdKc1pTNGdRV3hzSUc5d1pYSmhkR2x2Ym5NZ1lYSmxJRzV2TFc5d0lHbHVZMngxWkdsdVp5QmpiMjUwWlhoMFhHNGdLaUJ3Y205d1lXZGhkR2x2Ymk1Y2JpQXFMMXh1ZG1GeUlFNXZibEpsWTI5eVpHbHVaMU53WVc0Z1BTQXZLaW9nUUdOc1lYTnpJQ292SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1RtOXVVbVZqYjNKa2FXNW5VM0JoYmloZmMzQmhia052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGOXpjR0Z1UTI5dWRHVjRkQ0E5UFQwZ2RtOXBaQ0F3S1NCN0lGOXpjR0Z1UTI5dWRHVjRkQ0E5SUVsT1ZrRk1TVVJmVTFCQlRsOURUMDVVUlZoVU95QjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTndZVzVEYjI1MFpYaDBJRDBnWDNOd1lXNURiMjUwWlhoME8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCU1pYUjFjbTV6SUdFZ1UzQmhia052Ym5SbGVIUXVYRzRnSUNBZ1RtOXVVbVZqYjNKa2FXNW5VM0JoYmk1d2NtOTBiM1I1Y0dVdWMzQmhia052Ym5SbGVIUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6Y0dGdVEyOXVkR1Y0ZER0Y2JpQWdJQ0I5TzF4dUlDQWdJQzh2SUVKNUlHUmxabUYxYkhRZ1pHOWxjeUJ1YjNSb2FXNW5YRzRnSUNBZ1RtOXVVbVZqYjNKa2FXNW5VM0JoYmk1d2NtOTBiM1I1Y0dVdWMyVjBRWFIwY21saWRYUmxJRDBnWm5WdVkzUnBiMjRnS0Y5clpYa3NJRjkyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJQzh2SUVKNUlHUmxabUYxYkhRZ1pHOWxjeUJ1YjNSb2FXNW5YRzRnSUNBZ1RtOXVVbVZqYjNKa2FXNW5VM0JoYmk1d2NtOTBiM1I1Y0dVdWMyVjBRWFIwY21saWRYUmxjeUE5SUdaMWJtTjBhVzl1SUNoZllYUjBjbWxpZFhSbGN5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJQzh2SUVKNUlHUmxabUYxYkhRZ1pHOWxjeUJ1YjNSb2FXNW5YRzRnSUNBZ1RtOXVVbVZqYjNKa2FXNW5VM0JoYmk1d2NtOTBiM1I1Y0dVdVlXUmtSWFpsYm5RZ1BTQm1kVzVqZEdsdmJpQW9YMjVoYldVc0lGOWhkSFJ5YVdKMWRHVnpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHk4Z1Fua2daR1ZtWVhWc2RDQmtiMlZ6SUc1dmRHaHBibWRjYmlBZ0lDQk9iMjVTWldOdmNtUnBibWRUY0dGdUxuQnliM1J2ZEhsd1pTNXpaWFJUZEdGMGRYTWdQU0JtZFc1amRHbHZiaUFvWDNOMFlYUjFjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOU8xeHVJQ0FnSUM4dklFSjVJR1JsWm1GMWJIUWdaRzlsY3lCdWIzUm9hVzVuWEc0Z0lDQWdUbTl1VW1WamIzSmthVzVuVTNCaGJpNXdjbTkwYjNSNWNHVXVkWEJrWVhSbFRtRnRaU0E5SUdaMWJtTjBhVzl1SUNoZmJtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOU8xeHVJQ0FnSUM4dklFSjVJR1JsWm1GMWJIUWdaRzlsY3lCdWIzUm9hVzVuWEc0Z0lDQWdUbTl1VW1WamIzSmthVzVuVTNCaGJpNXdjbTkwYjNSNWNHVXVaVzVrSUQwZ1puVnVZM1JwYjI0Z0tGOWxibVJVYVcxbEtTQjdJSDA3WEc0Z0lDQWdMeThnYVhOU1pXTnZjbVJwYm1jZ1lXeDNZWGx6SUhKbGRIVnlibk1nWm1Gc2MyVWdabTl5SUU1dmJsSmxZMjl5WkdsdVoxTndZVzR1WEc0Z0lDQWdUbTl1VW1WamIzSmthVzVuVTNCaGJpNXdjbTkwYjNSNWNHVXVhWE5TWldOdmNtUnBibWNnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzh2SUVKNUlHUmxabUYxYkhRZ1pHOWxjeUJ1YjNSb2FXNW5YRzRnSUNBZ1RtOXVVbVZqYjNKa2FXNW5VM0JoYmk1d2NtOTBiM1I1Y0dVdWNtVmpiM0prUlhoalpYQjBhVzl1SUQwZ1puVnVZM1JwYjI0Z0tGOWxlR05sY0hScGIyNHNJRjkwYVcxbEtTQjdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFNXZibEpsWTI5eVpHbHVaMU53WVc0N1hHNTlLQ2twTzF4dVpYaHdiM0owSUhzZ1RtOXVVbVZqYjNKa2FXNW5VM0JoYmlCOU8xeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5VG05dVVtVmpiM0prYVc1blUzQmhiaTVxY3k1dFlYQWlMQ0l2S2x4dUlDb2dRMjl3ZVhKcFoyaDBJRlJvWlNCUGNHVnVWR1ZzWlcxbGRISjVJRUYxZEdodmNuTmNiaUFxWEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1SUNvZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExseHVJQ29nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQWdJQ0JvZEhSd2N6b3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTENCemIyWjBkMkZ5WlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUlDb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRnS2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRnS2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWFXMXdiM0owSUhzZ1kzSmxZWFJsUTI5dWRHVjRkRXRsZVNCOUlHWnliMjBnSnk0dUwyTnZiblJsZUhRdlkyOXVkR1Y0ZENjN1hHNXBiWEJ2Y25RZ2V5Qk9iMjVTWldOdmNtUnBibWRUY0dGdUlIMGdabkp2YlNBbkxpOU9iMjVTWldOdmNtUnBibWRUY0dGdUp6dGNibWx0Y0c5eWRDQjdJRU52Ym5SbGVIUkJVRWtnZlNCbWNtOXRJQ2N1TGk5aGNHa3ZZMjl1ZEdWNGRDYzdYRzR2S2lwY2JpQXFJSE53WVc0Z2EyVjVYRzRnS2k5Y2JuWmhjaUJUVUVGT1gwdEZXU0E5SUdOeVpXRjBaVU52Ym5SbGVIUkxaWGtvSjA5d1pXNVVaV3hsYldWMGNua2dRMjl1ZEdWNGRDQkxaWGtnVTFCQlRpY3BPMXh1THlvcVhHNGdLaUJTWlhSMWNtNGdkR2hsSUhOd1lXNGdhV1lnYjI1bElHVjRhWE4wYzF4dUlDcGNiaUFxSUVCd1lYSmhiU0JqYjI1MFpYaDBJR052Ym5SbGVIUWdkRzhnWjJWMElITndZVzRnWm5KdmJWeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFUzQmhiaWhqYjI1MFpYaDBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHTnZiblJsZUhRdVoyVjBWbUZzZFdVb1UxQkJUbDlMUlZrcElIeDhJSFZ1WkdWbWFXNWxaRHRjYm4xY2JpOHFLbHh1SUNvZ1IyVjBjeUIwYUdVZ2MzQmhiaUJtY205dElIUm9aU0JqZFhKeVpXNTBJR052Ym5SbGVIUXNJR2xtSUc5dVpTQmxlR2x6ZEhNdVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSQlkzUnBkbVZUY0dGdUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCblpYUlRjR0Z1S0VOdmJuUmxlSFJCVUVrdVoyVjBTVzV6ZEdGdVkyVW9LUzVoWTNScGRtVW9LU2s3WEc1OVhHNHZLaXBjYmlBcUlGTmxkQ0IwYUdVZ2MzQmhiaUJ2YmlCaElHTnZiblJsZUhSY2JpQXFYRzRnS2lCQWNHRnlZVzBnWTI5dWRHVjRkQ0JqYjI1MFpYaDBJSFJ2SUhWelpTQmhjeUJ3WVhKbGJuUmNiaUFxSUVCd1lYSmhiU0J6Y0dGdUlITndZVzRnZEc4Z2MyVjBJR0ZqZEdsMlpWeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzJWMFUzQmhiaWhqYjI1MFpYaDBMQ0J6Y0dGdUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdOdmJuUmxlSFF1YzJWMFZtRnNkV1VvVTFCQlRsOUxSVmtzSUhOd1lXNHBPMXh1ZlZ4dUx5b3FYRzRnS2lCU1pXMXZkbVVnWTNWeWNtVnVkQ0J6Y0dGdUlITjBiM0psWkNCcGJpQjBhR1VnWTI5dWRHVjRkRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQmpiMjUwWlhoMElHTnZiblJsZUhRZ2RHOGdaR1ZzWlhSbElITndZVzRnWm5KdmJWeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWkdWc1pYUmxVM0JoYmloamIyNTBaWGgwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR052Ym5SbGVIUXVaR1ZzWlhSbFZtRnNkV1VvVTFCQlRsOUxSVmtwTzF4dWZWeHVMeW9xWEc0Z0tpQlhjbUZ3SUhOd1lXNGdZMjl1ZEdWNGRDQnBiaUJoSUU1dmIzQlRjR0Z1SUdGdVpDQnpaWFFnWVhNZ2MzQmhiaUJwYmlCaElHNWxkMXh1SUNvZ1kyOXVkR1Y0ZEZ4dUlDcGNiaUFxSUVCd1lYSmhiU0JqYjI1MFpYaDBJR052Ym5SbGVIUWdkRzhnYzJWMElHRmpkR2wyWlNCemNHRnVJRzl1WEc0Z0tpQkFjR0Z5WVcwZ2MzQmhia052Ym5SbGVIUWdjM0JoYmlCamIyNTBaWGgwSUhSdklHSmxJSGR5WVhCd1pXUmNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhObGRGTndZVzVEYjI1MFpYaDBLR052Ym5SbGVIUXNJSE53WVc1RGIyNTBaWGgwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSE5sZEZOd1lXNG9ZMjl1ZEdWNGRDd2dibVYzSUU1dmJsSmxZMjl5WkdsdVoxTndZVzRvYzNCaGJrTnZiblJsZUhRcEtUdGNibjFjYmk4cUtseHVJQ29nUjJWMElIUm9aU0J6Y0dGdUlHTnZiblJsZUhRZ2IyWWdkR2hsSUhOd1lXNGdhV1lnYVhRZ1pYaHBjM1J6TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0JqYjI1MFpYaDBJR052Ym5SbGVIUWdkRzhnWjJWMElIWmhiSFZsY3lCbWNtOXRYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCblpYUlRjR0Z1UTI5dWRHVjRkQ2hqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUY5aE8xeHVJQ0FnSUhKbGRIVnliaUFvWDJFZ1BTQm5aWFJUY0dGdUtHTnZiblJsZUhRcEtTQTlQVDBnYm5Wc2JDQjhmQ0JmWVNBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dYMkV1YzNCaGJrTnZiblJsZUhRb0tUdGNibjFjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXTnZiblJsZUhRdGRYUnBiSE11YW5NdWJXRndJaXdpTHlwY2JpQXFJRU52Y0hseWFXZG9kQ0JVYUdVZ1QzQmxibFJsYkdWdFpYUnllU0JCZFhSb2IzSnpYRzRnS2x4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjYmlBcUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaUFxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdJQ0FnYUhSMGNITTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2JpQXFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1SUNvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1SUNvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JtbHRjRzl5ZENCN0lFbE9Wa0ZNU1VSZlUxQkJUa2xFTENCSlRsWkJURWxFWDFSU1FVTkZTVVFnZlNCbWNtOXRJQ2N1TDJsdWRtRnNhV1F0YzNCaGJpMWpiMjV6ZEdGdWRITW5PMXh1YVcxd2IzSjBJSHNnVG05dVVtVmpiM0prYVc1blUzQmhiaUI5SUdaeWIyMGdKeTR2VG05dVVtVmpiM0prYVc1blUzQmhiaWM3WEc1MllYSWdWa0ZNU1VSZlZGSkJRMFZKUkY5U1JVZEZXQ0E5SUM5ZUtGc3dMVGxoTFdaZGV6TXlmU2trTDJrN1hHNTJZWElnVmtGTVNVUmZVMUJCVGtsRVgxSkZSMFZZSUQwZ0wxNWJNQzA1WVMxbVhYc3hObjBrTDJrN1hHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FYTldZV3hwWkZSeVlXTmxTV1FvZEhKaFkyVkpaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQldRVXhKUkY5VVVrRkRSVWxFWDFKRlIwVllMblJsYzNRb2RISmhZMlZKWkNrZ0ppWWdkSEpoWTJWSlpDQWhQVDBnU1U1V1FVeEpSRjlVVWtGRFJVbEVPMXh1ZlZ4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdselZtRnNhV1JUY0dGdVNXUW9jM0JoYmtsa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZaQlRFbEVYMU5RUVU1SlJGOVNSVWRGV0M1MFpYTjBLSE53WVc1SlpDa2dKaVlnYzNCaGJrbGtJQ0U5UFNCSlRsWkJURWxFWDFOUVFVNUpSRHRjYm4xY2JpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCMGNuVmxJR2xtSUhSb2FYTWdlMEJzYVc1cklGTndZVzVEYjI1MFpYaDBmU0JwY3lCMllXeHBaQzVjYmlBcUlFQnlaWFIxY200Z2RISjFaU0JwWmlCMGFHbHpJSHRBYkdsdWF5QlRjR0Z1UTI5dWRHVjRkSDBnYVhNZ2RtRnNhV1F1WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMU53WVc1RGIyNTBaWGgwVm1Gc2FXUW9jM0JoYmtOdmJuUmxlSFFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLR2x6Vm1Gc2FXUlVjbUZqWlVsa0tITndZVzVEYjI1MFpYaDBMblJ5WVdObFNXUXBJQ1ltSUdselZtRnNhV1JUY0dGdVNXUW9jM0JoYmtOdmJuUmxlSFF1YzNCaGJrbGtLU2s3WEc1OVhHNHZLaXBjYmlBcUlGZHlZWEFnZEdobElHZHBkbVZ1SUh0QWJHbHVheUJUY0dGdVEyOXVkR1Y0ZEgwZ2FXNGdZU0J1WlhjZ2JtOXVMWEpsWTI5eVpHbHVaeUI3UUd4cGJtc2dVM0JoYm4xY2JpQXFYRzRnS2lCQWNHRnlZVzBnYzNCaGJrTnZiblJsZUhRZ2MzQmhiaUJqYjI1MFpYaDBJSFJ2SUdKbElIZHlZWEJ3WldSY2JpQXFJRUJ5WlhSMWNtNXpJR0VnYm1WM0lHNXZiaTF5WldOdmNtUnBibWNnZTBCc2FXNXJJRk53WVc1OUlIZHBkR2dnZEdobElIQnliM1pwWkdWa0lHTnZiblJsZUhSY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSGR5WVhCVGNHRnVRMjl1ZEdWNGRDaHpjR0Z1UTI5dWRHVjRkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVG05dVVtVmpiM0prYVc1blUzQmhiaWh6Y0dGdVEyOXVkR1Y0ZENrN1hHNTlYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxemNHRnVZMjl1ZEdWNGRDMTFkR2xzY3k1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVhVzF3YjNKMElIc2dRMjl1ZEdWNGRFRlFTU0I5SUdaeWIyMGdKeTR1TDJGd2FTOWpiMjUwWlhoMEp6dGNibWx0Y0c5eWRDQjdJR2RsZEZOd1lXNURiMjUwWlhoMExDQnpaWFJUY0dGdUlIMGdabkp2YlNBbkxpNHZkSEpoWTJVdlkyOXVkR1Y0ZEMxMWRHbHNjeWM3WEc1cGJYQnZjblFnZXlCT2IyNVNaV052Y21ScGJtZFRjR0Z1SUgwZ1puSnZiU0FuTGk5T2IyNVNaV052Y21ScGJtZFRjR0Z1Snp0Y2JtbHRjRzl5ZENCN0lHbHpVM0JoYmtOdmJuUmxlSFJXWVd4cFpDQjlJR1p5YjIwZ0p5NHZjM0JoYm1OdmJuUmxlSFF0ZFhScGJITW5PMXh1ZG1GeUlHTnZiblJsZUhSQmNHa2dQU0JEYjI1MFpYaDBRVkJKTG1kbGRFbHVjM1JoYm1ObEtDazdYRzR2S2lwY2JpQXFJRTV2TFc5d0lHbHRjR3hsYldWdWRHRjBhVzl1Y3lCdlppQjdRR3hwYm1zZ1ZISmhZMlZ5ZlM1Y2JpQXFMMXh1ZG1GeUlFNXZiM0JVY21GalpYSWdQU0F2S2lvZ1FHTnNZWE56SUNvdklDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdablZ1WTNScGIyNGdUbTl2Y0ZSeVlXTmxjaWdwSUh0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYzNSaGNuUlRjR0Z1SUhOMFlYSjBjeUJoSUc1dmIzQWdjM0JoYmk1Y2JpQWdJQ0JPYjI5d1ZISmhZMlZ5TG5CeWIzUnZkSGx3WlM1emRHRnlkRk53WVc0Z1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlN3Z2IzQjBhVzl1Y3l3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dWRHVjRkQ0E5UFQwZ2RtOXBaQ0F3S1NCN0lHTnZiblJsZUhRZ1BTQmpiMjUwWlhoMFFYQnBMbUZqZEdsMlpTZ3BPeUI5WEc0Z0lDQWdJQ0FnSUhaaGNpQnliMjkwSUQwZ1FtOXZiR1ZoYmlodmNIUnBiMjV6SUQwOVBTQnVkV3hzSUh4OElHOXdkR2x2Ym5NZ1BUMDlJSFp2YVdRZ01DQS9JSFp2YVdRZ01DQTZJRzl3ZEdsdmJuTXVjbTl2ZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5YjI5MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFNXZibEpsWTI5eVpHbHVaMU53WVc0b0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRnlaVzUwUm5KdmJVTnZiblJsZUhRZ1BTQmpiMjUwWlhoMElDWW1JR2RsZEZOd1lXNURiMjUwWlhoMEtHTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOVGNHRnVRMjl1ZEdWNGRDaHdZWEpsYm5SR2NtOXRRMjl1ZEdWNGRDa2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpVM0JoYmtOdmJuUmxlSFJXWVd4cFpDaHdZWEpsYm5SR2NtOXRRMjl1ZEdWNGRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUbTl1VW1WamIzSmthVzVuVTNCaGJpaHdZWEpsYm5SR2NtOXRRMjl1ZEdWNGRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFNXZibEpsWTI5eVpHbHVaMU53WVc0b0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ1RtOXZjRlJ5WVdObGNpNXdjbTkwYjNSNWNHVXVjM1JoY25SQlkzUnBkbVZUY0dGdUlEMGdablZ1WTNScGIyNGdLRzVoYldVc0lHRnlaeklzSUdGeVp6TXNJR0Z5WnpRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5d2RITTdYRzRnSUNBZ0lDQWdJSFpoY2lCamRIZzdYRzRnSUNBZ0lDQWdJSFpoY2lCbWJqdGNiaUFnSUNBZ0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTRnUFNCaGNtY3lPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUFQwOUlETXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkSE1nUFNCaGNtY3lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptNGdQU0JoY21jek8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGN5QTlJR0Z5WnpJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZEhnZ1BTQmhjbWN6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTRnUFNCaGNtYzBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEpsYm5SRGIyNTBaWGgwSUQwZ1kzUjRJQ0U5UFNCdWRXeHNJQ1ltSUdOMGVDQWhQVDBnZG05cFpDQXdJRDhnWTNSNElEb2dZMjl1ZEdWNGRFRndhUzVoWTNScGRtVW9LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITndZVzRnUFNCMGFHbHpMbk4wWVhKMFUzQmhiaWh1WVcxbExDQnZjSFJ6TENCd1lYSmxiblJEYjI1MFpYaDBLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHTnZiblJsZUhSWGFYUm9VM0JoYmxObGRDQTlJSE5sZEZOd1lXNG9jR0Z5Wlc1MFEyOXVkR1Y0ZEN3Z2MzQmhiaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYjI1MFpYaDBRWEJwTG5kcGRHZ29ZMjl1ZEdWNGRGZHBkR2hUY0dGdVUyVjBMQ0JtYml3Z2RXNWtaV1pwYm1Wa0xDQnpjR0Z1S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQk9iMjl3VkhKaFkyVnlPMXh1ZlNncEtUdGNibVY0Y0c5eWRDQjdJRTV2YjNCVWNtRmpaWElnZlR0Y2JtWjFibU4wYVc5dUlHbHpVM0JoYmtOdmJuUmxlSFFvYzNCaGJrTnZiblJsZUhRcElIdGNiaUFnSUNCeVpYUjFjbTRnS0hSNWNHVnZaaUJ6Y0dGdVEyOXVkR1Y0ZENBOVBUMGdKMjlpYW1WamRDY2dKaVpjYmlBZ0lDQWdJQ0FnZEhsd1pXOW1JSE53WVc1RGIyNTBaWGgwV3lkemNHRnVTV1FuWFNBOVBUMGdKM04wY21sdVp5Y2dKaVpjYmlBZ0lDQWdJQ0FnZEhsd1pXOW1JSE53WVc1RGIyNTBaWGgwV3lkMGNtRmpaVWxrSjEwZ1BUMDlJQ2R6ZEhKcGJtY25JQ1ltWEc0Z0lDQWdJQ0FnSUhSNWNHVnZaaUJ6Y0dGdVEyOXVkR1Y0ZEZzbmRISmhZMlZHYkdGbmN5ZGRJRDA5UFNBbmJuVnRZbVZ5SnlrN1hHNTlYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxT2IyOXdWSEpoWTJWeUxtcHpMbTFoY0NJc0lpOHFYRzRnS2lCRGIzQjVjbWxuYUhRZ1ZHaGxJRTl3Wlc1VVpXeGxiV1YwY25rZ1FYVjBhRzl5YzF4dUlDcGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUNBZ0lHaDBkSEJ6T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRnS2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2JpQXFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2JpQXFJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdleUJPYjI5d1ZISmhZMlZ5SUgwZ1puSnZiU0FuTGk5T2IyOXdWSEpoWTJWeUp6dGNiblpoY2lCT1QwOVFYMVJTUVVORlVpQTlJRzVsZHlCT2IyOXdWSEpoWTJWeUtDazdYRzR2S2lwY2JpQXFJRkJ5YjNoNUlIUnlZV05sY2lCd2NtOTJhV1JsWkNCaWVTQjBhR1VnY0hKdmVIa2dkSEpoWTJWeUlIQnliM1pwWkdWeVhHNGdLaTljYm5aaGNpQlFjbTk0ZVZSeVlXTmxjaUE5SUM4cUtpQkFZMnhoYzNNZ0tpOGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJRY205NGVWUnlZV05sY2loZmNISnZkbWxrWlhJc0lHNWhiV1VzSUhabGNuTnBiMjRzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKdmRtbGtaWElnUFNCZmNISnZkbWxrWlhJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1GdFpTQTlJRzVoYldVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1WeWMybHZiaUE5SUhabGNuTnBiMjQ3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTTdYRzRnSUNBZ2ZWeHVJQ0FnSUZCeWIzaDVWSEpoWTJWeUxuQnliM1J2ZEhsd1pTNXpkR0Z5ZEZOd1lXNGdQU0JtZFc1amRHbHZiaUFvYm1GdFpTd2diM0IwYVc5dWN5d2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZloyVjBWSEpoWTJWeUtDa3VjM1JoY25SVGNHRnVLRzVoYldVc0lHOXdkR2x2Ym5Nc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVUhKdmVIbFVjbUZqWlhJdWNISnZkRzkwZVhCbExuTjBZWEowUVdOMGFYWmxVM0JoYmlBOUlHWjFibU4wYVc5dUlDaGZibUZ0WlN3Z1gyOXdkR2x2Ym5Nc0lGOWpiMjUwWlhoMExDQmZabTRwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJ5WVdObGNpQTlJSFJvYVhNdVgyZGxkRlJ5WVdObGNpZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVbVZtYkdWamRDNWhjSEJzZVNoMGNtRmpaWEl1YzNSaGNuUkJZM1JwZG1WVGNHRnVMQ0IwY21GalpYSXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVY25rZ2RHOGdaMlYwSUdFZ2RISmhZMlZ5SUdaeWIyMGdkR2hsSUhCeWIzaDVJSFJ5WVdObGNpQndjbTkyYVdSbGNpNWNiaUFnSUNBZ0tpQkpaaUIwYUdVZ2NISnZlSGtnZEhKaFkyVnlJSEJ5YjNacFpHVnlJR2hoY3lCdWJ5QmtaV3hsWjJGMFpTd2djbVYwZFhKdUlHRWdibTl2Y0NCMGNtRmpaWEl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdVSEp2ZUhsVWNtRmpaWEl1Y0hKdmRHOTBlWEJsTGw5blpYUlVjbUZqWlhJZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5a1pXeGxaMkYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyUmxiR1ZuWVhSbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCMGNtRmpaWElnUFNCMGFHbHpMbDl3Y205MmFXUmxjaTVuWlhSRVpXeGxaMkYwWlZSeVlXTmxjaWgwYUdsekxtNWhiV1VzSUhSb2FYTXVkbVZ5YzJsdmJpd2dkR2hwY3k1dmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwY21GalpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCT1QwOVFYMVJTUVVORlVqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtaV3hsWjJGMFpTQTlJSFJ5WVdObGNqdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJSbGJHVm5ZWFJsTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlGQnliM2g1VkhKaFkyVnlPMXh1ZlNncEtUdGNibVY0Y0c5eWRDQjdJRkJ5YjNoNVZISmhZMlZ5SUgwN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFRY205NGVWUnlZV05sY2k1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVhVzF3YjNKMElIc2dUbTl2Y0ZSeVlXTmxjaUI5SUdaeWIyMGdKeTR2VG05dmNGUnlZV05sY2ljN1hHNHZLaXBjYmlBcUlFRnVJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOW1JSFJvWlNCN1FHeHBibXNnVkhKaFkyVnlVSEp2ZG1sa1pYSjlJSGRvYVdOb0lISmxkSFZ5Ym5NZ1lXNGdhVzF3YjNSbGJuUmNiaUFxSUZSeVlXTmxjaUJtYjNJZ1lXeHNJR05oYkd4eklIUnZJR0JuWlhSVWNtRmpaWEpnTGx4dUlDcGNiaUFxSUVGc2JDQnZjR1Z5WVhScGIyNXpJR0Z5WlNCdWJ5MXZjQzVjYmlBcUwxeHVkbUZ5SUU1dmIzQlVjbUZqWlhKUWNtOTJhV1JsY2lBOUlDOHFLaUJBWTJ4aGMzTWdLaThnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCT2IyOXdWSEpoWTJWeVVISnZkbWxrWlhJb0tTQjdYRzRnSUNBZ2ZWeHVJQ0FnSUU1dmIzQlVjbUZqWlhKUWNtOTJhV1JsY2k1d2NtOTBiM1I1Y0dVdVoyVjBWSEpoWTJWeUlEMGdablZ1WTNScGIyNGdLRjl1WVcxbExDQmZkbVZ5YzJsdmJpd2dYMjl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCT2IyOXdWSEpoWTJWeUtDazdYRzRnSUNBZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnVG05dmNGUnlZV05sY2xCeWIzWnBaR1Z5TzF4dWZTZ3BLVHRjYm1WNGNHOXlkQ0I3SUU1dmIzQlVjbUZqWlhKUWNtOTJhV1JsY2lCOU8xeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5VG05dmNGUnlZV05sY2xCeWIzWnBaR1Z5TG1wekxtMWhjQ0lzSWk4cVhHNGdLaUJEYjNCNWNtbG5hSFFnVkdobElFOXdaVzVVWld4bGJXVjBjbmtnUVhWMGFHOXljMXh1SUNwY2JpQXFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0Z0tpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaUFxWEc0Z0tpQWdJQ0FnSUdoMGRIQnpPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNGdLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlBcUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlBcUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNXBiWEJ2Y25RZ2V5QlFjbTk0ZVZSeVlXTmxjaUI5SUdaeWIyMGdKeTR2VUhKdmVIbFVjbUZqWlhJbk8xeHVhVzF3YjNKMElIc2dUbTl2Y0ZSeVlXTmxjbEJ5YjNacFpHVnlJSDBnWm5KdmJTQW5MaTlPYjI5d1ZISmhZMlZ5VUhKdmRtbGtaWEluTzF4dWRtRnlJRTVQVDFCZlZGSkJRMFZTWDFCU1QxWkpSRVZTSUQwZ2JtVjNJRTV2YjNCVWNtRmpaWEpRY205MmFXUmxjaWdwTzF4dUx5b3FYRzRnS2lCVWNtRmpaWElnY0hKdmRtbGtaWElnZDJocFkyZ2djSEp2ZG1sa1pYTWdlMEJzYVc1cklGQnliM2g1VkhKaFkyVnlmWE11WEc0Z0tseHVJQ29nUW1WbWIzSmxJR0VnWkdWc1pXZGhkR1VnYVhNZ2MyVjBMQ0IwY21GalpYSnpJSEJ5YjNacFpHVmtJR0Z5WlNCT2IwOXdMbHh1SUNvZ0lDQlhhR1Z1SUdFZ1pHVnNaV2RoZEdVZ2FYTWdjMlYwTENCMGNtRmpaWE1nWVhKbElIQnliM1pwWkdWa0lHWnliMjBnZEdobElHUmxiR1ZuWVhSbExseHVJQ29nSUNCWGFHVnVJR0VnWkdWc1pXZGhkR1VnYVhNZ2MyVjBJR0ZtZEdWeUlIUnlZV05sY25NZ2FHRjJaU0JoYkhKbFlXUjVJR0psWlc0Z2NISnZkbWxrWldRc1hHNGdLaUFnSUdGc2JDQjBjbUZqWlhKeklHRnNjbVZoWkhrZ2NISnZkbWxrWldRZ2QybHNiQ0IxYzJVZ2RHaGxJSEJ5YjNacFpHVmtJR1JsYkdWbllYUmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUxseHVJQ292WEc1MllYSWdVSEp2ZUhsVWNtRmpaWEpRY205MmFXUmxjaUE5SUM4cUtpQkFZMnhoYzNNZ0tpOGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJRY205NGVWUnlZV05sY2xCeWIzWnBaR1Z5S0NrZ2UxeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUWdZU0I3UUd4cGJtc2dVSEp2ZUhsVWNtRmpaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdVSEp2ZUhsVWNtRmpaWEpRY205MmFXUmxjaTV3Y205MGIzUjVjR1V1WjJWMFZISmhZMlZ5SUQwZ1puVnVZM1JwYjI0Z0tHNWhiV1VzSUhabGNuTnBiMjRzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjloTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0NoZllTQTlJSFJvYVhNdVoyVjBSR1ZzWldkaGRHVlVjbUZqWlhJb2JtRnRaU3dnZG1WeWMybHZiaXdnYjNCMGFXOXVjeWtwSUNFOVBTQnVkV3hzSUNZbUlGOWhJQ0U5UFNCMmIybGtJREFnUHlCZllTQTZJRzVsZHlCUWNtOTRlVlJ5WVdObGNpaDBhR2x6TENCdVlXMWxMQ0IyWlhKemFXOXVMQ0J2Y0hScGIyNXpLU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQlFjbTk0ZVZSeVlXTmxjbEJ5YjNacFpHVnlMbkJ5YjNSdmRIbHdaUzVuWlhSRVpXeGxaMkYwWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOWhPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRjloSUQwZ2RHaHBjeTVmWkdWc1pXZGhkR1VwSUNFOVBTQnVkV3hzSUNZbUlGOWhJQ0U5UFNCMmIybGtJREFnUHlCZllTQTZJRTVQVDFCZlZGSkJRMFZTWDFCU1QxWkpSRVZTTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMElIUm9aU0JrWld4bFoyRjBaU0IwY21GalpYSWdjSEp2ZG1sa1pYSmNiaUFnSUNBZ0tpOWNiaUFnSUNCUWNtOTRlVlJ5WVdObGNsQnliM1pwWkdWeUxuQnliM1J2ZEhsd1pTNXpaWFJFWld4bFoyRjBaU0E5SUdaMWJtTjBhVzl1SUNoa1pXeGxaMkYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pXeGxaMkYwWlNBOUlHUmxiR1ZuWVhSbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVUhKdmVIbFVjbUZqWlhKUWNtOTJhV1JsY2k1d2NtOTBiM1I1Y0dVdVoyVjBSR1ZzWldkaGRHVlVjbUZqWlhJZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlN3Z2RtVnljMmx2Yml3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDJFN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1gyRWdQU0IwYUdsekxsOWtaV3hsWjJGMFpTa2dQVDA5SUc1MWJHd2dmSHdnWDJFZ1BUMDlJSFp2YVdRZ01DQS9JSFp2YVdRZ01DQTZJRjloTG1kbGRGUnlZV05sY2lodVlXMWxMQ0IyWlhKemFXOXVMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCUWNtOTRlVlJ5WVdObGNsQnliM1pwWkdWeU8xeHVmU2dwS1R0Y2JtVjRjRzl5ZENCN0lGQnliM2g1VkhKaFkyVnlVSEp2ZG1sa1pYSWdmVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBWQnliM2g1VkhKaFkyVnlVSEp2ZG1sa1pYSXVhbk11YldGd0lpd2lMeXBjYmlBcUlFTnZjSGx5YVdkb2RDQlVhR1VnVDNCbGJsUmxiR1Z0WlhSeWVTQkJkWFJvYjNKelhHNGdLbHh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaUFxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ0lDQWdhSFIwY0hNNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlBcUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHVJQ29nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVJQ29nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmk4cUtseHVJQ29nUUdSbGNISmxZMkYwWldRZ2RYTmxJSFJvWlNCdmJtVWdaR1ZqYkdGeVpXUWdhVzRnUUc5d1pXNTBaV3hsYldWMGNua3ZjMlJyTFhSeVlXTmxMV0poYzJVZ2FXNXpkR1ZoWkM1Y2JpQXFJRUVnYzJGdGNHeHBibWNnWkdWamFYTnBiMjRnZEdoaGRDQmtaWFJsY20xcGJtVnpJR2h2ZHlCaElIdEFiR2x1YXlCVGNHRnVmU0IzYVd4c0lHSmxJSEpsWTI5eVpHVmtYRzRnS2lCaGJtUWdZMjlzYkdWamRHVmtMbHh1SUNvdlhHNWxlSEJ2Y25RZ2RtRnlJRk5oYlhCc2FXNW5SR1ZqYVhOcGIyNDdYRzRvWm5WdVkzUnBiMjRnS0ZOaGJYQnNhVzVuUkdWamFYTnBiMjRwSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCZ1UzQmhiaTVwYzFKbFkyOXlaR2x1WnlncElEMDlQU0JtWVd4elpXQXNJSE53WVc0Z2QybHNiQ0J1YjNRZ1ltVWdjbVZqYjNKa1pXUWdZVzVrSUdGc2JDQmxkbVZ1ZEhOY2JpQWdJQ0FnS2lCaGJtUWdZWFIwY21saWRYUmxjeUIzYVd4c0lHSmxJR1J5YjNCd1pXUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1UyRnRjR3hwYm1kRVpXTnBjMmx2Ymx0VFlXMXdiR2x1WjBSbFkybHphVzl1VzF3aVRrOVVYMUpGUTA5U1JGd2lYU0E5SURCZElEMGdYQ0pPVDFSZlVrVkRUMUpFWENJN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1lGTndZVzR1YVhOU1pXTnZjbVJwYm1jb0tTQTlQVDBnZEhKMVpXQXNJR0oxZENCZ1UyRnRjR3hsWkdBZ1pteGhaeUJwYmlCN1FHeHBibXNnVkhKaFkyVkdiR0ZuYzMxY2JpQWdJQ0FnS2lCTlZWTlVJRTVQVkNCaVpTQnpaWFF1WEc0Z0lDQWdJQ292WEc0Z0lDQWdVMkZ0Y0d4cGJtZEVaV05wYzJsdmJsdFRZVzF3YkdsdVowUmxZMmx6YVc5dVcxd2lVa1ZEVDFKRVhDSmRJRDBnTVYwZ1BTQmNJbEpGUTA5U1JGd2lPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR0JUY0dGdUxtbHpVbVZqYjNKa2FXNW5LQ2tnUFQwOUlIUnlkV1ZnSUVGT1JDQmdVMkZ0Y0d4bFpHQWdabXhoWnlCcGJpQjdRR3hwYm1zZ1ZISmhZMlZHYkdGbmMzMWNiaUFnSUNBZ0tpQk5WVk5VSUdKbElITmxkQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQlRZVzF3YkdsdVowUmxZMmx6YVc5dVcxTmhiWEJzYVc1blJHVmphWE5wYjI1YlhDSlNSVU5QVWtSZlFVNUVYMU5CVFZCTVJVUmNJbDBnUFNBeVhTQTlJRndpVWtWRFQxSkVYMEZPUkY5VFFVMVFURVZFWENJN1hHNTlLU2hUWVcxd2JHbHVaMFJsWTJsemFXOXVJSHg4SUNoVFlXMXdiR2x1WjBSbFkybHphVzl1SUQwZ2UzMHBLVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBWTmhiWEJzYVc1blVtVnpkV3gwTG1wekxtMWhjQ0lzSWk4cVhHNGdLaUJEYjNCNWNtbG5hSFFnVkdobElFOXdaVzVVWld4bGJXVjBjbmtnUVhWMGFHOXljMXh1SUNwY2JpQXFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0Z0tpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaUFxWEc0Z0tpQWdJQ0FnSUdoMGRIQnpPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNGdLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlBcUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlBcUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWxlSEJ2Y25RZ2RtRnlJRk53WVc1TGFXNWtPMXh1S0daMWJtTjBhVzl1SUNoVGNHRnVTMmx1WkNrZ2UxeHVJQ0FnSUM4cUtpQkVaV1poZFd4MElIWmhiSFZsTGlCSmJtUnBZMkYwWlhNZ2RHaGhkQ0IwYUdVZ2MzQmhiaUJwY3lCMWMyVmtJR2x1ZEdWeWJtRnNiSGt1SUNvdlhHNGdJQ0FnVTNCaGJrdHBibVJiVTNCaGJrdHBibVJiWENKSlRsUkZVazVCVEZ3aVhTQTlJREJkSUQwZ1hDSkpUbFJGVWs1QlRGd2lPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1WkdsallYUmxjeUIwYUdGMElIUm9aU0J6Y0dGdUlHTnZkbVZ5Y3lCelpYSjJaWEl0YzJsa1pTQm9ZVzVrYkdsdVp5QnZaaUJoYmlCU1VFTWdiM0lnYjNSb1pYSmNiaUFnSUNBZ0tpQnlaVzF2ZEdVZ2NtVnhkV1Z6ZEM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JUY0dGdVMybHVaRnRUY0dGdVMybHVaRnRjSWxORlVsWkZVbHdpWFNBOUlERmRJRDBnWENKVFJWSldSVkpjSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJtUnBZMkYwWlhNZ2RHaGhkQ0IwYUdVZ2MzQmhiaUJqYjNabGNuTWdkR2hsSUdOc2FXVnVkQzF6YVdSbElIZHlZWEJ3WlhJZ1lYSnZkVzVrSUdGdUlGSlFReUJ2Y2x4dUlDQWdJQ0FxSUc5MGFHVnlJSEpsYlc5MFpTQnlaWEYxWlhOMExseHVJQ0FnSUNBcUwxeHVJQ0FnSUZOd1lXNUxhVzVrVzFOd1lXNUxhVzVrVzF3aVEweEpSVTVVWENKZElEMGdNbDBnUFNCY0lrTk1TVVZPVkZ3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFbHVaR2xqWVhSbGN5QjBhR0YwSUhSb1pTQnpjR0Z1SUdSbGMyTnlhV0psY3lCd2NtOWtkV05sY2lCelpXNWthVzVuSUdFZ2JXVnpjMkZuWlNCMGJ5QmhYRzRnSUNBZ0lDb2dZbkp2YTJWeUxpQlZibXhwYTJVZ1kyeHBaVzUwSUdGdVpDQnpaWEoyWlhJc0lIUm9aWEpsSUdseklHNXZJR1JwY21WamRDQmpjbWwwYVdOaGJDQndZWFJvSUd4aGRHVnVZM2xjYmlBZ0lDQWdLaUJ5Wld4aGRHbHZibk5vYVhBZ1ltVjBkMlZsYmlCd2NtOWtkV05sY2lCaGJtUWdZMjl1YzNWdFpYSWdjM0JoYm5NdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVTNCaGJrdHBibVJiVTNCaGJrdHBibVJiWENKUVVrOUVWVU5GVWx3aVhTQTlJRE5kSUQwZ1hDSlFVazlFVlVORlVsd2lPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1WkdsallYUmxjeUIwYUdGMElIUm9aU0J6Y0dGdUlHUmxjMk55YVdKbGN5QmpiMjV6ZFcxbGNpQnlaV05sYVhacGJtY2dZU0J0WlhOellXZGxJR1p5YjIwZ1lWeHVJQ0FnSUNBcUlHSnliMnRsY2k0Z1ZXNXNhV3RsSUdOc2FXVnVkQ0JoYm1RZ2MyVnlkbVZ5TENCMGFHVnlaU0JwY3lCdWJ5QmthWEpsWTNRZ1kzSnBkR2xqWVd3Z2NHRjBhQ0JzWVhSbGJtTjVYRzRnSUNBZ0lDb2djbVZzWVhScGIyNXphR2x3SUdKbGRIZGxaVzRnY0hKdlpIVmpaWElnWVc1a0lHTnZibk4xYldWeUlITndZVzV6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJRk53WVc1TGFXNWtXMU53WVc1TGFXNWtXMXdpUTA5T1UxVk5SVkpjSWwwZ1BTQTBYU0E5SUZ3aVEwOU9VMVZOUlZKY0lqdGNibjBwS0ZOd1lXNUxhVzVrSUh4OElDaFRjR0Z1UzJsdVpDQTlJSHQ5S1NrN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDF6Y0dGdVgydHBibVF1YW5NdWJXRndJaXdpTHlvcVhHNGdLaUJCYmlCbGJuVnRaWEpoZEdsdmJpQnZaaUJ6ZEdGMGRYTWdZMjlrWlhNdVhHNGdLaTljYm1WNGNHOXlkQ0IyWVhJZ1UzQmhibE4wWVhSMWMwTnZaR1U3WEc0b1puVnVZM1JwYjI0Z0tGTndZVzVUZEdGMGRYTkRiMlJsS1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR1JsWm1GMWJIUWdjM1JoZEhWekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUZOd1lXNVRkR0YwZFhORGIyUmxXMU53WVc1VGRHRjBkWE5EYjJSbFcxd2lWVTVUUlZSY0lsMGdQU0F3WFNBOUlGd2lWVTVUUlZSY0lqdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnYjNCbGNtRjBhVzl1SUdoaGN5QmlaV1Z1SUhaaGJHbGtZWFJsWkNCaWVTQmhiaUJCY0hCc2FXTmhkR2x2YmlCa1pYWmxiRzl3WlhJZ2IzSmNiaUFnSUNBZ0tpQlBjR1Z5WVhSdmNpQjBieUJvWVhabElHTnZiWEJzWlhSbFpDQnpkV05qWlhOelpuVnNiSGt1WEc0Z0lDQWdJQ292WEc0Z0lDQWdVM0JoYmxOMFlYUjFjME52WkdWYlUzQmhibE4wWVhSMWMwTnZaR1ZiWENKUFMxd2lYU0E5SURGZElEMGdYQ0pQUzF3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGUm9aU0J2Y0dWeVlYUnBiMjRnWTI5dWRHRnBibk1nWVc0Z1pYSnliM0l1WEc0Z0lDQWdJQ292WEc0Z0lDQWdVM0JoYmxOMFlYUjFjME52WkdWYlUzQmhibE4wWVhSMWMwTnZaR1ZiWENKRlVsSlBVbHdpWFNBOUlESmRJRDBnWENKRlVsSlBVbHdpTzF4dWZTa29VM0JoYmxOMFlYUjFjME52WkdVZ2ZId2dLRk53WVc1VGRHRjBkWE5EYjJSbElEMGdlMzBwS1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QWE4wWVhSMWN5NXFjeTV0WVhBaUxDSXZLbHh1SUNvZ1EyOXdlWEpwWjJoMElGUm9aU0JQY0dWdVZHVnNaVzFsZEhKNUlFRjFkR2h2Y25OY2JpQXFYRzRnS2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVJQ29nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUlDb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNBZ0lDQm9kSFJ3Y3pvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1ZG1GeUlGWkJURWxFWDB0RldWOURTRUZTWDFKQlRrZEZJRDBnSjF0Zk1DMDVZUzE2TFNvdlhTYzdYRzUyWVhJZ1ZrRk1TVVJmUzBWWklEMGdYQ0piWVMxNlhWd2lJQ3NnVmtGTVNVUmZTMFZaWDBOSVFWSmZVa0ZPUjBVZ0t5QmNJbnN3TERJMU5YMWNJanRjYm5aaGNpQldRVXhKUkY5V1JVNUVUMUpmUzBWWklEMGdYQ0piWVMxNk1DMDVYVndpSUNzZ1ZrRk1TVVJmUzBWWlgwTklRVkpmVWtGT1IwVWdLeUJjSW5zd0xESTBNSDFBVzJFdGVsMWNJaUFySUZaQlRFbEVYMHRGV1Y5RFNFRlNYMUpCVGtkRklDc2dYQ0o3TUN3eE0zMWNJanRjYm5aaGNpQldRVXhKUkY5TFJWbGZVa1ZIUlZnZ1BTQnVaWGNnVW1WblJYaHdLRndpWGlnL09sd2lJQ3NnVmtGTVNVUmZTMFZaSUNzZ1hDSjhYQ0lnS3lCV1FVeEpSRjlXUlU1RVQxSmZTMFZaSUNzZ1hDSXBKRndpS1R0Y2JuWmhjaUJXUVV4SlJGOVdRVXhWUlY5Q1FWTkZYMUpGUjBWWUlEMGdMMTViSUMxK1hYc3dMREkxTlgxYklTMStYU1F2TzF4dWRtRnlJRWxPVmtGTVNVUmZWa0ZNVlVWZlEwOU5UVUZmUlZGVlFVeGZVa1ZIUlZnZ1BTQXZMSHc5THp0Y2JpOHFLbHh1SUNvZ1MyVjVJR2x6SUc5d1lYRjFaU0J6ZEhKcGJtY2dkWEFnZEc4Z01qVTJJR05vWVhKaFkzUmxjbk1nY0hKcGJuUmhZbXhsTGlCSmRDQk5WVk5VSUdKbFoybHVJSGRwZEdnZ1lWeHVJQ29nYkc5M1pYSmpZWE5sSUd4bGRIUmxjaXdnWVc1a0lHTmhiaUJ2Ym14NUlHTnZiblJoYVc0Z2JHOTNaWEpqWVhObElHeGxkSFJsY25NZ1lTMTZMQ0JrYVdkcGRITWdNQzA1TEZ4dUlDb2dkVzVrWlhKelkyOXlaWE1nWHl3Z1pHRnphR1Z6SUMwc0lHRnpkR1Z5YVhOcmN5QXFMQ0JoYm1RZ1ptOXlkMkZ5WkNCemJHRnphR1Z6SUM4dVhHNGdLaUJHYjNJZ2JYVnNkR2t0ZEdWdVlXNTBJSFpsYm1SdmNpQnpZMlZ1WVhKcGIzTXNJR0Z1SUdGMElITnBaMjRnS0VBcElHTmhiaUJpWlNCMWMyVmtJSFJ2SUhCeVpXWnBlQ0IwYUdWY2JpQXFJSFpsYm1SdmNpQnVZVzFsTGlCV1pXNWtiM0p6SUZOSVQxVk1SQ0J6WlhRZ2RHaGxJSFJsYm1GdWRDQkpSQ0JoZENCMGFHVWdZbVZuYVc1dWFXNW5JRzltSUhSb1pTQnJaWGt1WEc0Z0tpQnpaV1VnYUhSMGNITTZMeTkzZDNjdWR6TXViM0puTDFSU0wzUnlZV05sTFdOdmJuUmxlSFF2STJ0bGVWeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZMWlhrb2EyVjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGWkJURWxFWDB0RldWOVNSVWRGV0M1MFpYTjBLR3RsZVNrN1hHNTlYRzR2S2lwY2JpQXFJRlpoYkhWbElHbHpJRzl3WVhGMVpTQnpkSEpwYm1jZ2RYQWdkRzhnTWpVMklHTm9ZWEpoWTNSbGNuTWdjSEpwYm5SaFlteGxJRUZUUTBsSklGSkdRekF3TWpCY2JpQXFJR05vWVhKaFkzUmxjbk1nS0drdVpTNHNJSFJvWlNCeVlXNW5aU0F3ZURJd0lIUnZJREI0TjBVcElHVjRZMlZ3ZENCamIyMXRZU0FzSUdGdVpDQTlMbHh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWV1lXeDFaU2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb1ZrRk1TVVJmVmtGTVZVVmZRa0ZUUlY5U1JVZEZXQzUwWlhOMEtIWmhiSFZsS1NBbUpseHVJQ0FnSUNBZ0lDQWhTVTVXUVV4SlJGOVdRVXhWUlY5RFQwMU5RVjlGVVZWQlRGOVNSVWRGV0M1MFpYTjBLSFpoYkhWbEtTazdYRzU5WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMTBjbUZqWlhOMFlYUmxMWFpoYkdsa1lYUnZjbk11YW5NdWJXRndJaXdpTHlwY2JpQXFJRU52Y0hseWFXZG9kQ0JVYUdVZ1QzQmxibFJsYkdWdFpYUnllU0JCZFhSb2IzSnpYRzRnS2x4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjYmlBcUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaUFxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdJQ0FnYUhSMGNITTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2JpQXFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1SUNvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1SUNvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JtbHRjRzl5ZENCN0lIWmhiR2xrWVhSbFMyVjVMQ0IyWVd4cFpHRjBaVlpoYkhWbElIMGdabkp2YlNBbkxpOTBjbUZqWlhOMFlYUmxMWFpoYkdsa1lYUnZjbk1uTzF4dWRtRnlJRTFCV0Y5VVVrRkRSVjlUVkVGVVJWOUpWRVZOVXlBOUlETXlPMXh1ZG1GeUlFMUJXRjlVVWtGRFJWOVRWRUZVUlY5TVJVNGdQU0ExTVRJN1hHNTJZWElnVEVsVFZGOU5SVTFDUlZKVFgxTkZVRUZTUVZSUFVpQTlJQ2NzSnp0Y2JuWmhjaUJNU1ZOVVgwMUZUVUpGVWw5TFJWbGZWa0ZNVlVWZlUxQk1TVlJVUlZJZ1BTQW5QU2M3WEc0dktpcGNiaUFxSUZSeVlXTmxVM1JoZEdVZ2JYVnpkQ0JpWlNCaElHTnNZWE56SUdGdVpDQnViM1FnWVNCemFXMXdiR1VnYjJKcVpXTjBJSFI1Y0dVZ1ltVmpZWFZ6WlNCdlppQjBhR1VnYzNCbFkxeHVJQ29nY21WeGRXbHlaVzFsYm5RZ0tHaDBkSEJ6T2k4dmQzZDNMbmN6TG05eVp5OVVVaTkwY21GalpTMWpiMjUwWlhoMEx5TjBjbUZqWlhOMFlYUmxMV1pwWld4a0tTNWNiaUFxWEc0Z0tpQklaWEpsSUdseklIUm9aU0JzYVhOMElHOW1JR0ZzYkc5M1pXUWdiWFYwWVhScGIyNXpPbHh1SUNvZ0xTQk9aWGNnYTJWNUxYWmhiSFZsSUhCaGFYSWdjMmh2ZFd4a0lHSmxJR0ZrWkdWa0lHbHVkRzhnZEdobElHSmxaMmx1Ym1sdVp5QnZaaUIwYUdVZ2JHbHpkRnh1SUNvZ0xTQlVhR1VnZG1Gc2RXVWdiMllnWVc1NUlHdGxlU0JqWVc0Z1ltVWdkWEJrWVhSbFpDNGdUVzlrYVdacFpXUWdhMlY1Y3lCTlZWTlVJR0psSUcxdmRtVmtJSFJ2SUhSb1pWeHVJQ29nWW1WbmFXNXVhVzVuSUc5bUlIUm9aU0JzYVhOMExseHVJQ292WEc1MllYSWdWSEpoWTJWVGRHRjBaVWx0Y0d3Z1BTQXZLaW9nUUdOc1lYTnpJQ292SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1ZISmhZMlZUZEdGMFpVbHRjR3dvY21GM1ZISmhZMlZUZEdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBiblJsY201aGJGTjBZWFJsSUQwZ2JtVjNJRTFoY0NncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21GM1ZISmhZMlZUZEdGMFpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0JoY25ObEtISmhkMVJ5WVdObFUzUmhkR1VwTzF4dUlDQWdJSDFjYmlBZ0lDQlVjbUZqWlZOMFlYUmxTVzF3YkM1d2NtOTBiM1I1Y0dVdWMyVjBJRDBnWm5WdVkzUnBiMjRnS0d0bGVTd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdMeThnVkU5RVR6b2dRbVZ1WTJodFlYSnJJSFJvWlNCa2FXWm1aWEpsYm5RZ1lYQndjbTloWTJobGN5aHRZWEFnZG5NZ2JHbHpkQ2tnWVc1a1hHNGdJQ0FnSUNBZ0lDOHZJSFZ6WlNCMGFHVWdabUZ6ZEdWeUlHOXVaUzVjYmlBZ0lDQWdJQ0FnZG1GeUlIUnlZV05sVTNSaGRHVWdQU0IwYUdsekxsOWpiRzl1WlNncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEhKaFkyVlRkR0YwWlM1ZmFXNTBaWEp1WVd4VGRHRjBaUzVvWVhNb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoWTJWVGRHRjBaUzVmYVc1MFpYSnVZV3hUZEdGMFpTNWtaV3hsZEdVb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGNtRmpaVk4wWVhSbExsOXBiblJsY201aGJGTjBZWFJsTG5ObGRDaHJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5WVdObFUzUmhkR1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQlVjbUZqWlZOMFlYUmxTVzF3YkM1d2NtOTBiM1I1Y0dVdWRXNXpaWFFnUFNCbWRXNWpkR2x2YmlBb2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBjbUZqWlZOMFlYUmxJRDBnZEdocGN5NWZZMnh2Ym1Vb0tUdGNiaUFnSUNBZ0lDQWdkSEpoWTJWVGRHRjBaUzVmYVc1MFpYSnVZV3hUZEdGMFpTNWtaV3hsZEdVb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5WVdObFUzUmhkR1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQlVjbUZqWlZOMFlYUmxTVzF3YkM1d2NtOTBiM1I1Y0dVdVoyVjBJRDBnWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFXNTBaWEp1WVd4VGRHRjBaUzVuWlhRb2EyVjVLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGUnlZV05sVTNSaGRHVkpiWEJzTG5CeWIzUnZkSGx3WlM1elpYSnBZV3hwZW1VZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXJaWGx6S0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQzV5WldSMVkyVW9ablZ1WTNScGIyNGdLR0ZuWnl3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaMmN1Y0hWemFDaHJaWGtnS3lCTVNWTlVYMDFGVFVKRlVsOUxSVmxmVmtGTVZVVmZVMUJNU1ZSVVJWSWdLeUJmZEdocGN5NW5aWFFvYTJWNUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVdkbk8xeHVJQ0FnSUNBZ0lDQjlMQ0JiWFNsY2JpQWdJQ0FnSUNBZ0lDQWdJQzVxYjJsdUtFeEpVMVJmVFVWTlFrVlNVMTlUUlZCQlVrRlVUMUlwTzF4dUlDQWdJSDA3WEc0Z0lDQWdWSEpoWTJWVGRHRjBaVWx0Y0d3dWNISnZkRzkwZVhCbExsOXdZWEp6WlNBOUlHWjFibU4wYVc5dUlDaHlZWGRVY21GalpWTjBZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WVhkVWNtRmpaVk4wWVhSbExteGxibWQwYUNBK0lFMUJXRjlVVWtGRFJWOVRWRUZVUlY5TVJVNHBYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmx1ZEdWeWJtRnNVM1JoZEdVZ1BTQnlZWGRVY21GalpWTjBZWFJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVjM0JzYVhRb1RFbFRWRjlOUlUxQ1JWSlRYMU5GVUVGU1FWUlBVaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXlaWFpsY25ObEtDa2dMeThnVTNSdmNtVWdhVzRnY21WMlpYSnpaU0J6YnlCdVpYY2dhMlY1Y3lBb0xuTmxkQ2d1TGk0cEtTQjNhV3hzSUdKbElIQnNZV05sWkNCaGRDQjBhR1VnWW1WbmFXNXVhVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVjbVZrZFdObEtHWjFibU4wYVc5dUlDaGhaMmNzSUhCaGNuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJzYVhOMFRXVnRZbVZ5SUQwZ2NHRnlkQzUwY21sdEtDazdJQzh2SUU5d2RHbHZibUZzSUZkb2FYUmxjM0JoWTJVZ0tFOVhVeWtnYUdGdVpHeHBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJwSUQwZ2JHbHpkRTFsYldKbGNpNXBibVJsZUU5bUtFeEpVMVJmVFVWTlFrVlNYMHRGV1Y5V1FVeFZSVjlUVUV4SlZGUkZVaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBaFBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhMlY1SUQwZ2JHbHpkRTFsYldKbGNpNXpiR2xqWlNnd0xDQnBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCc2FYTjBUV1Z0WW1WeUxuTnNhV05sS0drZ0t5QXhMQ0J3WVhKMExteGxibWQwYUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkdsa1lYUmxTMlY1S0d0bGVTa2dKaVlnZG1Gc2FXUmhkR1ZXWVd4MVpTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdkbkxuTmxkQ2hyWlhrc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJQUkU4NklFTnZibk5wWkdWeUlIUnZJR0ZrWkNCM1lYSnVhVzVuSUd4dloxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhaMmM3WEc0Z0lDQWdJQ0FnSUgwc0lHNWxkeUJOWVhBb0tTazdYRzRnSUNBZ0lDQWdJQzh2SUVKbFkyRjFjMlVnYjJZZ2RHaGxJSEpsZG1WeWMyVW9LU0J5WlhGMWFYSmxiV1Z1ZEN3Z2RISjFibU1nYlhWemRDQmlaU0JrYjI1bElHRm1kR1Z5SUcxaGNDQnBjeUJqY21WaGRHVmtYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlwYm5SbGNtNWhiRk4wWVhSbExuTnBlbVVnUGlCTlFWaGZWRkpCUTBWZlUxUkJWRVZmU1ZSRlRWTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJsdWRHVnlibUZzVTNSaGRHVWdQU0J1WlhjZ1RXRndLRUZ5Y21GNUxtWnliMjBvZEdocGN5NWZhVzUwWlhKdVlXeFRkR0YwWlM1bGJuUnlhV1Z6S0NrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxkbVZ5YzJVb0tTQXZMeUJWYzJVZ2NtVjJaWEp6WlNCellXMWxJR0Z6SUc5eWFXZHBibUZzSUhSeVlXTmxjM1JoZEdVZ2NHRnljMlVnWTJoaGFXNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjMnhwWTJVb01Dd2dUVUZZWDFSU1FVTkZYMU5VUVZSRlgwbFVSVTFUS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUZSeVlXTmxVM1JoZEdWSmJYQnNMbkJ5YjNSdmRIbHdaUzVmYTJWNWN5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVGeWNtRjVMbVp5YjIwb2RHaHBjeTVmYVc1MFpYSnVZV3hUZEdGMFpTNXJaWGx6S0NrcExuSmxkbVZ5YzJVb0tUdGNiaUFnSUNCOU8xeHVJQ0FnSUZSeVlXTmxVM1JoZEdWSmJYQnNMbkJ5YjNSdmRIbHdaUzVmWTJ4dmJtVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIwY21GalpWTjBZWFJsSUQwZ2JtVjNJRlJ5WVdObFUzUmhkR1ZKYlhCc0tDazdYRzRnSUNBZ0lDQWdJSFJ5WVdObFUzUmhkR1V1WDJsdWRHVnlibUZzVTNSaGRHVWdQU0J1WlhjZ1RXRndLSFJvYVhNdVgybHVkR1Z5Ym1Gc1UzUmhkR1VwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKaFkyVlRkR0YwWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQlVjbUZqWlZOMFlYUmxTVzF3YkR0Y2JuMG9LU2s3WEc1bGVIQnZjblFnZXlCVWNtRmpaVk4wWVhSbFNXMXdiQ0I5TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlkSEpoWTJWemRHRjBaUzFwYlhCc0xtcHpMbTFoY0NJc0lpOHFYRzRnS2lCRGIzQjVjbWxuYUhRZ1ZHaGxJRTl3Wlc1VVpXeGxiV1YwY25rZ1FYVjBhRzl5YzF4dUlDcGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUNBZ0lHaDBkSEJ6T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRnS2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2JpQXFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2JpQXFJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdleUJVY21GalpWTjBZWFJsU1cxd2JDQjlJR1p5YjIwZ0p5NHZkSEpoWTJWemRHRjBaUzFwYlhCc0p6dGNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWVWNtRmpaVk4wWVhSbEtISmhkMVJ5WVdObFUzUmhkR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZSeVlXTmxVM1JoZEdWSmJYQnNLSEpoZDFSeVlXTmxVM1JoZEdVcE8xeHVmVnh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OWRYUnBiSE11YW5NdWJXRndJaXdpTHlwY2JpQXFJRU52Y0hseWFXZG9kQ0JVYUdVZ1QzQmxibFJsYkdWdFpYUnllU0JCZFhSb2IzSnpYRzRnS2x4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjYmlBcUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaUFxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdJQ0FnYUhSMGNITTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2JpQXFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1SUNvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1SUNvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JpOHZJRk53YkdsMElHMXZaSFZzWlMxc1pYWmxiQ0IyWVhKcFlXSnNaU0JrWldacGJtbDBhVzl1SUdsdWRHOGdjMlZ3WVhKaGRHVWdabWxzWlhNZ2RHOGdZV3hzYjNkY2JpOHZJSFJ5WldVdGMyaGhhMmx1WnlCdmJpQmxZV05vSUdGd2FTQnBibk4wWVc1alpTNWNibWx0Y0c5eWRDQjdJRU52Ym5SbGVIUkJVRWtnZlNCbWNtOXRJQ2N1TDJGd2FTOWpiMjUwWlhoMEp6dGNiaThxS2lCRmJuUnllWEJ2YVc1MElHWnZjaUJqYjI1MFpYaDBJRUZRU1NBcUwxeHVaWGh3YjNKMElIWmhjaUJqYjI1MFpYaDBJRDBnUTI5dWRHVjRkRUZRU1M1blpYUkpibk4wWVc1alpTZ3BPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVkyOXVkR1Y0ZEMxaGNHa3Vhbk11YldGd0lpd2lMeXBjYmlBcUlFTnZjSGx5YVdkb2RDQlVhR1VnVDNCbGJsUmxiR1Z0WlhSeWVTQkJkWFJvYjNKelhHNGdLbHh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaUFxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ0lDQWdhSFIwY0hNNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlBcUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHVJQ29nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVJQ29nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmk4dklGTndiR2wwSUcxdlpIVnNaUzFzWlhabGJDQjJZWEpwWVdKc1pTQmtaV1pwYm1sMGFXOXVJR2x1ZEc4Z2MyVndZWEpoZEdVZ1ptbHNaWE1nZEc4Z1lXeHNiM2RjYmk4dklIUnlaV1V0YzJoaGEybHVaeUJ2YmlCbFlXTm9JR0Z3YVNCcGJuTjBZVzVqWlM1Y2JtbHRjRzl5ZENCN0lFUnBZV2RCVUVrZ2ZTQm1jbTl0SUNjdUwyRndhUzlrYVdGbkp6dGNiaThxS2x4dUlDb2dSVzUwY25sd2IybHVkQ0JtYjNJZ1JHbGhaeUJCVUVrdVhHNGdLaUJFWldacGJtVnpJRVJwWVdkdWIzTjBhV01nYUdGdVpHeGxjaUIxYzJWa0lHWnZjaUJwYm5SbGNtNWhiQ0JrYVdGbmJtOXpkR2xqSUd4dloyZHBibWNnYjNCbGNtRjBhVzl1Y3k1Y2JpQXFJRlJvWlNCa1pXWmhkV3gwSUhCeWIzWnBaR1Z6SUdFZ1RtOXZjQ0JFYVdGblRHOW5aMlZ5SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJSGRvYVdOb0lHMWhlU0JpWlNCamFHRnVaMlZrSUhacFlTQjBhR1ZjYmlBcUlHUnBZV2N1YzJWMFRHOW5aMlZ5S0d4dloyZGxjam9nUkdsaFoweHZaMmRsY2lrZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1WNGNHOXlkQ0IyWVhJZ1pHbGhaeUE5SUVScFlXZEJVRWt1YVc1emRHRnVZMlVvS1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JwWVdjdFlYQnBMbXB6TG0xaGNDSXNJaThxWEc0Z0tpQkRiM0I1Y21sbmFIUWdWR2hsSUU5d1pXNVVaV3hsYldWMGNua2dRWFYwYUc5eWMxeHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdJR2gwZEhCek9pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEc0Z0tpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaUFxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaUFxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1cGJYQnZjblFnZXlCT1QwOVFYMDFGVkVWU0lIMGdabkp2YlNBbkxpOU9iMjl3VFdWMFpYSW5PMXh1THlvcVhHNGdLaUJCYmlCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCMGFHVWdlMEJzYVc1cklFMWxkR1Z5VUhKdmRtbGtaWEo5SUhkb2FXTm9JSEpsZEhWeWJuTWdZVzRnYVcxd2IzUmxiblFnVFdWMFpYSmNiaUFxSUdadmNpQmhiR3dnWTJGc2JITWdkRzhnWUdkbGRFMWxkR1Z5WUZ4dUlDb3ZYRzUyWVhJZ1RtOXZjRTFsZEdWeVVISnZkbWxrWlhJZ1BTQXZLaW9nUUdOc1lYTnpJQ292SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1RtOXZjRTFsZEdWeVVISnZkbWxrWlhJb0tTQjdYRzRnSUNBZ2ZWeHVJQ0FnSUU1dmIzQk5aWFJsY2xCeWIzWnBaR1Z5TG5CeWIzUnZkSGx3WlM1blpYUk5aWFJsY2lBOUlHWjFibU4wYVc5dUlDaGZibUZ0WlN3Z1gzWmxjbk5wYjI0c0lGOXZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQk9UMDlRWDAxRlZFVlNPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUU1dmIzQk5aWFJsY2xCeWIzWnBaR1Z5TzF4dWZTZ3BLVHRjYm1WNGNHOXlkQ0I3SUU1dmIzQk5aWFJsY2xCeWIzWnBaR1Z5SUgwN1hHNWxlSEJ2Y25RZ2RtRnlJRTVQVDFCZlRVVlVSVkpmVUZKUFZrbEVSVklnUFNCdVpYY2dUbTl2Y0UxbGRHVnlVSEp2ZG1sa1pYSW9LVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBVNXZiM0JOWlhSbGNsQnliM1pwWkdWeUxtcHpMbTFoY0NJc0lpOHFYRzRnS2lCRGIzQjVjbWxuYUhRZ1ZHaGxJRTl3Wlc1VVpXeGxiV1YwY25rZ1FYVjBhRzl5YzF4dUlDcGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUNBZ0lHaDBkSEJ6T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRnS2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2JpQXFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2JpQXFJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdleUJPVDA5UVgwMUZWRVZTWDFCU1QxWkpSRVZTSUgwZ1puSnZiU0FuTGk0dmJXVjBjbWxqY3k5T2IyOXdUV1YwWlhKUWNtOTJhV1JsY2ljN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJIYkc5aVlXd3NJSEpsWjJsemRHVnlSMnh2WW1Gc0xDQjFibkpsWjJsemRHVnlSMnh2WW1Gc0xDQjlJR1p5YjIwZ0p5NHVMMmx1ZEdWeWJtRnNMMmRzYjJKaGJDMTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ2V5QkVhV0ZuUVZCSklIMGdabkp2YlNBbkxpOWthV0ZuSnp0Y2JuWmhjaUJCVUVsZlRrRk5SU0E5SUNkdFpYUnlhV056Snp0Y2JpOHFLbHh1SUNvZ1UybHVaMnhsZEc5dUlHOWlhbVZqZENCM2FHbGphQ0J5WlhCeVpYTmxiblJ6SUhSb1pTQmxiblJ5ZVNCd2IybHVkQ0IwYnlCMGFHVWdUM0JsYmxSbGJHVnRaWFJ5ZVNCTlpYUnlhV056SUVGUVNWeHVJQ292WEc1MllYSWdUV1YwY21samMwRlFTU0E5SUM4cUtpQkFZMnhoYzNNZ0tpOGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0F2S2lvZ1JXMXdkSGtnY0hKcGRtRjBaU0JqYjI1emRISjFZM1J2Y2lCd2NtVjJaVzUwY3lCbGJtUWdkWE5sY25NZ1puSnZiU0JqYjI1emRISjFZM1JwYm1jZ1lTQnVaWGNnYVc1emRHRnVZMlVnYjJZZ2RHaGxJRUZRU1NBcUwxeHVJQ0FnSUdaMWJtTjBhVzl1SUUxbGRISnBZM05CVUVrb0tTQjdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtpQkhaWFFnZEdobElITnBibWRzWlhSdmJpQnBibk4wWVc1alpTQnZaaUIwYUdVZ1RXVjBjbWxqY3lCQlVFa2dLaTljYmlBZ0lDQk5aWFJ5YVdOelFWQkpMbWRsZEVsdWMzUmhibU5sSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDJsdWMzUmhibU5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXBibk4wWVc1alpTQTlJRzVsZHlCTlpYUnlhV056UVZCSktDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHVjM1JoYm1ObE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBJSFJvWlNCamRYSnlaVzUwSUdkc2IySmhiQ0J0WlhSbGNpQndjbTkyYVdSbGNpNWNiaUFnSUNBZ0tpQlNaWFIxY201eklIUnlkV1VnYVdZZ2RHaGxJRzFsZEdWeUlIQnliM1pwWkdWeUlIZGhjeUJ6ZFdOalpYTnpablZzYkhrZ2NtVm5hWE4wWlhKbFpDd2daV3h6WlNCbVlXeHpaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQk5aWFJ5YVdOelFWQkpMbkJ5YjNSdmRIbHdaUzV6WlhSSGJHOWlZV3hOWlhSbGNsQnliM1pwWkdWeUlEMGdablZ1WTNScGIyNGdLSEJ5YjNacFpHVnlLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WldkcGMzUmxja2RzYjJKaGJDaEJVRWxmVGtGTlJTd2djSEp2ZG1sa1pYSXNJRVJwWVdkQlVFa3VhVzV6ZEdGdVkyVW9LU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJSFJvWlNCbmJHOWlZV3dnYldWMFpYSWdjSEp2ZG1sa1pYSXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1RXVjBjbWxqYzBGUVNTNXdjbTkwYjNSNWNHVXVaMlYwVFdWMFpYSlFjbTkyYVdSbGNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdkbGRFZHNiMkpoYkNoQlVFbGZUa0ZOUlNrZ2ZId2dUazlQVUY5TlJWUkZVbDlRVWs5V1NVUkZVanRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdZU0J0WlhSbGNpQm1jbTl0SUhSb1pTQm5iRzlpWVd3Z2JXVjBaWElnY0hKdmRtbGtaWEl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdUV1YwY21samMwRlFTUzV3Y205MGIzUjVjR1V1WjJWMFRXVjBaWElnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU3dnZG1WeWMybHZiaXdnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJOWlhSbGNsQnliM1pwWkdWeUtDa3VaMlYwVFdWMFpYSW9ibUZ0WlN3Z2RtVnljMmx2Yml3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lvZ1VtVnRiM1psSUhSb1pTQm5iRzlpWVd3Z2JXVjBaWElnY0hKdmRtbGtaWElnS2k5Y2JpQWdJQ0JOWlhSeWFXTnpRVkJKTG5CeWIzUnZkSGx3WlM1a2FYTmhZbXhsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IxYm5KbFoybHpkR1Z5UjJ4dlltRnNLRUZRU1Y5T1FVMUZMQ0JFYVdGblFWQkpMbWx1YzNSaGJtTmxLQ2twTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFMWxkSEpwWTNOQlVFazdYRzU5S0NrcE8xeHVaWGh3YjNKMElIc2dUV1YwY21samMwRlFTU0I5TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzliV1YwY21samN5NXFjeTV0WVhBaUxDSXZLbHh1SUNvZ1EyOXdlWEpwWjJoMElGUm9aU0JQY0dWdVZHVnNaVzFsZEhKNUlFRjFkR2h2Y25OY2JpQXFYRzRnS2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVJQ29nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUlDb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNBZ0lDQm9kSFJ3Y3pvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1THk4Z1UzQnNhWFFnYlc5a2RXeGxMV3hsZG1Wc0lIWmhjbWxoWW14bElHUmxabWx1YVhScGIyNGdhVzUwYnlCelpYQmhjbUYwWlNCbWFXeGxjeUIwYnlCaGJHeHZkMXh1THk4Z2RISmxaUzF6YUdGcmFXNW5JRzl1SUdWaFkyZ2dZWEJwSUdsdWMzUmhibU5sTGx4dWFXMXdiM0owSUhzZ1RXVjBjbWxqYzBGUVNTQjlJR1p5YjIwZ0p5NHZZWEJwTDIxbGRISnBZM01uTzF4dUx5b3FJRVZ1ZEhKNWNHOXBiblFnWm05eUlHMWxkSEpwWTNNZ1FWQkpJQ292WEc1bGVIQnZjblFnZG1GeUlHMWxkSEpwWTNNZ1BTQk5aWFJ5YVdOelFWQkpMbWRsZEVsdWMzUmhibU5sS0NrN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDF0WlhSeWFXTnpMV0Z3YVM1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVMeW9xWEc0Z0tpQk9ieTF2Y0NCcGJYQnNaVzFsYm5SaGRHbHZibk1nYjJZZ2UwQnNhVzVySUZSbGVIUk5ZWEJRY205d1lXZGhkRzl5ZlM1Y2JpQXFMMXh1ZG1GeUlFNXZiM0JVWlhoMFRXRndVSEp2Y0dGbllYUnZjaUE5SUM4cUtpQkFZMnhoYzNNZ0tpOGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJPYjI5d1ZHVjRkRTFoY0ZCeWIzQmhaMkYwYjNJb0tTQjdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtpQk9iMjl3SUdsdWFtVmpkQ0JtZFc1amRHbHZiaUJrYjJWeklHNXZkR2hwYm1jZ0tpOWNiaUFnSUNCT2IyOXdWR1Y0ZEUxaGNGQnliM0JoWjJGMGIzSXVjSEp2ZEc5MGVYQmxMbWx1YW1WamRDQTlJR1oxYm1OMGFXOXVJQ2hmWTI5dWRHVjRkQ3dnWDJOaGNuSnBaWElwSUhzZ2ZUdGNiaUFnSUNBdktpb2dUbTl2Y0NCbGVIUnlZV04wSUdaMWJtTjBhVzl1SUdSdlpYTWdibTkwYUdsdVp5QmhibVFnY21WMGRYSnVjeUIwYUdVZ2FXNXdkWFFnWTI5dWRHVjRkQ0FxTDF4dUlDQWdJRTV2YjNCVVpYaDBUV0Z3VUhKdmNHRm5ZWFJ2Y2k1d2NtOTBiM1I1Y0dVdVpYaDBjbUZqZENBOUlHWjFibU4wYVc5dUlDaGpiMjUwWlhoMExDQmZZMkZ5Y21sbGNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1ZEdWNGREdGNiaUFnSUNCOU8xeHVJQ0FnSUU1dmIzQlVaWGgwVFdGd1VISnZjR0ZuWVhSdmNpNXdjbTkwYjNSNWNHVXVabWxsYkdSeklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzEwN1hHNGdJQ0FnZlR0Y2JpQWdJQ0J5WlhSMWNtNGdUbTl2Y0ZSbGVIUk5ZWEJRY205d1lXZGhkRzl5TzF4dWZTZ3BLVHRjYm1WNGNHOXlkQ0I3SUU1dmIzQlVaWGgwVFdGd1VISnZjR0ZuWVhSdmNpQjlPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVRtOXZjRlJsZUhSTllYQlFjbTl3WVdkaGRHOXlMbXB6TG0xaGNDSXNJaThxWEc0Z0tpQkRiM0I1Y21sbmFIUWdWR2hsSUU5d1pXNVVaV3hsYldWMGNua2dRWFYwYUc5eWMxeHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdJR2gwZEhCek9pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEc0Z0tpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaUFxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaUFxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1cGJYQnZjblFnZXlCRGIyNTBaWGgwUVZCSklIMGdabkp2YlNBbkxpNHZZWEJwTDJOdmJuUmxlSFFuTzF4dWFXMXdiM0owSUhzZ1kzSmxZWFJsUTI5dWRHVjRkRXRsZVNCOUlHWnliMjBnSnk0dUwyTnZiblJsZUhRdlkyOXVkR1Y0ZENjN1hHNHZLaXBjYmlBcUlFSmhaMmRoWjJVZ2EyVjVYRzRnS2k5Y2JuWmhjaUJDUVVkSFFVZEZYMHRGV1NBOUlHTnlaV0YwWlVOdmJuUmxlSFJMWlhrb0owOXdaVzVVWld4bGJXVjBjbmtnUW1GbloyRm5aU0JMWlhrbktUdGNiaThxS2x4dUlDb2dVbVYwY21sbGRtVWdkR2hsSUdOMWNuSmxiblFnWW1GbloyRm5aU0JtY205dElIUm9aU0JuYVhabGJpQmpiMjUwWlhoMFhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0RGIyNTBaWGgwZlNCRGIyNTBaWGgwSUhSb1lYUWdiV0Z1WVdkbElHRnNiQ0JqYjI1MFpYaDBJSFpoYkhWbGMxeHVJQ29nUUhKbGRIVnlibk1nZTBKaFoyZGhaMlY5SUVWNGRISmhZM1JsWkNCaVlXZG5ZV2RsSUdaeWIyMGdkR2hsSUdOdmJuUmxlSFJjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRUpoWjJkaFoyVW9ZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamIyNTBaWGgwTG1kbGRGWmhiSFZsS0VKQlIwZEJSMFZmUzBWWktTQjhmQ0IxYm1SbFptbHVaV1E3WEc1OVhHNHZLaXBjYmlBcUlGSmxkSEpwWlhabElIUm9aU0JqZFhKeVpXNTBJR0poWjJkaFoyVWdabkp2YlNCMGFHVWdZV04wYVhabEwyTjFjbkpsYm5RZ1kyOXVkR1Y0ZEZ4dUlDcGNiaUFxSUVCeVpYUjFjbTV6SUh0Q1lXZG5ZV2RsZlNCRmVIUnlZV04wWldRZ1ltRm5aMkZuWlNCbWNtOXRJSFJvWlNCamIyNTBaWGgwWEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJCWTNScGRtVkNZV2RuWVdkbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCblpYUkNZV2RuWVdkbEtFTnZiblJsZUhSQlVFa3VaMlYwU1c1emRHRnVZMlVvS1M1aFkzUnBkbVVvS1NrN1hHNTlYRzR2S2lwY2JpQXFJRk4wYjNKbElHRWdZbUZuWjJGblpTQnBiaUIwYUdVZ1oybDJaVzRnWTI5dWRHVjRkRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdRMjl1ZEdWNGRIMGdRMjl1ZEdWNGRDQjBhR0YwSUcxaGJtRm5aU0JoYkd3Z1kyOXVkR1Y0ZENCMllXeDFaWE5jYmlBcUlFQndZWEpoYlNCN1FtRm5aMkZuWlgwZ1ltRm5aMkZuWlNCMGFHRjBJSGRwYkd3Z1ltVWdjMlYwSUdsdUlIUm9aU0JoWTNSMVlXd2dZMjl1ZEdWNGRGeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzJWMFFtRm5aMkZuWlNoamIyNTBaWGgwTENCaVlXZG5ZV2RsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR052Ym5SbGVIUXVjMlYwVm1Gc2RXVW9Ra0ZIUjBGSFJWOUxSVmtzSUdKaFoyZGhaMlVwTzF4dWZWeHVMeW9xWEc0Z0tpQkVaV3hsZEdVZ2RHaGxJR0poWjJkaFoyVWdjM1J2Y21Wa0lHbHVJSFJvWlNCbmFYWmxiaUJqYjI1MFpYaDBYRzRnS2x4dUlDb2dRSEJoY21GdElIdERiMjUwWlhoMGZTQkRiMjUwWlhoMElIUm9ZWFFnYldGdVlXZGxJR0ZzYkNCamIyNTBaWGgwSUhaaGJIVmxjMXh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1pHVnNaWFJsUW1GbloyRm5aU2hqYjI1MFpYaDBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHTnZiblJsZUhRdVpHVnNaWFJsVm1Gc2RXVW9Ra0ZIUjBGSFJWOUxSVmtwTzF4dWZWeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WTI5dWRHVjRkQzFvWld4d1pYSnpMbXB6TG0xaGNDSXNJaThxWEc0Z0tpQkRiM0I1Y21sbmFIUWdWR2hsSUU5d1pXNVVaV3hsYldWMGNua2dRWFYwYUc5eWMxeHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdJR2gwZEhCek9pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEc0Z0tpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaUFxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaUFxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1cGJYQnZjblFnZXlCblpYUkhiRzlpWVd3c0lISmxaMmx6ZEdWeVIyeHZZbUZzTENCMWJuSmxaMmx6ZEdWeVIyeHZZbUZzTENCOUlHWnliMjBnSnk0dUwybHVkR1Z5Ym1Gc0wyZHNiMkpoYkMxMWRHbHNjeWM3WEc1cGJYQnZjblFnZXlCT2IyOXdWR1Y0ZEUxaGNGQnliM0JoWjJGMGIzSWdmU0JtY205dElDY3VMaTl3Y205d1lXZGhkR2x2Ymk5T2IyOXdWR1Y0ZEUxaGNGQnliM0JoWjJGMGIzSW5PMXh1YVcxd2IzSjBJSHNnWkdWbVlYVnNkRlJsZUhSTllYQkhaWFIwWlhJc0lHUmxabUYxYkhSVVpYaDBUV0Z3VTJWMGRHVnlMQ0I5SUdaeWIyMGdKeTR1TDNCeWIzQmhaMkYwYVc5dUwxUmxlSFJOWVhCUWNtOXdZV2RoZEc5eUp6dGNibWx0Y0c5eWRDQjdJR2RsZEVKaFoyZGhaMlVzSUdkbGRFRmpkR2wyWlVKaFoyZGhaMlVzSUhObGRFSmhaMmRoWjJVc0lHUmxiR1YwWlVKaFoyZGhaMlVzSUgwZ1puSnZiU0FuTGk0dlltRm5aMkZuWlM5amIyNTBaWGgwTFdobGJIQmxjbk1uTzF4dWFXMXdiM0owSUhzZ1kzSmxZWFJsUW1GbloyRm5aU0I5SUdaeWIyMGdKeTR1TDJKaFoyZGhaMlV2ZFhScGJITW5PMXh1YVcxd2IzSjBJSHNnUkdsaFowRlFTU0I5SUdaeWIyMGdKeTR2WkdsaFp5YzdYRzUyWVhJZ1FWQkpYMDVCVFVVZ1BTQW5jSEp2Y0dGbllYUnBiMjRuTzF4dWRtRnlJRTVQVDFCZlZFVllWRjlOUVZCZlVGSlBVRUZIUVZSUFVpQTlJRzVsZHlCT2IyOXdWR1Y0ZEUxaGNGQnliM0JoWjJGMGIzSW9LVHRjYmk4cUtseHVJQ29nVTJsdVoyeGxkRzl1SUc5aWFtVmpkQ0IzYUdsamFDQnlaWEJ5WlhObGJuUnpJSFJvWlNCbGJuUnllU0J3YjJsdWRDQjBieUIwYUdVZ1QzQmxibFJsYkdWdFpYUnllU0JRY205d1lXZGhkR2x2YmlCQlVFbGNiaUFxTDF4dWRtRnlJRkJ5YjNCaFoyRjBhVzl1UVZCSklEMGdMeW9xSUVCamJHRnpjeUFxTHlBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDOHFLaUJGYlhCMGVTQndjbWwyWVhSbElHTnZibk4wY25WamRHOXlJSEJ5WlhabGJuUnpJR1Z1WkNCMWMyVnljeUJtY205dElHTnZibk4wY25WamRHbHVaeUJoSUc1bGR5QnBibk4wWVc1alpTQnZaaUIwYUdVZ1FWQkpJQ292WEc0Z0lDQWdablZ1WTNScGIyNGdVSEp2Y0dGbllYUnBiMjVCVUVrb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsUW1GbloyRm5aU0E5SUdOeVpXRjBaVUpoWjJkaFoyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyVjBRbUZuWjJGblpTQTlJR2RsZEVKaFoyZGhaMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMlYwUVdOMGFYWmxRbUZuWjJGblpTQTlJR2RsZEVGamRHbDJaVUpoWjJkaFoyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBRbUZuWjJGblpTQTlJSE5sZEVKaFoyZGhaMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1ZzWlhSbFFtRm5aMkZuWlNBOUlHUmxiR1YwWlVKaFoyZGhaMlU3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLaUJIWlhRZ2RHaGxJSE5wYm1kc1pYUnZiaUJwYm5OMFlXNWpaU0J2WmlCMGFHVWdVSEp2Y0dGbllYUnZjaUJCVUVrZ0tpOWNiaUFnSUNCUWNtOXdZV2RoZEdsdmJrRlFTUzVuWlhSSmJuTjBZVzVqWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5cGJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhVzV6ZEdGdVkyVWdQU0J1WlhjZ1VISnZjR0ZuWVhScGIyNUJVRWtvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVc1emRHRnVZMlU3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhRZ2RHaGxJR04xY25KbGJuUWdjSEp2Y0dGbllYUnZjaTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSFJ5ZFdVZ2FXWWdkR2hsSUhCeWIzQmhaMkYwYjNJZ2QyRnpJSE4xWTJObGMzTm1kV3hzZVNCeVpXZHBjM1JsY21Wa0xDQmxiSE5sSUdaaGJITmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1VISnZjR0ZuWVhScGIyNUJVRWt1Y0hKdmRHOTBlWEJsTG5ObGRFZHNiMkpoYkZCeWIzQmhaMkYwYjNJZ1BTQm1kVzVqZEdsdmJpQW9jSEp2Y0dGbllYUnZjaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WbmFYTjBaWEpIYkc5aVlXd29RVkJKWDA1QlRVVXNJSEJ5YjNCaFoyRjBiM0lzSUVScFlXZEJVRWt1YVc1emRHRnVZMlVvS1NrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJtcGxZM1FnWTI5dWRHVjRkQ0JwYm5SdklHRWdZMkZ5Y21sbGNpQjBieUJpWlNCd2NtOXdZV2RoZEdWa0lHbHVkR1Z5TFhCeWIyTmxjM05jYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpiMjUwWlhoMElFTnZiblJsZUhRZ1kyRnljbmxwYm1jZ2RISmhZMmx1WnlCa1lYUmhJSFJ2SUdsdWFtVmpkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpZWEp5YVdWeUlHTmhjbkpwWlhJZ2RHOGdhVzVxWldOMElHTnZiblJsZUhRZ2FXNTBiMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnpaWFIwWlhJZ1JuVnVZM1JwYjI0Z2RYTmxaQ0IwYnlCelpYUWdkbUZzZFdWeklHOXVJSFJvWlNCallYSnlhV1Z5WEc0Z0lDQWdJQ292WEc0Z0lDQWdVSEp2Y0dGbllYUnBiMjVCVUVrdWNISnZkRzkwZVhCbExtbHVhbVZqZENBOUlHWjFibU4wYVc5dUlDaGpiMjUwWlhoMExDQmpZWEp5YVdWeUxDQnpaWFIwWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hObGRIUmxjaUE5UFQwZ2RtOXBaQ0F3S1NCN0lITmxkSFJsY2lBOUlHUmxabUYxYkhSVVpYaDBUV0Z3VTJWMGRHVnlPeUI5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW5aWFJIYkc5aVlXeFFjbTl3WVdkaGRHOXlLQ2t1YVc1cVpXTjBLR052Ym5SbGVIUXNJR05oY25KcFpYSXNJSE5sZEhSbGNpazdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZlSFJ5WVdOMElHTnZiblJsZUhRZ1puSnZiU0JoSUdOaGNuSnBaWEpjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpiMjUwWlhoMElFTnZiblJsZUhRZ2QyaHBZMmdnZEdobElHNWxkMng1SUdOeVpXRjBaV1FnWTI5dWRHVjRkQ0IzYVd4c0lHbHVhR1Z5YVhRZ1puSnZiVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpZWEp5YVdWeUlFTmhjbkpwWlhJZ2RHOGdaWGgwY21GamRDQmpiMjUwWlhoMElHWnliMjFjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaMlYwZEdWeUlFWjFibU4wYVc5dUlIVnpaV1FnZEc4Z1pYaDBjbUZqZENCclpYbHpJR1p5YjIwZ1lTQmpZWEp5YVdWeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVUhKdmNHRm5ZWFJwYjI1QlVFa3VjSEp2ZEc5MGVYQmxMbVY0ZEhKaFkzUWdQU0JtZFc1amRHbHZiaUFvWTI5dWRHVjRkQ3dnWTJGeWNtbGxjaXdnWjJWMGRHVnlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaG5aWFIwWlhJZ1BUMDlJSFp2YVdRZ01Da2dleUJuWlhSMFpYSWdQU0JrWldaaGRXeDBWR1Y0ZEUxaGNFZGxkSFJsY2pzZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWjJWMFIyeHZZbUZzVUhKdmNHRm5ZWFJ2Y2lncExtVjRkSEpoWTNRb1kyOXVkR1Y0ZEN3Z1kyRnljbWxsY2l3Z1oyVjBkR1Z5S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnliaUJoSUd4cGMzUWdiMllnWVd4c0lHWnBaV3hrY3lCM2FHbGphQ0J0WVhrZ1ltVWdkWE5sWkNCaWVTQjBhR1VnY0hKdmNHRm5ZWFJ2Y2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JRY205d1lXZGhkR2x2YmtGUVNTNXdjbTkwYjNSNWNHVXVabWxsYkdSeklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaMlYwUjJ4dlltRnNVSEp2Y0dGbllYUnZjaWdwTG1acFpXeGtjeWdwTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xSUZKbGJXOTJaU0IwYUdVZ1oyeHZZbUZzSUhCeWIzQmhaMkYwYjNJZ0tpOWNiaUFnSUNCUWNtOXdZV2RoZEdsdmJrRlFTUzV3Y205MGIzUjVjR1V1WkdsellXSnNaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkVzV5WldkcGMzUmxja2RzYjJKaGJDaEJVRWxmVGtGTlJTd2dSR2xoWjBGUVNTNXBibk4wWVc1alpTZ3BLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQnliM0JoWjJGMGFXOXVRVkJKTG5CeWIzUnZkSGx3WlM1ZloyVjBSMnh2WW1Gc1VISnZjR0ZuWVhSdmNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdkbGRFZHNiMkpoYkNoQlVFbGZUa0ZOUlNrZ2ZId2dUazlQVUY5VVJWaFVYMDFCVUY5UVVrOVFRVWRCVkU5U08xeHVJQ0FnSUgwN1hHNGdJQ0FnY21WMGRYSnVJRkJ5YjNCaFoyRjBhVzl1UVZCSk8xeHVmU2dwS1R0Y2JtVjRjRzl5ZENCN0lGQnliM0JoWjJGMGFXOXVRVkJKSUgwN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDF3Y205d1lXZGhkR2x2Ymk1cWN5NXRZWEFpTENJdktseHVJQ29nUTI5d2VYSnBaMmgwSUZSb1pTQlBjR1Z1VkdWc1pXMWxkSEo1SUVGMWRHaHZjbk5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUNCb2RIUndjem92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVMeThnVTNCc2FYUWdiVzlrZFd4bExXeGxkbVZzSUhaaGNtbGhZbXhsSUdSbFptbHVhWFJwYjI0Z2FXNTBieUJ6WlhCaGNtRjBaU0JtYVd4bGN5QjBieUJoYkd4dmQxeHVMeThnZEhKbFpTMXphR0ZyYVc1bklHOXVJR1ZoWTJnZ1lYQnBJR2x1YzNSaGJtTmxMbHh1YVcxd2IzSjBJSHNnVUhKdmNHRm5ZWFJwYjI1QlVFa2dmU0JtY205dElDY3VMMkZ3YVM5d2NtOXdZV2RoZEdsdmJpYzdYRzR2S2lvZ1JXNTBjbmx3YjJsdWRDQm1iM0lnY0hKdmNHRm5ZWFJwYjI0Z1FWQkpJQ292WEc1bGVIQnZjblFnZG1GeUlIQnliM0JoWjJGMGFXOXVJRDBnVUhKdmNHRm5ZWFJwYjI1QlVFa3VaMlYwU1c1emRHRnVZMlVvS1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QWEJ5YjNCaFoyRjBhVzl1TFdGd2FTNXFjeTV0WVhBaUxDSXZLbHh1SUNvZ1EyOXdlWEpwWjJoMElGUm9aU0JQY0dWdVZHVnNaVzFsZEhKNUlFRjFkR2h2Y25OY2JpQXFYRzRnS2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVJQ29nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUlDb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNBZ0lDQm9kSFJ3Y3pvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1YVcxd2IzSjBJSHNnWjJWMFIyeHZZbUZzTENCeVpXZHBjM1JsY2tkc2IySmhiQ3dnZFc1eVpXZHBjM1JsY2tkc2IySmhiQ3dnZlNCbWNtOXRJQ2N1TGk5cGJuUmxjbTVoYkM5bmJHOWlZV3d0ZFhScGJITW5PMXh1YVcxd2IzSjBJSHNnVUhKdmVIbFVjbUZqWlhKUWNtOTJhV1JsY2lCOUlHWnliMjBnSnk0dUwzUnlZV05sTDFCeWIzaDVWSEpoWTJWeVVISnZkbWxrWlhJbk8xeHVhVzF3YjNKMElIc2dhWE5UY0dGdVEyOXVkR1Y0ZEZaaGJHbGtMQ0IzY21Gd1UzQmhia052Ym5SbGVIUXNJSDBnWm5KdmJTQW5MaTR2ZEhKaFkyVXZjM0JoYm1OdmJuUmxlSFF0ZFhScGJITW5PMXh1YVcxd2IzSjBJSHNnWkdWc1pYUmxVM0JoYml3Z1oyVjBRV04wYVhabFUzQmhiaXdnWjJWMFUzQmhiaXdnWjJWMFUzQmhia052Ym5SbGVIUXNJSE5sZEZOd1lXNHNJSE5sZEZOd1lXNURiMjUwWlhoMExDQjlJR1p5YjIwZ0p5NHVMM1J5WVdObEwyTnZiblJsZUhRdGRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ1JHbGhaMEZRU1NCOUlHWnliMjBnSnk0dlpHbGhaeWM3WEc1MllYSWdRVkJKWDA1QlRVVWdQU0FuZEhKaFkyVW5PMXh1THlvcVhHNGdLaUJUYVc1bmJHVjBiMjRnYjJKcVpXTjBJSGRvYVdOb0lISmxjSEpsYzJWdWRITWdkR2hsSUdWdWRISjVJSEJ2YVc1MElIUnZJSFJvWlNCUGNHVnVWR1ZzWlcxbGRISjVJRlJ5WVdOcGJtY2dRVkJKWEc0Z0tpOWNiblpoY2lCVWNtRmpaVUZRU1NBOUlDOHFLaUJBWTJ4aGMzTWdLaThnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBdktpb2dSVzF3ZEhrZ2NISnBkbUYwWlNCamIyNXpkSEoxWTNSdmNpQndjbVYyWlc1MGN5QmxibVFnZFhObGNuTWdabkp2YlNCamIyNXpkSEoxWTNScGJtY2dZU0J1WlhjZ2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUVGUVNTQXFMMXh1SUNBZ0lHWjFibU4wYVc5dUlGUnlZV05sUVZCSktDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdjbTk0ZVZSeVlXTmxjbEJ5YjNacFpHVnlJRDBnYm1WM0lGQnliM2g1VkhKaFkyVnlVSEp2ZG1sa1pYSW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNjbUZ3VTNCaGJrTnZiblJsZUhRZ1BTQjNjbUZ3VTNCaGJrTnZiblJsZUhRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVhOVGNHRnVRMjl1ZEdWNGRGWmhiR2xrSUQwZ2FYTlRjR0Z1UTI5dWRHVjRkRlpoYkdsa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SbGJHVjBaVk53WVc0Z1BTQmtaV3hsZEdWVGNHRnVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtZGxkRk53WVc0Z1BTQm5aWFJUY0dGdU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRFRmpkR2wyWlZOd1lXNGdQU0JuWlhSQlkzUnBkbVZUY0dGdU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRGTndZVzVEYjI1MFpYaDBJRDBnWjJWMFUzQmhia052Ym5SbGVIUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM0JoYmlBOUlITmxkRk53WVc0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFUzQmhia052Ym5SbGVIUWdQU0J6WlhSVGNHRnVRMjl1ZEdWNGREdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcUlFZGxkQ0IwYUdVZ2MybHVaMnhsZEc5dUlHbHVjM1JoYm1ObElHOW1JSFJvWlNCVWNtRmpaU0JCVUVrZ0tpOWNiaUFnSUNCVWNtRmpaVUZRU1M1blpYUkpibk4wWVc1alpTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXBibk4wWVc1alpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYVc1emRHRnVZMlVnUFNCdVpYY2dWSEpoWTJWQlVFa29LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZhVzV6ZEdGdVkyVTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnZEdobElHTjFjbkpsYm5RZ1oyeHZZbUZzSUhSeVlXTmxjaTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSFJ5ZFdVZ2FXWWdkR2hsSUhSeVlXTmxjaUJ3Y205MmFXUmxjaUIzWVhNZ2MzVmpZMlZ6YzJaMWJHeDVJSEpsWjJsemRHVnlaV1FzSUdWc2MyVWdabUZzYzJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JVY21GalpVRlFTUzV3Y205MGIzUjVjR1V1YzJWMFIyeHZZbUZzVkhKaFkyVnlVSEp2ZG1sa1pYSWdQU0JtZFc1amRHbHZiaUFvY0hKdmRtbGtaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE4xWTJObGMzTWdQU0J5WldkcGMzUmxja2RzYjJKaGJDaEJVRWxmVGtGTlJTd2dkR2hwY3k1ZmNISnZlSGxVY21GalpYSlFjbTkyYVdSbGNpd2dSR2xoWjBGUVNTNXBibk4wWVc1alpTZ3BLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITjFZMk5sYzNNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0J5YjNoNVZISmhZMlZ5VUhKdmRtbGtaWEl1YzJWMFJHVnNaV2RoZEdVb2NISnZkbWxrWlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkV05qWlhOek8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdaMnh2WW1Gc0lIUnlZV05sY2lCd2NtOTJhV1JsY2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JVY21GalpVRlFTUzV3Y205MGIzUjVjR1V1WjJWMFZISmhZMlZ5VUhKdmRtbGtaWElnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm5aWFJIYkc5aVlXd29RVkJKWDA1QlRVVXBJSHg4SUhSb2FYTXVYM0J5YjNoNVZISmhZMlZ5VUhKdmRtbGtaWEk3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR0VnZEhKaFkyVnlJR1p5YjIwZ2RHaGxJR2RzYjJKaGJDQjBjbUZqWlhJZ2NISnZkbWxrWlhJdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVkhKaFkyVkJVRWt1Y0hKdmRHOTBlWEJsTG1kbGRGUnlZV05sY2lBOUlHWjFibU4wYVc5dUlDaHVZVzFsTENCMlpYSnphVzl1S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEZSeVlXTmxjbEJ5YjNacFpHVnlLQ2t1WjJWMFZISmhZMlZ5S0c1aGJXVXNJSFpsY25OcGIyNHBPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FJRkpsYlc5MlpTQjBhR1VnWjJ4dlltRnNJSFJ5WVdObGNpQndjbTkyYVdSbGNpQXFMMXh1SUNBZ0lGUnlZV05sUVZCSkxuQnliM1J2ZEhsd1pTNWthWE5oWW14bElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMWJuSmxaMmx6ZEdWeVIyeHZZbUZzS0VGUVNWOU9RVTFGTENCRWFXRm5RVkJKTG1sdWMzUmhibU5sS0NrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2NtOTRlVlJ5WVdObGNsQnliM1pwWkdWeUlEMGdibVYzSUZCeWIzaDVWSEpoWTJWeVVISnZkbWxrWlhJb0tUdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUJVY21GalpVRlFTVHRjYm4wb0tTazdYRzVsZUhCdmNuUWdleUJVY21GalpVRlFTU0I5TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlkSEpoWTJVdWFuTXViV0Z3SWl3aUx5cGNiaUFxSUVOdmNIbHlhV2RvZENCVWFHVWdUM0JsYmxSbGJHVnRaWFJ5ZVNCQmRYUm9iM0p6WEc0Z0tseHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2JpQXFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlBcUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnSUNBZ2FIUjBjSE02THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5d2djMjltZEhkaGNtVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaUFxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUlDb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUlDb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNiaTh2SUZOd2JHbDBJRzF2WkhWc1pTMXNaWFpsYkNCMllYSnBZV0pzWlNCa1pXWnBibWwwYVc5dUlHbHVkRzhnYzJWd1lYSmhkR1VnWm1sc1pYTWdkRzhnWVd4c2IzZGNiaTh2SUhSeVpXVXRjMmhoYTJsdVp5QnZiaUJsWVdOb0lHRndhU0JwYm5OMFlXNWpaUzVjYm1sdGNHOXlkQ0I3SUZSeVlXTmxRVkJKSUgwZ1puSnZiU0FuTGk5aGNHa3ZkSEpoWTJVbk8xeHVMeW9xSUVWdWRISjVjRzlwYm5RZ1ptOXlJSFJ5WVdObElFRlFTU0FxTDF4dVpYaHdiM0owSUhaaGNpQjBjbUZqWlNBOUlGUnlZV05sUVZCSkxtZGxkRWx1YzNSaGJtTmxLQ2s3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMTBjbUZqWlMxaGNHa3Vhbk11YldGd0lpd2lMeXBjYmlBcUlFTnZjSGx5YVdkb2RDQlVhR1VnVDNCbGJsUmxiR1Z0WlhSeWVTQkJkWFJvYjNKelhHNGdLbHh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaUFxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ0lDQWdhSFIwY0hNNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlBcUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHVJQ29nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVJQ29nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYm1WNGNHOXlkQ0I3SUdKaFoyZGhaMlZGYm5SeWVVMWxkR0ZrWVhSaFJuSnZiVk4wY21sdVp5QjlJR1p5YjIwZ0p5NHZZbUZuWjJGblpTOTFkR2xzY3ljN1hHNHZMeUJEYjI1MFpYaDBJRUZRU1hOY2JtVjRjRzl5ZENCN0lHTnlaV0YwWlVOdmJuUmxlSFJMWlhrc0lGSlBUMVJmUTA5T1ZFVllWQ0I5SUdaeWIyMGdKeTR2WTI5dWRHVjRkQzlqYjI1MFpYaDBKenRjYmk4dklFUnBZV2NnUVZCSmMxeHVaWGh3YjNKMElIc2dSR2xoWjBOdmJuTnZiR1ZNYjJkblpYSWdmU0JtY205dElDY3VMMlJwWVdjdlkyOXVjMjlzWlV4dloyZGxjaWM3WEc1bGVIQnZjblFnZXlCRWFXRm5URzluVEdWMlpXd3NJSDBnWm5KdmJTQW5MaTlrYVdGbkwzUjVjR1Z6Snp0Y2JpOHZJRTFsZEhKcFkzTWdRVkJKYzF4dVpYaHdiM0owSUhzZ1kzSmxZWFJsVG05dmNFMWxkR1Z5SUgwZ1puSnZiU0FuTGk5dFpYUnlhV056TDA1dmIzQk5aWFJsY2ljN1hHNWxlSEJ2Y25RZ2V5QldZV3gxWlZSNWNHVXNJSDBnWm5KdmJTQW5MaTl0WlhSeWFXTnpMMDFsZEhKcFl5YzdYRzR2THlCUWNtOXdZV2RoZEdsdmJpQkJVRWx6WEc1bGVIQnZjblFnZXlCa1pXWmhkV3gwVkdWNGRFMWhjRWRsZEhSbGNpd2daR1ZtWVhWc2RGUmxlSFJOWVhCVFpYUjBaWElzSUgwZ1puSnZiU0FuTGk5d2NtOXdZV2RoZEdsdmJpOVVaWGgwVFdGd1VISnZjR0ZuWVhSdmNpYzdYRzVsZUhCdmNuUWdleUJRY205NGVWUnlZV05sY2lCOUlHWnliMjBnSnk0dmRISmhZMlV2VUhKdmVIbFVjbUZqWlhJbk8xeHVaWGh3YjNKMElIc2dVSEp2ZUhsVWNtRmpaWEpRY205MmFXUmxjaUI5SUdaeWIyMGdKeTR2ZEhKaFkyVXZVSEp2ZUhsVWNtRmpaWEpRY205MmFXUmxjaWM3WEc1bGVIQnZjblFnZXlCVFlXMXdiR2x1WjBSbFkybHphVzl1SUgwZ1puSnZiU0FuTGk5MGNtRmpaUzlUWVcxd2JHbHVaMUpsYzNWc2RDYzdYRzVsZUhCdmNuUWdleUJUY0dGdVMybHVaQ0I5SUdaeWIyMGdKeTR2ZEhKaFkyVXZjM0JoYmw5cmFXNWtKenRjYm1WNGNHOXlkQ0I3SUZOd1lXNVRkR0YwZFhORGIyUmxJSDBnWm5KdmJTQW5MaTkwY21GalpTOXpkR0YwZFhNbk8xeHVaWGh3YjNKMElIc2dWSEpoWTJWR2JHRm5jeUI5SUdaeWIyMGdKeTR2ZEhKaFkyVXZkSEpoWTJWZlpteGhaM01uTzF4dVpYaHdiM0owSUhzZ1kzSmxZWFJsVkhKaFkyVlRkR0YwWlNCOUlHWnliMjBnSnk0dmRISmhZMlV2YVc1MFpYSnVZV3d2ZFhScGJITW5PMXh1Wlhod2IzSjBJSHNnYVhOVGNHRnVRMjl1ZEdWNGRGWmhiR2xrTENCcGMxWmhiR2xrVkhKaFkyVkpaQ3dnYVhOV1lXeHBaRk53WVc1SlpDd2dmU0JtY205dElDY3VMM1J5WVdObEwzTndZVzVqYjI1MFpYaDBMWFYwYVd4ekp6dGNibVY0Y0c5eWRDQjdJRWxPVmtGTVNVUmZVMUJCVGtsRUxDQkpUbFpCVEVsRVgxUlNRVU5GU1VRc0lFbE9Wa0ZNU1VSZlUxQkJUbDlEVDA1VVJWaFVMQ0I5SUdaeWIyMGdKeTR2ZEhKaFkyVXZhVzUyWVd4cFpDMXpjR0Z1TFdOdmJuTjBZVzUwY3ljN1hHNHZMeUJUY0d4cGRDQnRiMlIxYkdVdGJHVjJaV3dnZG1GeWFXRmliR1VnWkdWbWFXNXBkR2x2YmlCcGJuUnZJSE5sY0dGeVlYUmxJR1pwYkdWeklIUnZJR0ZzYkc5M1hHNHZMeUIwY21WbExYTm9ZV3RwYm1jZ2IyNGdaV0ZqYUNCaGNHa2dhVzV6ZEdGdVkyVXVYRzVwYlhCdmNuUWdleUJqYjI1MFpYaDBJSDBnWm5KdmJTQW5MaTlqYjI1MFpYaDBMV0Z3YVNjN1hHNXBiWEJ2Y25RZ2V5QmthV0ZuSUgwZ1puSnZiU0FuTGk5a2FXRm5MV0Z3YVNjN1hHNXBiWEJ2Y25RZ2V5QnRaWFJ5YVdOeklIMGdabkp2YlNBbkxpOXRaWFJ5YVdOekxXRndhU2M3WEc1cGJYQnZjblFnZXlCd2NtOXdZV2RoZEdsdmJpQjlJR1p5YjIwZ0p5NHZjSEp2Y0dGbllYUnBiMjR0WVhCcEp6dGNibWx0Y0c5eWRDQjdJSFJ5WVdObElIMGdabkp2YlNBbkxpOTBjbUZqWlMxaGNHa25PMXh1THk4Z1RtRnRaV1FnWlhod2IzSjBMbHh1Wlhod2IzSjBJSHNnWTI5dWRHVjRkQ3dnWkdsaFp5d2diV1YwY21samN5d2djSEp2Y0dGbllYUnBiMjRzSUhSeVlXTmxJSDA3WEc0dkx5QkVaV1poZFd4MElHVjRjRzl5ZEM1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUh0Y2JpQWdJQ0JqYjI1MFpYaDBPaUJqYjI1MFpYaDBMRnh1SUNBZ0lHUnBZV2M2SUdScFlXY3NYRzRnSUNBZ2JXVjBjbWxqY3pvZ2JXVjBjbWxqY3l4Y2JpQWdJQ0J3Y205d1lXZGhkR2x2YmpvZ2NISnZjR0ZuWVhScGIyNHNYRzRnSUNBZ2RISmhZMlU2SUhSeVlXTmxMRnh1ZlR0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV2x1WkdWNExtcHpMbTFoY0NJc0lpOHFLbHh1SUNvZ1VtVndjbVZ6Wlc1MGN5QmhJR1JoZEdVZ2IyNXNlUzRnU1ZOUElEZzJNREV1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRVlYUmxUMjVzZVNCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EzSmxZWFJsY3lCaElHNWxkeUJFWVhSbFQyNXNlU0JtY205dElIUm9aU0JuYVhabGJpQnpkSEpwYm1jdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1ZHaGxJRzVsZHlCRVlYUmxUMjVzZVZ4dUlDQWdJQ0FxSUVCMGFISnZkM01nUVc0Z1pYSnliM0lnYVdZZ2RHaGxJSGxsWVhJZ2FYTWdhVzUyWVd4cFpGeHVJQ0FnSUNBcUlFQjBhSEp2ZDNNZ1FXNGdaWEp5YjNJZ2FXWWdkR2hsSUcxdmJuUm9JR2x6SUdsdWRtRnNhV1JjYmlBZ0lDQWdLaUJBZEdoeWIzZHpJRUZ1SUdWeWNtOXlJR2xtSUhSb1pTQmtZWGtnYVhNZ2FXNTJZV3hwWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hzZ2VXVmhjaUE5SURBc0lHMXZiblJvSUQwZ01Td2daR0Y1SUQwZ01Td2dmU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZVNBOUlHUmhlVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiMjUwYUNBOUlHMXZiblJvTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmxsWVhJZ1BTQjVaV0Z5TzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lFUmhkR1ZQYm14NUlHWnliMjBnZEdobElHZHBkbVZ1SUdSaGRHVXVYRzRnSUNBZ0lDb2dRSEJoY21GdElHUmhkR1VnVkdobElHUmhkR1ZjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJVYUdVZ2JtVjNJRVJoZEdWUGJteDVYRzRnSUNBZ0lDb2dRSFJvY205M2N5QkJiaUJsY25KdmNpQnBaaUIwYUdVZ1pHRjBaU0JwY3lCcGJuWmhiR2xrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoZEdsaklHWnliMjFFWVhSbEtHUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZrWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKRVlYUmxJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2JtVjNJRVJoZEdWUGJteDVLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIbGxZWEk2SUdSaGRHVXVaMlYwUm5Wc2JGbGxZWElvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzF2Ym5Sb09pQmtZWFJsTG1kbGRFMXZiblJvS0NrZ0t5QXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjVPaUJrWVhSbExtZGxkRVJoZEdVb0tTeGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQmhjbk5sY3lCaElITjBjbWx1WnlCcGJuUnZJR0VnUkdGMFpVOXViSGt1SUZSb1pTQnpkSEpwYm1jZ1kyRnVJR0psSUc5bUlIUm9aU0JKVTA4Z09EWXdNU0IwYVcxbElHOXViSGtnWm05eWJXRjBJRzl5SUdFZ2JuVnRZbVZ5SUhKbGNISmxjMlZ1ZEdsdVp5QjBhR1VnZEdsamEzTWdiMllnWVNCRVlYUmxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCVWFHVWdkbUZzZFdVZ2RHOGdjR0Z5YzJWY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCVWFHVWdjR0Z5YzJWa0lFUmhkR1ZQYm14NUxseHVJQ0FnSUNBcUlFQjBhSEp2ZDNNZ1FXNGdaWEp5YjNJZ2FXWWdkR2hsSUhaaGJIVmxJR2x6SUdsdWRtRnNhV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ2NHRnljMlVvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOWhMQ0JmWWl3Z1gyTXNJRjlrTENCZlpTd2dYMlk3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkbUZzZFdVZ2ZId2dkbUZzZFdVdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5OMElHVjRaV01nUFNBdlhpZy9QSGxsWVhJK1hGeGtlelFzZlNrdEtEODhiVzl1ZEdnK01Gc3hMVGxkZkRGYk1ERXlYU2t0S0Q4OFpHRjVQakJiTVMwNVhYeGJNVEpkWEZ4a2ZETmJNREZkS1NRdloya3VaWGhsWXloMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxlR1ZqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjVaV0Z5SUQwZ2NHRnljMlZKYm5Rb0tGOWlJRDBnS0Y5aElEMGdaWGhsWXk1bmNtOTFjSE1wSUQwOVBTQnVkV3hzSUh4OElGOWhJRDA5UFNCMmIybGtJREFnUHlCMmIybGtJREFnT2lCZllTNTVaV0Z5S1NBaFBUMGdiblZzYkNBbUppQmZZaUFoUFQwZ2RtOXBaQ0F3SUQ4Z1gySWdPaUJjSWx3aUxDQXhNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIyNTBhQ0E5SUhCaGNuTmxTVzUwS0NoZlpDQTlJQ2hmWXlBOUlHVjRaV011WjNKdmRYQnpLU0E5UFQwZ2JuVnNiQ0I4ZkNCZll5QTlQVDBnZG05cFpDQXdJRDhnZG05cFpDQXdJRG9nWDJNdWJXOXVkR2dwSUNFOVBTQnVkV3hzSUNZbUlGOWtJQ0U5UFNCMmIybGtJREFnUHlCZlpDQTZJRndpWENJc0lERXdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSaGVTQTlJSEJoY25ObFNXNTBLQ2hmWmlBOUlDaGZaU0E5SUdWNFpXTXVaM0p2ZFhCektTQTlQVDBnYm5Wc2JDQjhmQ0JmWlNBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dYMlV1WkdGNUtTQWhQVDBnYm5Wc2JDQW1KaUJmWmlBaFBUMGdkbTlwWkNBd0lEOGdYMllnT2lCY0lsd2lMQ0F4TUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVSaGRHVlBibXg1S0hzZ2VXVmhjaXdnYlc5dWRHZ3NJR1JoZVNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQjBhV05yY3lBOUlFUmhkR1V1Y0dGeWMyVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdselRtRk9LSFJwWTJ0ektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdGMFpTQTlJRzVsZHlCRVlYUmxLSFJwWTJ0ektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnliMjFFWVhSbEtHUmhkR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1ZtRnNkV1VnYVhNZ2JtOTBJR0VnZG1Gc2FXUWdaR0YwWlMxdmJteDVJSEpsY0hKbGMyVnVkR0YwYVc5dU9pQWtlM1poYkhWbGZXQXBPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWdVbVYwZFhKdWN5QmhJSE4wY21sdVp5QnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQjBhR1VnWkdGMFpTQnBiaUIwYUdVZ1ptOXliV0YwSUZsWldWa3RUVTB0UkVSY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCVWFHVWdaR0YwWlNCcGJpQjBhR1VnWm05eWJXRjBJRmxaV1ZrdFRVMHRSRVFnU1ZOUElEZzJNREZjYmlBZ0lDQWdLaTljYmlBZ0lDQjBiMU4wY21sdVp5Z3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0FrZTJadmNtMWhkRk5sWjIxbGJuUW9kR2hwY3k1NVpXRnlMQ0EwS1gwdEpIdG1iM0p0WVhSVFpXZHRaVzUwS0hSb2FYTXViVzl1ZEdncGZTMGtlMlp2Y20xaGRGTmxaMjFsYm5Rb2RHaHBjeTVrWVhrcGZXQTdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1p2Y20xaGRGTmxaMjFsYm5Rb2MyVm5iV1Z1ZEN3Z1pHbG5hWFJ6SUQwZ01pa2dlMXh1SUNBZ0lISmxkSFZ5YmlCelpXZHRaVzUwTG5SdlUzUnlhVzVuS0NrdWNHRmtVM1JoY25Rb1pHbG5hWFJ6TENCY0lqQmNJaWs3WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSbFQyNXNlUzVxY3k1dFlYQWlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm1WNGNHOXlkSE11YzJWeWFXRnNhWHBsSUQwZ1pYaHdiM0owY3k1d1lYSnpaU0E5SUdWNGNHOXlkSE11U1c1MllXeHBaRVIxY21GMGFXOXVSWEp5YjNJZ1BTQjJiMmxrSURBN1hHNWpiMjV6ZENCMWJtbDBjeUE5SUZ0Y2JpQWdJQ0I3SUhWdWFYUTZJQ2Q1WldGeWN5Y3NJSE41YldKdmJEb2dKMWtuSUgwc1hHNGdJQ0FnZXlCMWJtbDBPaUFuYlc5dWRHaHpKeXdnYzNsdFltOXNPaUFuVFNjZ2ZTeGNiaUFnSUNCN0lIVnVhWFE2SUNkM1pXVnJjeWNzSUhONWJXSnZiRG9nSjFjbklIMHNYRzRnSUNBZ2V5QjFibWwwT2lBblpHRjVjeWNzSUhONWJXSnZiRG9nSjBRbklIMHNYRzRnSUNBZ2V5QjFibWwwT2lBbmFHOTFjbk1uTENCemVXMWliMnc2SUNkSUp5QjlMRnh1SUNBZ0lIc2dkVzVwZERvZ0oyMXBiblYwWlhNbkxDQnplVzFpYjJ3NklDZE5KeUI5TEZ4dUlDQWdJSHNnZFc1cGREb2dKM05sWTI5dVpITW5MQ0J6ZVcxaWIydzZJQ2RUSnlCOUxGeHVYVHRjYmk4dklFTnZibk4wY25WamRHbHZiaUJ2WmlCMGFHVWdaSFZ5WVhScGIyNGdjbVZuWlhoY2JtTnZibk4wSUhJZ1BTQW9ibUZ0WlN3Z2RXNXBkQ2tnUFQ0Z1lDZ29QendrZTI1aGJXVjlQaTAvWEZ4Y1hHUXFXMXhjWEZ3dUxGMC9YRnhjWEdRcktTUjdkVzVwZEgwcFAyQTdYRzVqYjI1emRDQmtkWEpoZEdsdmJsSmxaMlY0SUQwZ2JtVjNJRkpsWjBWNGNDaGJYRzRnSUNBZ0p5Zy9QRzVsWjJGMGFYWmxQaTBwUDFBbkxGeHVJQ0FnSUhJb0ozbGxZWEp6Snl3Z0oxa25LU3hjYmlBZ0lDQnlLQ2R0YjI1MGFITW5MQ0FuVFNjcExGeHVJQ0FnSUhJb0ozZGxaV3R6Snl3Z0oxY25LU3hjYmlBZ0lDQnlLQ2RrWVhsekp5d2dKMFFuS1N4Y2JpQWdJQ0FuS0ZRbkxGeHVJQ0FnSUhJb0oyaHZkWEp6Snl3Z0owZ25LU3hjYmlBZ0lDQnlLQ2R0YVc1MWRHVnpKeXdnSjAwbktTeGNiaUFnSUNCeUtDZHpaV052Ym1Sekp5d2dKMU1uS1N4Y2JpQWdJQ0FuS1Q4bkxDQXZMeUJsYm1RZ2IzQjBhVzl1WVd3Z2RHbHRaVnh1WFM1cWIybHVLQ2NuS1NrN1hHNW1kVzVqZEdsdmJpQndZWEp6WlU1MWJTaHpLU0I3WEc0Z0lDQWdhV1lnS0hNZ1BUMDlJQ2NuSUh4OElITWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQnpJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCd1lYSnpaVVpzYjJGMEtITXVjbVZ3YkdGalpTZ25MQ2NzSUNjdUp5a3BPMXh1ZlZ4dVpYaHdiM0owY3k1SmJuWmhiR2xrUkhWeVlYUnBiMjVGY25KdmNpQTlJRzVsZHlCRmNuSnZjaWduU1c1MllXeHBaQ0JrZFhKaGRHbHZiaWNwTzF4dVpuVnVZM1JwYjI0Z2NHRnljMlVvWkhWeVlYUnBiMjVUZEhJcElIdGNiaUFnSUNCamIyNXpkQ0J0WVhSamFDQTlJR1IxY21GMGFXOXVVbVZuWlhndVpYaGxZeWhrZFhKaGRHbHZibE4wY2lrN1hHNGdJQ0FnYVdZZ0tDRnRZWFJqYUNCOGZDQWhiV0YwWTJndVozSnZkWEJ6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUdWNGNHOXlkSE11U1c1MllXeHBaRVIxY21GMGFXOXVSWEp5YjNJN1hHNGdJQ0FnZlZ4dUlDQWdJR3hsZENCbGJYQjBlU0E5SUhSeWRXVTdYRzRnSUNBZ1kyOXVjM1FnZG1Gc2RXVnpJRDBnZTMwN1hHNGdJQ0FnWm05eUlDaGpiMjV6ZENCN0lIVnVhWFFnZlNCdlppQjFibWwwY3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYldGMFkyZ3VaM0p2ZFhCelczVnVhWFJkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYlhCMGVTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVnpXM1Z1YVhSZElEMGdjR0Z5YzJWT2RXMG9iV0YwWTJndVozSnZkWEJ6VzNWdWFYUmRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWlcxd2RIa3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2daWGh3YjNKMGN5NUpiblpoYkdsa1JIVnlZWFJwYjI1RmNuSnZjanRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnWkhWeVlYUnBiMjRnUFNCMllXeDFaWE03WEc0Z0lDQWdhV1lnS0cxaGRHTm9MbWR5YjNWd2N5NXVaV2RoZEdsMlpTa2dlMXh1SUNBZ0lDQWdJQ0JrZFhKaGRHbHZiaTV1WldkaGRHbDJaU0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJrZFhKaGRHbHZianRjYm4xY2JtVjRjRzl5ZEhNdWNHRnljMlVnUFNCd1lYSnpaVHRjYm1OdmJuTjBJSE1nUFNBb2JuVnRZbVZ5TENCamIyMXdiMjVsYm5RcElEMCtJSHRjYmlBZ0lDQnBaaUFvSVc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmlBZ0lDQnNaWFFnYm5WdFltVnlRWE5UZEhKcGJtY2dQU0J1ZFcxaVpYSXVkRzlUZEhKcGJtY29LVHRjYmlBZ0lDQmpiMjV6ZENCbGVIQnZibVZ1ZEVsdVpHVjRJRDBnYm5WdFltVnlRWE5UZEhKcGJtY3VhVzVrWlhoUFppZ25aU2NwTzF4dUlDQWdJR2xtSUNobGVIQnZibVZ1ZEVsdVpHVjRJRDRnTFRFcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXRm5ibWwwZFdSbElEMGdjR0Z5YzJWSmJuUW9iblZ0WW1WeVFYTlRkSEpwYm1jdWMyeHBZMlVvWlhod2IyNWxiblJKYm1SbGVDQXJJRElwTENBeE1DazdYRzRnSUNBZ0lDQWdJRzUxYldKbGNrRnpVM1J5YVc1bklEMGdiblZ0WW1WeUxuUnZSbWw0WldRb2JXRm5ibWwwZFdSbElDc2daWGh3YjI1bGJuUkpibVJsZUNBdElESXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5WdFltVnlRWE5UZEhKcGJtY2dLeUJqYjIxd2IyNWxiblE3WEc1OU8xeHVablZ1WTNScGIyNGdjMlZ5YVdGc2FYcGxLR1IxY21GMGFXOXVLU0I3WEc0Z0lDQWdhV1lnS0NGa2RYSmhkR2x2Ymk1NVpXRnljeUFtSmx4dUlDQWdJQ0FnSUNBaFpIVnlZWFJwYjI0dWJXOXVkR2h6SUNZbVhHNGdJQ0FnSUNBZ0lDRmtkWEpoZEdsdmJpNTNaV1ZyY3lBbUpseHVJQ0FnSUNBZ0lDQWhaSFZ5WVhScGIyNHVaR0Y1Y3lBbUpseHVJQ0FnSUNBZ0lDQWhaSFZ5WVhScGIyNHVhRzkxY25NZ0ppWmNiaUFnSUNBZ0lDQWdJV1IxY21GMGFXOXVMbTFwYm5WMFpYTWdKaVpjYmlBZ0lDQWdJQ0FnSVdSMWNtRjBhVzl1TG5ObFkyOXVaSE1wSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNkUVZEQlRKenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUZ0Y2JpQWdJQ0FnSUNBZ1pIVnlZWFJwYjI0dWJtVm5ZWFJwZG1VZ0ppWWdKeTBuTEZ4dUlDQWdJQ0FnSUNBblVDY3NYRzRnSUNBZ0lDQWdJSE1vWkhWeVlYUnBiMjR1ZVdWaGNuTXNJQ2RaSnlrc1hHNGdJQ0FnSUNBZ0lITW9aSFZ5WVhScGIyNHViVzl1ZEdoekxDQW5UU2NwTEZ4dUlDQWdJQ0FnSUNCektHUjFjbUYwYVc5dUxuZGxaV3R6TENBblZ5Y3BMRnh1SUNBZ0lDQWdJQ0J6S0dSMWNtRjBhVzl1TG1SaGVYTXNJQ2RFSnlrc1hHNGdJQ0FnSUNBZ0lDaGtkWEpoZEdsdmJpNW9iM1Z5Y3lCOGZDQmtkWEpoZEdsdmJpNXRhVzUxZEdWeklIeDhJR1IxY21GMGFXOXVMbk5sWTI5dVpITXBJQ1ltSUNkVUp5eGNiaUFnSUNBZ0lDQWdjeWhrZFhKaGRHbHZiaTVvYjNWeWN5d2dKMGduS1N4Y2JpQWdJQ0FnSUNBZ2N5aGtkWEpoZEdsdmJpNXRhVzUxZEdWekxDQW5UU2NwTEZ4dUlDQWdJQ0FnSUNCektHUjFjbUYwYVc5dUxuTmxZMjl1WkhNc0lDZFRKeWtzWEc0Z0lDQWdYVnh1SUNBZ0lDQWdJQ0F1Wm1sc2RHVnlLRUp2YjJ4bFlXNHBYRzRnSUNBZ0lDQWdJQzVxYjJsdUtDY25LVHRjYm4xY2JtVjRjRzl5ZEhNdWMyVnlhV0ZzYVhwbElEMGdjMlZ5YVdGc2FYcGxPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OWFXNWtaWGd1YW5NdWJXRndJaXdpYVcxd2IzSjBJSHNnY0dGeWMyVWdZWE1nY0dGeWMyVkVkWEpoZEdsdmJpd2djMlZ5YVdGc2FYcGxJR0Z6SUhObGNtbGhiR2w2WlVSMWNtRjBhVzl1TENCOUlHWnliMjBnWENKMGFXNTVaSFZ5WVhScGIyNWNJanRjYmk4cUtseHVJQ29nVW1Wd2NtVnpaVzUwY3lCaElHUjFjbUYwYVc5dUlIWmhiSFZsTGlCSlUwOGdPRFl3TVM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFUjFjbUYwYVc5dUlIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRjbVZoZEdWeklHRWdibVYzSUVSMWNtRjBhVzl1SUhaaGJIVmxJR1p5YjIwZ2RHaGxJR2RwZG1WdUlIQmhjbUZ0WlhSbGNuTXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdWR2hsSUc1bGR5QkVkWEpoZEdsdmJseHVJQ0FnSUNBcUlFQjBhSEp2ZDNNZ1FXNGdaWEp5YjNJZ2FXWWdlV1ZoY25NZ2FYTWdhVzUyWVd4cFpGeHVJQ0FnSUNBcUlFQjBhSEp2ZDNNZ1FXNGdaWEp5YjNJZ2FXWWdiVzl1ZEdoeklHbHpJR2x1ZG1Gc2FXUmNiaUFnSUNBZ0tpQkFkR2h5YjNkeklFRnVJR1Z5Y205eUlHbG1JSGRsWld0eklHbHpJR2x1ZG1Gc2FXUmNiaUFnSUNBZ0tpQkFkR2h5YjNkeklFRnVJR1Z5Y205eUlHbG1JR1JoZVhNZ2FYTWdhVzUyWVd4cFpGeHVJQ0FnSUNBcUlFQjBhSEp2ZDNNZ1FXNGdaWEp5YjNJZ2FXWWdhRzkxY25NZ2FYTWdhVzUyWVd4cFpGeHVJQ0FnSUNBcUlFQjBhSEp2ZDNNZ1FXNGdaWEp5YjNJZ2FXWWdiV2x1ZFhSbGN5QnBjeUJwYm5aaGJHbGtYRzRnSUNBZ0lDb2dRSFJvY205M2N5QkJiaUJsY25KdmNpQnBaaUJ6WldOdmJtUnpJR2x6SUdsdWRtRnNhV1JjYmlBZ0lDQWdLaUJBZEdoeWIzZHpJRUZ1SUdWeWNtOXlJR2xtSUhkbFpXdHpJR2x6SUhWelpXUWdhVzRnWTI5dFltbHVZWFJwYjI0Z2QybDBhQ0I1WldGeWN5QnZjaUJ0YjI1MGFITmNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDdJSGxsWVhKeklEMGdNQ3dnYlc5dWRHaHpJRDBnTUN3Z2QyVmxhM01nUFNBd0xDQmtZWGx6SUQwZ01Dd2dhRzkxY25NZ1BTQXdMQ0J0YVc1MWRHVnpJRDBnTUN3Z2MyVmpiMjVrY3lBOUlEQXNJRzVsWjJGMGFYWmxJRDBnWm1Gc2MyVXNJSDBwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGxsWVhKeklEd2dNQ0I4ZkNCNVpXRnljeUErSURrNU9Ua3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lsbGxZWElnYlhWemRDQmlaU0JpWlhSM1pXVnVJREFnWVc1a0lEazVPVGxjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0cxdmJuUm9jeUE4SURBZ2ZId2diVzl1ZEdoeklENGdNVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJazF2Ym5Sb0lHMTFjM1FnWW1VZ1ltVjBkMlZsYmlBd0lHRnVaQ0F4TVZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2QyVmxhM01nUENBd0lIeDhJSGRsWld0eklENGdOVE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbGRsWldzZ2JYVnpkQ0JpWlNCaVpYUjNaV1Z1SURBZ1lXNWtJRFV6WENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYbHpJRHdnTUNCOGZDQmtZWGx6SUQ0Z05pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVJHRjVJRzExYzNRZ1ltVWdZbVYwZDJWbGJpQXdJR0Z1WkNBMlhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaG9iM1Z5Y3lBOElEQWdmSHdnYUc5MWNuTWdQaUF5TXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpU0c5MWNpQnRkWE4wSUdKbElHSmxkSGRsWlc0Z01DQmhibVFnTWpOY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHMXBiblYwWlhNZ1BDQXdJSHg4SUcxcGJuVjBaWE1nUGlBMU9Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVRXbHVkWFJsSUcxMWMzUWdZbVVnWW1WMGQyVmxiaUF3SUdGdVpDQTFPVndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWamIyNWtjeUE4SURBZ2ZId2djMlZqYjI1a2N5QStJRFU1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pUWldOdmJtUWdiWFZ6ZENCaVpTQmlaWFIzWldWdUlEQWdZVzVrSURVNVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ29lV1ZoY25NZ1BpQXdJSHg4SUcxdmJuUm9jeUErSURBcElDWW1JSGRsWld0eklENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHaGhkbVVnZDJWbGEzTWdZVzVrSUcxdmJuUm9jeUJ2Y2lCM1pXVnJjeUJoYm1RZ2VXVmhjbk5jSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1NVpXRnljeUE5SUhsbFlYSnpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMXZiblJvY3lBOUlHMXZiblJvY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldWcmN5QTlJSGRsWld0ek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGVYTWdQU0JrWVhsek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1odmRYSnpJRDBnYUc5MWNuTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXbHVkWFJsY3lBOUlHMXBiblYwWlhNN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWamIyNWtjeUE5SUhObFkyOXVaSE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibVZuWVhScGRtVWdQU0J1WldkaGRHbDJaVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR0Z5YzJWeklHRWdjM1J5YVc1bklHbHVkRzhnWVNCRWRYSmhkR2x2Ymk0Z1ZHaGxJSE4wY21sdVp5QmpZVzRnWW1VZ2IyWWdkR2hsSUVsVFR5QTROakF4SUdSMWNtRjBhVzl1SUdadmNtMWhkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJSEJoY25ObFhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1ZHaGxJSEJoY25ObFpDQkVkWEpoZEdsdmJpNWNiaUFnSUNBZ0tpQkFkR2h5YjNkeklFRnVJR1Z5Y205eUlHbG1JSFJvWlNCMllXeDFaU0JwY3lCcGJuWmhiR2xrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoZEdsaklIQmhjbk5sS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZZU3dnWDJJc0lGOWpMQ0JmWkN3Z1gyVXNJRjltTENCZlp5d2dYMmc3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkbUZzZFdVZ2ZId2dkbUZzZFdVdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5OMElHUjFjbUYwYVc5dUlEMGdjR0Z5YzJWRWRYSmhkR2x2YmloMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JIVnlZWFJwYjI0b2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZVdWaGNuTTZJQ2hmWVNBOUlHUjFjbUYwYVc5dUxubGxZWEp6S1NBaFBUMGdiblZzYkNBbUppQmZZU0FoUFQwZ2RtOXBaQ0F3SUQ4Z1gyRWdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiVzl1ZEdoek9pQW9YMklnUFNCa2RYSmhkR2x2Ymk1dGIyNTBhSE1wSUNFOVBTQnVkV3hzSUNZbUlGOWlJQ0U5UFNCMmIybGtJREFnUHlCZllpQTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjNaV1ZyY3pvZ0tGOWpJRDBnWkhWeVlYUnBiMjR1ZDJWbGEzTXBJQ0U5UFNCdWRXeHNJQ1ltSUY5aklDRTlQU0IyYjJsa0lEQWdQeUJmWXlBNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYbHpPaUFvWDJRZ1BTQmtkWEpoZEdsdmJpNWtZWGx6S1NBaFBUMGdiblZzYkNBbUppQmZaQ0FoUFQwZ2RtOXBaQ0F3SUQ4Z1gyUWdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhRzkxY25NNklDaGZaU0E5SUdSMWNtRjBhVzl1TG1odmRYSnpLU0FoUFQwZ2JuVnNiQ0FtSmlCZlpTQWhQVDBnZG05cFpDQXdJRDhnWDJVZ09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXbHVkWFJsY3pvZ0tGOW1JRDBnWkhWeVlYUnBiMjR1YldsdWRYUmxjeWtnSVQwOUlHNTFiR3dnSmlZZ1gyWWdJVDA5SUhadmFXUWdNQ0EvSUY5bUlEb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxZMjl1WkhNNklDaGZaeUE5SUdSMWNtRjBhVzl1TG5ObFkyOXVaSE1wSUNFOVBTQnVkV3hzSUNZbUlGOW5JQ0U5UFNCMmIybGtJREFnUHlCZlp5QTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaV2RoZEdsMlpUb2dLRjlvSUQwZ1pIVnlZWFJwYjI0dWJtVm5ZWFJwZG1VcElDRTlQU0J1ZFd4c0lDWW1JRjlvSUNFOVBTQjJiMmxrSURBZ1B5QmZhQ0E2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWeWFXRnNhWHBsY3lCMGFHVWdaSFZ5WVhScGIyNGdkRzhnWVNCemRISnBibWNnYVc0Z2RHaGxJRWxUVHlBNE5qQXhJR1IxY21GMGFXOXVJR1p2Y20xaGRDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QlVhR1VnYzJWeWFXRnNhWHBsWkNCa2RYSmhkR2x2Ymk1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYjFOMGNtbHVaeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGNtbGhiR2w2WlVSMWNtRjBhVzl1S0hSb2FYTXBPMXh1SUNBZ0lIMWNibjFjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUjFjbUYwYVc5dUxtcHpMbTFoY0NJc0ltbHRjRzl5ZENCN0lHWnZjbTFoZEZObFoyMWxiblFnZlNCbWNtOXRJRndpTGk5a1lYUmxUMjVzZVZ3aU8xeHVMeXBjYmlBcUlGSmxjSEpsYzJWdWRITWdZU0IwYVcxbElHOXViSGt1SUVsVFR5QTROakF4TGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZHbHRaVTl1YkhrZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnlaV0YwWlhNZ1lTQnVaWGNnVkdsdFpVOXViSGtnWm5KdmJTQjBhR1VnWjJsMlpXNGdjR0Z5WVcxbGRHVnljeTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJVYUdVZ2JtVjNJRlJwYldWUGJteDVYRzRnSUNBZ0lDb2dRSFJvY205M2N5QkJiaUJsY25KdmNpQnBaaUIwYUdVZ2JXbHNiR2x6WldOdmJtUnpJR0Z5WlNCcGJuWmhiR2xrWEc0Z0lDQWdJQ29nUUhSb2NtOTNjeUJCYmlCbGNuSnZjaUJwWmlCMGFHVWdjMlZqYjI1a2N5QmhjbVVnYVc1MllXeHBaRnh1SUNBZ0lDQXFJRUIwYUhKdmQzTWdRVzRnWlhKeWIzSWdhV1lnZEdobElHMXBiblYwWlhNZ1lYSmxJR2x1ZG1Gc2FXUmNiaUFnSUNBZ0tpQkFkR2h5YjNkeklFRnVJR1Z5Y205eUlHbG1JSFJvWlNCb2IzVnljeUJoY21VZ2FXNTJZV3hwWkZ4dUlDQWdJQ0FxSUVCMGFISnZkM01nUVc0Z1pYSnliM0lnYVdZZ2RHaGxJRzFwYkd4cGMyVmpiMjVrY3lCaGNtVWdhVzUyWVd4cFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIc2dhRzkxY25NZ1BTQXdMQ0J0YVc1MWRHVnpJRDBnTUN3Z2MyVmpiMjVrY3lBOUlEQXNJSEJwWTI5elpXTnZibVJ6SUQwZ01Dd2dmU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9hRzkxY25NZ1BDQXdJSHg4SUdodmRYSnpJRDRnTWpNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtodmRYSWdiWFZ6ZENCaVpTQmlaWFIzWldWdUlEQWdZVzVrSURJelhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHRhVzUxZEdWeklEd2dNQ0I4ZkNCdGFXNTFkR1Z6SUQ0Z05Ua3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrMXBiblYwWlNCdGRYTjBJR0psSUdKbGRIZGxaVzRnTUNCaGJtUWdOVGxjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hObFkyOXVaSE1nUENBd0lIeDhJSE5sWTI5dVpITWdQaUExT1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVTJWamIyNWtJRzExYzNRZ1ltVWdZbVYwZDJWbGJpQXdJR0Z1WkNBMU9Wd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9jR2xqYjNObFkyOXVaSE1nUENBd0lIeDhJSEJwWTI5elpXTnZibVJ6SUQ0Z09UazVPVGs1T1RrNU9UazVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSk5hV3hzYVhObFkyOXVaQ0J0ZFhOMElHSmxJR0psZEhkbFpXNGdNQ0JoYm1RZ09UazVPVGs1T1RrNU9UazVYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11YUc5MWNuTWdQU0JvYjNWeWN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGFXNTFkR1Z6SUQwZ2JXbHVkWFJsY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WldOdmJtUnpJRDBnYzJWamIyNWtjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdhV052YzJWamIyNWtjeUE5SUhCcFkyOXpaV052Ym1Sek8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJRlJwYldWUGJteDVJR1p5YjIwZ2RHaGxJR2RwZG1WdUlHUmhkR1V1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1JoZEdVZ1ZHaGxJR1JoZEdWY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCVWFHVWdibVYzSUZScGJXVlBibXg1WEc0Z0lDQWdJQ29nUUhSb2NtOTNjeUJCYmlCbGNuSnZjaUJwWmlCMGFHVWdaR0YwWlNCcGN5QnBiblpoYkdsa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGRHbGpJR1p5YjIxRVlYUmxLR1JoZEdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGa1lYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkVZWFJsSUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVWFXMWxUMjVzZVNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvYjNWeWN6b2daR0YwWlM1blpYUkliM1Z5Y3lncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldsdWRYUmxjem9nWkdGMFpTNW5aWFJOYVc1MWRHVnpLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV052Ym1Sek9pQmtZWFJsTG1kbGRGTmxZMjl1WkhNb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCcFkyOXpaV052Ym1Sek9pQmtZWFJsTG1kbGRFMXBiR3hwYzJWamIyNWtjeWdwSUNvZ01UQXdNREF3TURBd01DeGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJoY25ObGN5QmhJSE4wY21sdVp5QnBiblJ2SUdFZ1ZHbHRaVTl1YkhrdUlGUm9aU0J6ZEhKcGJtY2dZMkZ1SUdKbElHOW1JSFJvWlNCSlUwOGdPRFl3TVNCMGFXMWxJRzl1YkhrZ1ptOXliV0YwSUc5eUlHRWdiblZ0WW1WeUlISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ2RHbGphM01nYjJZZ1lTQkVZWFJsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkRzhnY0dGeWMyVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QlVhR1VnY0dGeWMyVmtJRlJwYldWUGJteDVMbHh1SUNBZ0lDQXFJRUIwYUhKdmQzTWdRVzRnWlhKeWIzSWdhV1lnZEdobElIWmhiSFZsSUdseklHbHVkbUZzYVdSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZEdGMGFXTWdjR0Z5YzJVb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjloTENCZllpd2dYMk1zSUY5a0xDQmZaU3dnWDJZc0lGOW5MQ0JmYUR0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpTQjhmQ0IyWVd4MVpTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR2xqYTNNZ1BTQkVZWFJsTG5CaGNuTmxLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0dselRtRk9LSFJwWTJ0ektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhobFl5QTlJQzllS0Q4OGFHOTFjbk0rV3pBeFhWeGNaSHd5V3pBdE0xMHBPaWcvUEcxcGJuVjBaWE0rV3pBdE5WMWNYR1FwT2lnL1BITmxZMjl1WkhNK1d6QXROVjFjWEdRcEtEODZXeTVkS0Q4OGJXbHNiR2x6WldOdmJtUnpQbHhjWkhzeExERXlmU2twUHlRdloya3VaWGhsWXloMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhobFl5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHaHZkWEp6SUQwZ2NHRnljMlZKYm5Rb0tGOWlJRDBnS0Y5aElEMGdaWGhsWXk1bmNtOTFjSE1wSUQwOVBTQnVkV3hzSUh4OElGOWhJRDA5UFNCMmIybGtJREFnUHlCMmIybGtJREFnT2lCZllTNW9iM1Z5Y3lrZ0lUMDlJRzUxYkd3Z0ppWWdYMklnSVQwOUlIWnZhV1FnTUNBL0lGOWlJRG9nWENKY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JXbHVkWFJsY3lBOUlIQmhjbk5sU1c1MEtDaGZaQ0E5SUNoZll5QTlJR1Y0WldNdVozSnZkWEJ6S1NBOVBUMGdiblZzYkNCOGZDQmZZeUE5UFQwZ2RtOXBaQ0F3SUQ4Z2RtOXBaQ0F3SURvZ1gyTXViV2x1ZFhSbGN5a2dJVDA5SUc1MWJHd2dKaVlnWDJRZ0lUMDlJSFp2YVdRZ01DQS9JRjlrSURvZ1hDSmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjMlZqYjI1a2N5QTlJSEJoY25ObFNXNTBLQ2hmWmlBOUlDaGZaU0E5SUdWNFpXTXVaM0p2ZFhCektTQTlQVDBnYm5Wc2JDQjhmQ0JmWlNBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dYMlV1YzJWamIyNWtjeWtnSVQwOUlHNTFiR3dnSmlZZ1gyWWdJVDA5SUhadmFXUWdNQ0EvSUY5bUlEb2dYQ0pjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYldsc2JHbHpaV052Ym1SeklEMGdjR0Z5YzJWSmJuUW9LRjlvSUQwZ0tGOW5JRDBnWlhobFl5NW5jbTkxY0hNcElEMDlQU0J1ZFd4c0lIeDhJRjluSUQwOVBTQjJiMmxrSURBZ1B5QjJiMmxrSURBZ09pQmZaeTV0YVd4c2FYTmxZMjl1WkhNcElDRTlQU0J1ZFd4c0lDWW1JRjlvSUNFOVBTQjJiMmxrSURBZ1B5QmZhQ0E2SUZ3aU1Gd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZScGJXVlBibXg1S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhRzkxY25Nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYm5WMFpYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObFkyOXVaSE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnBZMjl6WldOdmJtUnpPaUJ0YVd4c2FYTmxZMjl1WkhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSldZV3gxWlNCcGN5QnViM1FnWVNCMllXeHBaQ0IwYVcxbExXOXViSGtnY21Wd2NtVnpaVzUwWVhScGIyNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWVhSbElEMGdibVYzSUVSaGRHVW9kR2xqYTNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpuSnZiVVJoZEdVb1pHRjBaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUJoSUhOMGNtbHVaeUJ5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUIwYUdVZ2RHbHRaU0JwYmlCMGFHVWdabTl5YldGMElFaElPazFOT2xOVExsTlRVMU5UVTFOVFUxTlRVMU5UWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nVkdobElIUnBiV1VnYVc0Z2RHaGxJR1p2Y20xaGRDQklTRHBOVFRwVFV5NVRVMU5UVTFOVFUxTlRVMU5UVTF4dUlDQWdJQ0FxSUVCMGFISnZkM01nUVc0Z1pYSnliM0lnYVdZZ2RHaGxJSFJwYldVZ2FYTWdhVzUyWVd4cFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSdlUzUnlhVzVuS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lDUjdabTl5YldGMFUyVm5iV1Z1ZENoMGFHbHpMbWh2ZFhKekxDQXlLWDA2Skh0bWIzSnRZWFJUWldkdFpXNTBLSFJvYVhNdWJXbHVkWFJsY3l3Z01pbDlPaVI3Wm05eWJXRjBVMlZuYldWdWRDaDBhR2x6TG5ObFkyOXVaSE1zSURJcGZTNGtlMlp2Y20xaGRGTmxaMjFsYm5Rb2RHaHBjeTV3YVdOdmMyVmpiMjVrY3l3Z01USXBmV0E3WEc0Z0lDQWdmVnh1ZlZ4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlkR2x0WlU5dWJIa3Vhbk11YldGd0lpd2lhVzF3YjNKMElIc2dkSEpoWTJVZ2ZTQm1jbTl0SUZ3aVFHOXdaVzUwWld4bGJXVjBjbmt2WVhCcFhDSTdYRzVwYlhCdmNuUWdLaUJoY3lCMWNteFVjR3dnWm5KdmJTQmNJblZ5YVMxMFpXMXdiR0YwWlMxc2FYUmxYQ0k3WEc1cGJYQnZjblFnZXlCRVlYUmxUMjVzZVNCOUlHWnliMjBnWENJdUwyUmhkR1ZQYm14NVhDSTdYRzVwYlhCdmNuUWdleUJFZFhKaGRHbHZiaUI5SUdaeWIyMGdYQ0l1TDJSMWNtRjBhVzl1WENJN1hHNXBiWEJ2Y25RZ2V5QlVhVzFsVDI1c2VTQjlJR1p5YjIwZ1hDSXVMM1JwYldWUGJteDVYQ0k3WEc0dktpb2dWR2hwY3lCamJHRnpjeUJ5WlhCeVpYTmxiblJ6SUdGdUlHRmljM1J5WVdOMElFaFVWRkFnY21WeGRXVnpkQzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjRnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQXZLaW9nVkdobElIQmhkR2dnY0dGeVlXMWxkR1Z5Y3lCbWIzSWdkR2hsSUhKbGNYVmxjM1F1SUNvdlhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGMGFGQmhjbUZ0WlhSbGNuTWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0x5b3FJRlJvWlNCUmRXVnllU0JRWVhKaGJXVjBaWEp6SUc5bUlIUm9aU0J5WlhGMVpYTjBMaUFxTDF4dUlDQWdJQ0FnSUNCMGFHbHpMbkYxWlhKNVVHRnlZVzFsZEdWeWN5QTlJSHQ5T3lBdkwxUlBSRTg2SUdOaGMyVWdhVzV6Wlc1emFYUnBkbVZjYmlBZ0lDQWdJQ0FnTHlvcUlGUm9aU0JTWlhGMVpYTjBJRWhsWVdSbGNuTXVJQ292WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhR1ZoWkdWeWN5QTlJSHQ5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WlhGMVpYTjBUM0IwYVc5dWN5QTlJSHQ5T3lBdkwxUlBSRTg2SUdOaGMyVWdhVzV6Wlc1emFYUnBkbVZjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJRk5sZEhNZ2RHaGxJSEpsY1hWbGMzUWdZbTlrZVNCbWNtOXRJR0VnYlc5a1pXd2dkMmwwYUNCMGFHVWdjM0JsWTJsbWFXVmtJR052Ym5SbGJuUWdkSGx3WlM1Y2JpQWdJQ0FnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUhSb1pTQnRiMlJsYkhNdVhHNGdJQ0FnSUNBZ0lDQXFJRUJ3WVhKaGJTQmpiMjUwWlc1MFZIbHdaU0IwYUdVZ1kyOXVkR1Z1ZENCMGVYQmxMbHh1SUNBZ0lDQWdJQ0FnS2lCQWNHRnlZVzBnY21WeGRXVnpkRUZrWVhCMFpYSWdWR2hsSUdGa1lYQjBaWElnYzJWeWRtbGpaU0IwYnlCblpYUWdkR2hsSUhObGNtbGhiR2w2WVhScGIyNGdkM0pwZEdWeUlHWnliMjB1WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsVUdGeVlXMGdWQ0IwYUdVZ2JXOWtaV3dnZEhsd1pTNWNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwUTI5dWRHVnVkRVp5YjIxUVlYSnpZV0pzWlNBOUlDaHlaWEYxWlhOMFFXUmhjSFJsY2l3Z1kyOXVkR1Z1ZEZSNWNHVXNJSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZqWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1blpYUlVjbUZqWlhJb1VtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUxuUnlZV05sY2t0bGVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjM1JoY25SQlkzUnBkbVZUY0dGdUtGd2ljMlYwUTI5dWRHVnVkRVp5YjIxUVlYSnpZV0pzWlZ3aUxDQW9jM0JoYmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIZHlhWFJsY2lBOUlIUm9hWE11WjJWMFUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNpaHlaWEYxWlhOMFFXUmhjSFJsY2l3Z1kyOXVkR1Z1ZEZSNWNHVXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1obFlXUmxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR1ZoWkdWeWN5QTlJSHQ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0haaGJIVmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJpNXpaWFJCZEhSeWFXSjFkR1VvVW1WeGRXVnpkRWx1Wm05eWJXRjBhVzl1TG5KbGNYVmxjM1JVZVhCbFMyVjVMQ0JjSW05aWFtVmpkRnRkWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxRMjlzYkdWamRHbHZiazltVDJKcVpXTjBWbUZzZFdWektIVnVaR1ZtYVc1bFpDd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJpNXpaWFJCZEhSeWFXSjFkR1VvVW1WeGRXVnpkRWx1Wm05eWJXRjBhVzl1TG5KbGNYVmxjM1JVZVhCbFMyVjVMQ0JjSW05aWFtVmpkRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkeWFYUmxjaTUzY21sMFpVOWlhbVZqZEZaaGJIVmxLSFZ1WkdWbWFXNWxaQ3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBRMjl1ZEdWdWRFRnVaRU52Ym5SbGJuUlVlWEJsS0hkeWFYUmxjaXdnWTI5dWRHVnVkRlI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJpNWxibVFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkRiMjUwWlc1MFFXNWtRMjl1ZEdWdWRGUjVjR1VnUFNBb2QzSnBkR1Z5TENCamIyNTBaVzUwVkhsd1pTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmJuUmxiblJVZVhCbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b1pXRmtaWEp6VzFKbGNYVmxjM1JKYm1admNtMWhkR2x2Ymk1amIyNTBaVzUwVkhsd1pVaGxZV1JsY2wwZ1BTQmJZMjl1ZEdWdWRGUjVjR1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MFpXNTBJRDBnZDNKcGRHVnlMbWRsZEZObGNtbGhiR2w2WldSRGIyNTBaVzUwS0NrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyVjBVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjaUE5SUNoeVpYRjFaWE4wUVdSaGNIUmxjaXdnWTI5dWRHVnVkRlI1Y0dVc0lDNHVMblpoYkhWbGN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGeVpYRjFaWE4wUVdSaGNIUmxjaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pvZEhSd1EyOXlaU0JqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmpiMjUwWlc1MFZIbHdaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pqYjI1MFpXNTBWSGx3WlNCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpYTWdmSHdnZG1Gc2RXVnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luWmhiSFZsY3lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa0lHOXlJR1Z0Y0hSNVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY1hWbGMzUkJaR0Z3ZEdWeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtZGxkRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEpHWVdOMGIzSjVLQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WjJWMFUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNpaGpiMjUwWlc1MFZIbHdaU2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCVFpYUnpJSFJvWlNCeVpYRjFaWE4wSUdKdlpIa2dabkp2YlNCaElHMXZaR1ZzSUhkcGRHZ2dkR2hsSUhOd1pXTnBabWxsWkNCamIyNTBaVzUwSUhSNWNHVXVYRzRnSUNBZ0lDQWdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQjBhR1VnYzJOaGJHRnlJSFpoYkhWbGN5QjBieUJ6WlhKcFlXeHBlbVV1WEc0Z0lDQWdJQ0FnSUNBcUlFQndZWEpoYlNCamIyNTBaVzUwVkhsd1pTQjBhR1VnWTI5dWRHVnVkQ0IwZVhCbExseHVJQ0FnSUNBZ0lDQWdLaUJBY0dGeVlXMGdjbVZ4ZFdWemRFRmtZWEIwWlhJZ1ZHaGxJR0ZrWVhCMFpYSWdjMlZ5ZG1salpTQjBieUJuWlhRZ2RHaGxJSE5sY21saGJHbDZZWFJwYjI0Z2QzSnBkR1Z5SUdaeWIyMHVYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxVR0Z5WVcwZ1ZDQjBhR1VnYlc5a1pXd2dkSGx3WlM1Y2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBRMjl1ZEdWdWRFWnliMjFUWTJGc1lYSWdQU0FvY21WeGRXVnpkRUZrWVhCMFpYSXNJR052Ym5SbGJuUlVlWEJsTENCMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaFkyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVaMlYwVkhKaFkyVnlLRkpsY1hWbGMzUkpibVp2Y20xaGRHbHZiaTUwY21GalpYSkxaWGtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5OMFlYSjBRV04wYVhabFUzQmhiaWhjSW5ObGRFTnZiblJsYm5SR2NtOXRVMk5oYkdGeVhDSXNJQ2h6Y0dGdUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkM0pwZEdWeUlEMGdkR2hwY3k1blpYUlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlLSEpsY1hWbGMzUkJaR0Z3ZEdWeUxDQmpiMjUwWlc1MFZIbHdaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWFHVmhaR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWldGa1pYSnpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHRnVMbk5sZEVGMGRISnBZblYwWlNoU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0dWNtVnhkV1Z6ZEZSNWNHVkxaWGtzSUZ3aVcxMWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWRGIyeHNaV04wYVc5dVQyWlFjbWx0YVhScGRtVldZV3gxWlhNb2RXNWtaV1pwYm1Wa0xDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlZSNWNHVWdQU0IwZVhCbGIyWWdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHRnVMbk5sZEVGMGRISnBZblYwWlNoU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0dWNtVnhkV1Z6ZEZSNWNHVkxaWGtzSUhaaGJIVmxWSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFRuVnNiRlpoYkhWbEtIVnVaR1ZtYVc1bFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDJZV3gxWlZSNWNHVWdQVDA5SUZ3aVltOXZiR1ZoYmx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFFtOXZiR1ZoYmxaaGJIVmxLSFZ1WkdWbWFXNWxaQ3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9kbUZzZFdWVWVYQmxJRDA5UFNCY0luTjBjbWx1WjF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFUzUnlhVzVuVm1Gc2RXVW9kVzVrWldacGJtVmtMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDJZV3gxWlNCcGJuTjBZVzVqWlc5bUlFUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNjbWwwWlhJdWQzSnBkR1ZFWVhSbFZtRnNkV1VvZFc1a1pXWnBibVZrTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gyWVd4MVpTQnBibk4wWVc1alpXOW1JRVJoZEdWUGJteDVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxSR0YwWlU5dWJIbFdZV3gxWlNoMWJtUmxabWx1WldRc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0haaGJIVmxJR2x1YzNSaGJtTmxiMllnVkdsdFpVOXViSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNjbWwwWlhJdWQzSnBkR1ZVYVcxbFQyNXNlVlpoYkhWbEtIVnVaR1ZtYVc1bFpDd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCRWRYSmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlVSMWNtRjBhVzl1Vm1Gc2RXVW9kVzVrWldacGJtVmtMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDJZV3gxWlZSNWNHVWdQVDA5SUZ3aWJuVnRZbVZ5WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWT2RXMWlaWEpXWVd4MVpTaDFibVJsWm1sdVpXUXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxRMjlzYkdWamRHbHZiazltVUhKcGJXbDBhWFpsVm1Gc2RXVnpLSFZ1WkdWbWFXNWxaQ3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQmxibU52ZFc1MFpYSmxaQ0IxYm10dWIzZHVJSFpoYkhWbElIUjVjR1VnWkhWeWFXNW5JSE5sY21saGJHbDZZWFJwYjI0Z0pIdDJZV3gxWlZSNWNHVjlZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJEYjI1MFpXNTBRVzVrUTI5dWRHVnVkRlI1Y0dVb2QzSnBkR1Z5TENCamIyNTBaVzUwVkhsd1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHRnVMbVZ1WkNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dVMlYwY3lCMGFHVWdjbVZ4ZFdWemRDQmliMlI1SUhSdklHSmxJR0VnWW1sdVlYSjVJSE4wY21WaGJTNWNiaUFnSUNBZ0lDQWdJQ29nUUhCaGNtRnRJSFpoYkhWbElIUm9aU0JpYVc1aGNua2djM1J5WldGdFhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wY21WaGJVTnZiblJsYm5RZ1BTQW9kbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdWaFpHVnljMXRTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjR1WTI5dWRHVnVkRlI1Y0dWSVpXRmtaWEpkSUQwZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGSmxjWFZsYzNSSmJtWnZjbTFoZEdsdmJpNWlhVzVoY25sRGIyNTBaVzUwVkhsd1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJsYm5RZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlGTmxkSE1nZEdobElIRjFaWEo1SUhOMGNtbHVaeUJ3WVhKaGJXVjBaWEp6SUdaeWIyMGdZU0J5WVhjZ2IySnFaV04wTGx4dUlDQWdJQ0FnSUNBZ0tpQkFjR0Z5WVcwZ2NHRnlZVzFsZEdWeWN5QjBhR1VnY0dGeVlXMWxkR1Z5Y3k1Y2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVWFZsY25sVGRISnBibWRRWVhKaGJXVjBaWEp6Um5KdmJWSmhkMDlpYW1WamRDQTlJQ2h4S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWEVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1QySnFaV04wTG1WdWRISnBaWE1vY1NrdVptOXlSV0ZqYUNnb1cyc3NJSFpkS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd0bGVTQTlJR3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIRXVaMlYwVVhWbGNubFFZWEpoYldWMFpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWeWFXRnNhWHBoZEdsdmJrdGxlU0E5SUhFdVoyVjBVWFZsY25sUVlYSmhiV1YwWlhJb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5sY21saGJHbDZZWFJwYjI1TFpYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVNBOUlITmxjbWxoYkdsNllYUnBiMjVMWlhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXhkV1Z5ZVZCaGNtRnRaWFJsY25OYmEyVjVYU0E5SUhZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcUlFZGxkSE1nZEdobElGVlNUQ0J2WmlCMGFHVWdjbVZ4ZFdWemRDQWdLaTljYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjVoYldsdVp5MWpiMjUyWlc1MGFXOXVYRzRnSUNBZ1oyVjBJRlZTVENncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtRjNWWEpzSUQwZ2RHaHBjeTV3WVhSb1VHRnlZVzFsZEdWeWMxdFNaWEYxWlhOMFNXNW1iM0p0WVhScGIyNHVjbUYzWDNWeWJGOXJaWGxkTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MWNta3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ5YVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHlZWGRWY213cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVWVkpNSUQwZ2NtRjNWWEpzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmhkMVZ5YkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDZ2hkR2hwY3k1eGRXVnllVkJoY21GdFpYUmxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkYxWlhKNVVHRnlZVzFsZEdWeWN5QmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDRjBhR2x6TG5CaGRHaFFZWEpoYldWMFpYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSndZWFJvVUdGeVlXMWxkR1Z5Y3lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0NGMGFHbHpMblZ5YkZSbGJYQnNZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0oxY214VVpXMXdiR0YwWlNCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWdGNHeGhkR1VnUFNCdVpYY2dkWEpzVkhCc0xsVlNTUzVVWlcxd2JHRjBaU2gwYUdsekxuVnliRlJsYlhCc1lYUmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnYTJWNUlHbHVJSFJvYVhNdWNYVmxjbmxRWVhKaGJXVjBaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNYVmxjbmxRWVhKaGJXVjBaWEp6VzJ0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnRyWlhsZElEMGdkR2hwY3k1eGRXVnllVkJoY21GdFpYUmxjbk5iYTJWNVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnBiaUIwYUdsekxuQmhkR2hRWVhKaGJXVjBaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNHRjBhRkJoY21GdFpYUmxjbk5iYTJWNVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhXMnRsZVYwZ1BTQjBhR2x6TG5CaGRHaFFZWEpoYldWMFpYSnpXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUmxiWEJzWVhSbExtVjRjR0Z1WkNoa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQXZLaW9nVTJWMGN5QjBhR1VnVlZKTUlHOW1JSFJvWlNCeVpYRjFaWE4wSUNvdlhHNGdJQ0FnYzJWMElGVlNUQ2gxY213cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMWNtd3BYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKVlVrd2dZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY21rZ1BTQjFjbXc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjWFZsY25sUVlYSmhiV1YwWlhKeklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUZCaGNtRnRaWFJsY25NZ1BTQjdmVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FJRWRsZEhNZ2RHaGxJSEpsY1hWbGMzUWdiM0IwYVc5dWN5Qm1iM0lnZEdobElISmxjWFZsYzNRdUlDb3ZYRzRnSUNBZ1oyVjBVbVZ4ZFdWemRFOXdkR2x2Ym5Nb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYRjFaWE4wVDNCMGFXOXVjenRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FJRUZrWkhNZ2RHaGxJR2hsWVdSbGNuTWdabTl5SUhSb1pTQnlaWEYxWlhOMExpQXFMMXh1SUNBZ0lHRmtaRkpsY1hWbGMzUklaV0ZrWlhKektITnZkWEpqWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhOdmRYSmpaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hqYjI1emRDQnJaWGtnYVc0Z2MyOTFjbU5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaGxZV1JsY25OYmEyVjVYU0E5SUhOdmRYSmpaVnRyWlhsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtpQkJaR1J6SUhSb1pTQnlaWEYxWlhOMElHOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCeVpYRjFaWE4wTGlBcUwxeHVJQ0FnSUdGa1pGSmxjWFZsYzNSUGNIUnBiMjV6S0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z2Y0hScGIyNXpJSHg4SUc5d2RHbHZibk11YkdWdVozUm9JRDA5UFNBd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbVp2Y2tWaFkyZ29LRzl3ZEdsdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVnhkV1Z6ZEU5d2RHbHZibk5iYjNCMGFXOXVMbWRsZEV0bGVTZ3BYU0E5SUc5d2RHbHZianRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2lCU1pXMXZkbVZ6SUhSb1pTQnlaWEYxWlhOMElHOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCeVpYRjFaWE4wTGlBcUwxeHVJQ0FnSUhKbGJXOTJaVkpsY1hWbGMzUlBjSFJwYjI1ektDNHVMbTl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnZjSFJwYjI1eklIeDhJRzl3ZEdsdmJuTXViR1Z1WjNSb0lEMDlQU0F3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtWnZja1ZoWTJnb0tHOXdkR2x2YmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVYM0psY1hWbGMzUlBjSFJwYjI1elcyOXdkR2x2Ymk1blpYUkxaWGtvS1YwN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibjFjYmxKbGNYVmxjM1JKYm1admNtMWhkR2x2Ymk1eVlYZGZkWEpzWDJ0bGVTQTlJRndpY21WeGRXVnpkQzF5WVhjdGRYSnNYQ0k3WEc1U1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0dVltbHVZWEo1UTI5dWRHVnVkRlI1Y0dVZ1BTQmNJbUZ3Y0d4cFkyRjBhVzl1TDI5amRHVjBMWE4wY21WaGJWd2lPMXh1VW1WeGRXVnpkRWx1Wm05eWJXRjBhVzl1TG1OdmJuUmxiblJVZVhCbFNHVmhaR1Z5SUQwZ1hDSkRiMjUwWlc1MExWUjVjR1ZjSWp0Y2JsSmxjWFZsYzNSSmJtWnZjbTFoZEdsdmJpNTBjbUZqWlhKTFpYa2dQU0JjSWtCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1elhDSTdYRzVTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjR1Y21WeGRXVnpkRlI1Y0dWTFpYa2dQU0JjSW1OdmJTNXRhV055YjNOdlpuUXVhMmx2ZEdFdWNtVnhkV1Z6ZEM1MGVYQmxYQ0k3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMXlaWEYxWlhOMFNXNW1iM0p0WVhScGIyNHVhbk11YldGd0lpd2lhVzF3YjNKMElIc2dVbVZ4ZFdWemRFbHVabTl5YldGMGFXOXVJSDBnWm5KdmJTQmNJaTR2Y21WeGRXVnpkRWx1Wm05eWJXRjBhVzl1WENJN1hHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBVR0YwYUZCaGNtRnRaWFJsY25Nb2NHRnlZVzFsZEdWeWN5a2dlMXh1SUNBZ0lHTnZibk4wSUhKbGMzVnNkQ0E5SUh0OU8xeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NHRnlZVzFsZEdWeWN5QTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSYlVtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUxuSmhkMTkxY214ZmEyVjVYU0E5SUhCaGNtRnRaWFJsY25NN1hHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2FXWWdLSEJoY21GdFpYUmxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hqYjI1emRDQnJaWGtnYVc0Z2NHRnlZVzFsZEdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwVzJ0bGVWMGdQU0J3WVhKaGJXVjBaWEp6VzJ0bGVWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV2RsZEZCaGRHaFFZWEpoYldWMFpYSnpMbXB6TG0xaGNDSXNJbWx0Y0c5eWRDQjdJR2RsZEZCaGRHaFFZWEpoYldWMFpYSnpJSDBnWm5KdmJTQmNJaTR2WjJWMFVHRjBhRkJoY21GdFpYUmxjbk5jSWp0Y2JtVjRjRzl5ZENCamJHRnpjeUJDWVhObFVtVnhkV1Z6ZEVKMWFXeGtaWElnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hCaGRHaFFZWEpoYldWMFpYSnpMQ0J5WlhGMVpYTjBRV1JoY0hSbGNpd2dkWEpzVkdWdGNHeGhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z5WlhGMVpYTjBRV1JoY0hSbGNpbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5KbGNYVmxjM1JCWkdGd2RHVnlJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gxY214VVpXMXdiR0YwWlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYlhCMGVTQnpkSEpwYm1jZ2FYTWdiMnRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luVnliRlJsYlhCc1lYUmxJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lYUm9VR0Z5WVcxbGRHVnljeUE5SUdkbGRGQmhkR2hRWVhKaGJXVjBaWEp6S0hCaGRHaFFZWEpoYldWMFpYSnpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2lBOUlISmxjWFZsYzNSQlpHRndkR1Z5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMblZ5YkZSbGJYQnNZWFJsSUQwZ2RYSnNWR1Z0Y0d4aGRHVTdYRzRnSUNBZ2ZWeHVmVnh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVltRnpaVkpsY1hWbGMzUkNkV2xzWkdWeUxtcHpMbTFoY0NJc0lpOHFLbHh1SUNvZ1VtVndjbVZ6Wlc1MGN5QjBhR1VnU0ZSVVVDQnRaWFJvYjJRZ2RYTmxaQ0JpZVNCaElISmxjWFZsYzNRdVhHNGdLaTljYm1WNGNHOXlkQ0IyWVhJZ1NIUjBjRTFsZEdodlpEdGNiaWhtZFc1amRHbHZiaUFvU0hSMGNFMWxkR2h2WkNrZ2UxeHVJQ0FnSUM4cUtpQlVhR1VnU0ZSVVVDQkhSVlFnYldWMGFHOWtJQ292WEc0Z0lDQWdTSFIwY0UxbGRHaHZaRnRjSWtkRlZGd2lYU0E5SUZ3aVIwVlVYQ0k3WEc0Z0lDQWdMeW9xSUZSb1pTQklWRlJRSUZCUFUxUWdiV1YwYUc5a0lDb3ZYRzRnSUNBZ1NIUjBjRTFsZEdodlpGdGNJbEJQVTFSY0lsMGdQU0JjSWxCUFUxUmNJanRjYmlBZ0lDQXZLaW9nVkdobElFaFVWRkFnVUVGVVEwZ2diV1YwYUc5a0lDb3ZYRzRnSUNBZ1NIUjBjRTFsZEdodlpGdGNJbEJCVkVOSVhDSmRJRDBnWENKUVFWUkRTRndpTzF4dUlDQWdJQzhxS2lCVWFHVWdTRlJVVUNCRVJVeEZWRVVnYldWMGFHOWtJQ292WEc0Z0lDQWdTSFIwY0UxbGRHaHZaRnRjSWtSRlRFVlVSVndpWFNBOUlGd2lSRVZNUlZSRlhDSTdYRzRnSUNBZ0x5b3FJRlJvWlNCSVZGUlFJRTlRVkVsUFRsTWdiV1YwYUc5a0lDb3ZYRzRnSUNBZ1NIUjBjRTFsZEdodlpGdGNJazlRVkVsUFRsTmNJbDBnUFNCY0lrOVFWRWxQVGxOY0lqdGNiaUFnSUNBdktpb2dWR2hsSUVoVVZGQWdRMDlPVGtWRFZDQnRaWFJvYjJRZ0tpOWNiaUFnSUNCSWRIUndUV1YwYUc5a1cxd2lRMDlPVGtWRFZGd2lYU0E5SUZ3aVEwOU9Ua1ZEVkZ3aU8xeHVJQ0FnSUM4cUtpQlVhR1VnU0ZSVVVDQlVVa0ZEUlNCdFpYUm9iMlFnS2k5Y2JpQWdJQ0JJZEhSd1RXVjBhRzlrVzF3aVZGSkJRMFZjSWwwZ1BTQmNJbFJTUVVORlhDSTdYRzRnSUNBZ0x5b3FJRlJvWlNCSVZGUlFJRWhGUVVRZ2JXVjBhRzlrSUNvdlhHNGdJQ0FnU0hSMGNFMWxkR2h2WkZ0Y0lraEZRVVJjSWwwZ1BTQmNJa2hGUVVSY0lqdGNiaUFnSUNBdktpb2dWR2hsSUVoVVZGQWdVRlZVSUcxbGRHaHZaQ0FxTDF4dUlDQWdJRWgwZEhCTlpYUm9iMlJiWENKUVZWUmNJbDBnUFNCY0lsQlZWRndpTzF4dWZTa29TSFIwY0UxbGRHaHZaQ0I4ZkNBb1NIUjBjRTFsZEdodlpDQTlJSHQ5S1NrN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFvZEhSd1RXVjBhRzlrTG1wekxtMWhjQ0lzSWk4cUtpQkVaV1poZFd4MElISmxjM0J2Ym5ObElHaGhibVJzWlhJZ2RHOGdZV05qWlhOeklIUm9aU0J1WVhScGRtVWdjbVZ6Y0c5dWMyVWdiMkpxWldOMExpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFNWhkR2wyWlZKbGMzQnZibk5sU0dGdVpHeGxjaUI3WEc0Z0lDQWdhR0Z1Wkd4bFVtVnpjRzl1YzJWQmMzbHVZeWh5WlhOd2IyNXpaU3dnWlhKeWIzSk5ZWEJ3YVc1bmN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSk5ZWEJ3YVc1bmN5QTlJR1Z5Y205eVRXRndjR2x1WjNNN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0I5WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDF1WVhScGRtVlNaWE53YjI1elpVaGhibVJzWlhJdWFuTXViV0Z3SWl3aWRtRnlJRjloTzF4dWFXMXdiM0owSUhzZ1RtRjBhWFpsVW1WemNHOXVjMlZJWVc1a2JHVnlJSDBnWm5KdmJTQmNJaTR2Ym1GMGFYWmxVbVZ6Y0c5dWMyVklZVzVrYkdWeVhDSTdYRzR2S2lvZ1ZHaHBjeUJqYkdGemN5QmpZVzRnWW1VZ2RYTmxaQ0IwYnlCM2NtRndJR0VnY21WeGRXVnpkQ0IxYzJsdVp5QjBhR1VnWm14MVpXNTBJRUZRU1NCaGJtUWdaMlYwSUhSb1pTQnVZWFJwZG1VZ2NtVnpjRzl1YzJVZ2IySnFaV04wSUdsdUlISmxkSFZ5Ymk0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCT1lYUnBkbVZTWlhOd2IyNXpaVmR5WVhCd1pYSWdlMXh1ZlZ4dVgyRWdQU0JPWVhScGRtVlNaWE53YjI1elpWZHlZWEJ3WlhJN1hHNU9ZWFJwZG1WU1pYTndiMjV6WlZkeVlYQndaWEl1UTJGc2JFRnVaRWRsZEU1aGRHbDJaU0E5SUdGemVXNWpJQ2h2Y21sbmFXNWhiRU5oYkd3c0lIRXNJR2dzSUc4cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCeVpYTndiMjV6WlVoaGJtUnNaWElnUFNCdVpYY2dUbUYwYVhabFVtVnpjRzl1YzJWSVlXNWtiR1Z5S0NrN1hHNGdJQ0FnWVhkaGFYUWdiM0pwWjJsdVlXeERZV3hzS0hFc0lHZ3NJRzhzSUhKbGMzQnZibk5sU0dGdVpHeGxjaWs3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM0J2Ym5ObFNHRnVaR3hsY2k1MllXeDFaVHRjYm4wN1hHNU9ZWFJwZG1WU1pYTndiMjV6WlZkeVlYQndaWEl1UTJGc2JFRnVaRWRsZEU1aGRHbDJaVmRwZEdoQ2IyUjVJRDBnWVhONWJtTWdLRzl5YVdkcGJtRnNRMkZzYkN3Z2NtVnhkV1Z6ZEVKdlpIa3NJSEVzSUdnc0lHOHBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnlaWE53YjI1elpVaGhibVJzWlhJZ1BTQnVaWGNnVG1GMGFYWmxVbVZ6Y0c5dWMyVklZVzVrYkdWeUtDazdYRzRnSUNBZ1lYZGhhWFFnYjNKcFoybHVZV3hEWVd4c0tISmxjWFZsYzNSQ2IyUjVMQ0J4TENCb0xDQnZMQ0J5WlhOd2IyNXpaVWhoYm1Sc1pYSXBPMXh1SUNBZ0lISmxkSFZ5YmlCeVpYTndiMjV6WlVoaGJtUnNaWEl1ZG1Gc2RXVTdYRzU5TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlibUYwYVhabFVtVnpjRzl1YzJWWGNtRndjR1Z5TG1wekxtMWhjQ0lzSW1WNGNHOXlkQ0JtZFc1amRHbHZiaUIwYjBacGNuTjBRMmhoY21GamRHVnlWWEJ3WlhJb2MyOTFjbU5sS1NCN1hHNGdJQ0FnYVdZZ0tITnZkWEpqWlNBbUppQnpiM1Z5WTJVdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjkxY21ObExuTjFZbk4wY21sdVp5Z3dMQ0F4S1M1MGIweHZZMkZzWlZWd2NHVnlRMkZ6WlNncElDc2djMjkxY21ObExuTjFZbk4wY21sdVp5Z3hLVHRjYmlBZ0lDQjlYRzRnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJjSWx3aU8xeHVJQ0FnSUgxY2JuMWNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFhOMGNtbHVaMVYwYVd4ekxtcHpMbTFoY0NJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElFMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiaTRnSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdUlDQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlV1WEc0Z0tpQlRaV1VnVEdsalpXNXpaU0JwYmlCMGFHVWdjSEp2YW1WamRDQnliMjkwSUdadmNpQnNhV05sYm5ObElHbHVabTl5YldGMGFXOXVMbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNWxlSEJ2Y25SekxrTjFjM1J2YlVabGRHTm9TR0Z1Wkd4bGNpQTlJSFp2YVdRZ01EdGNibU52Ym5OMElIUnpiR2xpWHpFZ1BTQnlaWEYxYVhKbEtGd2lkSE5zYVdKY0lpazdYRzR2S2lwY2JpQXFJRUJqYkdGemMxeHVJQ29nUUdsdGNHeGxiV1Z1ZEhNZ1RXbGtaR3hsZDJGeVpWeHVJQ29nUTJ4aGMzTWdabTl5SUVabGRHTm9TR0Z1Wkd4bGNseHVJQ292WEc1amJHRnpjeUJEZFhOMGIyMUdaWFJqYUVoaGJtUnNaWElnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dOMWMzUnZiVVpsZEdOb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzVnpkRzl0Um1WMFkyZ2dQU0JqZFhOMGIyMUdaWFJqYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCMVlteHBZMXh1SUNBZ0lDQXFJRUJoYzNsdVkxeHVJQ0FnSUNBcUlGUnZJR1Y0WldOMWRHVWdkR2hsSUdOMWNuSmxiblFnYldsa1pHeGxkMkZ5WlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UTI5dWRHVjRkSDBnWTI5dWRHVjRkQ0F0SUZSb1pTQnlaWEYxWlhOMElHTnZiblJsZUhRZ2IySnFaV04wWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nUVNCd2NtOXRhWE5sSUhSb1lYUWdjbVZ6YjJ4MlpYTWdkRzhnYm05MGFHbHVaMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHVjRaV04xZEdVb2RYSnNMQ0J5WlhGMVpYTjBTVzVwZENrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RITnNhV0pmTVM1ZlgyRjNZV2wwWlhJb2RHaHBjeXdnZG05cFpDQXdMQ0IyYjJsa0lEQXNJR1oxYm1OMGFXOXVLaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlV2xsYkdRZ2RHaHBjeTVqZFhOMGIyMUdaWFJqYUNoMWNtd3NJSEpsY1hWbGMzUkpibWwwS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVEZFhOMGIyMUdaWFJqYUVoaGJtUnNaWElnUFNCRGRYTjBiMjFHWlhSamFFaGhibVJzWlhJN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1THk4Z2NtVm1PaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEdNek9TOXdjbTl3YjNOaGJDMW5iRzlpWVd4Y2JuWmhjaUJuWlhSSGJHOWlZV3dnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEM4dklIUm9aU0J2Ym14NUlISmxiR2xoWW14bElHMWxZVzV6SUhSdklHZGxkQ0IwYUdVZ1oyeHZZbUZzSUc5aWFtVmpkQ0JwYzF4dVhIUXZMeUJnUm5WdVkzUnBiMjRvSjNKbGRIVnliaUIwYUdsekp5a29LV0JjYmx4MEx5OGdTRzkzWlhabGNpd2dkR2hwY3lCallYVnpaWE1nUTFOUUlIWnBiMnhoZEdsdmJuTWdhVzRnUTJoeWIyMWxJR0Z3Y0hNdVhHNWNkR2xtSUNoMGVYQmxiMllnYzJWc1ppQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIc2djbVYwZFhKdUlITmxiR1k3SUgxY2JseDBhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbktTQjdJSEpsZEhWeWJpQjNhVzVrYjNjN0lIMWNibHgwYVdZZ0tIUjVjR1Z2WmlCbmJHOWlZV3dnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3SUhKbGRIVnliaUJuYkc5aVlXdzdJSDFjYmx4MGRHaHliM2NnYm1WM0lFVnljbTl5S0NkMWJtRmliR1VnZEc4Z2JHOWpZWFJsSUdkc2IySmhiQ0J2WW1wbFkzUW5LVHRjYm4xY2JseHVkbUZ5SUdkc2IySmhiQ0E5SUdkbGRFZHNiMkpoYkNncE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0c5eWRITWdQU0JuYkc5aVlXd3VabVYwWTJnN1hHNWNiaTh2SUU1bFpXUmxaQ0JtYjNJZ1ZIbHdaVk5qY21sd2RDQmhibVFnVjJWaWNHRmpheTVjYm1sbUlDaG5iRzlpWVd3dVptVjBZMmdwSUh0Y2JseDBaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdaMnh2WW1Gc0xtWmxkR05vTG1KcGJtUW9aMnh2WW1Gc0tUdGNibjFjYmx4dVpYaHdiM0owY3k1SVpXRmtaWEp6SUQwZ1oyeHZZbUZzTGtobFlXUmxjbk03WEc1bGVIQnZjblJ6TGxKbGNYVmxjM1FnUFNCbmJHOWlZV3d1VW1WeGRXVnpkRHRjYm1WNGNHOXlkSE11VW1WemNHOXVjMlVnUFNCbmJHOWlZV3d1VW1WemNHOXVjMlU3SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNWxlSEJ2Y25SekxtZGxkRTlpYzJWeWRtRmlhV3hwZEhsUGNIUnBiMjV6Um5KdmJWSmxjWFZsYzNRZ1BTQmxlSEJ2Y25SekxrOWljMlZ5ZG1GaWFXeHBkSGxQY0hScGIyNXpTVzF3YkNBOUlHVjRjRzl5ZEhNdVQySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJrdGxlU0E5SUhadmFXUWdNRHRjYm1WNGNHOXlkSE11VDJKelpYSjJZV0pwYkdsMGVVOXdkR2x2Ymt0bGVTQTlJRndpVDJKelpYSjJZV0pwYkdsMGVVOXdkR2x2Ymt0bGVWd2lPMXh1WTJ4aGMzTWdUMkp6WlhKMllXSnBiR2wwZVU5d2RHbHZibk5KYlhCc0lIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHZjbWxuYVc1aGJFOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmIzSnBaMmx1WVd4UGNIUnBiMjV6SUQwZ2IzSnBaMmx1WVd4UGNIUnBiMjV6SUNFOVBTQnVkV3hzSUNZbUlHOXlhV2RwYm1Gc1QzQjBhVzl1Y3lBaFBUMGdkbTlwWkNBd0lEOGdiM0pwWjJsdVlXeFBjSFJwYjI1eklEb2dlMzA3WEc0Z0lDQWdmVnh1SUNBZ0lHZGxkRXRsZVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVjRjRzl5ZEhNdVQySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJrdGxlVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJR2x1WTJ4MVpHVkZWVWxKUVhSMGNtbGlkWFJsY3lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDI5eWFXZHBibUZzVDNCMGFXOXVjeTVwYm1Oc2RXUmxSVlZKU1VGMGRISnBZblYwWlhNN1hHNGdJQ0FnZlZ4dUlDQWdJSE5sZENCcGJtTnNkV1JsUlZWSlNVRjBkSEpwWW5WMFpYTW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmIzSnBaMmx1WVd4UGNIUnBiMjV6TG1sdVkyeDFaR1ZGVlVsSlFYUjBjbWxpZFhSbGN5QTlJSFpoYkhWbE8xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhSVWNtRmpaWEpKYm5OMGNuVnRaVzUwWVhScGIyNU9ZVzFsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSkFiV2xqY205emIyWjBMMnRwYjNSaExXaDBkSEF0Wm1WMFkyaHNhV0p5WVhKNVhDSTdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVQWW5ObGNuWmhZbWxzYVhSNVQzQjBhVzl1YzBsdGNHd2dQU0JQWW5ObGNuWmhZbWxzYVhSNVQzQjBhVzl1YzBsdGNHdzdYRzVtZFc1amRHbHZiaUJuWlhSUFluTmxjblpoWW1sc2FYUjVUM0IwYVc5dWMwWnliMjFTWlhGMVpYTjBLSEpsY1hWbGMzUlBjSFJwYjI1ektTQjdYRzRnSUNBZ2FXWWdLSEpsY1hWbGMzUlBjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHOWljMlZ5ZG1GaWFXeHBkSGxQY0hScGIyNXpJRDBnY21WeGRXVnpkRTl3ZEdsdmJuTmJaWGh3YjNKMGN5NVBZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVTMlY1WFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzlpYzJWeWRtRmlhV3hwZEhsUGNIUnBiMjV6SUdsdWMzUmhibU5sYjJZZ1QySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTkpiWEJzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMkp6WlhKMllXSnBiR2wwZVU5d2RHbHZibk03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNibjFjYm1WNGNHOXlkSE11WjJWMFQySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTkdjbTl0VW1WeGRXVnpkQ0E5SUdkbGRFOWljMlZ5ZG1GaWFXeHBkSGxQY0hScGIyNXpSbkp2YlZKbGNYVmxjM1E3WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1SUNCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xpQWdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCTWFXTmxibk5sTGx4dUlDb2dVMlZsSUV4cFkyVnVjMlVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NVFZWEpoYldWMFpYSnpUbUZ0WlVSbFkyOWthVzVuU0dGdVpHeGxjazl3ZEdsdmJuTWdQU0JsZUhCdmNuUnpMbEJoY21GdFpYUmxjbk5PWVcxbFJHVmpiMlJwYm1kSVlXNWtiR1Z5VDNCMGFXOXVjMHRsZVNBOUlIWnZhV1FnTUR0Y2JtVjRjRzl5ZEhNdVVHRnlZVzFsZEdWeWMwNWhiV1ZFWldOdlpHbHVaMGhoYm1Sc1pYSlBjSFJwYjI1elMyVjVJRDBnWENKU1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1TFpYbGNJanRjYmk4cUtpQlVhR1VnVUdGeVlXMWxkR1Z5YzA1aGJXVkVaV052WkdsdVowOXdkR2x2Ym5NZ2NtVnhkV1Z6ZENCamJHRnpjeUFxTDF4dVkyeGhjM01nVUdGeVlXMWxkR1Z5YzA1aGJXVkVaV052WkdsdVowaGhibVJzWlhKUGNIUnBiMjV6SUh0Y2JpQWdJQ0JuWlhSTFpYa29LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsZUhCdmNuUnpMbEJoY21GdFpYUmxjbk5PWVcxbFJHVmpiMlJwYm1kSVlXNWtiR1Z5VDNCMGFXOXVjMHRsZVR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCMVlteHBZMXh1SUNBZ0lDQXFJRUJqYjI1emRISjFZM1J2Y2x4dUlDQWdJQ0FxSUZSdklHTnlaV0YwWlNCaGJpQnBibk4wWVc1alpTQnZaaUJRWVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blNHRnVaR3hsY2s5d2RHbHZibk5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJRnRsYm1GaWJHVWdQU0IwY25WbFhTQXRJRmRvWlhSb1pYSWdkRzhnWkdWamIyUmxJSFJvWlNCemNHVmphV1pwWldRZ1kyaGhjbUZqZEdWeWN5QnBiaUIwYUdVZ2NtVnhkV1Z6ZENCeGRXVnllU0J3WVhKaGJXVjBaWEp6SUc1aGJXVnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kYlhYMGdXMk5vWVhKaFkzUmxjbk5VYjBSbFkyOWtaU0E5SUZ0Y0lpNWNJaXdnWENJdFhDSXNJRndpZmx3aUxDQmNJaVJjSWwxZElDMGdWR2hsSUdOb1lYSmhZM1JsY25NZ2RHOGdaR1ZqYjJSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pXNWhZbXhsSUQwZ2RISjFaU3dnWTJoaGNtRmpkR1Z5YzFSdlJHVmpiMlJsSUQwZ1cxd2lMbHdpTENCY0lpMWNJaXdnWENKK1hDSXNJRndpSkZ3aVhTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnVZV0pzWlNBOUlHVnVZV0pzWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYUdGeVlXTjBaWEp6Vkc5RVpXTnZaR1VnUFNCamFHRnlZV04wWlhKelZHOUVaV052WkdVN1hHNGdJQ0FnZlZ4dWZWeHVaWGh3YjNKMGN5NVFZWEpoYldWMFpYSnpUbUZ0WlVSbFkyOWthVzVuU0dGdVpHeGxjazl3ZEdsdmJuTWdQU0JRWVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blNHRnVaR3hsY2s5d2RHbHZibk03WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1SUNCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xpQWdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCTWFXTmxibk5sTGx4dUlDb2dVMlZsSUV4cFkyVnVjMlVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NVFZWEpoYldWMFpYSnpUbUZ0WlVSbFkyOWthVzVuU0dGdVpHeGxjaUE5SUhadmFXUWdNRHRjYm1OdmJuTjBJR0Z3YVY4eElEMGdjbVZ4ZFdseVpTaGNJa0J2Y0dWdWRHVnNaVzFsZEhKNUwyRndhVndpS1R0Y2JtTnZibk4wSUc5aWMyVnlkbUZpYVd4cGRIbFBjSFJwYjI1elh6RWdQU0J5WlhGMWFYSmxLRndpTGk0dmIySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTmNJaWs3WEc1amIyNXpkQ0J3WVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blQzQjBhVzl1YzE4eElEMGdjbVZ4ZFdseVpTaGNJaTR2YjNCMGFXOXVjeTl3WVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blQzQjBhVzl1YzF3aUtUdGNiaThxS2x4dUlDb2dRRzF2WkhWc1pTQlFZWEpoYldWMFpYSnpUbUZ0WlVSbFkyOWthVzVuU0dGdVpHeGxjbHh1SUNvdlhHNWpiR0Z6Y3lCUVlYSmhiV1YwWlhKelRtRnRaVVJsWTI5a2FXNW5TR0Z1Wkd4bGNpQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnSUNBcUlFQmpiMjV6ZEhKMVkzUnZjbHh1SUNBZ0lDQXFJRlJ2SUdOeVpXRjBaU0JoYmlCcGJuTjBZVzVqWlNCdlppQlFZWEpoYldWMFpYSnpUbUZ0WlVSbFkyOWthVzVuU0dGdVpHeGxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVR0Z5WVcxbGRHVnljMDVoYldWRVpXTnZaR2x1WjBoaGJtUnNaWEpQY0hScGIyNXpmU0JiYjNCMGFXOXVjeUE5SUc1bGR5QlFZWEpoYldWMFpYSnpUbUZ0WlVSbFkyOWthVzVuU0dGdVpHeGxjazl3ZEdsdmJuTW9LVjBnTFNCVWFHVWdjR0Z5WVcxbGRHVnljeUJ1WVcxbElHUmxZMjlrYVc1bklHaGhibVJzWlhJZ2IzQjBhVzl1Y3lCMllXeDFaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTWdQU0J1WlhjZ2NHRnlZVzFsZEdWeWMwNWhiV1ZFWldOdlpHbHVaMDl3ZEdsdmJuTmZNUzVRWVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blNHRnVaR3hsY2s5d2RHbHZibk1vS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG05d2RHbHZibk1nUFNCdmNIUnBiMjV6TzF4dUlDQWdJQ0FnSUNCcFppQW9JVzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lsUm9aU0J2Y0hScGIyNXpJSEJoY21GdFpYUmxjaUJwY3lCeVpYRjFhWEpsWkM1Y0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnSUNBcUlFQmhjM2x1WTF4dUlDQWdJQ0FxSUZSdklHVjRaV04xZEdVZ2RHaGxJR04xY25KbGJuUWdiV2xrWkd4bGQyRnlaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjFjbXdnTFNCVWFHVWdkWEpzSUhSdklHSmxJR1psZEdOb1pXUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwWmxkR05vVW1WeGRXVnpkRWx1YVhSOUlISmxjWFZsYzNSSmJtbDBJQzBnVkdobElISmxjWFZsYzNRZ2FXNXBkQ0J2WW1wbFkzUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZMjl5WkR4emRISnBibWNzSUZKbGNYVmxjM1JQY0hScGIyNCtmU0JiY21WeGRXVnpkRTl3ZEdsdmJuTmRJQzBnVkdobElISmxjWFZsYzNRZ2IzQjBhVzl1YzF4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUVFZ1VISnZiV2x6WlNCMGFHRjBJSEpsYzI5c2RtVnpJSFJ2SUc1dmRHaHBibWRjYmlBZ0lDQWdLaTljYmlBZ0lDQmxlR1ZqZFhSbEtIVnliQ3dnY21WeGRXVnpkRWx1YVhRc0lISmxjWFZsYzNSUGNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JqZFhKeVpXNTBUM0IwYVc5dWN5QTlJSFJvYVhNdWIzQjBhVzl1Y3p0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsY1hWbGMzUlBjSFJwYjI1eklDWW1JSEpsY1hWbGMzUlBjSFJwYjI1elczQmhjbUZ0WlhSbGNuTk9ZVzFsUkdWamIyUnBibWRQY0hScGIyNXpYekV1VUdGeVlXMWxkR1Z5YzA1aGJXVkVaV052WkdsdVowaGhibVJzWlhKUGNIUnBiMjV6UzJWNVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEU5d2RHbHZibk1nUFNCeVpYRjFaWE4wVDNCMGFXOXVjMXR3WVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blQzQjBhVzl1YzE4eExsQmhjbUZ0WlhSbGNuTk9ZVzFsUkdWamIyUnBibWRJWVc1a2JHVnlUM0IwYVc5dWMwdGxlVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjJKelQzQjBhVzl1Y3lBOUlDZ3dMQ0J2WW5ObGNuWmhZbWxzYVhSNVQzQjBhVzl1YzE4eExtZGxkRTlpYzJWeWRtRmlhV3hwZEhsUGNIUnBiMjV6Um5KdmJWSmxjWFZsYzNRcEtISmxjWFZsYzNSUGNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzlpYzA5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhjR2xmTVM1MGNtRmpaUzVuWlhSVWNtRmpaWElvYjJKelQzQjBhVzl1Y3k1blpYUlVjbUZqWlhKSmJuTjBjblZ0Wlc1MFlYUnBiMjVPWVcxbEtDa3BMbk4wWVhKMFFXTjBhWFpsVTNCaGJpaGNJbkJoY21GdFpYUmxjbk5PWVcxbFJHVmpiMlJwYm1kSVlXNWtiR1Z5SUMwZ1pYaGxZM1YwWlZ3aUxDQW9jM0JoYmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53WVc0dWMyVjBRWFIwY21saWRYUmxLRndpWTI5dExtMXBZM0p2YzI5bWRDNXJhVzkwWVM1b1lXNWtiR1Z5TG5CaGNtRnRaWFJsY25OZmJtRnRaVjlrWldOdlpHbHVaeTVsYm1GaWJHVmNJaXdnWTNWeWNtVnVkRTl3ZEdsdmJuTXVaVzVoWW14bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHVmpiMlJsVUdGeVlXMWxkR1Z5Y3loMWNtd3NJSEpsY1hWbGMzUkpibWwwTENCamRYSnlaVzUwVDNCMGFXOXVjeXdnY21WeGRXVnpkRTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVc1aGJHeDVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhiaTVsYm1Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a1pXTnZaR1ZRWVhKaGJXVjBaWEp6S0hWeWJDd2djbVZ4ZFdWemRFbHVhWFFzSUdOMWNuSmxiblJQY0hScGIyNXpMQ0J5WlhGMVpYTjBUM0IwYVc5dWN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdSbFkyOWtaVkJoY21GdFpYUmxjbk1vZFhKc0xDQnlaWEYxWlhOMFNXNXBkQ3dnWTNWeWNtVnVkRTl3ZEdsdmJuTXNJSEpsY1hWbGMzUlBjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZllTd2dYMkk3WEc0Z0lDQWdJQ0FnSUd4bGRDQjFjR1JoZEdWa1ZYSnNJRDBnZFhKc08xeHVJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRTl3ZEdsdmJuTWdKaVlnWTNWeWNtVnVkRTl3ZEdsdmJuTXVaVzVoWW14bElDWW1JSFZ5YkM1cGJtUmxlRTltS0Z3aUpWd2lLU0ErSUMweElDWW1JR04xY25KbGJuUlBjSFJwYjI1ekxtTm9ZWEpoWTNSbGNuTlViMFJsWTI5a1pTQW1KaUJqZFhKeVpXNTBUM0IwYVc5dWN5NWphR0Z5WVdOMFpYSnpWRzlFWldOdlpHVXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRFOXdkR2x2Ym5NdVkyaGhjbUZqZEdWeWMxUnZSR1ZqYjJSbExtWnZja1ZoWTJnb0tHTm9ZWEpoWTNSbGNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWd1pHRjBaV1JWY213Z1BTQjFjR1JoZEdWa1ZYSnNMbkpsY0d4aFkyVW9ibVYzSUZKbFowVjRjQ2hnSlNSN1kyaGhjbUZqZEdWeUxtTm9ZWEpEYjJSbFFYUW9NQ2t1ZEc5VGRISnBibWNvTVRZcGZXQXNJRndpWjJsY0lpa3NJR05vWVhKaFkzUmxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0Y5aUlEMGdLRjloSUQwZ2RHaHBjeTV1WlhoMEtTQTlQVDBnYm5Wc2JDQjhmQ0JmWVNBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dYMkV1WlhobFkzVjBaU2gxY0dSaGRHVmtWWEpzTENCeVpYRjFaWE4wU1c1cGRDd2djbVZ4ZFdWemRFOXdkR2x2Ym5NcEtTQWhQVDBnYm5Wc2JDQW1KaUJmWWlBaFBUMGdkbTlwWkNBd0lEOGdYMklnT2lCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvWENKVWFHVWdibVY0ZENCdGFXUmtiR1YzWVhKbElHbHpJRzV2ZENCelpYUXVYQ0lwS1R0Y2JpQWdJQ0I5WEc1OVhHNWxlSEJ2Y25SekxsQmhjbUZ0WlhSbGNuTk9ZVzFsUkdWamIyUnBibWRJWVc1a2JHVnlJRDBnVUdGeVlXMWxkR1Z5YzA1aGJXVkVaV052WkdsdVowaGhibVJzWlhJN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiaThxS2x4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0JOYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0dUlDQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMaUFnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVJQ29nVTJWbElFeHBZMlZ1YzJVZ2FXNGdkR2hsSUhCeWIycGxZM1FnY205dmRDQm1iM0lnYkdsalpXNXpaU0JwYm1admNtMWhkR2x2Ymk1Y2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVTWldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1eklEMGdaWGh3YjNKMGN5NVNaV1JwY21WamRFaGhibVJzWlhKUGNIUnBiMjVMWlhrZ1BTQjJiMmxrSURBN1hHNWxlSEJ2Y25SekxsSmxaR2x5WldOMFNHRnVaR3hsY2s5d2RHbHZia3RsZVNBOUlGd2lVbVZrYVhKbFkzUklZVzVrYkdWeVQzQjBhVzl1WENJN1hHNHZLaXBjYmlBcUlFQmpiR0Z6YzF4dUlDb2dRR2x0Y0d4bGJXVnVkSE1nVFdsa1pHeGxkMkZ5WlU5d2RHbHZibk5jYmlBcUlFRWdZMnhoYzNNZ2NtVndjbVZ6Wlc1MGFXNW5JRkpsWkdseVpXTjBTR0Z1Wkd4bGNrOXdkR2x2Ym5OY2JpQXFMMXh1WTJ4aGMzTWdVbVZrYVhKbFkzUklZVzVrYkdWeVQzQjBhVzl1Y3lCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQjFZbXhwWTF4dUlDQWdJQ0FxSUVCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUNBcUlGUnZJR055WldGMFpTQmhiaUJwYm5OMFlXNWpaU0J2WmlCU1pXUnBjbVZqZEVoaGJtUnNaWEpQY0hScGIyNXpYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdHRZWGhTWldScGNtVmpkSE1nUFNCU1pXUnBjbVZqZEVoaGJtUnNaWEpQY0hScGIyNXpMa1JGUmtGVlRGUmZUVUZZWDFKRlJFbFNSVU5VVTEwZ0xTQlVhR1VnYldGNElISmxaR2x5WldOMGN5QjJZV3gxWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTJodmRXeGtVbVZrYVhKbFkzUjlJRnR6YUc5MWJHUlNaV1JwY21WamRDQTlJRkpsWkdseVpXTjBTR0Z1Wkd4bGNrOXdkR2x2Ym5NdVJFVkdRVlZNVkY5VFNFOVZURVJmVWtWVVVsbGRJQzBnVkdobElITm9iM1ZzWkNCeVpXUnBjbVZqZENCallXeHNZbUZqYTF4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUVGdUlHbHVjM1JoYm1ObElHOW1JRkpsWkdseVpXTjBTR0Z1Wkd4bGNrOXdkR2x2Ym5OY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lodFlYaFNaV1JwY21WamRITWdQU0JTWldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1ekxrUkZSa0ZWVEZSZlRVRllYMUpGUkVsU1JVTlVVeXdnYzJodmRXeGtVbVZrYVhKbFkzUWdQU0JTWldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1ekxtUmxabUYxYkhSVGFHOTFiR1JTWlhSeWVTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMWhlRkpsWkdseVpXTjBjeUE5SUcxaGVGSmxaR2x5WldOMGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1emFHOTFiR1JTWldScGNtVmpkQ0E5SUhOb2IzVnNaRkpsWkdseVpXTjBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXRjRVbVZrYVhKbFkzUnpJRDRnVW1Wa2FYSmxZM1JJWVc1a2JHVnlUM0IwYVc5dWN5NU5RVmhmVFVGWVgxSkZSRWxTUlVOVVV5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhKeWIzSWdQU0J1WlhjZ1JYSnliM0lvWUUxaGVGSmxaR2x5WldOMGN5QnphRzkxYkdRZ2JtOTBJR0psSUcxdmNtVWdkR2hoYmlBa2UxSmxaR2x5WldOMFNHRnVaR3hsY2s5d2RHbHZibk11VFVGWVgwMUJXRjlTUlVSSlVrVkRWRk45WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpNXVZVzFsSUQwZ1hDSk5ZWGhNYVcxcGRFVjRZMlZsWkdWa1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2JXRjRVbVZrYVhKbFkzUnpJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaWEp5YjNJZ1BTQnVaWGNnUlhKeWIzSW9ZRTFoZUZKbFpHbHlaV04wY3lCemFHOTFiR1FnYm05MElHSmxJRzVsWjJGMGFYWmxZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2k1dVlXMWxJRDBnWENKTmFXNUZlSEJsWTNSaGRHbHZiazV2ZEUxbGRGd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXRZWGhTWldScGNtVmpkSE1nUFNCdFlYaFNaV1JwY21WamRITTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyaHZkV3hrVW1Wa2FYSmxZM1FnUFNCemFHOTFiR1JTWldScGNtVmpkRHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBTMlY1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYaHdiM0owY3k1U1pXUnBjbVZqZEVoaGJtUnNaWEpQY0hScGIyNUxaWGs3WEc0Z0lDQWdmVnh1ZlZ4dVpYaHdiM0owY3k1U1pXUnBjbVZqZEVoaGJtUnNaWEpQY0hScGIyNXpJRDBnVW1Wa2FYSmxZM1JJWVc1a2JHVnlUM0IwYVc5dWN6dGNiaThxS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCemRHRjBhV05jYmlBcUlFRWdiV1Z0WW1WeUlHaHZiR1JwYm1jZ1pHVm1ZWFZzZENCdFlYZ2djbVZrYVhKbFkzUnpJSFpoYkhWbFhHNGdLaTljYmxKbFpHbHlaV04wU0dGdVpHeGxjazl3ZEdsdmJuTXVSRVZHUVZWTVZGOU5RVmhmVWtWRVNWSkZRMVJUSUQwZ05UdGNiaThxS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCemRHRjBhV05jYmlBcUlFRWdiV1Z0WW1WeUlHaHZiR1JwYm1jZ2JXRjRhVzExYlNCdFlYZ2djbVZrYVhKbFkzUnpJSFpoYkhWbFhHNGdLaTljYmxKbFpHbHlaV04wU0dGdVpHeGxjazl3ZEdsdmJuTXVUVUZZWDAxQldGOVNSVVJKVWtWRFZGTWdQU0F5TUR0Y2JpOHFLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUVnYldWdFltVnlJR2h2YkdScGJtY2daR1ZtWVhWc2RDQnphRzkxYkdSU1pXUnBjbVZqZENCallXeHNZbUZqYTF4dUlDb3ZYRzVTWldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1ekxtUmxabUYxYkhSVGFHOTFiR1JTWlhSeWVTQTlJQ2dwSUQwK0lIUnlkV1U3WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1SUNCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xpQWdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCTWFXTmxibk5sTGx4dUlDb2dVMlZsSUV4cFkyVnVjMlVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NVNaV1JwY21WamRFaGhibVJzWlhJZ1BTQjJiMmxrSURBN1hHNWpiMjV6ZENCMGMyeHBZbDh4SUQwZ2NtVnhkV2x5WlNoY0luUnpiR2xpWENJcE8xeHVMeW9xWEc0Z0tpQkFiVzlrZFd4bElGSmxaR2x5WldOMFNHRnVaR3hsY2x4dUlDb3ZYRzVqYjI1emRDQnJhVzkwWVY5aFluTjBjbUZqZEdsdmJuTmZNU0E5SUhKbGNYVnBjbVVvWENKQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWMxd2lLVHRjYm1OdmJuTjBJR0Z3YVY4eElEMGdjbVZ4ZFdseVpTaGNJa0J2Y0dWdWRHVnNaVzFsZEhKNUwyRndhVndpS1R0Y2JtTnZibk4wSUc5aWMyVnlkbUZpYVd4cGRIbFBjSFJwYjI1elh6RWdQU0J5WlhGMWFYSmxLRndpTGk0dmIySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTmNJaWs3WEc1amIyNXpkQ0J5WldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1elh6RWdQU0J5WlhGMWFYSmxLRndpTGk5dmNIUnBiMjV6TDNKbFpHbHlaV04wU0dGdVpHeGxjazl3ZEdsdmJuTmNJaWs3WEc0dktpcGNiaUFxSUVCamJHRnpjMXh1SUNvZ1EyeGhjM05jYmlBcUlFQnBiWEJzWlcxbGJuUnpJRTFwWkdSc1pYZGhjbVZjYmlBcUlFTnNZWE56SUhKbGNISmxjMlZ1ZEdsdVp5QlNaV1JwY21WamRFaGhibVJzWlhKY2JpQXFMMXh1WTJ4aGMzTWdVbVZrYVhKbFkzUklZVzVrYkdWeUlIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndkV0pzYVdOY2JpQWdJQ0FnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFnSUNBZ0tpQlVieUJqY21WaGRHVWdZVzRnYVc1emRHRnVZMlVnYjJZZ1VtVmthWEpsWTNSSVlXNWtiR1Z5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRTWldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1emZTQmJiM0IwYVc5dWN5QTlJRzVsZHlCU1pXUnBjbVZqZEVoaGJtUnNaWEpQY0hScGIyNXpLQ2xkSUMwZ1ZHaGxJSEpsWkdseVpXTjBJR2hoYm1Sc1pYSWdiM0IwYVc5dWN5QnBibk4wWVc1alpWeHVJQ0FnSUNBcUlFQnlaWFIxY201eklFRnVJR2x1YzNSaGJtTmxJRzltSUZKbFpHbHlaV04wU0dGdVpHeGxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTWdQU0J1WlhjZ2NtVmthWEpsWTNSSVlXNWtiR1Z5VDNCMGFXOXVjMTh4TGxKbFpHbHlaV04wU0dGdVpHeGxjazl3ZEdsdmJuTW9LU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxSb1pTQnZjSFJwYjI1eklIQmhjbUZ0WlhSbGNpQnBjeUJ5WlhGMWFYSmxaQzVjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2lCVWJ5QmphR1ZqYXlCM2FHVjBhR1Z5SUhSb1pTQnlaWE53YjI1elpTQm9ZWE1nZEdobElISmxaR2x5WldOMElITjBZWFIxY3lCamIyUmxJRzl5SUc1dmRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1VtVnpjRzl1YzJWOUlISmxjM0J2Ym5ObElDMGdWR2hsSUhKbGMzQnZibk5sSUc5aWFtVmpkRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJRUVnWW05dmJHVmhiaUJ5WlhCeVpYTmxiblJwYm1jZ2QyaGxkR2hsY2lCMGFHVWdjbVZ6Y0c5dWMyVWdZMjl1ZEdGcGJuTWdkR2hsSUhKbFpHbHlaV04wSUhOMFlYUjFjeUJqYjJSbElHOXlJRzV2ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2x6VW1Wa2FYSmxZM1FvY21WemNHOXVjMlVwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZKbFpHbHlaV04wU0dGdVpHeGxjaTVTUlVSSlVrVkRWRjlUVkVGVVZWTmZRMDlFUlZNdWFHRnpLSEpsYzNCdmJuTmxMbk4wWVhSMWN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvZ1ZHOGdZMmhsWTJzZ2QyaGxkR2hsY2lCMGFHVWdjbVZ6Y0c5dWMyVWdhR0Z6SUd4dlkyRjBhVzl1SUdobFlXUmxjaUJ2Y2lCdWIzUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjM0J2Ym5ObGZTQnlaWE53YjI1elpTQXRJRlJvWlNCeVpYTndiMjV6WlNCdlltcGxZM1JjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJCSUdKdmIyeGxZVzRnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0IzYUdWMGFHVnlJSFJvWlNCeVpYTndiMjV6WlNCb1lYTWdiRzlqWVhScGIyNGdhR1ZoWkdWeUlHOXlJRzV2ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYzB4dlkyRjBhVzl1U0dWaFpHVnlLSEpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOd2IyNXpaUzVvWldGa1pYSnpMbWhoY3loU1pXUnBjbVZqZEVoaGJtUnNaWEl1VEU5RFFWUkpUMDVmU0VWQlJFVlNLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNBZ0tpQlVieUJuWlhRZ2RHaGxJSEpsWkdseVpXTjBJSFZ5YkNCbWNtOXRJR3h2WTJGMGFXOXVJR2hsWVdSbGNpQnBiaUJ5WlhOd2IyNXpaU0J2WW1wbFkzUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxjM0J2Ym5ObGZTQnlaWE53YjI1elpTQXRJRlJvWlNCeVpYTndiMjV6WlNCdlltcGxZM1JjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJCSUhKbFpHbHlaV04wSUhWeWJDQm1jbTl0SUd4dlkyRjBhVzl1SUdobFlXUmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRXh2WTJGMGFXOXVTR1ZoWkdWeUtISmxjM0J2Ym5ObEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE53YjI1elpTNW9aV0ZrWlhKekxtZGxkQ2hTWldScGNtVmpkRWhoYm1Sc1pYSXVURTlEUVZSSlQwNWZTRVZCUkVWU0tUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2lCVWJ5QmphR1ZqYXlCM2FHVjBhR1Z5SUhSb1pTQm5hWFpsYmlCMWNtd2dhWE1nWVNCeVpXeGhkR2wyWlNCMWNtd2diM0lnYm05MFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhWeWJDQXRJRlJvWlNCMWNtd2djM1J5YVc1bklIWmhiSFZsWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nUVNCaWIyOXNaV0Z1SUhKbGNISmxjMlZ1ZEdsdVp5QjNhR1YwYUdWeUlIUm9aU0JuYVhabGJpQjFjbXdnYVhNZ1lTQnlaV3hoZEdsMlpTQjFjbXdnYjNJZ2JtOTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTlNaV3hoZEdsMlpWVlNUQ2gxY213cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIVnliQzVwYm1SbGVFOW1LRndpT2k4dlhDSXBJRDA5UFNBdE1UdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2lCVWJ5QmphR1ZqYXlCM2FHVjBhR1Z5SUhSb1pTQmhkWFJvYjNKcGVtRjBhVzl1SUdobFlXUmxjaUJwYmlCMGFHVWdjbVZ4ZFdWemRDQnphRzkxYkdRZ1ltVWdaSEp2Y0hCbFpDQm1iM0lnWTI5dWMyVnhkV1Z1ZENCeVpXUnBjbVZqZEdWa0lISmxjWFZsYzNSelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhKbGNYVmxjM1JWY213Z0xTQlVhR1VnY21WeGRXVnpkQ0IxY213Z2RtRnNkV1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbVZrYVhKbFkzUlZjbXdnTFNCVWFHVWdjbVZrYVhKbFkzUWdkWEpzSUhaaGJIVmxYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdRU0JpYjI5c1pXRnVJSEpsY0hKbGMyVnVkR2x1WnlCM2FHVjBhR1Z5SUhSb1pTQmhkWFJvYjNKcGVtRjBhVzl1SUdobFlXUmxjaUJwYmlCMGFHVWdjbVZ4ZFdWemRDQnphRzkxYkdRZ1ltVWdaSEp2Y0hCbFpDQm1iM0lnWTI5dWMyVnhkV1Z1ZENCeVpXUnBjbVZqZEdWa0lISmxjWFZsYzNSelhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJodmRXeGtSSEp2Y0VGMWRHaHZjbWw2WVhScGIyNUlaV0ZrWlhJb2NtVnhkV1Z6ZEZWeWJDd2djbVZrYVhKbFkzUlZjbXdwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJOb1pXMWxTRzl6ZEZKbFoyVjRJRDBnTDE1YlFTMWFZUzE2WFM0clB6cGNYQzljWEM4dUt6OG9QejFjWEM5OEpDa3ZPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaWEYxWlhOMFRXRjBZMmhsY3lBOUlITmphR1Z0WlVodmMzUlNaV2RsZUM1bGVHVmpLSEpsY1hWbGMzUlZjbXdwTzF4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ4ZFdWemRFRjFkR2h2Y21sMGVUdGNiaUFnSUNBZ0lDQWdiR1YwSUhKbFpHbHlaV04wUVhWMGFHOXlhWFI1TzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ4ZFdWemRFMWhkR05vWlhNZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNYVmxjM1JCZFhSb2IzSnBkSGtnUFNCeVpYRjFaWE4wVFdGMFkyaGxjMXN3WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpXUnBjbVZqZEUxaGRHTm9aWE1nUFNCelkyaGxiV1ZJYjNOMFVtVm5aWGd1WlhobFl5aHlaV1JwY21WamRGVnliQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV1JwY21WamRFMWhkR05vWlhNZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFpHbHlaV04wUVhWMGFHOXlhWFI1SUQwZ2NtVmthWEpsWTNSTllYUmphR1Z6V3pCZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2NtVnhkV1Z6ZEVGMWRHaHZjbWwwZVNBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQjBlWEJsYjJZZ2NtVmthWEpsWTNSQmRYUm9iM0pwZEhrZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdjbVZ4ZFdWemRFRjFkR2h2Y21sMGVTQWhQVDBnY21Wa2FYSmxZM1JCZFhSb2IzSnBkSGs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb2dRR0Z6ZVc1alhHNGdJQ0FnSUNvZ1ZHOGdaWGhsWTNWMFpTQjBhR1VnYm1WNGRDQnRhV1JrYkdWM1lYSmxJR0Z1WkNCMGJ5Qm9ZVzVrYkdVZ2FXNGdZMkZ6WlNCdlppQnlaV1JwY21WamRDQnlaWE53YjI1elpTQnlaWFIxY201bFpDQmllU0IwYUdVZ2MyVnlkbVZ5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHREYjI1MFpYaDBmU0JqYjI1MFpYaDBJQzBnVkdobElHTnZiblJsZUhRZ2IySnFaV04wWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSEpsWkdseVpXTjBRMjkxYm5RZ0xTQlVhR1VnY21Wa2FYSmxZM1FnWTI5MWJuUWdkbUZzZFdWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFKbFkyOXlaRHh6ZEhKcGJtY3NJRkpsY1hWbGMzUlBjSFJwYjI0K2ZTQmJjbVZ4ZFdWemRFOXdkR2x2Ym5NZ1BTQjdmVjBnTFNCVWFHVWdjbVZ4ZFdWemRDQnZjSFJwYjI1elhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pXUnBjbVZqZEVoaGJtUnNaWEpQY0hScGIyNXpmU0JqZFhKeVpXNTBUM0IwYVc5dWN5QXRJRlJvWlNCeVpXUnBjbVZqZENCb1lXNWtiR1Z5SUc5d2RHbHZibk1nYVc1emRHRnVZMlZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkSEpoWTJWeVRtRnRaU0F0SUZSb1pTQnVZVzFsSUhSdklIVnpaU0JtYjNJZ2RHaGxJSFJ5WVdObGNseHVJQ0FnSUNBcUlFQnlaWFIxY201eklFRWdjSEp2YldselpTQjBhR0YwSUhKbGMyOXNkbVZ6SUhSdklHNXZkR2hwYm1kY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JsZUdWamRYUmxWMmwwYUZKbFpHbHlaV04wS0hWeWJDd2dabVYwWTJoU1pYRjFaWE4wU1c1cGRDd2djbVZrYVhKbFkzUkRiM1Z1ZEN3Z1kzVnljbVZ1ZEU5d2RHbHZibk1zSUhKbGNYVmxjM1JQY0hScGIyNXpMQ0IwY21GalpYSk9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmWVR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSemJHbGlYekV1WDE5aGQyRnBkR1Z5S0hSb2FYTXNJSFp2YVdRZ01Dd2dkbTlwWkNBd0xDQm1kVzVqZEdsdmJpb2dLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpjRzl1YzJVZ1BTQjVhV1ZzWkNBb0tGOWhJRDBnZEdocGN5NXVaWGgwS1NBOVBUMGdiblZzYkNCOGZDQmZZU0E5UFQwZ2RtOXBaQ0F3SUQ4Z2RtOXBaQ0F3SURvZ1gyRXVaWGhsWTNWMFpTaDFjbXdzSUdabGRHTm9VbVZ4ZFdWemRFbHVhWFFzSUhKbGNYVmxjM1JQY0hScGIyNXpLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhKbGMzQnZibk5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVVtVnpjRzl1YzJVZ2FYTWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsWkdseVpXTjBRMjkxYm5RZ1BDQmpkWEp5Wlc1MFQzQjBhVzl1Y3k1dFlYaFNaV1JwY21WamRITWdKaVlnZEdocGN5NXBjMUpsWkdseVpXTjBLSEpsYzNCdmJuTmxLU0FtSmlCMGFHbHpMbWhoYzB4dlkyRjBhVzl1U0dWaFpHVnlLSEpsYzNCdmJuTmxLU0FtSmlCamRYSnlaVzUwVDNCMGFXOXVjeTV6YUc5MWJHUlNaV1JwY21WamRDaHlaWE53YjI1elpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FySzNKbFpHbHlaV04wUTI5MWJuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG5OMFlYUjFjeUE5UFQwZ1VtVmthWEpsWTNSSVlXNWtiR1Z5TGxOVVFWUlZVMTlEVDBSRlgxTkZSVjlQVkVoRlVpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVpYUmphRkpsY1hWbGMzUkpibWwwVzF3aWJXVjBhRzlrWENKZElEMGdhMmx2ZEdGZllXSnpkSEpoWTNScGIyNXpYekV1U0hSMGNFMWxkR2h2WkM1SFJWUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JtWlhSamFGSmxjWFZsYzNSSmJtbDBMbUp2WkhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpXUnBjbVZqZEZWeWJDQTlJSFJvYVhNdVoyVjBURzlqWVhScGIyNUlaV0ZrWlhJb2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVmthWEpsWTNSVmNtd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobVpYUmphRkpsY1hWbGMzUkpibWwwTG1obFlXUmxjbk1nSmlZZ0lYUm9hWE11YVhOU1pXeGhkR2wyWlZWU1RDaHlaV1JwY21WamRGVnliQ2tnSmlZZ2RHaHBjeTV6YUc5MWJHUkVjbTl3UVhWMGFHOXlhWHBoZEdsdmJraGxZV1JsY2loMWNtd3NJSEpsWkdseVpXTjBWWEpzS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQm1aWFJqYUZKbGNYVmxjM1JKYm1sMExtaGxZV1JsY25OYlVtVmthWEpsWTNSSVlXNWtiR1Z5TGtGVlZFaFBVa2xhUVZSSlQwNWZTRVZCUkVWU1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnliQ0E5SUhKbFpHbHlaV04wVlhKc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBjbUZqWlhKT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGNHbGZNUzUwY21GalpTNW5aWFJVY21GalpYSW9kSEpoWTJWeVRtRnRaU2t1YzNSaGNuUkJZM1JwZG1WVGNHRnVLR0J5WldScGNtVmpkRWhoYm1Sc1pYSWdMU0J5WldScGNtVmpkQ0FrZTNKbFpHbHlaV04wUTI5MWJuUjlZQ3dnS0hOd1lXNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJpNXpaWFJCZEhSeWFXSjFkR1VvWENKamIyMHViV2xqY205emIyWjBMbXRwYjNSaExtaGhibVJzWlhJdWNtVmthWEpsWTNRdVkyOTFiblJjSWl3Z2NtVmthWEpsWTNSRGIzVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhiaTV6WlhSQmRIUnlhV0oxZEdVb1hDSm9kSFJ3TG5OMFlYUjFjMTlqYjJSbFhDSXNJSEpsYzNCdmJuTmxMbk4wWVhSMWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpYaGxZM1YwWlZkcGRHaFNaV1JwY21WamRDaDFjbXdzSUdabGRHTm9VbVZ4ZFdWemRFbHVhWFFzSUhKbFpHbHlaV04wUTI5MWJuUXNJR04xY25KbGJuUlBjSFJwYjI1ekxDQnlaWEYxWlhOMFQzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR0Z1TG1WdVpDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIbHBaV3hrSUhSb2FYTXVaWGhsWTNWMFpWZHBkR2hTWldScGNtVmpkQ2gxY213c0lHWmxkR05vVW1WeGRXVnpkRWx1YVhRc0lISmxaR2x5WldOMFEyOTFiblFzSUdOMWNuSmxiblJQY0hScGIyNXpMQ0J5WlhGMVpYTjBUM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNIVmliR2xqWEc0Z0lDQWdJQ29nUUdGemVXNWpYRzRnSUNBZ0lDb2dWRzhnWlhobFkzVjBaU0IwYUdVZ1kzVnljbVZ1ZENCdGFXUmtiR1YzWVhKbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0RGIyNTBaWGgwZlNCamIyNTBaWGgwSUMwZ1ZHaGxJR052Ym5SbGVIUWdiMkpxWldOMElHOW1JSFJvWlNCeVpYRjFaWE4wWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nUVNCUWNtOXRhWE5sSUhSb1lYUWdjbVZ6YjJ4MlpYTWdkRzhnYm05MGFHbHVaMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHVjRaV04xZEdVb2RYSnNMQ0J5WlhGMVpYTjBTVzVwZEN3Z2NtVnhkV1Z6ZEU5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21Wa2FYSmxZM1JEYjNWdWRDQTlJREE3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpkWEp5Wlc1MFQzQjBhVzl1Y3lBOUlIUm9hWE11YjNCMGFXOXVjenRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjWFZsYzNSUGNIUnBiMjV6SUNZbUlISmxjWFZsYzNSUGNIUnBiMjV6VzNKbFpHbHlaV04wU0dGdVpHeGxjazl3ZEdsdmJuTmZNUzVTWldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1TFpYbGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFQzQjBhVzl1Y3lBOUlISmxjWFZsYzNSUGNIUnBiMjV6VzNKbFpHbHlaV04wU0dGdVpHeGxjazl3ZEdsdmJuTmZNUzVTWldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1TFpYbGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JKYm1sMExuSmxaR2x5WldOMElEMGdVbVZrYVhKbFkzUklZVzVrYkdWeUxrMUJUbFZCVEY5U1JVUkpVa1ZEVkR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjJKelQzQjBhVzl1Y3lBOUlDZ3dMQ0J2WW5ObGNuWmhZbWxzYVhSNVQzQjBhVzl1YzE4eExtZGxkRTlpYzJWeWRtRmlhV3hwZEhsUGNIUnBiMjV6Um5KdmJWSmxjWFZsYzNRcEtISmxjWFZsYzNSUGNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzlpYzA5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhjR2xmTVM1MGNtRmpaUzVuWlhSVWNtRmpaWElvYjJKelQzQjBhVzl1Y3k1blpYUlVjbUZqWlhKSmJuTjBjblZ0Wlc1MFlYUnBiMjVPWVcxbEtDa3BMbk4wWVhKMFFXTjBhWFpsVTNCaGJpaGNJbkpsWkdseVpXTjBTR0Z1Wkd4bGNpQXRJR1Y0WldOMWRHVmNJaXdnS0hOd1lXNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHRnVMbk5sZEVGMGRISnBZblYwWlNoY0ltTnZiUzV0YVdOeWIzTnZablF1YTJsdmRHRXVhR0Z1Wkd4bGNpNXlaV1JwY21WamRDNWxibUZpYkdWY0lpd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1WNFpXTjFkR1ZYYVhSb1VtVmthWEpsWTNRb2RYSnNMQ0J5WlhGMVpYTjBTVzVwZEN3Z2NtVmthWEpsWTNSRGIzVnVkQ3dnWTNWeWNtVnVkRTl3ZEdsdmJuTXNJSEpsY1hWbGMzUlBjSFJwYjI1ekxDQnZZbk5QY0hScGIyNXpMbWRsZEZSeVlXTmxja2x1YzNSeWRXMWxiblJoZEdsdmJrNWhiV1VvS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGdUxtVnVaQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVY0WldOMWRHVlhhWFJvVW1Wa2FYSmxZM1FvZFhKc0xDQnlaWEYxWlhOMFNXNXBkQ3dnY21Wa2FYSmxZM1JEYjNWdWRDd2dZM1Z5Y21WdWRFOXdkR2x2Ym5Nc0lISmxjWFZsYzNSUGNIUnBiMjV6S1R0Y2JpQWdJQ0I5WEc1OVhHNWxlSEJ2Y25SekxsSmxaR2x5WldOMFNHRnVaR3hsY2lBOUlGSmxaR2x5WldOMFNHRnVaR3hsY2p0Y2JpOHFLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ6ZEdGMGFXTmNiaUFxSUVFZ2JXVnRZbVZ5SUdodmJHUnBibWNnZEdobElHRnljbUY1SUc5bUlISmxaR2x5WldOMElITjBZWFIxY3lCamIyUmxjMXh1SUNvdlhHNVNaV1JwY21WamRFaGhibVJzWlhJdVVrVkVTVkpGUTFSZlUxUkJWRlZUWDBOUFJFVlRJRDBnYm1WM0lGTmxkQ2hiWEc0Z0lDQWdNekF4TEZ4dUlDQWdJRE13TWl4Y2JpQWdJQ0F6TURNc1hHNGdJQ0FnTXpBM0xGeHVJQ0FnSURNd09Dd2dMeThnVFc5MlpXUWdVR1Z5YldGdVpXNTBiSGxjYmwwcE8xeHVMeW9xWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhOMFlYUnBZMXh1SUNvZ1FTQnRaVzFpWlhJZ2FHOXNaR2x1WnlCVFpXVlBkR2hsY2lCemRHRjBkWE1nWTI5a1pWeHVJQ292WEc1U1pXUnBjbVZqZEVoaGJtUnNaWEl1VTFSQlZGVlRYME5QUkVWZlUwVkZYMDlVU0VWU0lEMGdNekF6TzF4dUx5b3FYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSE4wWVhScFkxeHVJQ29nUVNCdFpXMWlaWElnYUc5c1pHbHVaeUIwYUdVZ2JtRnRaU0J2WmlCMGFHVWdiRzlqWVhScGIyNGdhR1ZoWkdWeVhHNGdLaTljYmxKbFpHbHlaV04wU0dGdVpHeGxjaTVNVDBOQlZFbFBUbDlJUlVGRVJWSWdQU0JjSWt4dlkyRjBhVzl1WENJN1hHNHZLaXBjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQklHMWxiV0psY2lCeVpYQnlaWE5sYm5ScGJtY2dkR2hsSUdGMWRHaHZjbWw2WVhScGIyNGdhR1ZoWkdWeUlHNWhiV1ZjYmlBcUwxeHVVbVZrYVhKbFkzUklZVzVrYkdWeUxrRlZWRWhQVWtsYVFWUkpUMDVmU0VWQlJFVlNJRDBnWENKQmRYUm9iM0pwZW1GMGFXOXVYQ0k3WEc0dktpcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJCSUcxbGJXSmxjaUJvYjJ4a2FXNW5JSFJvWlNCdFlXNTFZV3dnY21Wa2FYSmxZM1FnZG1Gc2RXVmNiaUFxTDF4dVVtVmthWEpsWTNSSVlXNWtiR1Z5TGsxQlRsVkJURjlTUlVSSlVrVkRWQ0E5SUZ3aWJXRnVkV0ZzWENJN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiaThxS2x4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0JOYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0dUlDQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMaUFnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVJQ29nVTJWbElFeHBZMlZ1YzJVZ2FXNGdkR2hsSUhCeWIycGxZM1FnY205dmRDQm1iM0lnYkdsalpXNXpaU0JwYm1admNtMWhkR2x2Ymk1Y2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVoY0hCbGJtUlNaWEYxWlhOMFNHVmhaR1Z5SUQwZ1pYaHdiM0owY3k1elpYUlNaWEYxWlhOMFNHVmhaR1Z5SUQwZ1pYaHdiM0owY3k1blpYUlNaWEYxWlhOMFNHVmhaR1Z5SUQwZ2RtOXBaQ0F3TzF4dUx5b3FYRzRnS2lCQWJXOWtkV3hsSUUxcFpHUnNaWGRoY21WVmRHbHNYRzRnS2k5Y2JpOHFLbHh1SUNvZ1FHTnZibk4wWVc1MFhHNGdLaUJVYnlCblpYUWdkR2hsSUhKbGNYVmxjM1FnYUdWaFpHVnlJR1p5YjIwZ2RHaGxJSEpsY1hWbGMzUmNiaUFxSUVCd1lYSmhiU0I3Um1WMFkyaFBjSFJwYjI1emZIVnVaR1ZtYVc1bFpIMGdiM0IwYVc5dWN5QXRJRlJvWlNCeVpYRjFaWE4wSUc5d2RHbHZibk1nYjJKcVpXTjBYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYTJWNUlDMGdWR2hsSUdobFlXUmxjaUJyWlhrZ2MzUnlhVzVuWEc0Z0tpQkFjbVYwZFhKdWN5QkJJR2hsWVdSbGNpQjJZV3gxWlNCbWIzSWdkR2hsSUdkcGRtVnVJR3RsZVNCbWNtOXRJSFJvWlNCeVpYRjFaWE4wWEc0Z0tpOWNibU52Ym5OMElHZGxkRkpsY1hWbGMzUklaV0ZrWlhJZ1BTQW9iM0IwYVc5dWN5d2dhMlY1S1NBOVBpQjdYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTWdKaVlnYjNCMGFXOXVjeTVvWldGa1pYSnpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ2Y0hScGIyNXpMbWhsWVdSbGNuTmJhMlY1WFR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNibjA3WEc1bGVIQnZjblJ6TG1kbGRGSmxjWFZsYzNSSVpXRmtaWElnUFNCblpYUlNaWEYxWlhOMFNHVmhaR1Z5TzF4dUx5b3FYRzRnS2lCQVkyOXVjM1JoYm5SY2JpQXFJRlJ2SUhObGRDQjBhR1VnYUdWaFpHVnlJSFpoYkhWbElIUnZJSFJvWlNCbmFYWmxiaUJ5WlhGMVpYTjBYRzRnS2lCQWNHRnlZVzBnZTBabGRHTm9UM0IwYVc5dWMzeDFibVJsWm1sdVpXUjlJRzl3ZEdsdmJuTWdMU0JVYUdVZ2NtVnhkV1Z6ZENCdmNIUnBiMjV6SUc5aWFtVmpkRnh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd0bGVTQXRJRlJvWlNCb1pXRmtaWElnYTJWNUlITjBjbWx1WjF4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1jZ2ZTQjJZV3gxWlNBdElGUm9aU0JvWldGa1pYSWdkbUZzZFdVZ2MzUnlhVzVuWEc0Z0tpQkFjbVYwZFhKdWN5Qk9iM1JvYVc1blhHNGdLaTljYm1OdmJuTjBJSE5sZEZKbGNYVmxjM1JJWldGa1pYSWdQU0FvYjNCMGFXOXVjeXdnYTJWNUxDQjJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hiM0IwYVc5dWN5NW9aV0ZrWlhKektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG1obFlXUmxjbk1nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbWhsWVdSbGNuTmJhMlY1WFNBOUlIWmhiSFZsTzF4dUlDQWdJSDFjYm4wN1hHNWxlSEJ2Y25SekxuTmxkRkpsY1hWbGMzUklaV0ZrWlhJZ1BTQnpaWFJTWlhGMVpYTjBTR1ZoWkdWeU8xeHVMeW9xWEc0Z0tpQkFZMjl1YzNSaGJuUmNiaUFxSUZSdklHRndjR1Z1WkNCMGFHVWdhR1ZoWkdWeUlIWmhiSFZsSUhSdklIUm9aU0JuYVhabGJpQnlaWEYxWlhOMFhHNGdLaUJBY0dGeVlXMGdlMFpsZEdOb1QzQjBhVzl1YzN4MWJtUmxabWx1WldSOUlHOXdkR2x2Ym5NZ0xTQlVhR1VnY21WeGRXVnpkQ0J2Y0hScGIyNXpJRzlpYW1WamRGeHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR3RsZVNBdElGUm9aU0JvWldGa1pYSWdhMlY1SUhOMGNtbHVaMXh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWNnZlNCMllXeDFaU0F0SUZSb1pTQm9aV0ZrWlhJZ2RtRnNkV1VnYzNSeWFXNW5YRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYzJWd1lYSmhkRzl5SUMwZ1ZHaGxJSE5sY0dGeVlYUnZjaUJ6ZEhKcGJtZGNiaUFxSUVCeVpYUjFjbTV6SUU1dmRHaHBibWRjYmlBcUwxeHVZMjl1YzNRZ1lYQndaVzVrVW1WeGRXVnpkRWhsWVdSbGNpQTlJQ2h2Y0hScGIyNXpMQ0JyWlhrc0lIWmhiSFZsTENCelpYQmhjbUYwYjNJZ1BTQmNJaXdnWENJcElEMCtJSHRjYmlBZ0lDQnBaaUFvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVzl3ZEdsdmJuTXVhR1ZoWkdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1b1pXRmtaWEp6SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnZjSFJwYjI1ekxtaGxZV1JsY25OYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NW9aV0ZrWlhKelcydGxlVjBnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWFHVmhaR1Z5YzF0clpYbGRJQ3M5SUdBa2UzTmxjR0Z5WVhSdmNuMGtlM1poYkhWbGZXQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5TzF4dVpYaHdiM0owY3k1aGNIQmxibVJTWlhGMVpYTjBTR1ZoWkdWeUlEMGdZWEJ3Wlc1a1VtVnhkV1Z6ZEVobFlXUmxjanRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElFMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiaTRnSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdUlDQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlV1WEc0Z0tpQlRaV1VnVEdsalpXNXpaU0JwYmlCMGFHVWdjSEp2YW1WamRDQnliMjkwSUdadmNpQnNhV05sYm5ObElHbHVabTl5YldGMGFXOXVMbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNWxlSEJ2Y25SekxsSmxkSEo1U0dGdVpHeGxjazl3ZEdsdmJuTWdQU0JsZUhCdmNuUnpMbEpsZEhKNVNHRnVaR3hsY2s5d2RHbHZia3RsZVNBOUlIWnZhV1FnTUR0Y2JtVjRjRzl5ZEhNdVVtVjBjbmxJWVc1a2JHVnlUM0IwYVc5dVMyVjVJRDBnWENKU1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1TFpYbGNJanRjYmk4cUtseHVJQ29nUUdOc1lYTnpYRzRnS2lCQWFXMXdiR1Z0Wlc1MGN5Qk5hV1JrYkdWM1lYSmxYRzRnS2lCUGNIUnBiMjV6WEc0Z0tpQkRiR0Z6Y3lCbWIzSWdVbVYwY25sSVlXNWtiR1Z5VDNCMGFXOXVjMXh1SUNvdlhHNWpiR0Z6Y3lCU1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1eklIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjSFZpYkdsalhHNGdJQ0FnSUNvZ1FHTnZibk4wY25WamRHOXlYRzRnSUNBZ0lDb2dWRzhnWTNKbFlYUmxJR0Z1SUdsdWMzUmhibU5sSUc5bUlGSmxkSEo1U0dGdVpHeGxjazl3ZEdsdmJuTmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1cyUmxiR0Y1SUQwZ1VtVjBjbmxJWVc1a2JHVnlUM0IwYVc5dWN5NUVSVVpCVlV4VVgwUkZURUZaWFNBdElGUm9aU0JrWld4aGVTQjJZV3gxWlNCcGJpQnpaV052Ym1SelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0dFlYaFNaWFJ5YVdWeklEMGdVbVYwY25sSVlXNWtiR1Z5VDNCMGFXOXVjeTVFUlVaQlZVeFVYMDFCV0Y5U1JWUlNTVVZUWFNBdElGUm9aU0J0WVhoU1pYUnlhV1Z6SUhaaGJIVmxYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRhRzkxYkdSU1pYUnllWDBnVzNOb2IzVnNaRkpsZEhKNUlEMGdVbVYwY25sSVlXNWtiR1Z5VDNCMGFXOXVjeTVFUlVaQlZVeFVYMU5JVDFWTVJGOVNSVlJTV1YwZ0xTQlVhR1VnYzJodmRXeGtVbVYwY25rZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCQmJpQnBibk4wWVc1alpTQnZaaUJTWlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6WEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWkdWc1lYa2dQU0JTWlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6TGtSRlJrRlZURlJmUkVWTVFWa3NJRzFoZUZKbGRISnBaWE1nUFNCU1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1ekxrUkZSa0ZWVEZSZlRVRllYMUpGVkZKSlJWTXNJSE5vYjNWc1pGSmxkSEo1SUQwZ1VtVjBjbmxJWVc1a2JHVnlUM0IwYVc5dWN5NWtaV1poZFd4MFUyaHZkV3hrVW1WMGNua3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtaV3hoZVNBOUlHUmxiR0Y1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFoZUZKbGRISnBaWE1nUFNCdFlYaFNaWFJ5YVdWek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Ob2IzVnNaRkpsZEhKNUlEMGdjMmh2ZFd4a1VtVjBjbms3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtaV3hoZVNBK0lGSmxkSEo1U0dGdVpHeGxjazl3ZEdsdmJuTXVUVUZZWDBSRlRFRlpJQ1ltSUcxaGVGSmxkSEpwWlhNZ1BpQlNaWFJ5ZVVoaGJtUnNaWEpQY0hScGIyNXpMazFCV0Y5TlFWaGZVa1ZVVWtsRlV5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhKeWIzSWdQU0J1WlhjZ1JYSnliM0lvWUVSbGJHRjVJR0Z1WkNCTllYaFNaWFJ5YVdWeklITm9iM1ZzWkNCdWIzUWdZbVVnYlc5eVpTQjBhR0Z1SUNSN1VtVjBjbmxJWVc1a2JHVnlUM0IwYVc5dWN5NU5RVmhmUkVWTVFWbDlJR0Z1WkNBa2UxSmxkSEo1U0dGdVpHeGxjazl3ZEdsdmJuTXVUVUZZWDAxQldGOVNSVlJTU1VWVGZXQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0l1Ym1GdFpTQTlJRndpVFdGNFRHbHRhWFJGZUdObFpXUmxaRndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1pHVnNZWGtnUGlCU1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1ekxrMUJXRjlFUlV4QldTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhKeWIzSWdQU0J1WlhjZ1JYSnliM0lvWUVSbGJHRjVJSE5vYjNWc1pDQnViM1FnWW1VZ2JXOXlaU0IwYUdGdUlDUjdVbVYwY25sSVlXNWtiR1Z5VDNCMGFXOXVjeTVOUVZoZlJFVk1RVmw5WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpNXVZVzFsSUQwZ1hDSk5ZWGhNYVcxcGRFVjRZMlZsWkdWa1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2h0WVhoU1pYUnlhV1Z6SUQ0Z1VtVjBjbmxJWVc1a2JHVnlUM0IwYVc5dWN5NU5RVmhmVFVGWVgxSkZWRkpKUlZNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eUlEMGdibVYzSUVWeWNtOXlLR0JOWVhoU1pYUnlhV1Z6SUhOb2IzVnNaQ0J1YjNRZ1ltVWdiVzl5WlNCMGFHRnVJQ1I3VW1WMGNubElZVzVrYkdWeVQzQjBhVzl1Y3k1TlFWaGZUVUZZWDFKRlZGSkpSVk45WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpNXVZVzFsSUQwZ1hDSk5ZWGhNYVcxcGRFVjRZMlZsWkdWa1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hrWld4aGVTQThJREFnSmlZZ2JXRjRVbVYwY21sbGN5QThJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHVnljbTl5SUQwZ2JtVjNJRVZ5Y205eUtHQkVaV3hoZVNCaGJtUWdUV0Y0VW1WMGNtbGxjeUJ6YUc5MWJHUWdibTkwSUdKbElHNWxaMkYwYVhabFlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaTV1WVcxbElEMGdYQ0pOYVc1RmVIQmxZM1JoZEdsdmJrNXZkRTFsZEZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2daWEp5YjNJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9aR1ZzWVhrZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbGNuSnZjaUE5SUc1bGR5QkZjbkp2Y2loZ1JHVnNZWGtnYzJodmRXeGtJRzV2ZENCaVpTQnVaV2RoZEdsMlpXQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0l1Ym1GdFpTQTlJRndpVFdsdVJYaHdaV04wWVhScGIyNU9iM1JOWlhSY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRzFoZUZKbGRISnBaWE1nUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JsY25KdmNpQTlJRzVsZHlCRmNuSnZjaWhnVFdGNFVtVjBjbWxsY3lCemFHOTFiR1FnYm05MElHSmxJRzVsWjJGMGFYWmxZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2k1dVlXMWxJRDBnWENKTmFXNUZlSEJsWTNSaGRHbHZiazV2ZEUxbGRGd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NWtaV3hoZVNBOUlFMWhkR2d1YldsdUtHUmxiR0Y1TENCU1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1ekxrMUJXRjlFUlV4QldTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXRjRVbVYwY21sbGN5QTlJRTFoZEdndWJXbHVLRzFoZUZKbGRISnBaWE1zSUZKbGRISjVTR0Z1Wkd4bGNrOXdkR2x2Ym5NdVRVRllYMDFCV0Y5U1JWUlNTVVZUS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6YUc5MWJHUlNaWFJ5ZVNBOUlITm9iM1ZzWkZKbGRISjVPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjSFZpYkdsalhHNGdJQ0FnSUNvZ1ZHOGdaMlYwSUhSb1pTQnRZWGhwYlhWdElHUmxiR0Y1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nUVNCdFlYaHBiWFZ0SUdSbGJHRjVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBUV0Y0UkdWc1lYa29LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJTWlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6TGsxQldGOUVSVXhCV1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaMlYwUzJWNUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWGh3YjNKMGN5NVNaWFJ5ZVVoaGJtUnNaWEpQY0hScGIyNUxaWGs3WEc0Z0lDQWdmVnh1ZlZ4dVpYaHdiM0owY3k1U1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1eklEMGdVbVYwY25sSVlXNWtiR1Z5VDNCMGFXOXVjenRjYmk4cUtseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQnpkR0YwYVdOY2JpQXFJRUVnYldWdFltVnlJR2h2YkdScGJtY2daR1ZtWVhWc2RDQmtaV3hoZVNCMllXeDFaU0JwYmlCelpXTnZibVJ6WEc0Z0tpOWNibEpsZEhKNVNHRnVaR3hsY2s5d2RHbHZibk11UkVWR1FWVk1WRjlFUlV4QldTQTlJRE03WEc0dktpcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJCSUcxbGJXSmxjaUJvYjJ4a2FXNW5JR1JsWm1GMWJIUWdiV0Y0VW1WMGNtbGxjeUIyWVd4MVpWeHVJQ292WEc1U1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1ekxrUkZSa0ZWVEZSZlRVRllYMUpGVkZKSlJWTWdQU0F6TzF4dUx5b3FYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSE4wWVhScFkxeHVJQ29nUVNCdFpXMWlaWElnYUc5c1pHbHVaeUJ0WVhocGJYVnRJR1JsYkdGNUlIWmhiSFZsSUdsdUlITmxZMjl1WkhOY2JpQXFMMXh1VW1WMGNubElZVzVrYkdWeVQzQjBhVzl1Y3k1TlFWaGZSRVZNUVZrZ1BTQXhPREE3WEc0dktpcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJCSUcxbGJXSmxjaUJvYjJ4a2FXNW5JRzFoZUdsdGRXMGdiV0Y0VW1WMGNtbGxjeUIyWVd4MVpWeHVJQ292WEc1U1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1ekxrMUJXRjlOUVZoZlVrVlVVa2xGVXlBOUlERXdPMXh1THlvcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FTQnRaVzFpWlhJZ2FHOXNaR2x1WnlCa1pXWmhkV3gwSUhOb2IzVnNaRkpsZEhKNUlHTmhiR3hpWVdOclhHNGdLaTljYmxKbGRISjVTR0Z1Wkd4bGNrOXdkR2x2Ym5NdVpHVm1ZWFZzZEZOb2IzVnNaRkpsZEhKNUlEMGdLQ2tnUFQ0Z2RISjFaVHRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElFMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiaTRnSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdUlDQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlV1WEc0Z0tpQlRaV1VnVEdsalpXNXpaU0JwYmlCMGFHVWdjSEp2YW1WamRDQnliMjkwSUdadmNpQnNhV05sYm5ObElHbHVabTl5YldGMGFXOXVMbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNWxlSEJ2Y25SekxsSmxkSEo1U0dGdVpHeGxjaUE5SUhadmFXUWdNRHRjYm1OdmJuTjBJSFJ6YkdsaVh6RWdQU0J5WlhGMWFYSmxLRndpZEhOc2FXSmNJaWs3WEc0dktpcGNiaUFxSUVCdGIyUjFiR1VnVW1WMGNubElZVzVrYkdWeVhHNGdLaTljYm1OdmJuTjBJR3RwYjNSaFgyRmljM1J5WVdOMGFXOXVjMTh4SUQwZ2NtVnhkV2x5WlNoY0lrQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpYQ0lwTzF4dVkyOXVjM1FnWVhCcFh6RWdQU0J5WlhGMWFYSmxLRndpUUc5d1pXNTBaV3hsYldWMGNua3ZZWEJwWENJcE8xeHVZMjl1YzNRZ2IySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTmZNU0E5SUhKbGNYVnBjbVVvWENJdUxpOXZZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVjMXdpS1R0Y2JtTnZibk4wSUdobFlXUmxjbk5WZEdsc1h6RWdQU0J5WlhGMWFYSmxLRndpTGk0dmRYUnBiSE12YUdWaFpHVnljMVYwYVd4Y0lpazdYRzVqYjI1emRDQnlaWFJ5ZVVoaGJtUnNaWEpQY0hScGIyNXpYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOXZjSFJwYjI1ekwzSmxkSEo1U0dGdVpHeGxjazl3ZEdsdmJuTmNJaWs3WEc0dktpcGNiaUFxSUVCamJHRnpjMXh1SUNvZ1FHbHRjR3hsYldWdWRITWdUV2xrWkd4bGQyRnlaVnh1SUNvZ1EyeGhjM01nWm05eUlGSmxkSEo1U0dGdVpHeGxjbHh1SUNvdlhHNWpiR0Z6Y3lCU1pYUnllVWhoYm1Sc1pYSWdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3ZFdKc2FXTmNiaUFnSUNBZ0tpQkFZMjl1YzNSeWRXTjBiM0pjYmlBZ0lDQWdLaUJVYnlCamNtVmhkR1VnWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdVbVYwY25sSVlXNWtiR1Z5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRTWlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6ZlNCYmIzQjBhVzl1Y3lBOUlHNWxkeUJTWlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6S0NsZElDMGdWR2hsSUhKbGRISjVJR2hoYm1Sc1pYSWdiM0IwYVc5dWN5QjJZV3gxWlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUVGdUlHbHVjM1JoYm1ObElHOW1JRkpsZEhKNVNHRnVaR3hsY2x4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0c5d2RHbHZibk1nUFNCdVpYY2djbVYwY25sSVlXNWtiR1Z5VDNCMGFXOXVjMTh4TGxKbGRISjVTR0Z1Wkd4bGNrOXdkR2x2Ym5Nb0tTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1ek8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbFJvWlNCdmNIUnBiMjV6SUhCaGNtRnRaWFJsY2lCcGN5QnlaWEYxYVhKbFpDNWNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFJRlJ2SUdOb1pXTnJJSGRvWlhSb1pYSWdkR2hsSUhKbGMzQnZibk5sSUdoaGN5QjBhR1VnY21WMGNua2djM1JoZEhWeklHTnZaR1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMUpsYzNCdmJuTmxmU0J5WlhOd2IyNXpaU0F0SUZSb1pTQnlaWE53YjI1elpTQnZZbXBsWTNSY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCWGFHVjBhR1Z5SUhSb1pTQnlaWE53YjI1elpTQm9ZWE1nY21WMGNua2djM1JoZEhWeklHTnZaR1VnYjNJZ2JtOTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTlNaWFJ5ZVNoeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VtVjBjbmxJWVc1a2JHVnlMbEpGVkZKWlgxTlVRVlJWVTE5RFQwUkZVeTVvWVhNb2NtVnpjRzl1YzJVdWMzUmhkSFZ6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaUJVYnlCamFHVmpheUIzYUdWMGFHVnlJSFJvWlNCd1lYbHNiMkZrSUdseklHSjFabVpsY21Wa0lHOXlJRzV2ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VW1WeGRXVnpkRWx1YVhSOUlHOXdkR2x2Ym5NZ0xTQlVhR1VnYjNCMGFXOXVjeUJ2WmlCaElISmxjWFZsYzNSY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCWGFHVjBhR1Z5SUhSb1pTQndZWGxzYjJGa0lHbHpJR0oxWm1abGNtVmtJRzl5SUc1dmRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdselFuVm1abVZ5WldRb2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDJFN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUcxbGRHaHZaQ0E5SUc5d2RHbHZibk11YldWMGFHOWtPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBjMUIxZEZCaGRHTm9UM0pRYjNOMElEMGdiV1YwYUc5a0lEMDlQU0JyYVc5MFlWOWhZbk4wY21GamRHbHZibk5mTVM1SWRIUndUV1YwYUc5a0xsQlZWQ0I4ZkNCdFpYUm9iMlFnUFQwOUlHdHBiM1JoWDJGaWMzUnlZV04wYVc5dWMxOHhMa2gwZEhCTlpYUm9iMlF1VUVGVVEwZ2dmSHdnYldWMGFHOWtJRDA5UFNCcmFXOTBZVjloWW5OMGNtRmpkR2x2Ym5OZk1TNUlkSFJ3VFdWMGFHOWtMbEJQVTFRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzFCMWRGQmhkR05vVDNKUWIzTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGMxTjBjbVZoYlNBOUlDZ29YMkVnUFNBb01Dd2dhR1ZoWkdWeWMxVjBhV3hmTVM1blpYUlNaWEYxWlhOMFNHVmhaR1Z5S1NodmNIUnBiMjV6TENCY0ltTnZiblJsYm5RdGRIbHdaVndpS1NrZ1BUMDlJRzUxYkd3Z2ZId2dYMkVnUFQwOUlIWnZhV1FnTUNBL0lIWnZhV1FnTUNBNklGOWhMblJ2VEc5M1pYSkRZWE5sS0NrcElEMDlQU0JjSW1Gd2NHeHBZMkYwYVc5dUwyOWpkR1YwTFhOMGNtVmhiVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselUzUnlaV0Z0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFJRlJ2SUdkbGRDQjBhR1VnWkdWc1lYa2dabTl5SUdFZ2NtVjBjbmxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMUpsYzNCdmJuTmxmU0J5WlhOd2IyNXpaU0F0SUZSb1pTQnlaWE53YjI1elpTQnZZbXBsWTNSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnY21WMGNubEJkSFJsYlhCMGN5QXRJRlJvWlNCamRYSnlaVzUwSUdGMGRHVnRjSFFnWTI5MWJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1pHVnNZWGtnTFNCVWFHVWdaR1ZzWVhrZ2RtRnNkV1VnYVc0Z2MyVmpiMjVrYzF4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUVFZ1pHVnNZWGtnWm05eUlHRWdjbVYwY25sY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSRVpXeGhlU2h5WlhOd2IyNXpaU3dnY21WMGNubEJkSFJsYlhCMGN5d2daR1ZzWVhrcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1oyVjBVbUZ1Wkc5dGJtVnpjeUE5SUNncElEMCtJRTUxYldKbGNpaE5ZWFJvTG5KaGJtUnZiU2dwTG5SdlJtbDRaV1FvTXlrcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYUnllVUZtZEdWeUlEMGdjbVZ6Y0c5dWMyVXVhR1ZoWkdWeWN5QWhQVDBnZFc1a1pXWnBibVZrSUQ4Z2NtVnpjRzl1YzJVdWFHVmhaR1Z5Y3k1blpYUW9VbVYwY25sSVlXNWtiR1Z5TGxKRlZGSlpYMEZHVkVWU1gwaEZRVVJGVWlrZ09pQnVkV3hzTzF4dUlDQWdJQ0FnSUNCc1pYUWdibVYzUkdWc1lYazdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYUnllVUZtZEdWeUlDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlNaWFJ5ZVMxQlpuUmxjam9nUEdoMGRIQXRaR0YwWlQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoT2RXMWlaWEl1YVhOT1lVNG9UblZ0WW1WeUtISmxkSEo1UVdaMFpYSXBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGQwUmxiR0Y1SUQwZ1RXRjBhQzV5YjNWdVpDZ29ibVYzSUVSaGRHVW9jbVYwY25sQlpuUmxjaWt1WjJWMFZHbHRaU2dwSUMwZ1JHRjBaUzV1YjNjb0tTa2dMeUF4TURBd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRkpsZEhKNUxVRm1kR1Z5T2lBOFpHVnNZWGt0YzJWamIyNWtjejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhkRVpXeGhlU0E5SUU1MWJXSmxjaWh5WlhSeWVVRm1kR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUZrWkdsdVp5QnlZVzVrYjIxdVpYTnpJSFJ2SUdGMmIybGtJSEpsZEhKNWFXNW5JR0YwSUdFZ2MyRnRaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNSR1ZzWVhrZ1BTQnlaWFJ5ZVVGMGRHVnRjSFJ6SUQ0OUlESWdQeUIwYUdsekxtZGxkRVY0Y0c5dVpXNTBhV0ZzUW1GamEwOW1abFJwYldVb2NtVjBjbmxCZEhSbGJYQjBjeWtnS3lCa1pXeGhlU0FySUdkbGRGSmhibVJ2Ylc1bGMzTW9LU0E2SUdSbGJHRjVJQ3NnWjJWMFVtRnVaRzl0Ym1WemN5Z3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xtMXBiaWh1WlhkRVpXeGhlU3dnZEdocGN5NXZjSFJwYjI1ekxtZGxkRTFoZUVSbGJHRjVLQ2tnS3lCblpYUlNZVzVrYjIxdVpYTnpLQ2twTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFJRlJ2SUdkbGRDQmhiaUJsZUhCdmJtVnVkR2xoYkNCaVlXTnJJRzltWmlCMllXeDFaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmhkSFJsYlhCMGN5QXRJRlJvWlNCamRYSnlaVzUwSUdGMGRHVnRjSFFnWTI5MWJuUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QkJiaUJsZUhCdmJtVnVkR2xoYkNCaVlXTnJJRzltWmlCMllXeDFaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRVY0Y0c5dVpXNTBhV0ZzUW1GamEwOW1abFJwYldVb1lYUjBaVzF3ZEhNcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1Y205MWJtUW9LREVnTHlBeUtTQXFJQ2hOWVhSb0xuQnZkeWd5TENCaGRIUmxiWEIwY3lrZ0xTQXhLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb2dRR0Z6ZVc1alhHNGdJQ0FnSUNvZ1ZHOGdZV1JrSUdSbGJHRjVJR1p2Y2lCMGFHVWdaWGhsWTNWMGFXOXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHUmxiR0Y1VTJWamIyNWtjeUF0SUZSb1pTQmtaV3hoZVNCMllXeDFaU0JwYmlCelpXTnZibVJ6WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nVG05MGFHbHVaMXh1SUNBZ0lDQXFMMXh1SUNBZ0lITnNaV1Z3S0dSbGJHRjVVMlZqYjI1a2N5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSE5zYVdKZk1TNWZYMkYzWVdsMFpYSW9kR2hwY3l3Z2RtOXBaQ0F3TENCMmIybGtJREFzSUdaMWJtTjBhVzl1S2lBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWld4aGVVMXBiR3hwYzJWamIyNWtjeUE5SUdSbGJHRjVVMlZqYjI1a2N5QXFJREV3TURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVwSUQwK0lITmxkRlJwYldWdmRYUW9jbVZ6YjJ4MlpTd2daR1ZzWVhsTmFXeHNhWE5sWTI5dVpITXBLVHNnTHk4Z1luSnZkM05sY2lCdmNpQnViMlJsWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdJQ0FxSUVCaGMzbHVZMXh1SUNBZ0lDQXFJRlJ2SUdWNFpXTjFkR1VnZEdobElHMXBaR1JzWlhkaGNtVWdkMmwwYUNCeVpYUnlhV1Z6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHREYjI1MFpYaDBmU0JqYjI1MFpYaDBJQzBnVkdobElHTnZiblJsZUhRZ2IySnFaV04wWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSEpsZEhKNVFYUjBaVzF3ZEhNZ0xTQlVhR1VnWTNWeWNtVnVkQ0JoZEhSbGJYQjBJR052ZFc1MFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pXTnZjbVE4YzNSeWFXNW5MQ0JTWlhGMVpYTjBUM0IwYVc5dVBuMGdXM0psY1hWbGMzUlBjSFJwYjI1eklEMGdlMzFkSUMwZ1ZHaGxJSEpsY1hWbGMzUWdiM0IwYVc5dWMxeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1VtVjBjbmxJWVc1a2JHVnlUM0IwYVc5dWMzMGdZM1Z5Y21WdWRFOXdkR2x2Ym5NZ0xTQlVhR1VnY21WMGNua2diV2xrWkd4bGQyRnlaU0J2Y0hScGIyNXpJR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUnlZV05sY2s1aGJXVWdMU0JVYUdVZ2JtRnRaU0IwYnlCMWMyVWdabTl5SUhSb1pTQjBjbUZqWlhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCQklGQnliMjFwYzJVZ2RHaGhkQ0J5WlhOdmJIWmxjeUIwYnlCdWIzUm9hVzVuWEc0Z0lDQWdJQ292WEc0Z0lDQWdaWGhsWTNWMFpWZHBkR2hTWlhSeWVTaDFjbXdzSUdabGRHTm9VbVZ4ZFdWemRFbHVhWFFzSUhKbGRISjVRWFIwWlcxd2RITXNJR04xY25KbGJuUlBjSFJwYjI1ekxDQnlaWEYxWlhOMFQzQjBhVzl1Y3l3Z2RISmhZMlZ5VG1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gyRTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjMnhwWWw4eExsOWZZWGRoYVhSbGNpaDBhR2x6TENCMmIybGtJREFzSUhadmFXUWdNQ3dnWm5WdVkzUnBiMjRxSUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxJRDBnZVdsbGJHUWdLQ2hmWVNBOUlIUm9hWE11Ym1WNGRDa2dQVDA5SUc1MWJHd2dmSHdnWDJFZ1BUMDlJSFp2YVdRZ01DQS9JSFp2YVdRZ01DQTZJRjloTG1WNFpXTjFkR1VvZFhKc0xDQm1aWFJqYUZKbGNYVmxjM1JKYm1sMExDQnlaWEYxWlhOMFQzQjBhVzl1Y3lrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnlaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbEpsYzNCdmJuTmxJR2x6SUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYUnllVUYwZEdWdGNIUnpJRHdnWTNWeWNtVnVkRTl3ZEdsdmJuTXViV0Y0VW1WMGNtbGxjeUFtSmlCMGFHbHpMbWx6VW1WMGNua29jbVZ6Y0c5dWMyVXBJQ1ltSUhSb2FYTXVhWE5DZFdabVpYSmxaQ2htWlhSamFGSmxjWFZsYzNSSmJtbDBLU0FtSmlCamRYSnlaVzUwVDNCMGFXOXVjeTV6YUc5MWJHUlNaWFJ5ZVNoamRYSnlaVzUwVDNCMGFXOXVjeTVrWld4aGVTd2djbVYwY25sQmRIUmxiWEIwY3l3Z2RYSnNMQ0JtWlhSamFGSmxjWFZsYzNSSmJtbDBMQ0J5WlhOd2IyNXpaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBckszSmxkSEo1UVhSMFpXMXdkSE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0RBc0lHaGxZV1JsY25OVmRHbHNYekV1YzJWMFVtVnhkV1Z6ZEVobFlXUmxjaWtvWm1WMFkyaFNaWEYxWlhOMFNXNXBkQ3dnVW1WMGNubElZVzVrYkdWeUxsSkZWRkpaWDBGVVZFVk5VRlJmU0VWQlJFVlNMQ0J5WlhSeWVVRjBkR1Z0Y0hSekxuUnZVM1J5YVc1bktDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtaV3hoZVNBOUlIUm9hWE11WjJWMFJHVnNZWGtvY21WemNHOXVjMlVzSUhKbGRISjVRWFIwWlcxd2RITXNJR04xY25KbGJuUlBjSFJwYjI1ekxtUmxiR0Y1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlV2xsYkdRZ2RHaHBjeTV6YkdWbGNDaGtaV3hoZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwY21GalpYSk9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjVhV1ZzWkNCaGNHbGZNUzUwY21GalpTNW5aWFJVY21GalpYSW9kSEpoWTJWeVRtRnRaU2t1YzNSaGNuUkJZM1JwZG1WVGNHRnVLR0J5WlhSeWVVaGhibVJzWlhJZ0xTQmhkSFJsYlhCMElDUjdjbVYwY25sQmRIUmxiWEIwYzMxZ0xDQW9jM0JoYmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR0Z1TG5ObGRFRjBkSEpwWW5WMFpTaGNJbWgwZEhBdWNtVjBjbmxmWTI5MWJuUmNJaXdnY21WMGNubEJkSFJsYlhCMGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJpNXpaWFJCZEhSeWFXSjFkR1VvWENKb2RIUndMbk4wWVhSMWMxOWpiMlJsWENJc0lISmxjM0J2Ym5ObExuTjBZWFIxY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WlhobFkzVjBaVmRwZEdoU1pYUnllU2gxY213c0lHWmxkR05vVW1WeGRXVnpkRWx1YVhRc0lISmxkSEo1UVhSMFpXMXdkSE1zSUdOMWNuSmxiblJQY0hScGIyNXpMQ0J5WlhGMVpYTjBUM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGdUxtVnVaQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSGxwWld4a0lIUm9hWE11WlhobFkzVjBaVmRwZEdoU1pYUnllU2gxY213c0lHWmxkR05vVW1WeGRXVnpkRWx1YVhRc0lISmxkSEo1UVhSMFpXMXdkSE1zSUdOMWNuSmxiblJQY0hScGIyNXpMQ0J5WlhGMVpYTjBUM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNIVmliR2xqWEc0Z0lDQWdJQ29nUUdGemVXNWpYRzRnSUNBZ0lDb2dWRzhnWlhobFkzVjBaU0IwYUdVZ1kzVnljbVZ1ZENCdGFXUmtiR1YzWVhKbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0RGIyNTBaWGgwZlNCamIyNTBaWGgwSUMwZ1ZHaGxJR052Ym5SbGVIUWdiMkpxWldOMElHOW1JSFJvWlNCeVpYRjFaWE4wWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nUVNCUWNtOXRhWE5sSUhSb1lYUWdjbVZ6YjJ4MlpYTWdkRzhnYm05MGFHbHVaMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHVjRaV04xZEdVb2RYSnNMQ0J5WlhGMVpYTjBTVzVwZEN3Z2NtVnhkV1Z6ZEU5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WMGNubEJkSFJsYlhCMGN5QTlJREE3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpkWEp5Wlc1MFQzQjBhVzl1Y3lBOUlIUm9hWE11YjNCMGFXOXVjenRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjWFZsYzNSUGNIUnBiMjV6SUNZbUlISmxjWFZsYzNSUGNIUnBiMjV6VzNKbGRISjVTR0Z1Wkd4bGNrOXdkR2x2Ym5OZk1TNVNaWFJ5ZVVoaGJtUnNaWEpQY0hScGIyNUxaWGxkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBUM0IwYVc5dWN5QTlJSEpsY1hWbGMzUlBjSFJwYjI1elczSmxkSEo1U0dGdVpHeGxjazl3ZEdsdmJuTmZNUzVTWlhSeWVVaGhibVJzWlhKUGNIUnBiMjVMWlhsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5OMElHOWljMDl3ZEdsdmJuTWdQU0FvTUN3Z2IySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTmZNUzVuWlhSUFluTmxjblpoWW1sc2FYUjVUM0IwYVc5dWMwWnliMjFTWlhGMVpYTjBLU2h5WlhGMVpYTjBUM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJR2xtSUNodlluTlBjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhCcFh6RXVkSEpoWTJVdVoyVjBWSEpoWTJWeUtHOWljMDl3ZEdsdmJuTXVaMlYwVkhKaFkyVnlTVzV6ZEhKMWJXVnVkR0YwYVc5dVRtRnRaU2dwS1M1emRHRnlkRUZqZEdsMlpWTndZVzRvWENKeVpYUnllVWhoYm1Sc1pYSWdMU0JsZUdWamRYUmxYQ0lzSUNoemNHRnVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhiaTV6WlhSQmRIUnlhV0oxZEdVb1hDSmpiMjB1YldsamNtOXpiMlowTG10cGIzUmhMbWhoYm1Sc1pYSXVjbVYwY25rdVpXNWhZbXhsWENJc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsZUdWamRYUmxWMmwwYUZKbGRISjVLSFZ5YkN3Z2NtVnhkV1Z6ZEVsdWFYUXNJSEpsZEhKNVFYUjBaVzF3ZEhNc0lHTjFjbkpsYm5SUGNIUnBiMjV6TENCeVpYRjFaWE4wVDNCMGFXOXVjeXdnYjJKelQzQjBhVzl1Y3k1blpYUlVjbUZqWlhKSmJuTjBjblZ0Wlc1MFlYUnBiMjVPWVcxbEtDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVc1aGJHeDVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhiaTVsYm1Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bGVHVmpkWFJsVjJsMGFGSmxkSEo1S0hWeWJDd2djbVZ4ZFdWemRFbHVhWFFzSUhKbGRISjVRWFIwWlcxd2RITXNJR04xY25KbGJuUlBjSFJwYjI1ekxDQnlaWEYxWlhOMFQzQjBhVzl1Y3lrN1hHNGdJQ0FnZlZ4dWZWeHVaWGh3YjNKMGN5NVNaWFJ5ZVVoaGJtUnNaWElnUFNCU1pYUnllVWhoYm1Sc1pYSTdYRzR2S2lwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpQkJJR3hwYzNRZ2IyWWdjM1JoZEhWeklHTnZaR1Z6SUhSb1lYUWdibVZsWkhNZ2RHOGdZbVVnY21WMGNtbGxaRnh1SUNvdlhHNVNaWFJ5ZVVoaGJtUnNaWEl1VWtWVVVsbGZVMVJCVkZWVFgwTlBSRVZUSUQwZ2JtVjNJRk5sZENoYlhHNGdJQ0FnTkRJNUxGeHVJQ0FnSURVd015eGNiaUFnSUNBMU1EUXNJQzh2SUVkaGRHVjNZWGtnZEdsdFpXOTFkRnh1WFNrN1hHNHZLaXBjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQklHMWxiV0psY2lCb2IyeGthVzVuSUhSb1pTQnVZVzFsSUc5bUlISmxkSEo1SUdGMGRHVnRjSFFnYUdWaFpHVnlYRzRnS2k5Y2JsSmxkSEo1U0dGdVpHeGxjaTVTUlZSU1dWOUJWRlJGVFZCVVgwaEZRVVJGVWlBOUlGd2lVbVYwY25rdFFYUjBaVzF3ZEZ3aU8xeHVMeW9xWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhOMFlYUnBZMXh1SUNvZ1FTQnRaVzFpWlhJZ2FHOXNaR2x1WnlCMGFHVWdibUZ0WlNCdlppQnlaWFJ5ZVNCaFpuUmxjaUJvWldGa1pYSmNiaUFxTDF4dVVtVjBjbmxJWVc1a2JHVnlMbEpGVkZKWlgwRkdWRVZTWDBoRlFVUkZVaUE5SUZ3aVVtVjBjbmt0UVdaMFpYSmNJanRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NXNhV0p5WVhKNVZtVnljMmx2YmlBOUlIWnZhV1FnTUR0Y2JtVjRjRzl5ZEhNdWJHbGljbUZ5ZVZabGNuTnBiMjRnUFNCY0lqRXVNQzR3TFhCeVpYWnBaWGN1TVRKY0lqdGNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQkRiM0I1Y21sbmFIUWdLR01wSUUxcFkzSnZjMjltZENCRGIzSndiM0poZEdsdmJpNGdJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1SUNCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1RVbFVJRXhwWTJWdWMyVXVYRzRnS2lCVFpXVWdUR2xqWlc1elpTQnBiaUIwYUdVZ2NISnZhbVZqZENCeWIyOTBJR1p2Y2lCc2FXTmxibk5sSUdsdVptOXliV0YwYVc5dUxseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1bGVIQnZjblJ6TGxWelpYSkJaMlZ1ZEVoaGJtUnNaWEpQY0hScGIyNXpJRDBnWlhod2IzSjBjeTVWYzJWeVFXZGxiblJJWVc1a2JHVnlUM0IwYVc5dWMwdGxlU0E5SUhadmFXUWdNRHRjYm1OdmJuTjBJSFpsY25OcGIyNWZNU0E5SUhKbGNYVnBjbVVvWENJdUwzWmxjbk5wYjI1Y0lpazdYRzVsZUhCdmNuUnpMbFZ6WlhKQloyVnVkRWhoYm1Sc1pYSlBjSFJwYjI1elMyVjVJRDBnWENKVmMyVnlRV2RsYm5SSVlXNWtiR1Z5VDNCMGFXOXVTMlY1WENJN1hHNWpiR0Z6Y3lCVmMyVnlRV2RsYm5SSVlXNWtiR1Z5VDNCMGFXOXVjeUI3WEc0Z0lDQWdaMlYwUzJWNUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWGh3YjNKMGN5NVZjMlZ5UVdkbGJuUklZVzVrYkdWeVQzQjBhVzl1YzB0bGVUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQjFZbXhwWTF4dUlDQWdJQ0FxSUVCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUNBcUlGUnZJR055WldGMFpTQmhiaUJwYm5OMFlXNWpaU0J2WmlCVmMyVnlRV2RsYm5SSVlXNWtiR1Z5VDNCMGFXOXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQmJaVzVoWW14bElEMGdkSEoxWlYwZ0xTQlhhR1YwYUdWeUlIUnZJR0ZrWkNCMGFHVWdkWE5sY2lCaFoyVnVkQ0JvWldGa1pYSWdkRzhnZEdobElISmxjWFZsYzNSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzNCeWIyUjFZM1JPWVcxbElEMGdYQ0pyYVc5MFlTMTBlWEJsYzJOeWFYQjBYQ0pkSUMwZ1ZHaGxJSEJ5YjJSMVkzUWdibUZ0WlNCMGJ5QmlaU0JoWkdSbFpDQjBieUIwYUdVZ2RYTmxjaUJoWjJWdWRDQm9aV0ZrWlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzNCeWIyUjFZM1JXWlhKemFXOXVJRDBnWENJeExqQXVNQzF3Y21WMmFXVjNMakV5WENKZElDMGdWR2hsSUhCeWIyUjFZM1FnZG1WeWMybHZiaUIwYnlCaVpTQmhaR1JsWkNCMGJ5QjBhR1VnZFhObGNpQmhaMlZ1ZENCb1pXRmtaWEpjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsYm1GaWJHVWdQU0IwY25WbExDQndjbTlrZFdOMFRtRnRaU0E5SUZ3aWEybHZkR0V0ZEhsd1pYTmpjbWx3ZEZ3aUxDQndjbTlrZFdOMFZtVnljMmx2YmlBOUlIWmxjbk5wYjI1Zk1TNXNhV0p5WVhKNVZtVnljMmx2YmlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WdVlXSnNaU0E5SUdWdVlXSnNaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTlrZFdOMFRtRnRaU0E5SUhCeWIyUjFZM1JPWVcxbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIyUjFZM1JXWlhKemFXOXVJRDBnY0hKdlpIVmpkRlpsY25OcGIyNDdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVWYzJWeVFXZGxiblJJWVc1a2JHVnlUM0IwYVc5dWN5QTlJRlZ6WlhKQloyVnVkRWhoYm1Sc1pYSlBjSFJwYjI1ek8xeHVJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUlFTnZjSGx5YVdkb2RDQW9ZeWtnVFdsamNtOXpiMlowSUVOdmNuQnZjbUYwYVc5dUxpQWdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzRnSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdUR2xqWlc1elpTNWNiaUFxSUZObFpTQk1hV05sYm5ObElHbHVJSFJvWlNCd2NtOXFaV04wSUhKdmIzUWdabTl5SUd4cFkyVnVjMlVnYVc1bWIzSnRZWFJwYjI0dVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpOWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm1WNGNHOXlkSE11VlhObGNrRm5aVzUwU0dGdVpHeGxjaUE5SUhadmFXUWdNRHRjYm1OdmJuTjBJSFJ6YkdsaVh6RWdQU0J5WlhGMWFYSmxLRndpZEhOc2FXSmNJaWs3WEc1amIyNXpkQ0JoY0dsZk1TQTlJSEpsY1hWcGNtVW9YQ0pBYjNCbGJuUmxiR1Z0WlhSeWVTOWhjR2xjSWlrN1hHNWpiMjV6ZENCdlluTmxjblpoWW1sc2FYUjVUM0IwYVc5dWMxOHhJRDBnY21WeGRXbHlaU2hjSWk0dUwyOWljMlZ5ZG1GaWFXeHBkSGxQY0hScGIyNXpYQ0lwTzF4dVkyOXVjM1FnYUdWaFpHVnljMVYwYVd4Zk1TQTlJSEpsY1hWcGNtVW9YQ0l1TGk5MWRHbHNjeTlvWldGa1pYSnpWWFJwYkZ3aUtUdGNibU52Ym5OMElIVnpaWEpCWjJWdWRFaGhibVJzWlhKUGNIUnBiMjV6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTl2Y0hScGIyNXpMM1Z6WlhKQloyVnVkRWhoYm1Sc1pYSlBjSFJwYjI1elhDSXBPMXh1WTI5dWMzUWdWVk5GVWw5QlIwVk9WRjlJUlVGRVJWSmZTMFZaSUQwZ1hDSlZjMlZ5TFVGblpXNTBYQ0k3WEc1amJHRnpjeUJWYzJWeVFXZGxiblJJWVc1a2JHVnlJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0hWaWJHbGpYRzRnSUNBZ0lDb2dRR052Ym5OMGNuVmpkRzl5WEc0Z0lDQWdJQ29nVkc4Z1kzSmxZWFJsSUdGdUlHbHVjM1JoYm1ObElHOW1JRlZ6WlhKQloyVnVkRWhoYm1Sc1pYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxVnpaWEpCWjJWdWRFaGhibVJzWlhKUGNIUnBiMjU5SUZ0dmNIUnBiMjV6SUQwZ2JtVjNJRlZ6WlhKQloyVnVkRWhoYm1Sc1pYSlBjSFJwYjI0b0tWMGdMU0JVYUdVZ2IzQjBhVzl1Y3lCbWIzSWdkR2hsSUcxcFpHUnNaWGRoY21WY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loZmIzQjBhVzl1Y3lBOUlHNWxkeUIxYzJWeVFXZGxiblJJWVc1a2JHVnlUM0IwYVc5dWMxOHhMbFZ6WlhKQloyVnVkRWhoYm1Sc1pYSlBjSFJwYjI1ektDa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiM0IwYVc5dWN5QTlJRjl2Y0hScGIyNXpPMXh1SUNBZ0lIMWNiaUFnSUNBdktpb2dRR2x1YUdWeWFYUmtiMk1nS2k5Y2JpQWdJQ0JsZUdWamRYUmxLSFZ5YkN3Z2NtVnhkV1Z6ZEVsdWFYUXNJSEpsY1hWbGMzUlBjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHOWljMDl3ZEdsdmJuTWdQU0FvTUN3Z2IySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTmZNUzVuWlhSUFluTmxjblpoWW1sc2FYUjVUM0IwYVc5dWMwWnliMjFTWlhGMVpYTjBLU2h5WlhGMVpYTjBUM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJR2xtSUNodlluTlBjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhCcFh6RXVkSEpoWTJVdVoyVjBWSEpoWTJWeUtHOWljMDl3ZEdsdmJuTXVaMlYwVkhKaFkyVnlTVzV6ZEhKMWJXVnVkR0YwYVc5dVRtRnRaU2dwS1M1emRHRnlkRUZqZEdsMlpWTndZVzRvWENKMWMyVnlRV2RsYm5SSVlXNWtiR1Z5SUMwZ1pYaGxZM1YwWlZ3aUxDQW9jM0JoYmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53WVc0dWMyVjBRWFIwY21saWRYUmxLRndpWTI5dExtMXBZM0p2YzI5bWRDNXJhVzkwWVM1b1lXNWtiR1Z5TG5WelpYSmhaMlZ1ZEM1bGJtRmliR1ZjSWl3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZrWkZaaGJIVmxLSFZ5YkN3Z2NtVnhkV1Z6ZEVsdWFYUXNJSEpsY1hWbGMzUlBjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd1lXNHVaVzVrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aFpHUldZV3gxWlNoMWNtd3NJSEpsY1hWbGMzUkpibWwwTENCeVpYRjFaWE4wVDNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdZV1JrVm1Gc2RXVW9kWEpzTENCeVpYRjFaWE4wU1c1cGRDd2djbVZ4ZFdWemRFOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5aE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RITnNhV0pmTVM1ZlgyRjNZV2wwWlhJb2RHaHBjeXdnZG05cFpDQXdMQ0IyYjJsa0lEQXNJR1oxYm1OMGFXOXVLaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kzVnljbVZ1ZEU5d2RHbHZibk1nUFNCMGFHbHpMbDl2Y0hScGIyNXpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsY1hWbGMzUlBjSFJwYjI1eklDWW1JSEpsY1hWbGMzUlBjSFJwYjI1elczVnpaWEpCWjJWdWRFaGhibVJzWlhKUGNIUnBiMjV6WHpFdVZYTmxja0ZuWlc1MFNHRnVaR3hsY2s5d2RHbHZibk5MWlhsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRFOXdkR2x2Ym5NZ1BTQnlaWEYxWlhOMFQzQjBhVzl1YzF0MWMyVnlRV2RsYm5SSVlXNWtiR1Z5VDNCMGFXOXVjMTh4TGxWelpYSkJaMlZ1ZEVoaGJtUnNaWEpQY0hScGIyNXpTMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBUM0IwYVc5dWN5NWxibUZpYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaFpHUnBkR2x2Ym1Gc1ZtRnNkV1VnUFNCZ0pIdGpkWEp5Wlc1MFQzQjBhVzl1Y3k1d2NtOWtkV04wVG1GdFpYMHZKSHRqZFhKeVpXNTBUM0IwYVc5dWN5NXdjbTlrZFdOMFZtVnljMmx2Ym4xZ08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOMWNuSmxiblJXWVd4MVpTQTlJQ2d3TENCb1pXRmtaWEp6VlhScGJGOHhMbWRsZEZKbGNYVmxjM1JJWldGa1pYSXBLSEpsY1hWbGMzUkpibWwwTENCVlUwVlNYMEZIUlU1VVgwaEZRVVJGVWw5TFJWa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkzVnljbVZ1ZEZaaGJIVmxJSHg4SUdOMWNuSmxiblJXWVd4MVpTNXBibVJsZUU5bUtHRmtaR2wwYVc5dVlXeFdZV3gxWlNrZ1BUMDlJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2d3TENCb1pXRmtaWEp6VlhScGJGOHhMbUZ3Y0dWdVpGSmxjWFZsYzNSSVpXRmtaWElwS0hKbGNYVmxjM1JKYm1sMExDQlZVMFZTWDBGSFJVNVVYMGhGUVVSRlVsOUxSVmtzSUdGa1pHbDBhVzl1WVd4V1lXeDFaU3dnWENJZ1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxJRDBnZVdsbGJHUWdLQ2hmWVNBOUlIUm9hWE11Ym1WNGRDa2dQVDA5SUc1MWJHd2dmSHdnWDJFZ1BUMDlJSFp2YVdRZ01DQS9JSFp2YVdRZ01DQTZJRjloTG1WNFpXTjFkR1VvZFhKc0xDQnlaWEYxWlhOMFNXNXBkQ3dnY21WeGRXVnpkRTl3ZEdsdmJuTXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY21WemNHOXVjMlVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVG04Z2NtVnpjRzl1YzJVZ2NtVjBkWEp1WldRZ1lua2dkR2hsSUc1bGVIUWdiV2xrWkd4bGQyRnlaVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE53YjI1elpUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1ZlZ4dVpYaHdiM0owY3k1VmMyVnlRV2RsYm5SSVlXNWtiR1Z5SUQwZ1ZYTmxja0ZuWlc1MFNHRnVaR3hsY2p0Y2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVMeW9xWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2lCRGIzQjVjbWxuYUhRZ0tHTXBJRTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2Ymk0Z0lFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVJQ0JNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlFeHBZMlZ1YzJVdVhHNGdLaUJUWldVZ1RHbGpaVzV6WlNCcGJpQjBhR1VnY0hKdmFtVmpkQ0J5YjI5MElHWnZjaUJzYVdObGJuTmxJR2x1Wm05eWJXRjBhVzl1TGx4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvdlhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzVsZUhCdmNuUnpMazFwWkdSc1pYZGhjbVZHWVdOMGIzSjVJRDBnZG05cFpDQXdPMXh1THlvcVhHNGdLaUJBYlc5a2RXeGxJRTFwWkdSc1pYZGhjbVZHWVdOMGIzSjVYRzRnS2k5Y2JtTnZibk4wSUc1dlpHVmZabVYwWTJoZk1TQTlJSEpsY1hWcGNtVW9YQ0p1YjJSbExXWmxkR05vWENJcE8xeHVZMjl1YzNRZ1kzVnpkRzl0Um1WMFkyaElZVzVrYkdWeVh6RWdQU0J5WlhGMWFYSmxLRndpTGk5amRYTjBiMjFHWlhSamFFaGhibVJzWlhKY0lpazdYRzVqYjI1emRDQndZWEpoYldWMFpYSnpUbUZ0WlVSbFkyOWthVzVuU0dGdVpHeGxjbDh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZjR0Z5WVcxbGRHVnljMDVoYldWRVpXTnZaR2x1WjBoaGJtUnNaWEpjSWlrN1hHNWpiMjV6ZENCeVpXUnBjbVZqZEVoaGJtUnNaWEpmTVNBOUlISmxjWFZwY21Vb1hDSXVMM0psWkdseVpXTjBTR0Z1Wkd4bGNsd2lLVHRjYm1OdmJuTjBJSEpsZEhKNVNHRnVaR3hsY2w4eElEMGdjbVZ4ZFdseVpTaGNJaTR2Y21WMGNubElZVzVrYkdWeVhDSXBPMXh1WTI5dWMzUWdkWE5sY2tGblpXNTBTR0Z1Wkd4bGNsOHhJRDBnY21WeGRXbHlaU2hjSWk0dmRYTmxja0ZuWlc1MFNHRnVaR3hsY2x3aUtUdGNiaThxS2x4dUlDb2dRR05zWVhOelhHNGdLaUJEYkdGemN5QmpiMjUwWVdsdWFXNW5JR1oxYm1OMGFXOXVLSE1wSUhKbGJHRjBaV1FnZEc4Z2RHaGxJRzFwWkdSc1pYZGhjbVVnY0dsd1pXeHBibVZ6TGx4dUlDb3ZYRzVqYkdGemN5Qk5hV1JrYkdWM1lYSmxSbUZqZEc5eWVTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnSUNBcUlFQnpkR0YwYVdOY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQmtaV1poZFd4MElHMXBaR1JzWlhkaGNtVWdZMmhoYVc0Z1lXNGdZWEp5WVhrZ2QybDBhQ0IwYUdVZ0lHMXBaR1JzWlhkaGNtVWdhR0Z1Wkd4bGNuTmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwRjFkR2hsYm5ScFkyRjBhVzl1VUhKdmRtbGtaWEo5SUdGMWRHaFFjbTkyYVdSbGNpQXRJRlJvWlNCaGRYUm9aVzUwYVdOaGRHbHZiaUJ3Y205MmFXUmxjaUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0Z1SUdGeWNtRjVJRzltSUhSb1pTQnRhV1JrYkdWM1lYSmxJR2hoYm1Sc1pYSnpJRzltSUhSb1pTQmtaV1poZFd4MElHMXBaR1JzWlhkaGNtVWdZMmhoYVc1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZEdGMGFXTWdaMlYwUkdWbVlYVnNkRTFwWkdSc1pYZGhjbVZEYUdGcGJpaGpkWE4wYjIxR1pYUmphQ0E5SUc1dlpHVmZabVYwWTJoZk1TNWtaV1poZFd4MEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHMXBaR1JzWlhkaGNtVkJjbkpoZVNBOUlGdHVaWGNnY21WMGNubElZVzVrYkdWeVh6RXVVbVYwY25sSVlXNWtiR1Z5S0Nrc0lHNWxkeUJ5WldScGNtVmpkRWhoYm1Sc1pYSmZNUzVTWldScGNtVmpkRWhoYm1Sc1pYSW9LU3dnYm1WM0lIQmhjbUZ0WlhSbGNuTk9ZVzFsUkdWamIyUnBibWRJWVc1a2JHVnlYekV1VUdGeVlXMWxkR1Z5YzA1aGJXVkVaV052WkdsdVowaGhibVJzWlhJb0tTd2dibVYzSUhWelpYSkJaMlZ1ZEVoaGJtUnNaWEpmTVM1VmMyVnlRV2RsYm5SSVlXNWtiR1Z5S0Nrc0lHNWxkeUJqZFhOMGIyMUdaWFJqYUVoaGJtUnNaWEpmTVM1RGRYTjBiMjFHWlhSamFFaGhibVJzWlhJb1kzVnpkRzl0Um1WMFkyZ3BYVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFwWkdSc1pYZGhjbVZCY25KaGVUdGNiaUFnSUNCOVhHNTlYRzVsZUhCdmNuUnpMazFwWkdSc1pYZGhjbVZHWVdOMGIzSjVJRDBnVFdsa1pHeGxkMkZ5WlVaaFkzUnZjbms3WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1SUNCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xpQWdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCTWFXTmxibk5sTGx4dUlDb2dVMlZsSUV4cFkyVnVjMlVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NUlkSFJ3UTJ4cFpXNTBJRDBnZG05cFpDQXdPMXh1WTI5dWMzUWdkSE5zYVdKZk1TQTlJSEpsY1hWcGNtVW9YQ0owYzJ4cFlsd2lLVHRjYm1OdmJuTjBJR04xYzNSdmJVWmxkR05vU0dGdVpHeGxjbDh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZiV2xrWkd4bGQyRnlaWE12WTNWemRHOXRSbVYwWTJoSVlXNWtiR1Z5WENJcE8xeHVZMjl1YzNRZ2JXbGtaR3hsZDJGeVpVWmhZM1J2Y25sZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDIxcFpHUnNaWGRoY21WekwyMXBaR1JzWlhkaGNtVkdZV04wYjNKNVhDSXBPMXh1WTJ4aGMzTWdTSFIwY0VOc2FXVnVkQ0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCMVlteHBZMXh1SUNBZ0lDQXFJRUJqYjI1emRISjFZM1J2Y2x4dUlDQWdJQ0FxSUVOeVpXRjBaWE1nWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdZU0JJZEhSd1EyeHBaVzUwSUhkb2FXTm9JR052Ym5SaGFXNXpJSFJvWlNCdGFXUmtiR1YzWVhKbGN5QmhibVFnWm1WMFkyZ2dhVzF3YkdWdFpXNTBZWFJwYjI0Z1ptOXlJSEpsY1hWbGMzUWdaWGhsWTNWMGFXOXVMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdMaTR1VFdsa1pHeGxkMkZ5WlgwZ2JXbGtaR3hsZDJGeVpTQXRJRlJvWlNCbWFYSnpkQ0J0YVdSa2JHVjNZWEpsSUc5bUlIUm9aU0J0YVdSa2JHVjNZWEpsSUdOb1lXbHVJRzl5SUdFZ2MyVnhkV1Z1WTJVZ2IyWWdZV3hzSUhSb1pTQk5hV1JrYkdWM1lYSmxJR2hoYm1Sc1pYSnpYRzRnSUNBZ0lDb2dTV1lnYldsa1pHeGxkMkZ5WlhNZ2NHRnlZVzBnYVhNZ2RXNWtaV1pwYm1Wa0xDQjBhR1VnYUhSMGNFTnNhV1Z1ZENCcGJuTjBZVzVqWlNCM2FXeHNJSFZ6WlNCMGFHVWdaR1ZtWVhWc2RDQmhjbkpoZVNCdlppQnRhV1JrYkdWM1lYSmxjeTVjYmlBZ0lDQWdLaUJUWlhRZ2JXbGtaR3hsZDJGeVpYTWdkRzhnWUc1MWJHeGdJR2xtSUhsdmRTQmtieUJ1YjNRZ2QybHphQ0IwYnlCMWMyVWdiV2xrWkd4bGQyRnlaWE11WEc0Z0lDQWdJQ29nU1dZZ1kzVnpkRzl0SUdabGRHTm9JR2x6SUhWdVpHVm1hVzVsWkN3Z2RHaGxJR2gwZEhCRGJHbGxiblFnYVc1emRHRnVZMlVnZFhObGN5QjBhR1VnWUVSbFptRjFiSFJHWlhSamFFaGhibVJzWlhKZ1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhzb2NtVnhkV1Z6ZERvZ2MzUnlhVzVuTENCcGJtbDBQem9nVW1WeGRXVnpkRWx1YVhRcElEMCtJRkJ5YjIxcGMyVWdQQ0JTWlhOd2IyNXpaU0ErZlNCamRYTjBiMjBnWm1WMFkyZ2dablZ1WTNScGIyNGdMU0JoSUVabGRHTm9JRUZRU1NCcGJYQnNaVzFsYm5SaGRHbHZibHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZM1Z6ZEc5dFJtVjBZMmdzSUM0dUxtMXBaR1JzWlhkaGNtVnpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z6ZEc5dFJtVjBZMmdnUFNCamRYTjBiMjFHWlhSamFEdGNiaUFnSUNBZ0lDQWdMeThnVlhObElHUmxabUYxYkhRZ2JXbGtaR3hsZDJGeVpTQmphR0ZwYmlCcFppQnRhV1JrYkdWM1lYSmxjeUJoYm1RZ1kzVnpkRzl0SUdabGRHTm9JR1oxYm1OMGFXOXVJR0Z5WlNBZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYldsa1pHeGxkMkZ5WlhNdWJHVnVaM1JvSUh4OElDRnRhV1JrYkdWM1lYSmxjMXN3WFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJOYVdSa2JHVjNZWEpsS0M0dUxtMXBaR1JzWlhkaGNtVkdZV04wYjNKNVh6RXVUV2xrWkd4bGQyRnlaVVpoWTNSdmNua3VaMlYwUkdWbVlYVnNkRTFwWkdSc1pYZGhjbVZEYUdGcGJpaGpkWE4wYjIxR1pYUmphQ2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZM1Z6ZEc5dFJtVjBZMmdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEUxcFpHUnNaWGRoY21Vb0xpNHViV2xrWkd4bGQyRnlaWE1zSUc1bGR5QmpkWE4wYjIxR1pYUmphRWhoYm1Sc1pYSmZNUzVEZFhOMGIyMUdaWFJqYUVoaGJtUnNaWElvWTNWemRHOXRSbVYwWTJncEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFRXbGtaR3hsZDJGeVpTZ3VMaTV0YVdSa2JHVjNZWEpsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaUJRY205alpYTnpaWE1nZEdobElHMXBaR1JzWlhkaGNtVWdjR0Z5WVcxbGRHVnlJSEJoYzNObFpDQjBieUJ6WlhRZ2RHaHBjeTV0YVdSa2JHVjNZWEpsSUhCeWIzQmxjblI1WEc0Z0lDQWdJQ29nVkdobElHTmhiR3hwYm1jZ1puVnVZM1JwYjI0Z2MyaHZkV3hrSUhaaGJHbGtZWFJsSUdsbUlHMXBaR1JzWlhkaGNtVWdhWE1nYm05MElIVnVaR1ZtYVc1bFpDQnZjaUJ1YjNRZ1pXMXdkSGt1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHN1TGk1TmFXUmtiR1YzWVhKbGZTQnRhV1JrYkdWM1lYSmxJQzBnVkdobElHMXBaR1JzWlhkaGNtVWdjR0Z6YzJWa1hHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1RtOTBhR2x1WjF4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEUxcFpHUnNaWGRoY21Vb0xpNHViV2xrWkd4bGQyRnlaU2tnZTF4dUlDQWdJQ0FnSUNCdGFXUmtiR1YzWVhKbExtWnZja1ZoWTJnb0tHVnNaVzFsYm5Rc0lHbHVaR1Y0S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hVzVrWlhnZ1BDQnRhV1JrYkdWM1lYSmxMbXhsYm1kMGFDQXRJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwTG01bGVIUWdQU0J0YVdSa2JHVjNZWEpsVzJsdVpHVjRJQ3NnTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xcFpHUnNaWGRoY21VZ1BTQnRhV1JrYkdWM1lYSmxXekJkTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGZUdWamRYUmxjeUJoSUhKbGNYVmxjM1FnWVc1a0lISmxkSFZ5Ym5NZ1lTQndjbTl0YVhObElISmxjMjlzZG1sdVp5QjBhR1VnY21WemNHOXVjMlV1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFZ5YkNCMGFHVWdjbVZ4ZFdWemRDQjFjbXd1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzl3ZEdsdmJuTWdjbVZ4ZFdWemRDQnZjSFJwYjI1ekxseHVJQ0FnSUNBcUlFQnlaWFIxY201eklIUm9aU0J3Y205dGFYTmxJSEpsYzI5c2RtbHVaeUIwYUdVZ2NtVnpjRzl1YzJVdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWlhobFkzVjBaVVpsZEdOb0tIVnliQ3dnY21WeGRXVnpkRWx1YVhRc0lISmxjWFZsYzNSUGNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGMyeHBZbDh4TGw5ZllYZGhhWFJsY2loMGFHbHpMQ0IyYjJsa0lEQXNJSFp2YVdRZ01Dd2dablZ1WTNScGIyNHFJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbU4xYzNSdmJVWmxkR05vSUNZbUlDRjBhR2x6TG0xcFpHUnNaWGRoY21VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqZFhOMGIyMUdaWFJqYUNoMWNtd3NJSEpsY1hWbGMzUkpibWwwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtMXBaR1JzWlhkaGNtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlV2xsYkdRZ2RHaHBjeTV0YVdSa2JHVjNZWEpsTG1WNFpXTjFkR1VvZFhKc0xDQnlaWEYxWlhOMFNXNXBkQ3dnY21WeGRXVnpkRTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lVR3hsWVhObElIQnliM1pwWkdVZ2JXbGtaR3hsZDJGeVpYTWdiM0lnWVNCamRYTjBiMjBnWm1WMFkyZ2dablZ1WTNScGIyNGdkRzhnWlhobFkzVjBaU0IwYUdVZ2NtVnhkV1Z6ZEZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVJZEhSd1EyeHBaVzUwSUQwZ1NIUjBjRU5zYVdWdWREdGNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVpYaHdiM0owY3k1R1pYUmphRkpsY1hWbGMzUkJaR0Z3ZEdWeUlEMGdkbTlwWkNBd08xeHVZMjl1YzNRZ2RITnNhV0pmTVNBOUlISmxjWFZwY21Vb1hDSjBjMnhwWWx3aUtUdGNibU52Ym5OMElHdHBiM1JoWDJGaWMzUnlZV04wYVc5dWMxOHhJRDBnY21WeGRXbHlaU2hjSWtCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1elhDSXBPMXh1WTI5dWMzUWdZWEJwWHpFZ1BTQnlaWEYxYVhKbEtGd2lRRzl3Wlc1MFpXeGxiV1YwY25rdllYQnBYQ0lwTzF4dVkyOXVjM1FnYUhSMGNFTnNhV1Z1ZEY4eElEMGdjbVZ4ZFdseVpTaGNJaTR2YUhSMGNFTnNhV1Z1ZEZ3aUtUdGNibU52Ym5OMElHOWljMlZ5ZG1GaWFXeHBkSGxQY0hScGIyNXpYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOXZZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVjMXdpS1R0Y2JtTnNZWE56SUVabGRHTm9VbVZ4ZFdWemRFRmtZWEIwWlhJZ2UxeHVJQ0FnSUdkbGRGTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSkdZV04wYjNKNUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1c1emRHRnVkR2xoZEdWeklHRWdibVYzSUdoMGRIQWdZMjl5WlNCelpYSjJhV05sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR0YxZEdobGJuUnBZMkYwYVc5dVVISnZkbWxrWlhJZ2RHaGxJR0YxZEdobGJuUnBZMkYwYVc5dUlIQnliM1pwWkdWeUlIUnZJSFZ6WlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnY0dGeWMyVk9iMlJsUm1GamRHOXllU0IwYUdVZ2NHRnljMlVnYm05a1pTQm1ZV04wYjNKNUlIUnZJR1JsYzJWeWFXRnNhWHBsSUhKbGMzQnZibk5sY3k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2taaFkzUnZjbmtnZEdobElITmxjbWxoYkdsNllYUnBiMjRnZDNKcGRHVnlJR1poWTNSdmNua2dkRzhnZFhObElIUnZJSE5sY21saGJHbDZaU0J5WlhGMVpYTjBJR0p2WkdsbGN5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FIUjBjRU5zYVdWdWRDQjBhR1VnYUhSMGNDQmpiR2xsYm5RZ2RHOGdkWE5sSUhSdklHVjRaV04xZEdVZ2NtVnhkV1Z6ZEhNdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc5aWMyVnlkbUZpYVd4cGRIbFBjSFJwYjI1eklIUm9aU0J2WW5ObGNuWmhZbWxzYVhSNUlHOXdkR2x2Ym5NZ2RHOGdkWE5sTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dGMWRHaGxiblJwWTJGMGFXOXVVSEp2ZG1sa1pYSXNJSEJoY25ObFRtOWtaVVpoWTNSdmNua2dQU0JyYVc5MFlWOWhZbk4wY21GamRHbHZibk5mTVM1UVlYSnpaVTV2WkdWR1lXTjBiM0o1VW1WbmFYTjBjbmt1WkdWbVlYVnNkRWx1YzNSaGJtTmxMQ0J6WlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5Um1GamRHOXllU0E5SUd0cGIzUmhYMkZpYzNSeVlXTjBhVzl1YzE4eExsTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSkdZV04wYjNKNVVtVm5hWE4wY25rdVpHVm1ZWFZzZEVsdWMzUmhibU5sTENCb2RIUndRMnhwWlc1MElEMGdibVYzSUdoMGRIQkRiR2xsYm5SZk1TNUlkSFJ3UTJ4cFpXNTBLQ2tzSUc5aWMyVnlkbUZpYVd4cGRIbFBjSFJwYjI1eklEMGdibVYzSUc5aWMyVnlkbUZpYVd4cGRIbFBjSFJwYjI1elh6RXVUMkp6WlhKMllXSnBiR2wwZVU5d2RHbHZibk5KYlhCc0tDa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhkWFJvWlc1MGFXTmhkR2x2YmxCeWIzWnBaR1Z5SUQwZ1lYVjBhR1Z1ZEdsallYUnBiMjVRY205MmFXUmxjanRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWEp6WlU1dlpHVkdZV04wYjNKNUlEMGdjR0Z5YzJWT2IyUmxSbUZqZEc5eWVUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVNBOUlITmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSkdZV04wYjNKNU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1oMGRIQkRiR2xsYm5RZ1BTQm9kSFJ3UTJ4cFpXNTBPMXh1SUNBZ0lDQWdJQ0F2S2lvZ1ZHaGxJR0poYzJVZ2RYSnNJR1p2Y2lCbGRtVnllU0J5WlhGMVpYTjBMaUFxTDF4dUlDQWdJQ0FnSUNCMGFHbHpMbUpoYzJWVmNtd2dQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRGSmxjM0J2Ym5ObFEyOXVkR1Z1ZEZSNWNHVWdQU0FvY21WemNHOXVjMlVwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZZVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdobFlXUmxjaUE5SUNoZllTQTlJSEpsYzNCdmJuTmxMbWhsWVdSbGNuTXVaMlYwS0Z3aVkyOXVkR1Z1ZEMxMGVYQmxYQ0lwS1NBOVBUMGdiblZzYkNCOGZDQmZZU0E5UFQwZ2RtOXBaQ0F3SUQ4Z2RtOXBaQ0F3SURvZ1gyRXVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFHVmhaR1Z5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCelpXZHRaVzUwY3lBOUlHaGxZV1JsY2k1emNHeHBkQ2hjSWp0Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMlZuYldWdWRITXViR1Z1WjNSb0lEMDlQU0F3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sWjIxbGJuUnpXekJkTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUkRiMnhzWldOMGFXOXVUMlpRY21sdGFYUnBkbVZCYzNsdVl5QTlJQ2h5WlhGMVpYTjBTVzVtYnl3Z2NtVnpjRzl1YzJWVWVYQmxMQ0J5WlhOd2IyNXpaVWhoYm1Sc1pYSXNJR1Z5Y205eVRXRndjR2x1WjNNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY21WeGRXVnpkRWx1Wm04cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSnlaWEYxWlhOMFNXNW1ieUJqWVc1dWIzUWdZbVVnYm5Wc2JGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTjBZWEowVkhKaFkybHVaMU53WVc0b2NtVnhkV1Z6ZEVsdVptOHNJRndpYzJWdVpFTnZiR3hsWTNScGIyNVBabEJ5YVcxcGRHbDJaVUZ6ZVc1alhDSXNJQ2h6Y0dGdUtTQTlQaUIwYzJ4cFlsOHhMbDlmWVhkaGFYUmxjaWgwYUdsekxDQjJiMmxrSURBc0lIWnZhV1FnTUN3Z1puVnVZM1JwYjI0cUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlaWE53YjI1elpTQTlJSGxwWld4a0lIUm9hWE11WjJWMFNIUjBjRkpsYzNCdmJuTmxUV1Z6YzJGblpTaHlaWEYxWlhOMFNXNW1ieXdnYzNCaGJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpVaGhibVJzWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITndZVzR1WVdSa1JYWmxiblFvUm1WMFkyaFNaWEYxWlhOMFFXUmhjSFJsY2k1bGRtVnVkRkpsYzNCdmJuTmxTR0Z1Wkd4bGNrbHVkbTlyWldSTFpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIbHBaV3hrSUhKbGMzQnZibk5sU0dGdVpHeGxjaTVvWVc1a2JHVlNaWE53YjI1elpVRnplVzVqS0hKbGMzQnZibk5sTENCbGNuSnZjazFoY0hCcGJtZHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VXbGxiR1FnZEdocGN5NTBhSEp2ZDBsbVJtRnBiR1ZrVW1WemNHOXVjMlVvY21WemNHOXVjMlVzSUdWeWNtOXlUV0Z3Y0dsdVozTXNJSE53WVc0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk5vYjNWc1pGSmxkSFZ5YmxWdVpHVm1hVzVsWkNoeVpYTndiMjV6WlNrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNoeVpYTndiMjV6WlZSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luTjBjbWx1WjF3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYm5WdFltVnlYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSmliMjlzWldGdVhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKRVlYUmxYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRZMkZ6WlMxa1pXTnNZWEpoZEdsdmJuTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElISnZiM1JPYjJSbElEMGdlV2xsYkdRZ2RHaHBjeTVuWlhSU2IyOTBVR0Z5YzJWT2IyUmxLSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoY0dsZk1TNTBjbUZqWlM1blpYUlVjbUZqWlhJb2RHaHBjeTV2WW5ObGNuWmhZbWxzYVhSNVQzQjBhVzl1Y3k1blpYUlVjbUZqWlhKSmJuTjBjblZ0Wlc1MFlYUnBiMjVPWVcxbEtDa3BMbk4wWVhKMFFXTjBhWFpsVTNCaGJpaGdaMlYwUTI5c2JHVmpkR2x2Yms5bUpIdHlaWE53YjI1elpWUjVjR1Y5Vm1Gc2RXVmdMQ0FvWkdWelpYSnBZV3hwZW1WVGNHRnVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JoYmk1elpYUkJkSFJ5YVdKMWRHVW9SbVYwWTJoU1pYRjFaWE4wUVdSaGNIUmxjaTV5WlhOd2IyNXpaVlI1Y0dWQmRIUnlhV0oxZEdWTFpYa3NJSEpsYzNCdmJuTmxWSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaVlI1Y0dVZ1BUMDlJRndpYzNSeWFXNW5YQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnliMjkwVG05a1pTNW5aWFJEYjJ4c1pXTjBhVzl1VDJaUWNtbHRhWFJwZG1WV1lXeDFaWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHlaWE53YjI1elpWUjVjR1VnUFQwOUlGd2liblZ0WW1WeVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeWIyOTBUbTlrWlM1blpYUkRiMnhzWldOMGFXOXVUMlpRY21sdGFYUnBkbVZXWVd4MVpYTW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoeVpYTndiMjV6WlZSNWNHVWdQVDA5SUZ3aVltOXZiR1ZoYmx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY205dmRFNXZaR1V1WjJWMFEyOXNiR1ZqZEdsdmJrOW1VSEpwYldsMGFYWmxWbUZzZFdWektDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvY21WemNHOXVjMlZVZVhCbElEMDlQU0JjSWtSaGRHVmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISnZiM1JPYjJSbExtZGxkRU52Ykd4bFkzUnBiMjVQWmxCeWFXMXBkR2wyWlZaaGJIVmxjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tISmxjM0J2Ym5ObFZIbHdaU0E5UFQwZ1hDSkVkWEpoZEdsdmJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtOXZkRTV2WkdVdVoyVjBRMjlzYkdWamRHbHZiazltVUhKcGJXbDBhWFpsVm1Gc2RXVnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2NtVnpjRzl1YzJWVWVYQmxJRDA5UFNCY0lrUmhkR1ZQYm14NVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeWIyOTBUbTlrWlM1blpYUkRiMnhzWldOMGFXOXVUMlpRY21sdGFYUnBkbVZXWVd4MVpYTW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoeVpYTndiMjV6WlZSNWNHVWdQVDA5SUZ3aVZHbHRaVTl1YkhsY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKdmIzUk9iMlJsTG1kbGRFTnZiR3hsWTNScGIyNVBabEJ5YVcxcGRHbDJaVlpoYkhWbGN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWRXNWxlSEJsWTNSbFpDQjBlWEJsSUhSdklHUmxjMlZ5YVdGc2FYcGxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhObGNtbGhiR2w2WlZOd1lXNHVaVzVrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VXbGxiR1FnZEdocGN5NXdkWEpuWlZKbGMzQnZibk5sUW05a2VTaHlaWE53YjI1elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53WVc0dVpXNWtLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2twTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUkRiMnhzWldOMGFXOXVRWE41Ym1NZ1BTQW9jbVZ4ZFdWemRFbHVabThzSUhSNWNHVXNJSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpd2daWEp5YjNKTllYQndhVzVuY3lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z5WlhGMVpYTjBTVzVtYnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luSmxjWFZsYzNSSmJtWnZJR05oYm01dmRDQmlaU0J1ZFd4c1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUmhjblJVY21GamFXNW5VM0JoYmloeVpYRjFaWE4wU1c1bWJ5d2dYQ0p6Wlc1a1EyOXNiR1ZqZEdsdmJrRnplVzVqWENJc0lDaHpjR0Z1S1NBOVBpQjBjMnhwWWw4eExsOWZZWGRoYVhSbGNpaDBhR2x6TENCMmIybGtJREFzSUhadmFXUWdNQ3dnWm5WdVkzUnBiMjRxSUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTndiMjV6WlNBOUlIbHBaV3hrSUhSb2FYTXVaMlYwU0hSMGNGSmxjM0J2Ym5ObFRXVnpjMkZuWlNoeVpYRjFaWE4wU1c1bWJ5d2djM0JoYmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTndiMjV6WlVoaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd1lXNHVZV1JrUlhabGJuUW9SbVYwWTJoU1pYRjFaWE4wUVdSaGNIUmxjaTVsZG1WdWRGSmxjM0J2Ym5ObFNHRnVaR3hsY2tsdWRtOXJaV1JMWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhscFpXeGtJSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpNW9ZVzVrYkdWU1pYTndiMjV6WlVGemVXNWpLSEpsYzNCdmJuTmxMQ0JsY25KdmNrMWhjSEJwYm1kektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVdsbGJHUWdkR2hwY3k1MGFISnZkMGxtUm1GcGJHVmtVbVZ6Y0c5dWMyVW9jbVZ6Y0c5dWMyVXNJR1Z5Y205eVRXRndjR2x1WjNNc0lITndZVzRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTm9iM1ZzWkZKbGRIVnlibFZ1WkdWbWFXNWxaQ2h5WlhOd2IyNXpaU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjbTl2ZEU1dlpHVWdQU0I1YVdWc1pDQjBhR2x6TG1kbGRGSnZiM1JRWVhKelpVNXZaR1VvY21WemNHOXVjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGNHbGZNUzUwY21GalpTNW5aWFJVY21GalpYSW9kR2hwY3k1dlluTmxjblpoWW1sc2FYUjVUM0IwYVc5dWN5NW5aWFJVY21GalpYSkpibk4wY25WdFpXNTBZWFJwYjI1T1lXMWxLQ2twTG5OMFlYSjBRV04wYVhabFUzQmhiaWhjSW1kbGRFTnZiR3hsWTNScGIyNVBaazlpYW1WamRGWmhiSFZsYzF3aUxDQW9aR1Z6WlhKcFlXeHBlbVZUY0dGdUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTjFiSFFnUFNCeWIyOTBUbTlrWlM1blpYUkRiMnhzWldOMGFXOXVUMlpQWW1wbFkzUldZV3gxWlhNb2RIbHdaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHRnVMbk5sZEVGMGRISnBZblYwWlNoR1pYUmphRkpsY1hWbGMzUkJaR0Z3ZEdWeUxuSmxjM0J2Ym5ObFZIbHdaVUYwZEhKcFluVjBaVXRsZVN3Z1hDSnZZbXBsWTNSYlhWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWE5sY21saGJHbDZaVk53WVc0dVpXNWtLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGxwWld4a0lIUm9hWE11Y0hWeVoyVlNaWE53YjI1elpVSnZaSGtvY21WemNHOXVjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHRnVMbVZ1WkNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwcEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkR0Z5ZEZSeVlXTnBibWRUY0dGdUlEMGdLSEpsY1hWbGMzUkpibVp2TENCdFpYUm9iMlJPWVcxbExDQmpZV3hzWW1GamF5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUY5aE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkWEpzVkdWdGNHeGhkR1VnUFNCa1pXTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb0tGOWhJRDBnY21WeGRXVnpkRWx1Wm04dWRYSnNWR1Z0Y0d4aGRHVXBJQ0U5UFNCdWRXeHNJQ1ltSUY5aElDRTlQU0IyYjJsa0lEQWdQeUJmWVNBNklGd2lYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RHVnNaVzFsZEhKNVVHRjBhRlpoYkhWbElEMGdkWEpzVkdWdGNHeGhkR1V1Y21Wd2JHRmpaU2d2WEZ4N1hGdy9XMTU5WFN0Y1hIMHZaMmtzSUZ3aVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGd2FWOHhMblJ5WVdObExtZGxkRlJ5WVdObGNpaDBhR2x6TG05aWMyVnlkbUZpYVd4cGRIbFBjSFJwYjI1ekxtZGxkRlJ5WVdObGNrbHVjM1J5ZFcxbGJuUmhkR2x2Yms1aGJXVW9LU2t1YzNSaGNuUkJZM1JwZG1WVGNHRnVLR0FrZTIxbGRHaHZaRTVoYldWOUlDMGdKSHQwWld4bGJXVjBjbmxRWVhSb1ZtRnNkV1Y5WUN3Z0tITndZVzRwSUQwK0lIUnpiR2xpWHpFdVgxOWhkMkZwZEdWeUtIUm9hWE1zSUhadmFXUWdNQ3dnZG05cFpDQXdMQ0JtZFc1amRHbHZiaW9nS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITndZVzR1YzJWMFFYUjBjbWxpZFhSbEtGd2lhSFIwY0M1MWNtbGZkR1Z0Y0d4aGRHVmNJaXdnZFhKc1ZHVnRjR3hoZEdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlV2xsYkdRZ1kyRnNiR0poWTJzb2MzQmhiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR0Z1TG1WdVpDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1FYTjVibU1nUFNBb2NtVnhkV1Z6ZEVsdVptOHNJSFI1Y0dVc0lISmxjM0J2Ym5ObFNHRnVaR3hsY2l3Z1pYSnliM0pOWVhCd2FXNW5jeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnlaWEYxWlhOMFNXNW1ieWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5KbGNYVmxjM1JKYm1adklHTmhibTV2ZENCaVpTQnVkV3hzWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSaGNuUlVjbUZqYVc1blUzQmhiaWh5WlhGMVpYTjBTVzVtYnl3Z1hDSnpaVzVrUVhONWJtTmNJaXdnS0hOd1lXNHBJRDArSUhSemJHbGlYekV1WDE5aGQyRnBkR1Z5S0hSb2FYTXNJSFp2YVdRZ01Dd2dkbTlwWkNBd0xDQm1kVzVqZEdsdmJpb2dLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxJRDBnZVdsbGJHUWdkR2hwY3k1blpYUklkSFJ3VW1WemNHOXVjMlZOWlhOellXZGxLSEpsY1hWbGMzUkpibVp2TENCemNHRnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JoYmk1aFpHUkZkbVZ1ZENoR1pYUmphRkpsY1hWbGMzUkJaR0Z3ZEdWeUxtVjJaVzUwVW1WemNHOXVjMlZJWVc1a2JHVnlTVzUyYjJ0bFpFdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlV2xsYkdRZ2NtVnpjRzl1YzJWSVlXNWtiR1Z5TG1oaGJtUnNaVkpsYzNCdmJuTmxRWE41Ym1Nb2NtVnpjRzl1YzJVc0lHVnljbTl5VFdGd2NHbHVaM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVhV1ZzWkNCMGFHbHpMblJvY205M1NXWkdZV2xzWldSU1pYTndiMjV6WlNoeVpYTndiMjV6WlN3Z1pYSnliM0pOWVhCd2FXNW5jeXdnYzNCaGJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YzJodmRXeGtVbVYwZFhKdVZXNWtaV1pwYm1Wa0tISmxjM0J2Ym5ObEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeWIyOTBUbTlrWlNBOUlIbHBaV3hrSUhSb2FYTXVaMlYwVW05dmRGQmhjbk5sVG05a1pTaHlaWE53YjI1elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z3YVY4eExuUnlZV05sTG1kbGRGUnlZV05sY2loMGFHbHpMbTlpYzJWeWRtRmlhV3hwZEhsUGNIUnBiMjV6TG1kbGRGUnlZV05sY2tsdWMzUnlkVzFsYm5SaGRHbHZiazVoYldVb0tTa3VjM1JoY25SQlkzUnBkbVZUY0dGdUtGd2laMlYwVDJKcVpXTjBWbUZzZFdWY0lpd2dLR1JsYzJWeWFXRnNhWHBsVTNCaGJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JoYmk1elpYUkJkSFJ5YVdKMWRHVW9SbVYwWTJoU1pYRjFaWE4wUVdSaGNIUmxjaTV5WlhOd2IyNXpaVlI1Y0dWQmRIUnlhV0oxZEdWTFpYa3NJRndpYjJKcVpXTjBYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemRXeDBJRDBnY205dmRFNXZaR1V1WjJWMFQySnFaV04wVm1Gc2RXVW9kSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWelpYSnBZV3hwZW1WVGNHRnVMbVZ1WkNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVc1aGJHeDVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNWFXVnNaQ0IwYUdsekxuQjFjbWRsVW1WemNHOXVjMlZDYjJSNUtISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JoYmk1bGJtUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLU2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpGQnlhVzFwZEdsMlpVRnplVzVqSUQwZ0tISmxjWFZsYzNSSmJtWnZMQ0J5WlhOd2IyNXpaVlI1Y0dVc0lISmxjM0J2Ym5ObFNHRnVaR3hsY2l3Z1pYSnliM0pOWVhCd2FXNW5jeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnlaWEYxWlhOMFNXNW1ieWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5KbGNYVmxjM1JKYm1adklHTmhibTV2ZENCaVpTQnVkV3hzWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSaGNuUlVjbUZqYVc1blUzQmhiaWh5WlhGMVpYTjBTVzVtYnl3Z1hDSnpaVzVrVUhKcGJXbDBhWFpsUVhONWJtTmNJaXdnS0hOd1lXNHBJRDArSUhSemJHbGlYekV1WDE5aGQyRnBkR1Z5S0hSb2FYTXNJSFp2YVdRZ01Dd2dkbTlwWkNBd0xDQm1kVzVqZEdsdmJpb2dLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxJRDBnZVdsbGJHUWdkR2hwY3k1blpYUklkSFJ3VW1WemNHOXVjMlZOWlhOellXZGxLSEpsY1hWbGMzUkpibVp2TENCemNHRnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JoYmk1aFpHUkZkbVZ1ZENoR1pYUmphRkpsY1hWbGMzUkJaR0Z3ZEdWeUxtVjJaVzUwVW1WemNHOXVjMlZJWVc1a2JHVnlTVzUyYjJ0bFpFdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlV2xsYkdRZ2NtVnpjRzl1YzJWSVlXNWtiR1Z5TG1oaGJtUnNaVkpsYzNCdmJuTmxRWE41Ym1Nb2NtVnpjRzl1YzJVc0lHVnljbTl5VFdGd2NHbHVaM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVhV1ZzWkNCMGFHbHpMblJvY205M1NXWkdZV2xzWldSU1pYTndiMjV6WlNoeVpYTndiMjV6WlN3Z1pYSnliM0pOWVhCd2FXNW5jeXdnYzNCaGJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YzJodmRXeGtVbVYwZFhKdVZXNWtaV1pwYm1Wa0tISmxjM0J2Ym5ObEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tISmxjM0J2Ym5ObFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lRWEp5WVhsQ2RXWm1aWEpjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTFqWVhObExXUmxZMnhoY21GMGFXOXVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnlaWE53YjI1elpTNWliMlI1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2VXbGxiR1FnY21WemNHOXVjMlV1WVhKeVlYbENkV1ptWlhJb0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKemRISnBibWRjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbTUxYldKbGNsd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVltOXZiR1ZoYmx3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpUkdGMFpWd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxXTmhjMlV0WkdWamJHRnlZWFJwYjI1elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeWIyOTBUbTlrWlNBOUlIbHBaV3hrSUhSb2FYTXVaMlYwVW05dmRGQmhjbk5sVG05a1pTaHlaWE53YjI1elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGdUxuTmxkRUYwZEhKcFluVjBaU2hHWlhSamFGSmxjWFZsYzNSQlpHRndkR1Z5TG5KbGMzQnZibk5sVkhsd1pVRjBkSEpwWW5WMFpVdGxlU3dnY21WemNHOXVjMlZVZVhCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhjR2xmTVM1MGNtRmpaUzVuWlhSVWNtRmpaWElvZEdocGN5NXZZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVjeTVuWlhSVWNtRmpaWEpKYm5OMGNuVnRaVzUwWVhScGIyNU9ZVzFsS0NrcExuTjBZWEowUVdOMGFYWmxVM0JoYmloZ1oyVjBKSHR5WlhOd2IyNXpaVlI1Y0dWOVZtRnNkV1ZnTENBb1pHVnpaWEpwWVd4cGVtVlRjR0Z1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObFZIbHdaU0E5UFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKdmIzUk9iMlJsTG1kbGRGTjBjbWx1WjFaaGJIVmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2NtVnpjRzl1YzJWVWVYQmxJRDA5UFNCY0ltNTFiV0psY2x3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY205dmRFNXZaR1V1WjJWMFRuVnRZbVZ5Vm1Gc2RXVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoeVpYTndiMjV6WlZSNWNHVWdQVDA5SUZ3aVltOXZiR1ZoYmx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY205dmRFNXZaR1V1WjJWMFFtOXZiR1ZoYmxaaGJIVmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2NtVnpjRzl1YzJWVWVYQmxJRDA5UFNCY0lrUmhkR1ZjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEp2YjNST2IyUmxMbWRsZEVSaGRHVldZV3gxWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSEpsYzNCdmJuTmxWSGx3WlNBOVBUMGdYQ0pFZFhKaGRHbHZibHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbTl2ZEU1dlpHVXVaMlYwUkhWeVlYUnBiMjVXWVd4MVpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hKbGMzQnZibk5sVkhsd1pTQTlQVDBnWENKRVlYUmxUMjVzZVZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY205dmRFNXZaR1V1WjJWMFJHRjBaVTl1YkhsV1lXeDFaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tISmxjM0J2Ym5ObFZIbHdaU0E5UFQwZ1hDSlVhVzFsVDI1c2VWd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtOXZkRTV2WkdVdVoyVjBWR2x0WlU5dWJIbFdZV3gxWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpZFc1bGVIQmxZM1JsWkNCMGVYQmxJSFJ2SUdSbGMyVnlhV0ZzYVhwbFhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWE5sY21saGJHbDZaVk53WVc0dVpXNWtLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVdsbGJHUWdkR2hwY3k1d2RYSm5aVkpsYzNCdmJuTmxRbTlrZVNoeVpYTndiMjV6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITndZVzR1Wlc1a0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3BPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYm1ST2IxSmxjM0J2Ym5ObFEyOXVkR1Z1ZEVGemVXNWpJRDBnS0hKbGNYVmxjM1JKYm1adkxDQnlaWE53YjI1elpVaGhibVJzWlhJc0lHVnljbTl5VFdGd2NHbHVaM01wSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjbVZ4ZFdWemRFbHVabThwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKeVpYRjFaWE4wU1c1bWJ5QmpZVzV1YjNRZ1ltVWdiblZzYkZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMFlYSjBWSEpoWTJsdVoxTndZVzRvY21WeGRXVnpkRWx1Wm04c0lGd2ljMlZ1WkU1dlVtVnpjRzl1YzJWRGIyNTBaVzUwUVhONWJtTmNJaXdnS0hOd1lXNHBJRDArSUhSemJHbGlYekV1WDE5aGQyRnBkR1Z5S0hSb2FYTXNJSFp2YVdRZ01Dd2dkbTlwWkNBd0xDQm1kVzVqZEdsdmJpb2dLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxJRDBnZVdsbGJHUWdkR2hwY3k1blpYUklkSFJ3VW1WemNHOXVjMlZOWlhOellXZGxLSEpsY1hWbGMzUkpibVp2TENCemNHRnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JoYmk1aFpHUkZkbVZ1ZENoR1pYUmphRkpsY1hWbGMzUkJaR0Z3ZEdWeUxtVjJaVzUwVW1WemNHOXVjMlZJWVc1a2JHVnlTVzUyYjJ0bFpFdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlV2xsYkdRZ2NtVnpjRzl1YzJWSVlXNWtiR1Z5TG1oaGJtUnNaVkpsYzNCdmJuTmxRWE41Ym1Nb2NtVnpjRzl1YzJVc0lHVnljbTl5VFdGd2NHbHVaM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVhV1ZzWkNCMGFHbHpMblJvY205M1NXWkdZV2xzWldSU1pYTndiMjV6WlNoeVpYTndiMjV6WlN3Z1pYSnliM0pOWVhCd2FXNW5jeXdnYzNCaGJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVhV1ZzWkNCMGFHbHpMbkIxY21kbFVtVnpjRzl1YzJWQ2IyUjVLSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJpNWxibVFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1NrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNWhZbXhsUW1GamEybHVaMU4wYjNKbElEMGdLR0poWTJ0cGJtZFRkRzl5WlVaaFkzUnZjbmtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0Z5YzJWT2IyUmxSbUZqZEc5eWVTQTlJQ2d3TENCcmFXOTBZVjloWW5OMGNtRmpkR2x2Ym5OZk1TNWxibUZpYkdWQ1lXTnJhVzVuVTNSdmNtVkdiM0pRWVhKelpVNXZaR1ZHWVdOMGIzSjVLU2gwYUdsekxuQmhjbk5sVG05a1pVWmhZM1J2Y25rcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlSbUZqZEc5eWVTQTlJQ2d3TENCcmFXOTBZVjloWW5OMGNtRmpkR2x2Ym5OZk1TNWxibUZpYkdWQ1lXTnJhVzVuVTNSdmNtVkdiM0pUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5Um1GamRHOXllU2tvZEdocGN5NXpaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlSbUZqZEc5eWVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWMyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNrWmhZM1J2Y25rZ2ZId2dJWFJvYVhNdWNHRnljMlZPYjJSbFJtRmpkRzl5ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKMWJtRmliR1VnZEc4Z1pXNWhZbXhsSUdKaFkydHBibWNnYzNSdmNtVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWW1GamEybHVaMU4wYjNKbFJtRmpkRzl5ZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHdHBiM1JoWDJGaWMzUnlZV04wYVc5dWMxOHhMa0poWTJ0cGJtZFRkRzl5WlVaaFkzUnZjbmxUYVc1bmJHVjBiMjR1YVc1emRHRnVZMlVnUFNCaVlXTnJhVzVuVTNSdmNtVkdZV04wYjNKNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRGSnZiM1JRWVhKelpVNXZaR1VnUFNBb2NtVnpjRzl1YzJVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGNHbGZNUzUwY21GalpTNW5aWFJVY21GalpYSW9kR2hwY3k1dlluTmxjblpoWW1sc2FYUjVUM0IwYVc5dWN5NW5aWFJVY21GalpYSkpibk4wY25WdFpXNTBZWFJwYjI1T1lXMWxLQ2twTG5OMFlYSjBRV04wYVhabFUzQmhiaWhjSW1kbGRGSnZiM1JRWVhKelpVNXZaR1ZjSWl3Z0tITndZVzRwSUQwK0lIUnpiR2xpWHpFdVgxOWhkMkZwZEdWeUtIUm9hWE1zSUhadmFXUWdNQ3dnZG05cFpDQXdMQ0JtZFc1amRHbHZiaW9nS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCaGVXeHZZV1FnUFNCNWFXVnNaQ0J5WlhOd2IyNXpaUzVoY25KaGVVSjFabVpsY2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlaWE53YjI1elpVTnZiblJsYm5SVWVYQmxJRDBnZEdocGN5NW5aWFJTWlhOd2IyNXpaVU52Ym5SbGJuUlVlWEJsS0hKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGeVpYTndiMjV6WlVOdmJuUmxiblJVZVhCbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWJtOGdjbVZ6Y0c5dWMyVWdZMjl1ZEdWdWRDQjBlWEJsSUdadmRXNWtJR1p2Y2lCa1pYTmxjbWxoYkdsNllYUnBiMjVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGNuTmxUbTlrWlVaaFkzUnZjbmt1WjJWMFVtOXZkRkJoY25ObFRtOWtaU2h5WlhOd2IyNXpaVU52Ym5SbGJuUlVlWEJsTENCd1lYbHNiMkZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53WVc0dVpXNWtLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2twTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Ob2IzVnNaRkpsZEhWeWJsVnVaR1ZtYVc1bFpDQTlJQ2h5WlhOd2IyNXpaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNCdmJuTmxMbk4wWVhSMWN5QTlQVDBnTWpBMElIeDhJQ0Z5WlhOd2IyNXpaUzVpYjJSNU8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0F2S2lvZ2NIVnlaMlZ6SUhSb1pTQnlaWE53YjI1elpTQmliMlI1SUdsbUlHbDBJR2hoYzI0bmRDQmlaV1Z1SUhKbFlXUWdkRzhnY21Wc1pXRnpaU0IwYUdVZ1kyOXVibVZqZEdsdmJpQjBieUIwYUdVZ2MyVnlkbVZ5SUNvdlhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hWeVoyVlNaWE53YjI1elpVSnZaSGtnUFNBb2NtVnpjRzl1YzJVcElEMCtJSFJ6YkdsaVh6RXVYMTloZDJGcGRHVnlLSFJvYVhNc0lIWnZhV1FnTUN3Z2RtOXBaQ0F3TENCbWRXNWpkR2x2YmlvZ0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z5WlhOd2IyNXpaUzVpYjJSNVZYTmxaQ0FtSmlCeVpYTndiMjV6WlM1aWIyUjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVdsbGJHUWdjbVZ6Y0c5dWMyVXVZWEp5WVhsQ2RXWm1aWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEdoeWIzZEpaa1poYVd4bFpGSmxjM0J2Ym5ObElEMGdLSEpsYzNCdmJuTmxMQ0JsY25KdmNrMWhjSEJwYm1kekxDQnpjR0Z1Um05eVFYUjBjbWxpZFhSbGN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRndhVjh4TG5SeVlXTmxMbWRsZEZSeVlXTmxjaWgwYUdsekxtOWljMlZ5ZG1GaWFXeHBkSGxQY0hScGIyNXpMbWRsZEZSeVlXTmxja2x1YzNSeWRXMWxiblJoZEdsdmJrNWhiV1VvS1NrdWMzUmhjblJCWTNScGRtVlRjR0Z1S0Z3aWRHaHliM2RKWmtaaGFXeGxaRkpsYzNCdmJuTmxYQ0lzSUNoemNHRnVLU0E5UGlCMGMyeHBZbDh4TGw5ZllYZGhhWFJsY2loMGFHbHpMQ0IyYjJsa0lEQXNJSFp2YVdRZ01Dd2dablZ1WTNScGIyNHFJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYMkVzSUY5aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaUzV2YXlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhia1p2Y2tGMGRISnBZblYwWlhNdWMyVjBVM1JoZEhWektIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZaR1U2SUdGd2FWOHhMbE53WVc1VGRHRjBkWE5EYjJSbExrVlNVazlTTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nWENKeVpXTmxhWFpsWkY5bGNuSnZjbDl5WlhOd2IyNXpaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSaGRIVnpRMjlrWlNBOUlISmxjM0J2Ym5ObExuTjBZWFIxY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MzUmhkSFZ6UTI5a1pVRnpVM1J5YVc1bklEMGdjM1JoZEhWelEyOWtaUzUwYjFOMGNtbHVaeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWeWNtOXlUV0Z3Y0dsdVozTWdmSHdnS0NGbGNuSnZjazFoY0hCcGJtZHpXM04wWVhSMWMwTnZaR1ZCYzFOMGNtbHVaMTBnSmlZZ0lTaHpkR0YwZFhORGIyUmxJRDQ5SURRd01DQW1KaUJ6ZEdGMGRYTkRiMlJsSUR3Z05UQXdJQ1ltSUdWeWNtOXlUV0Z3Y0dsdVozTmJYQ0kwV0ZoY0lsMHBJQ1ltSUNFb2MzUmhkSFZ6UTI5a1pTQStQU0ExTURBZ0ppWWdjM1JoZEhWelEyOWtaU0E4SURZd01DQW1KaUJsY25KdmNrMWhjSEJwYm1kelcxd2lOVmhZWENKZEtTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53WVc1R2IzSkJkSFJ5YVdKMWRHVnpMbk5sZEVGMGRISnBZblYwWlNoR1pYUmphRkpsY1hWbGMzUkJaR0Z3ZEdWeUxtVnljbTl5VFdGd2NHbHVaMFp2ZFc1a1FYUjBjbWxpZFhSbFRtRnRaU3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pYSnliM0lnUFNCdVpYY2dhMmx2ZEdGZllXSnpkSEpoWTNScGIyNXpYekV1UVhCcFJYSnliM0lvWENKMGFHVWdjMlZ5ZG1WeUlISmxkSFZ5Ym1Wa0lHRnVJSFZ1Wlhod1pXTjBaV1FnYzNSaGRIVnpJR052WkdVZ1lXNWtJRzV2SUdWeWNtOXlJR05zWVhOeklHbHpJSEpsWjJsemRHVnlaV1FnWm05eUlIUm9hWE1nWTI5a1pTQmNJaUFySUhOMFlYUjFjME52WkdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhia1p2Y2tGMGRISnBZblYwWlhNdWNtVmpiM0prUlhoalpYQjBhVzl1S0dWeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd1lXNUdiM0pCZEhSeWFXSjFkR1Z6TG5ObGRFRjBkSEpwWW5WMFpTaEdaWFJqYUZKbGNYVmxjM1JCWkdGd2RHVnlMbVZ5Y205eVRXRndjR2x1WjBadmRXNWtRWFIwY21saWRYUmxUbUZ0WlN3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdaaFkzUnZjbmtnUFNBb1gySWdQU0FvWDJFZ1BTQmxjbkp2Y2sxaGNIQnBibWR6VzNOMFlYUjFjME52WkdWQmMxTjBjbWx1WjEwcElDRTlQU0J1ZFd4c0lDWW1JRjloSUNFOVBTQjJiMmxrSURBZ1B5QmZZU0E2SUNoemRHRjBkWE5EYjJSbElENDlJRFF3TUNBbUppQnpkR0YwZFhORGIyUmxJRHdnTlRBd0lEOGdaWEp5YjNKTllYQndhVzVuYzF0Y0lqUllXRndpWFNBNklIVnVaR1ZtYVc1bFpDa3BJQ0U5UFNCdWRXeHNJQ1ltSUY5aUlDRTlQU0IyYjJsa0lEQWdQeUJmWWlBNklDaHpkR0YwZFhORGIyUmxJRDQ5SURVd01DQW1KaUJ6ZEdGMGRYTkRiMlJsSUR3Z05qQXdJRDhnWlhKeWIzSk5ZWEJ3YVc1bmMxdGNJalZZV0Z3aVhTQTZJSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKdmIzUk9iMlJsSUQwZ2VXbGxiR1FnZEdocGN5NW5aWFJTYjI5MFVHRnljMlZPYjJSbEtISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHVnljbTl5SUQwZ1lYQnBYekV1ZEhKaFkyVXVaMlYwVkhKaFkyVnlLSFJvYVhNdWIySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTXVaMlYwVkhKaFkyVnlTVzV6ZEhKMWJXVnVkR0YwYVc5dVRtRnRaU2dwS1M1emRHRnlkRUZqZEdsMlpWTndZVzRvWENKblpYUlBZbXBsWTNSV1lXeDFaVndpTENBb1pHVnpaWEpwWVd4cGVtVlRjR0Z1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeWIyOTBUbTlrWlM1blpYUlBZbXBsWTNSV1lXeDFaU2htWVdOMGIzSjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGMyVnlhV0ZzYVhwbFUzQmhiaTVsYm1Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53WVc1R2IzSkJkSFJ5YVdKMWRHVnpMbk5sZEVGMGRISnBZblYwWlNoR1pYUmphRkpsY1hWbGMzUkJaR0Z3ZEdWeUxtVnljbTl5UW05a2VVWnZkVzVrUVhSMGNtbGlkWFJsVG1GdFpTd2dJU0ZsY25KdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2haWEp5YjNJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaUE5SUc1bGR5QnJhVzkwWVY5aFluTjBjbUZqZEdsdmJuTmZNUzVCY0dsRmNuSnZjaWhjSW5WdVpYaHdaV04wWldRZ1pYSnliM0lnZEhsd1pWd2lJQ3NnZEhsd1pXOW1JR1Z5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJrWnZja0YwZEhKcFluVjBaWE11Y21WamIzSmtSWGhqWlhCMGFXOXVLR1Z5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2daWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGdUxtVnVaQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1blpYUklkSFJ3VW1WemNHOXVjMlZOWlhOellXZGxJRDBnS0hKbGNYVmxjM1JKYm1adkxDQnpjR0Z1Um05eVFYUjBjbWxpZFhSbGN5d2dZMnhoYVcxektTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYQnBYekV1ZEhKaFkyVXVaMlYwVkhKaFkyVnlLSFJvYVhNdWIySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTXVaMlYwVkhKaFkyVnlTVzV6ZEhKMWJXVnVkR0YwYVc5dVRtRnRaU2dwS1M1emRHRnlkRUZqZEdsMlpWTndZVzRvWENKblpYUklkSFJ3VW1WemNHOXVjMlZOWlhOellXZGxYQ0lzSUNoemNHRnVLU0E5UGlCMGMyeHBZbDh4TGw5ZllYZGhhWFJsY2loMGFHbHpMQ0IyYjJsa0lEQXNJSFp2YVdRZ01Dd2dablZ1WTNScGIyNHFJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWEpsY1hWbGMzUkpibVp2S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKeVpYRjFaWE4wU1c1bWJ5QmpZVzV1YjNRZ1ltVWdiblZzYkZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFSmhjMlZWY214R2IzSlNaWEYxWlhOMFNXNW1iM0p0WVhScGIyNG9jbVZ4ZFdWemRFbHVabThwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaFpHUnBkR2x2Ym1Gc1EyOXVkR1Y0ZENBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMnhoYVcxektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JwZEdsdmJtRnNRMjl1ZEdWNGRGdGNJbU5zWVdsdGMxd2lYU0E5SUdOc1lXbHRjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1YVdWc1pDQjBhR2x6TG1GMWRHaGxiblJwWTJGMGFXOXVVSEp2ZG1sa1pYSXVZWFYwYUdWdWRHbGpZWFJsVW1WeGRXVnpkQ2h5WlhGMVpYTjBTVzVtYnl3Z1lXUmthWFJwYjI1aGJFTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlaWEYxWlhOMElEMGdlV2xsYkdRZ2RHaHBjeTVuWlhSU1pYRjFaWE4wUm5KdmJWSmxjWFZsYzNSSmJtWnZjbTFoZEdsdmJpaHlaWEYxWlhOMFNXNW1ieXdnYzNCaGJrWnZja0YwZEhKcFluVjBaWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dVlXUmtVbVZ4ZFdWemRFOXdkR2x2Ym5Nb1czUm9hWE11YjJKelpYSjJZV0pwYkdsMGVVOXdkR2x2Ym5OZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY21WemNHOXVjMlVnUFNCNWFXVnNaQ0IwYUdsekxtaDBkSEJEYkdsbGJuUXVaWGhsWTNWMFpVWmxkR05vS0hKbGNYVmxjM1JKYm1adkxsVlNUQ3dnY21WeGRXVnpkQ3dnY21WeGRXVnpkRWx1Wm04dVoyVjBVbVZ4ZFdWemRFOXdkR2x2Ym5Nb0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5sSUQwZ2VXbGxiR1FnZEdocGN5NXlaWFJ5ZVVOQlJWSmxjM0J2Ym5ObFNXWlNaWEYxYVhKbFpDaHlaWEYxWlhOMFNXNW1ieXdnY21WemNHOXVjMlVzSUhOd1lXNUdiM0pCZEhSeWFXSjFkR1Z6TENCamJHRnBiWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemNHOXVjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxRMjl1ZEdWdWRFeGxibWQwYUNBOUlISmxjM0J2Ym5ObExtaGxZV1JsY25NdVoyVjBLRndpUTI5dWRHVnVkQzFNWlc1bmRHaGNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpjRzl1YzJWRGIyNTBaVzUwVEdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhia1p2Y2tGMGRISnBZblYwWlhNdWMyVjBRWFIwY21saWRYUmxLRndpYUhSMGNDNXlaWE53YjI1elpWOWpiMjUwWlc1MFgyeGxibWQwYUZ3aUxDQndZWEp6WlVsdWRDaHlaWE53YjI1elpVTnZiblJsYm5STVpXNW5kR2dwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxRMjl1ZEdWdWRGUjVjR1VnUFNCeVpYTndiMjV6WlM1b1pXRmtaWEp6TG1kbGRDaGNJa052Ym5SbGJuUXRWSGx3WlZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaVU52Ym5SbGJuUlVlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JoYmtadmNrRjBkSEpwWW5WMFpYTXVjMlYwUVhSMGNtbGlkWFJsS0Z3aWFIUjBjQzV5WlhOd2IyNXpaVjlqYjI1MFpXNTBYM1I1Y0dWY0lpd2djbVZ6Y0c5dWMyVkRiMjUwWlc1MFZIbHdaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGdVJtOXlRWFIwY21saWRYUmxjeTV6WlhSQmRIUnlhV0oxZEdVb1hDSm9kSFJ3TG5OMFlYUjFjMTlqYjJSbFhDSXNJSEpsYzNCdmJuTmxMbk4wWVhSMWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJuWlhSMGFXNW5JSFJvWlNCb2RIUndMbVpzWVhadmNpQW9jSEp2ZEc5amIyd2dkbVZ5YzJsdmJpa2dhWE1nYVcxd2IzTnphV0pzWlNCM2FYUm9JR1psZEdOb0lFRlFTVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE53YjI1elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd1lXNHVaVzVrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxkSEo1UTBGRlVtVnpjRzl1YzJWSlpsSmxjWFZwY21Wa0lEMGdLSEpsY1hWbGMzUkpibVp2TENCeVpYTndiMjV6WlN3Z2MzQmhia1p2Y2tGMGRISnBZblYwWlhNc0lHTnNZV2x0Y3lrZ1BUNGdkSE5zYVdKZk1TNWZYMkYzWVdsMFpYSW9kR2hwY3l3Z2RtOXBaQ0F3TENCMmIybGtJREFzSUdaMWJtTjBhVzl1S2lBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhCcFh6RXVkSEpoWTJVdVoyVjBWSEpoWTJWeUtIUm9hWE11YjJKelpYSjJZV0pwYkdsMGVVOXdkR2x2Ym5NdVoyVjBWSEpoWTJWeVNXNXpkSEoxYldWdWRHRjBhVzl1VG1GdFpTZ3BLUzV6ZEdGeWRFRmpkR2wyWlZOd1lXNG9YQ0p5WlhSeWVVTkJSVkpsYzNCdmJuTmxTV1pTWlhGMWFYSmxaRndpTENBb2MzQmhiaWtnUFQ0Z2RITnNhV0pmTVM1ZlgyRjNZV2wwWlhJb2RHaHBjeXdnZG05cFpDQXdMQ0IyYjJsa0lEQXNJR1oxYm1OMGFXOXVLaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemNHOXVjMlZEYkdGcGJYTWdQU0IwYUdsekxtZGxkRU5zWVdsdGMwWnliMjFTWlhOd2IyNXpaU2h5WlhOd2IyNXpaU3dnWTJ4aGFXMXpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNCdmJuTmxRMnhoYVcxektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR0Z1TG1Ga1pFVjJaVzUwS0VabGRHTm9VbVZ4ZFdWemRFRmtZWEIwWlhJdVlYVjBhR1Z1ZEdsallYUmxRMmhoYkd4bGJtZGxaRVYyWlc1MFMyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53WVc1R2IzSkJkSFJ5YVdKMWRHVnpMbk5sZEVGMGRISnBZblYwWlNoY0ltaDBkSEF1Y21WMGNubGZZMjkxYm5SY0lpd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1YVdWc1pDQjBhR2x6TG5CMWNtZGxVbVZ6Y0c5dWMyVkNiMlI1S0hKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI1YVdWc1pDQjBhR2x6TG1kbGRFaDBkSEJTWlhOd2IyNXpaVTFsYzNOaFoyVW9jbVZ4ZFdWemRFbHVabThzSUhOd1lXNUdiM0pCZEhSeWFXSjFkR1Z6TENCeVpYTndiMjV6WlVOc1lXbHRjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNCdmJuTmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVc1aGJHeDVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhiaTVsYm1Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtTazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWRsZEVOc1lXbHRjMFp5YjIxU1pYTndiMjV6WlNBOUlDaHlaWE53YjI1elpTd2dZMnhoYVcxektTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemNHOXVjMlV1YzNSaGRIVnpJRDA5UFNBME1ERWdKaVlnSVdOc1lXbHRjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHRjJiMmxrSUdsdVptbHVhWFJsSUd4dmIzQXNJSGRsSUc5dWJIa2djbVYwY25rZ2IyNWpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUc1dklHNWxaV1FnZEc4Z1kyaGxZMnNnWm05eUlIUm9aU0JqYjI1MFpXNTBJSE5wYm1ObElHbDBKM01nWVc0Z1lYSnlZWGtnWVc1a0lHbDBJR1J2WlhOdUozUWdibVZsWkNCMGJ5QmlaU0J5WlhkdmRXNWtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NtRjNRWFYwYUdWdWRHbGpZWFJsU0dWaFpHVnlJRDBnY21WemNHOXVjMlV1YUdWaFpHVnljeTVuWlhRb1hDSlhWMWN0UVhWMGFHVnVkR2xqWVhSbFhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVlYZEJkWFJvWlc1MGFXTmhkR1ZJWldGa1pYSWdKaVlnTDE1Q1pXRnlaWElnTDJkcExuUmxjM1FvY21GM1FYVjBhR1Z1ZEdsallYUmxTR1ZoWkdWeUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5WVhkUVlYSmhiV1YwWlhKeklEMGdjbUYzUVhWMGFHVnVkR2xqWVhSbFNHVmhaR1Z5TG5KbGNHeGhZMlVvTDE1Q1pXRnlaWElnTDJkcExDQmNJbHdpS1M1emNHeHBkQ2hjSWl4Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ2NtRjNVR0Z5WVcxbGRHVnlJRzltSUhKaGQxQmhjbUZ0WlhSbGNuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUnlhVzF0WldSUVlYSmhiV1YwWlhJZ1BTQnlZWGRRWVhKaGJXVjBaWEl1ZEhKcGJTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0M5amJHRnBiWE05WENKYlhsd2lYU3RjSWk5bmFTNTBaWE4wS0hSeWFXMXRaV1JRWVhKaGJXVjBaWElwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlhVzF0WldSUVlYSmhiV1YwWlhJdWNtVndiR0ZqWlNndlkyeGhhVzF6UFZ3aUtGdGVYQ0pkS3lsY0lpOW5hU3dnWENJa01Wd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwUW1GelpWVnliRVp2Y2xKbGNYVmxjM1JKYm1admNtMWhkR2x2YmlBOUlDaHlaWEYxWlhOMFNXNW1ieWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dWNHRjBhRkJoY21GdFpYUmxjbk5iWENKaVlYTmxkWEpzWENKZElEMGdkR2hwY3k1aVlYTmxWWEpzTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRGSmxjWFZsYzNSR2NtOXRVbVZ4ZFdWemRFbHVabTl5YldGMGFXOXVJRDBnS0hKbGNYVmxjM1JKYm1adkxDQnpjR0Z1Um05eVFYUjBjbWxpZFhSbGN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRndhVjh4TG5SeVlXTmxMbWRsZEZSeVlXTmxjaWgwYUdsekxtOWljMlZ5ZG1GaWFXeHBkSGxQY0hScGIyNXpMbWRsZEZSeVlXTmxja2x1YzNSeWRXMWxiblJoZEdsdmJrNWhiV1VvS1NrdWMzUmhjblJCWTNScGRtVlRjR0Z1S0Z3aVoyVjBVbVZ4ZFdWemRFWnliMjFTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjVjSWl3Z0tITndZVzRwSUQwK0lIUnpiR2xpWHpFdVgxOWhkMkZwZEdWeUtIUm9hWE1zSUhadmFXUWdNQ3dnZG05cFpDQXdMQ0JtZFc1amRHbHZiaW9nS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmWVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J0WlhSb2IyUWdQU0FvWDJFZ1BTQnlaWEYxWlhOMFNXNW1ieTVvZEhSd1RXVjBhRzlrS1NBOVBUMGdiblZzYkNCOGZDQmZZU0E5UFQwZ2RtOXBaQ0F3SUQ4Z2RtOXBaQ0F3SURvZ1gyRXVkRzlUZEhKcGJtY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZFhKcElEMGdjbVZ4ZFdWemRFbHVabTh1VlZKTU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGdVJtOXlRWFIwY21saWRYUmxjeTV6WlhSQmRIUnlhV0oxZEdVb1hDSm9kSFJ3TG0xbGRHaHZaRndpTENCdFpYUm9iMlFnSVQwOUlHNTFiR3dnSmlZZ2JXVjBhRzlrSUNFOVBTQjJiMmxrSURBZ1B5QnRaWFJvYjJRZ09pQmNJbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RYSnBRMjl1ZEdGcGJuTlRZMmhsYldVZ1BTQjFjbWt1YVc1a1pYaFBaaWhjSWpvdkwxd2lLU0ErSUMweE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnpZMmhsYldWVGNHeGhkRlZ5YVNBOUlIVnlhUzV6Y0d4cGRDaGNJam92TDF3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIVnlhVU52Ym5SaGFXNXpVMk5vWlcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR0Z1Um05eVFYUjBjbWxpZFhSbGN5NXpaWFJCZEhSeWFXSjFkR1VvWENKb2RIUndMbk5qYUdWdFpWd2lMQ0J6WTJobGJXVlRjR3hoZEZWeWFWc3dYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkWEpwVjJsMGFHOTFkRk5qYUdWdFpTQTlJSFZ5YVVOdmJuUmhhVzV6VTJOb1pXMWxJRDhnYzJOb1pXMWxVM0JzWVhSVmNtbGJNVjBnT2lCMWNtazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd1lXNUdiM0pCZEhSeWFXSjFkR1Z6TG5ObGRFRjBkSEpwWW5WMFpTaGNJbWgwZEhBdWFHOXpkRndpTENCMWNtbFhhWFJvYjNWMFUyTm9aVzFsTG5Od2JHbDBLRndpTDF3aUtWc3dYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOWljMlZ5ZG1GaWFXeHBkSGxQY0hScGIyNXpMbWx1WTJ4MVpHVkZWVWxKUVhSMGNtbGlkWFJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhia1p2Y2tGMGRISnBZblYwWlhNdWMyVjBRWFIwY21saWRYUmxLRndpYUhSMGNDNTFjbWxjSWl3Z1pHVmpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtIVnlhU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsY1hWbGMzUkRiMjUwWlc1MFRHVnVaM1JvSUQwZ2NtVnhkV1Z6ZEVsdVptOHVhR1ZoWkdWeWMxdGNJa052Ym5SbGJuUXRUR1Z1WjNSb1hDSmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ4ZFdWemRFTnZiblJsYm5STVpXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd1lXNUdiM0pCZEhSeWFXSjFkR1Z6TG5ObGRFRjBkSEpwWW5WMFpTaGNJbWgwZEhBdWNtVnhkV1Z6ZEY5amIyNTBaVzUwWDJ4bGJtZDBhRndpTENCd1lYSnpaVWx1ZENoeVpYRjFaWE4wUTI5dWRHVnVkRXhsYm1kMGFGc3dYU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsY1hWbGMzUkRiMjUwWlc1MFZIbHdaU0E5SUhKbGNYVmxjM1JKYm1adkxtaGxZV1JsY25OYlhDSkRiMjUwWlc1MExWUjVjR1ZjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYRjFaWE4wUTI5dWRHVnVkRlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITndZVzVHYjNKQmRIUnlhV0oxZEdWekxuTmxkRUYwZEhKcFluVjBaU2hjSW1oMGRIQXVjbVZ4ZFdWemRGOWpiMjUwWlc1MFgzUjVjR1ZjSWl3Z2NtVnhkV1Z6ZEVOdmJuUmxiblJVZVhCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCb1pXRmtaWEp6SUQwZ2NtVnhkV1Z6ZEVsdVptOHVhR1ZoWkdWeWN5QS9JRTlpYW1WamRDNWxiblJ5YVdWektISmxjWFZsYzNSSmJtWnZMbWhsWVdSbGNuTXBMbTFoY0Nnb1cydGxlU3dnZG1Gc2RXVmRLU0E5UGlCYmEyVjVMblJ2VEc5allXeGxURzkzWlhKRFlYTmxLQ2tzSUhSb2FYTXVabTlzWkVobFlXUmxjbFpoYkhWbEtIWmhiSFZsS1YwcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5WlhGMVpYTjBJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWMGFHOWtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR1ZoWkdWeWN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhKbGNYVmxjM1JKYm1adkxtTnZiblJsYm5Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYRjFaWE4wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JoYmk1bGJtUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLU2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm05c1pFaGxZV1JsY2xaaGJIVmxJRDBnS0haaGJIVmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1V1YkdWdVozUm9JRHdnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0lsd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvZG1Gc2RXVXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxXekJkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbExuSmxaSFZqWlNnb1lXTmpMQ0IyWVd3cElEMCtJR0ZqWXlBcklIWmhiQ3dnWENJc1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dRR2x1YUdWeWFYUmtiMk5jYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWRtVnlkRlJ2VG1GMGFYWmxVbVZ4ZFdWemRFRnplVzVqSUQwZ0tISmxjWFZsYzNSSmJtWnZLU0E5UGlCMGMyeHBZbDh4TGw5ZllYZGhhWFJsY2loMGFHbHpMQ0IyYjJsa0lEQXNJSFp2YVdRZ01Dd2dablZ1WTNScGIyNHFJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGNtVnhkV1Z6ZEVsdVptOHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p5WlhGMVpYTjBTVzVtYnlCallXNXViM1FnWW1VZ2JuVnNiRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIbHBaV3hrSUhSb2FYTXVZWFYwYUdWdWRHbGpZWFJwYjI1UWNtOTJhV1JsY2k1aGRYUm9aVzUwYVdOaGRHVlNaWEYxWlhOMEtISmxjWFZsYzNSSmJtWnZMQ0IxYm1SbFptbHVaV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSaGNuUlVjbUZqYVc1blUzQmhiaWh5WlhGMVpYTjBTVzVtYnl3Z1hDSmpiMjUyWlhKMFZHOU9ZWFJwZG1WU1pYRjFaWE4wUVhONWJtTmNJaXdnS0hOd1lXNHBJRDArSUhSemJHbGlYekV1WDE5aGQyRnBkR1Z5S0hSb2FYTXNJSFp2YVdRZ01Dd2dkbTlwWkNBd0xDQm1kVzVqZEdsdmJpb2dLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsY1hWbGMzUWdQU0I1YVdWc1pDQjBhR2x6TG1kbGRGSmxjWFZsYzNSR2NtOXRVbVZ4ZFdWemRFbHVabTl5YldGMGFXOXVLSEpsY1hWbGMzUkpibVp2TENCemNHRnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ4ZFdWemREdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcEtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZWFYwYUdWdWRHbGpZWFJwYjI1UWNtOTJhV1JsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpWVhWMGFHVnVkR2xqWVhScGIyNGdjSEp2ZG1sa1pYSWdZMkZ1Ym05MElHSmxJRzUxYkd4Y0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRndZWEp6WlU1dlpHVkdZV04wYjNKNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKd1lYSnpaU0J1YjJSbElHWmhZM1J2Y25rZ1kyRnVibTkwSUdKbElHNTFiR3hjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0NGelpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpYzJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ1ptRmpkRzl5ZVNCallXNXViM1FnWW1VZ2JuVnNiRndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVdoMGRIQkRiR2xsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1oMGRIQWdZMnhwWlc1MElHTmhibTV2ZENCaVpTQnVkV3hzWENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNnaGIySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltOWljMlZ5ZG1GaWFXeHBkSGtnYjNCMGFXOXVjeUJqWVc1dWIzUWdZbVVnYm5Wc2JGd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjJKelpYSjJZV0pwYkdsMGVVOXdkR2x2Ym5NZ1BTQnVaWGNnYjJKelpYSjJZV0pwYkdsMGVVOXdkR2x2Ym5OZk1TNVBZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVjMGx0Y0d3b2IySnpaWEoyWVdKcGJHbDBlVTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVpYaHdiM0owY3k1R1pYUmphRkpsY1hWbGMzUkJaR0Z3ZEdWeUlEMGdSbVYwWTJoU1pYRjFaWE4wUVdSaGNIUmxjanRjYmtabGRHTm9VbVZ4ZFdWemRFRmtZWEIwWlhJdWNtVnpjRzl1YzJWVWVYQmxRWFIwY21saWRYUmxTMlY1SUQwZ1hDSmpiMjB1YldsamNtOXpiMlowTG10cGIzUmhMbkpsYzNCdmJuTmxMblI1Y0dWY0lqdGNia1psZEdOb1VtVnhkV1Z6ZEVGa1lYQjBaWEl1WlhabGJuUlNaWE53YjI1elpVaGhibVJzWlhKSmJuWnZhMlZrUzJWNUlEMGdYQ0pqYjIwdWJXbGpjbTl6YjJaMExtdHBiM1JoTG5KbGMzQnZibk5sWDJoaGJtUnNaWEpmYVc1MmIydGxaRndpTzF4dVJtVjBZMmhTWlhGMVpYTjBRV1JoY0hSbGNpNWxjbkp2Y2sxaGNIQnBibWRHYjNWdVpFRjBkSEpwWW5WMFpVNWhiV1VnUFNCY0ltTnZiUzV0YVdOeWIzTnZablF1YTJsdmRHRXVaWEp5YjNJdWJXRndjR2x1WjE5bWIzVnVaRndpTzF4dVJtVjBZMmhTWlhGMVpYTjBRV1JoY0hSbGNpNWxjbkp2Y2tKdlpIbEdiM1Z1WkVGMGRISnBZblYwWlU1aGJXVWdQU0JjSW1OdmJTNXRhV055YjNOdlpuUXVhMmx2ZEdFdVpYSnliM0l1WW05a2VWOW1iM1Z1WkZ3aU8xeHVSbVYwWTJoU1pYRjFaWE4wUVdSaGNIUmxjaTVoZFhSb1pXNTBhV05oZEdWRGFHRnNiR1Z1WjJWa1JYWmxiblJMWlhrZ1BTQmNJbU52YlM1dGFXTnliM052Wm5RdWEybHZkR0V1WVhWMGFHVnVkR2xqWVhSbFgyTm9ZV3hzWlc1blpWOXlaV05sYVhabFpGd2lPMXh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiaThxS2x4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0JOYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0dUlDQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMaUFnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVJQ29nVTJWbElFeHBZMlZ1YzJVZ2FXNGdkR2hsSUhCeWIycGxZM1FnY205dmRDQm1iM0lnYkdsalpXNXpaU0JwYm1admNtMWhkR2x2Ymk1Y2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVvZEhSd1UzUmhkSFZ6UTI5a1pTQTlJR1Y0Y0c5eWRITXViV1YwYUc5a1UzUmhkSFZ6UTI5a1pTQTlJSFp2YVdRZ01EdGNiaThxS2x4dUlDb2dRMjl1ZEdGcGJuTWdVbVZ4ZFdWemRFMWxkR2h2WkNCMGJ5QmpiM0p5WlhOd2IyNWthVzVuSUdGeWNtRjVJRzltSUhCdmMzTnBZbXhsSUhOMFlYUjFjeUJqYjJSbGN5d2dkWE5sWkNCbWIzSWdVbUZ1Wkc5dElHMXZaR1ZjYmlBcUwxeHVaWGh3YjNKMGN5NXRaWFJvYjJSVGRHRjBkWE5EYjJSbElEMGdlMXh1SUNBZ0lFZEZWRG9nV3pReU9Td2dOVEF3TENBMU1ESXNJRFV3TXl3Z05UQTBYU3hjYmlBZ0lDQlFUMU5VT2lCYk5ESTVMQ0ExTURBc0lEVXdNaXdnTlRBekxDQTFNRFFzSURVd04xMHNYRzRnSUNBZ1VGVlVPaUJiTkRJNUxDQTFNREFzSURVd01pd2dOVEF6TENBMU1EUXNJRFV3TjEwc1hHNGdJQ0FnVUVGVVEwZzZJRnMwTWprc0lEVXdNQ3dnTlRBeUxDQTFNRE1zSURVd05GMHNYRzRnSUNBZ1JFVk1SVlJGT2lCYk5ESTVMQ0ExTURBc0lEVXdNaXdnTlRBekxDQTFNRFFzSURVd04xMHNYRzU5TzF4dUx5b3FYRzRnS2lCRGIyNTBZV2x1Y3lCemRHRjBkWE5EYjJSbElIUnZJSE4wWVhSMWMwMWxjM05oWjJVZ2JXRndYRzRnS2k5Y2JtVjRjRzl5ZEhNdWFIUjBjRk4wWVhSMWMwTnZaR1VnUFNCN1hHNGdJQ0FnTVRBd09pQmNJa052Ym5ScGJuVmxYQ0lzWEc0Z0lDQWdNVEF4T2lCY0lsTjNhWFJqYUdsdVp5QlFjbTkwYjJOdmJITmNJaXhjYmlBZ0lDQXhNREk2SUZ3aVVISnZZMlZ6YzJsdVoxd2lMRnh1SUNBZ0lERXdNem9nWENKRllYSnNlU0JJYVc1MGMxd2lMRnh1SUNBZ0lESXdNRG9nWENKUFMxd2lMRnh1SUNBZ0lESXdNVG9nWENKRGNtVmhkR1ZrWENJc1hHNGdJQ0FnTWpBeU9pQmNJa0ZqWTJWd2RHVmtYQ0lzWEc0Z0lDQWdNakF6T2lCY0lrNXZiaTFCZFhSb2IzSnBkR0YwYVhabElFbHVabTl5YldGMGFXOXVYQ0lzWEc0Z0lDQWdNakEwT2lCY0lrNXZJRU52Ym5SbGJuUmNJaXhjYmlBZ0lDQXlNRFU2SUZ3aVVtVnpaWFFnUTI5dWRHVnVkRndpTEZ4dUlDQWdJREl3TmpvZ1hDSlFZWEowYVdGc0lFTnZiblJsYm5SY0lpeGNiaUFnSUNBeU1EYzZJRndpVFhWc2RHa3RVM1JoZEhWelhDSXNYRzRnSUNBZ01qQTRPaUJjSWtGc2NtVmhaSGtnVW1Wd2IzSjBaV1JjSWl4Y2JpQWdJQ0F5TWpZNklGd2lTVTBnVlhObFpGd2lMRnh1SUNBZ0lETXdNRG9nWENKTmRXeDBhWEJzWlNCRGFHOXBZMlZ6WENJc1hHNGdJQ0FnTXpBeE9pQmNJazF2ZG1Wa0lGQmxjbTFoYm1WdWRHeDVYQ0lzWEc0Z0lDQWdNekF5T2lCY0lrWnZkVzVrWENJc1hHNGdJQ0FnTXpBek9pQmNJbE5sWlNCUGRHaGxjbHdpTEZ4dUlDQWdJRE13TkRvZ1hDSk9iM1FnVFc5a2FXWnBaV1JjSWl4Y2JpQWdJQ0F6TURVNklGd2lWWE5sSUZCeWIzaDVYQ0lzWEc0Z0lDQWdNekEzT2lCY0lsUmxiWEJ2Y21GeWVTQlNaV1JwY21WamRGd2lMRnh1SUNBZ0lETXdPRG9nWENKUVpYSnRZVzVsYm5RZ1VtVmthWEpsWTNSY0lpeGNiaUFnSUNBME1EQTZJRndpUW1Ga0lGSmxjWFZsYzNSY0lpeGNiaUFnSUNBME1ERTZJRndpVlc1aGRYUm9iM0pwZW1Wa1hDSXNYRzRnSUNBZ05EQXlPaUJjSWxCaGVXMWxiblFnVW1WeGRXbHlaV1JjSWl4Y2JpQWdJQ0EwTURNNklGd2lSbTl5WW1sa1pHVnVYQ0lzWEc0Z0lDQWdOREEwT2lCY0lrNXZkQ0JHYjNWdVpGd2lMRnh1SUNBZ0lEUXdOVG9nWENKTlpYUm9iMlFnVG05MElFRnNiRzkzWldSY0lpeGNiaUFnSUNBME1EWTZJRndpVG05MElFRmpZMlZ3ZEdGaWJHVmNJaXhjYmlBZ0lDQTBNRGM2SUZ3aVVISnZlSGtnUVhWMGFHVnVkR2xqWVhScGIyNGdVbVZ4ZFdseVpXUmNJaXhjYmlBZ0lDQTBNRGc2SUZ3aVVtVnhkV1Z6ZENCVWFXMWxiM1YwWENJc1hHNGdJQ0FnTkRBNU9pQmNJa052Ym1ac2FXTjBYQ0lzWEc0Z0lDQWdOREV3T2lCY0lrZHZibVZjSWl4Y2JpQWdJQ0EwTVRFNklGd2lUR1Z1WjNSb0lGSmxjWFZwY21Wa1hDSXNYRzRnSUNBZ05ERXlPaUJjSWxCeVpXTnZibVJwZEdsdmJpQkdZV2xzWldSY0lpeGNiaUFnSUNBME1UTTZJRndpVUdGNWJHOWhaQ0JVYjI4Z1RHRnlaMlZjSWl4Y2JpQWdJQ0EwTVRRNklGd2lWVkpKSUZSdmJ5Qk1iMjVuWENJc1hHNGdJQ0FnTkRFMU9pQmNJbFZ1YzNWd2NHOXlkR1ZrSUUxbFpHbGhJRlI1Y0dWY0lpeGNiaUFnSUNBME1UWTZJRndpVW1GdVoyVWdUbTkwSUZOaGRHbHpabWxoWW14bFhDSXNYRzRnSUNBZ05ERTNPaUJjSWtWNGNHVmpkR0YwYVc5dUlFWmhhV3hsWkZ3aUxGeHVJQ0FnSURReU1Ub2dYQ0pOYVhOa2FYSmxZM1JsWkNCU1pYRjFaWE4wWENJc1hHNGdJQ0FnTkRJeU9pQmNJbFZ1Y0hKdlkyVnpjMkZpYkdVZ1JXNTBhWFI1WENJc1hHNGdJQ0FnTkRJek9pQmNJa3h2WTJ0bFpGd2lMRnh1SUNBZ0lEUXlORG9nWENKR1lXbHNaV1FnUkdWd1pXNWtaVzVqZVZ3aUxGeHVJQ0FnSURReU5Ub2dYQ0pVYjI4Z1JXRnliSGxjSWl4Y2JpQWdJQ0EwTWpZNklGd2lWWEJuY21Ga1pTQlNaWEYxYVhKbFpGd2lMRnh1SUNBZ0lEUXlPRG9nWENKUWNtVmpiMjVrYVhScGIyNGdVbVZ4ZFdseVpXUmNJaXhjYmlBZ0lDQTBNams2SUZ3aVZHOXZJRTFoYm5rZ1VtVnhkV1Z6ZEhOY0lpeGNiaUFnSUNBME16RTZJRndpVW1WeGRXVnpkQ0JJWldGa1pYSWdSbWxsYkdSeklGUnZieUJNWVhKblpWd2lMRnh1SUNBZ0lEUTFNVG9nWENKVmJtRjJZV2xzWVdKc1pTQkdiM0lnVEdWbllXd2dVbVZoYzI5dWMxd2lMRnh1SUNBZ0lEVXdNRG9nWENKSmJuUmxjbTVoYkNCVFpYSjJaWElnUlhKeWIzSmNJaXhjYmlBZ0lDQTFNREU2SUZ3aVRtOTBJRWx0Y0d4bGJXVnVkR1ZrWENJc1hHNGdJQ0FnTlRBeU9pQmNJa0poWkNCSFlYUmxkMkY1WENJc1hHNGdJQ0FnTlRBek9pQmNJbE5sY25acFkyVWdWVzVoZG1GcGJHRmliR1ZjSWl4Y2JpQWdJQ0ExTURRNklGd2lSMkYwWlhkaGVTQlVhVzFsYjNWMFhDSXNYRzRnSUNBZ05UQTFPaUJjSWtoVVZGQWdWbVZ5YzJsdmJpQk9iM1FnVTNWd2NHOXlkR1ZrWENJc1hHNGdJQ0FnTlRBMk9pQmNJbFpoY21saGJuUWdRV3h6YnlCT1pXZHZkR2xoZEdWelhDSXNYRzRnSUNBZ05UQTNPaUJjSWtsdWMzVm1abWxqYVdWdWRDQlRkRzl5WVdkbFhDSXNYRzRnSUNBZ05UQTRPaUJjSWt4dmIzQWdSR1YwWldOMFpXUmNJaXhjYmlBZ0lDQTFNVEE2SUZ3aVRtOTBJRVY0ZEdWdVpHVmtYQ0lzWEc0Z0lDQWdOVEV4T2lCY0lrNWxkSGR2Y21zZ1FYVjBhR1Z1ZEdsallYUnBiMjRnVW1WeGRXbHlaV1JjSWl4Y2JuMDdYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmk4cUtseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dRMjl3ZVhKcFoyaDBJQ2hqS1NCTmFXTnliM052Wm5RZ1EyOXljRzl5WVhScGIyNHVJQ0JCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGlBZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFMUpWQ0JNYVdObGJuTmxMbHh1SUNvZ1UyVmxJRXhwWTJWdWMyVWdhVzRnZEdobElIQnliMnBsWTNRZ2NtOXZkQ0JtYjNJZ2JHbGpaVzV6WlNCcGJtWnZjbTFoZEdsdmJpNWNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFMMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVpYaHdiM0owY3k1RGFHRnZjMU4wY21GMFpXZDVJRDBnZG05cFpDQXdPMXh1THlvcVhHNGdLaUJBYlc5a2RXeGxJRU5vWVc5elUzUnlZWFJsWjNsY2JpQXFMMXh1THlvcVhHNGdLaUJUZEhKaGRHVm5lU0IxYzJWa0lHWnZjaUJVWlhOMGFXNW5JRWhoYm1Sc1pYSmNiaUFxSUVCbGJuVnRYRzRnS2k5Y2JuWmhjaUJEYUdGdmMxTjBjbUYwWldkNU8xeHVLR1oxYm1OMGFXOXVJQ2hEYUdGdmMxTjBjbUYwWldkNUtTQjdYRzRnSUNBZ1EyaGhiM05UZEhKaGRHVm5lVnREYUdGdmMxTjBjbUYwWldkNVcxd2lUVUZPVlVGTVhDSmRJRDBnTUYwZ1BTQmNJazFCVGxWQlRGd2lPMXh1SUNBZ0lFTm9ZVzl6VTNSeVlYUmxaM2xiUTJoaGIzTlRkSEpoZEdWbmVWdGNJbEpCVGtSUFRWd2lYU0E5SURGZElEMGdYQ0pTUVU1RVQwMWNJanRjYm4wcEtFTm9ZVzl6VTNSeVlYUmxaM2tnUFNCbGVIQnZjblJ6TGtOb1lXOXpVM1J5WVhSbFoza2dmSHdnS0dWNGNHOXlkSE11UTJoaGIzTlRkSEpoZEdWbmVTQTlJSHQ5S1NrN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiaThxS2x4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0JOYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0dUlDQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMaUFnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVJQ29nVTJWbElFeHBZMlZ1YzJVZ2FXNGdkR2hsSUhCeWIycGxZM1FnY205dmRDQm1iM0lnYkdsalpXNXpaU0JwYm1admNtMWhkR2x2Ymk1Y2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVEYUdGdmMwaGhibVJzWlhJZ1BTQjJiMmxrSURBN1hHNWpiMjV6ZENCaGNHbGZNU0E5SUhKbGNYVnBjbVVvWENKQWIzQmxiblJsYkdWdFpYUnllUzloY0dsY0lpazdYRzVqYjI1emRDQnZZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVjMTh4SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMjlpYzJWeWRtRmlhV3hwZEhsUGNIUnBiMjV6WENJcE8xeHVZMjl1YzNRZ1EyaGhiM05JWVc1a2JHVnlSR0YwWVY4eElEMGdjbVZ4ZFdseVpTaGNJaTR2YjNCMGFXOXVjeTlEYUdGdmMwaGhibVJzWlhKRVlYUmhYQ0lwTzF4dVkyOXVjM1FnWTJoaGIzTlRkSEpoZEdWbmVWOHhJRDBnY21WeGRXbHlaU2hjSWk0dmIzQjBhVzl1Y3k5amFHRnZjMU4wY21GMFpXZDVYQ0lwTzF4dUx5b3FYRzRnS2lCQVkyeGhjM05jYmlBcUlFTnNZWE56WEc0Z0tpQkFhVzF3YkdWdFpXNTBjeUJOYVdSa2JHVjNZWEpsWEc0Z0tpQkRiR0Z6Y3lCeVpYQnlaWE5sYm5ScGJtY2dVbVZrYVhKbFkzUklZVzVrYkdWeVhHNGdLaTljYm1Oc1lYTnpJRU5vWVc5elNHRnVaR3hsY2lCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQjFZbXhwWTF4dUlDQWdJQ0FxSUVCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUNBcUlGUnZJR055WldGMFpTQmhiaUJwYm5OMFlXNWpaU0J2WmlCRGFHRnZjMGhoYm1Sc1pYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwTm9ZVzl6U0dGdVpHeGxjazl3ZEdsdmJuTjlJRnR2Y0hScGIyNXpJRDBnYm1WM0lFTm9ZVzl6U0dGdVpHeGxjazl3ZEdsdmJuTW9LVjBnTFNCVWFHVWdZMmhoYjNNZ2FHRnVaR3hsY2lCdmNIUnBiMjV6SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFoYm5WaGJFMWhjQ0F0SUZSb1pTQk5ZWEFnY0dGemMyVmtJR0o1SUhWelpYSWdZMjl1ZEdGcGJtbHVaeUIxY213dGMzUmhkSFZ6UTI5a1pTQnBibVp2WEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGFXOXVjeXdnYldGdWRXRnNUV0Z3S1NCN1hHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCQklHMWxiV0psY2lCb2IyeGthVzVuSUc5d2RHbHZibk1nZEc4Z1kzVnpkRzl0YVhwbElIUm9aU0JvWVc1a2JHVnlJR0psYUdGMmFXOXlYRzRnSUNBZ0lDQWdJQ0FxWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRnZjMU4wY21GMFpXZDVPaUJqYUdGdmMxTjBjbUYwWldkNVh6RXVRMmhoYjNOVGRISmhkR1ZuZVM1U1FVNUVUMDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0YwZFhOTlpYTnpZV2RsT2lCY0lrRWdjbUZ1Wkc5dElITjBZWFIxY3lCdFpYTnpZV2RsWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGdmMxQmxjbU5sYm5SaFoyVTZJREV3TEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamFHRnZjMDl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIUm9hWE11YjNCMGFXOXVjeXdnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaGphR0Z2YzA5d2RHbHZibk11WTJoaGIzTlFaWEpqWlc1MFlXZGxJRDRnTVRBd0lIeDhJR05vWVc5elQzQjBhVzl1Y3k1amFHRnZjMUJsY21ObGJuUmhaMlVnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKRGFHRnZjeUJRWlhKalpXNTBZV2RsSUcxMWMzUWdZbVVnYzJWMElIUnZJR0VnZG1Gc2RXVWdZbVYwZDJWbGJpQXdJR0Z1WkNBeE1EQXVYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUdOb1lXOXpUM0IwYVc5dWN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1dFlXNTFZV3hOWVhBZ1BTQnRZVzUxWVd4TllYQWdJVDA5SUc1MWJHd2dKaVlnYldGdWRXRnNUV0Z3SUNFOVBTQjJiMmxrSURBZ1B5QnRZVzUxWVd4TllYQWdPaUJ1WlhjZ1RXRndLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVpsZEdOb1pYTWdZU0J5WVc1a2IyMGdjM1JoZEhWeklHTnZaR1VnWm05eUlIUm9aU0JTUVU1RVQwMGdiVzlrWlNCbWNtOXRJSFJvWlNCd2NtVmtaV1pwYm1Wa0lHRnljbUY1WEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbVZ4ZFdWemRFMWxkR2h2WkNBdElIUm9aU0JCVUVrZ2JXVjBhRzlrSUdadmNpQjBhR1VnY21WeGRXVnpkRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnY21GdVpHOXRJSE4wWVhSMWN5QmpiMlJsSUdaeWIyMGdZU0JuYVhabGJpQnpaWFFnYjJZZ2MzUmhkSFZ6SUdOdlpHVnpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVnVaWEpoZEdWU1lXNWtiMjFUZEdGMGRYTkRiMlJsS0hKbGNYVmxjM1JOWlhSb2IyUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1JoZEhWelEyOWtaVUZ5Y21GNUlEMGdRMmhoYjNOSVlXNWtiR1Z5UkdGMFlWOHhMbTFsZEdodlpGTjBZWFIxYzBOdlpHVmJjbVZ4ZFdWemRFMWxkR2h2WkYwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRHRjBkWE5EYjJSbFFYSnlZWGxiVFdGMGFDNW1iRzl2Y2loTllYUm9MbkpoYm1SdmJTZ3BJQ29nYzNSaGRIVnpRMjlrWlVGeWNtRjVMbXhsYm1kMGFDbGRPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRkSEpwY0hNZ2IzVjBJSFJvWlNCb2IzTjBJSFZ5YkNCaGJtUWdjbVYwZFhKdWN5QjBhR1VnY21Wc1lYUnBkbVVnZFhKc0lHOXViSGxjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRMmhoYjNOSVlXNWtiR1Z5VDNCMGFXOXVjMzBnWTJoaGIzTklZVzVrYkdWeVQzQjBhVzl1Y3lBdElGUm9aU0JEYUdGdmMwaGhibVJzWlhKUGNIUnBiMjV6SUc5aWFtVmpkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjFjbXhOWlhSb2IyUWdMU0IwYUdVZ1kyOXRjR3hsZEdVZ1ZWSk1YRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdkR2hsSUhOMGNtbHVaeUJoY3lCeVpXeGhkR2wyWlNCVlVreGNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUlNaV3hoZEdsMlpWVlNUQ2hqYUdGdmMwaGhibVJzWlhKUGNIUnBiMjV6TENCMWNteE5aWFJvYjJRcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1ltRnpaVlZ5YkNBOUlHTm9ZVzl6U0dGdVpHeGxjazl3ZEdsdmJuTXVZbUZ6WlZWeWJEdGNiaUFnSUNBZ0lDQWdhV1lnS0dKaGMyVlZjbXdnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWeWJFMWxkR2h2WkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RYSnNUV1YwYUc5a0xuSmxjR3hoWTJVb1ltRnpaVlZ5YkN3Z1hDSmNJaWt1ZEhKcGJTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFJ6SUdFZ2MzUmhkSFZ6SUdOdlpHVWdabkp2YlNCMGFHVWdiM0IwYVc5dWN5QnZjaUJoSUhKaGJtUnZiV3g1SUdkbGJtVnlZWFJsWkNCemRHRjBkWE1nWTI5a1pWeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1EyaGhiM05JWVc1a2JHVnlUM0IwYVc5dWMzMGdZMmhoYjNOSVlXNWtiR1Z5VDNCMGFXOXVjeUF0SUZSb1pTQkRhR0Z2YzBoaGJtUnNaWEpQY0hScGIyNXpJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeVpYRjFaWE4wVlZKTUlDMGdkR2hsSUZWU1RDQm1iM0lnZEdobElISmxjWFZsYzNSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBoMGRIQk5aWFJvYjJSOUlISmxjWFZsYzNSTlpYUm9iMlFnTFNCMGFHVWdRVkJKSUcxbGRHaHZaQ0JtYjNJZ2RHaGxJSEpsY1hWbGMzUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjdiblZ0WW1WeWZTQm5aVzVsY21GMFpXUWdjM1JoZEhWelEyOWtaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRk4wWVhSMWMwTnZaR1VvWTJoaGIzTklZVzVrYkdWeVQzQjBhVzl1Y3l3Z2NtVnhkV1Z6ZEZWU1RDd2djbVZ4ZFdWemRFMWxkR2h2WkNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTJoaGIzTklZVzVrYkdWeVQzQjBhVzl1Y3k1amFHRnZjMU4wY21GMFpXZDVJRDA5UFNCamFHRnZjMU4wY21GMFpXZDVYekV1UTJoaGIzTlRkSEpoZEdWbmVTNU5RVTVWUVV3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGphR0Z2YzBoaGJtUnNaWEpQY0hScGIyNXpMbk4wWVhSMWMwTnZaR1VnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmphR0Z2YzBoaGJtUnNaWEpQY0hScGIyNXpMbk4wWVhSMWMwTnZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCdFlXNTFZV3dnYlc5a1pTQjNhWFJvSUc1dklITjBZWFIxY3lCamIyUmxMQ0JqWVc0Z1ltVWdZU0JuYkc5aVlXd2diR1YyWld3Z2IzSWdjbVZ4ZFdWemRDQnNaWFpsYkNCM2FYUm9iM1YwSUhOMFlYUjFjME52WkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5Wld4aGRHbDJaVlZTVENBOUlIUm9hWE11WjJWMFVtVnNZWFJwZG1WVlVrd29ZMmhoYjNOSVlXNWtiR1Z5VDNCMGFXOXVjeXdnY21WeGRXVnpkRlZTVENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdWbWFXNWxaRkpsYzNCdmJuTmxjeUE5SUhSb2FYTXViV0Z1ZFdGc1RXRndMbWRsZENoeVpXeGhkR2wyWlZWU1RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSbFptbHVaV1JTWlhOd2IyNXpaWE1nSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYTJsdVp5Qk5ZVzUxWVd3Z1RXRndJR1p2Y2lCbGVHRmpkQ0J0WVhSamFGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWEJEYjJSbElEMGdaR1ZtYVc1bFpGSmxjM0J2Ym5ObGN5NW5aWFFvY21WeGRXVnpkRTFsZEdodlpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRZWEJEYjJSbElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ0WVhCRGIyUmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdWc2MyVWdjM1JoZEhWelEyOWtaU0IzYjNWc1pDQmlaU0IxYm1SbFptbHVaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05yYVc1bklHWnZjaUJ5WldkbGVDQnRZWFJqYUNCcFppQmxlR0ZqZENCdFlYUmphQ0JrYjJWemJpZDBJSGR2Y210Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dFlXNTFZV3hOWVhBdVptOXlSV0ZqYUNnb2RtRnNkV1VzSUd0bGVTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOWhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NtVm5aWGhWVWt3Z1BTQnVaWGNnVW1WblJYaHdLR3RsZVNBcklGd2lKRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV2RsZUZWU1RDNTBaWE4wS0hKbGJHRjBhWFpsVlZKTUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxRMjlrWlNBOUlDaGZZU0E5SUhSb2FYTXViV0Z1ZFdGc1RXRndMbWRsZENoclpYa3BLU0E5UFQwZ2JuVnNiQ0I4ZkNCZllTQTlQVDBnZG05cFpDQXdJRDhnZG05cFpDQXdJRG9nWDJFdVoyVjBLSEpsY1hWbGMzUk5aWFJvYjJRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTndiMjV6WlVOdlpHVWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemNHOXVjMlZEYjJSbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUdadmNpQnRZVzUxWVd3Z2JXOWtaU0J6ZEdGMGRYTWdiM0lnYVdZZ2RHaGxJSFZ5YkNCM1lYTWdibTkwSUcxaGNIQmxaQ0IwYnlCaElHTnZaR1VnY21WMGRYSnVJR0VnY21GdVpHOXRJSE4wWVhSMWMxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlc1bGNtRjBaVkpoYm1SdmJWTjBZWFIxYzBOdlpHVW9jbVZ4ZFdWemRFMWxkR2h2WkNrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGJtVnlZWFJsY3lCaElISmxjM0J2Ym1SNUlHWnZjaUIwYUdVZ1kyaGhiMlVnY21WemNHOXVjMlZjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRMmhoYjNOSVlXNWtiR1Z5VDNCMGFXOXVjMzBnWTJoaGIzTklZVzVrYkdWeVQzQjBhVzl1Y3lBdElGUm9aU0JEYUdGdmMwaGhibVJzWlhKUGNIUnBiMjV6SUc5aWFtVmpkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnlaWEYxWlhOMFNVUWdMU0J5WlhGMVpYTjBJR2xrWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEpsY1hWbGMzUkVZWFJsSUMwZ1pHRjBaU0J2WmlCMGFHVWdjbVZ4ZFdWemRGeHVJQ0FnSUNBcUlDQXFJRUJ5WlhSMWNtNXpJSEpsYzNCdmJuTmxJR0p2WkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqY21WaGRHVlNaWE53YjI1elpVSnZaSGtvWTJoaGIzTklZVzVrYkdWeVQzQjBhVzl1Y3l3Z2MzUmhkSFZ6UTI5a1pTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyaGhiM05JWVc1a2JHVnlUM0IwYVc5dWN5NXlaWE53YjI1elpVSnZaSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmphR0Z2YzBoaGJtUnNaWEpQY0hScGIyNXpMbkpsYzNCdmJuTmxRbTlrZVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnNaWFFnWW05a2VUdGNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUjFjME52WkdVZ1BqMGdOREF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmpiMlJsVFdWemMyRm5aU0E5SUVOb1lXOXpTR0Z1Wkd4bGNrUmhkR0ZmTVM1b2RIUndVM1JoZEhWelEyOWtaVnR6ZEdGMGRYTkRiMlJsWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHVnljazFsYzNOaFoyVWdQU0JqYUdGdmMwaGhibVJzWlhKUGNIUnBiMjV6TG5OMFlYUjFjMDFsYzNOaFoyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZaR1U2SUdOdlpHVk5aWE56WVdkbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUJsY25KTlpYTnpZV2RsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBOUlIdDlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJpYjJSNU8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGIyMXdiM05sY3lCaElHNWxkeUJqYUdGdmRHbGpJSEpsYzNCdmJuTmxJR052WkdVZ2QybDBhQ0IwYUdVZ1kyOXVabWxuZFhKbFpDQndZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIVnliRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSbVYwWTJoU1pYRjFaWE4wU1c1cGRIMGdabVYwWTJoU1pYRjFaWE4wU1c1cGRGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdFNaWE53YjI1elpYMWNiaUFnSUNBZ0tpOWNiaUFnSUNCamNtVmhkR1ZEYUdGdmMxSmxjM0J2Ym5ObEtIVnliQ3dnWm1WMFkyaFNaWEYxWlhOMFNXNXBkQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYMkU3WEc0Z0lDQWdJQ0FnSUdsbUlDaG1aWFJqYUZKbGNYVmxjM1JKYm1sMExtMWxkR2h2WkNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlNaWEYxWlhOMElHMWxkR2h2WkNCdGRYTjBJR0psSUdSbFptbHVaV1F1WENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjWFZsYzNSTlpYUm9iMlFnUFNCbVpYUmphRkpsY1hWbGMzUkpibWwwTG0xbGRHaHZaRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1JoZEhWelEyOWtaU0E5SUhSb2FYTXVaMlYwVTNSaGRIVnpRMjlrWlNoMGFHbHpMbTl3ZEdsdmJuTXNJSFZ5YkN3Z2NtVnhkV1Z6ZEUxbGRHaHZaQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxRbTlrZVNBOUlIUm9hWE11WTNKbFlYUmxVbVZ6Y0c5dWMyVkNiMlI1S0hSb2FYTXViM0IwYVc5dWN5d2djM1JoZEhWelEyOWtaU2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE4wY21sdVowSnZaSGtnUFNCMGVYQmxiMllnY21WemNHOXVjMlZDYjJSNUlEMDlQU0JjSW5OMGNtbHVaMXdpSUQ4Z2NtVnpjRzl1YzJWQ2IyUjVJRG9nU2xOUFRpNXpkSEpwYm1kcFpua29jbVZ6Y0c5dWMyVkNiMlI1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ5YkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklITjBjbWx1WjBKdlpIa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRjBkWE02SUhOMFlYUjFjME52WkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMGRYTlVaWGgwT2lCMGFHbHpMbTl3ZEdsdmJuTXVjM1JoZEhWelRXVnpjMkZuWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hsWVdSbGNuTTZJQ2hmWVNBOUlIUm9hWE11YjNCMGFXOXVjeTVvWldGa1pYSnpLU0FoUFQwZ2JuVnNiQ0FtSmlCZllTQWhQVDBnZG05cFpDQXdJRDhnWDJFZ09pQjdmU3hjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdaWGhsWTNWMFpTaDFjbXdzSUhKbGNYVmxjM1JKYm1sMExDQnlaWEYxWlhOMFQzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdlluTlBjSFJwYjI1eklEMGdLREFzSUc5aWMyVnlkbUZpYVd4cGRIbFBjSFJwYjI1elh6RXVaMlYwVDJKelpYSjJZV0pwYkdsMGVVOXdkR2x2Ym5OR2NtOXRVbVZ4ZFdWemRDa29jbVZ4ZFdWemRFOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYjJKelQzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z3YVY4eExuUnlZV05sTG1kbGRGUnlZV05sY2lodlluTlBjSFJwYjI1ekxtZGxkRlJ5WVdObGNrbHVjM1J5ZFcxbGJuUmhkR2x2Yms1aGJXVW9LU2t1YzNSaGNuUkJZM1JwZG1WVGNHRnVLRndpWTJoaGIzTklZVzVrYkdWeUlDMGdaWGhsWTNWMFpWd2lMQ0FvYzNCaGJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd1lXNHVjMlYwUVhSMGNtbGlkWFJsS0Z3aVkyOXRMbTFwWTNKdmMyOW1kQzVyYVc5MFlTNW9ZVzVrYkdWeUxtTm9ZVzl6TG1WdVlXSnNaVndpTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjblZ1UTJoaGIzTW9kWEpzTENCeVpYRjFaWE4wU1c1cGRDd2djbVZ4ZFdWemRFOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJpNWxibVFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5ZFc1RGFHRnZjeWgxY213c0lISmxjWFZsYzNSSmJtbDBMQ0J5WlhGMVpYTjBUM0IwYVc5dWN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhKMWJrTm9ZVzl6S0hWeWJDd2djbVZ4ZFdWemRFbHVhWFFzSUhKbGNYVmxjM1JQY0hScGIyNXpMQ0J6Y0dGdUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoTllYUm9MbVpzYjI5eUtFMWhkR2d1Y21GdVpHOXRLQ2tnS2lBeE1EQXBJRHdnZEdocGN5NXZjSFJwYjI1ekxtTm9ZVzl6VUdWeVkyVnVkR0ZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNCaGJpQTlQVDBnYm5Wc2JDQjhmQ0J6Y0dGdUlEMDlQU0IyYjJsa0lEQWdQeUIyYjJsa0lEQWdPaUJ6Y0dGdUxtRmtaRVYyWlc1MEtFTm9ZVzl6U0dGdVpHeGxjaTVqYUdGdmMwaGhibVJzWlhKVWNtbG5aMlZ5WldSRmRtVnVkRXRsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtIUm9hWE11WTNKbFlYUmxRMmhoYjNOU1pYTndiMjV6WlNoMWNtd3NJSEpsY1hWbGMzUkpibWwwS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11Ym1WNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbEJzWldGelpTQnpaWFFnZEdobElHNWxlSFFnYldsa1pHeGxkMkZ5WlNCMGJ5QmpiMjUwYVc1MVpTQjBhR1VnY21WeGRXVnpkRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTVsZUhRdVpYaGxZM1YwWlNoMWNtd3NJSEpsY1hWbGMzUkpibWwwTENCeVpYRjFaWE4wVDNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OVhHNWxlSEJ2Y25SekxrTm9ZVzl6U0dGdVpHeGxjaUE5SUVOb1lXOXpTR0Z1Wkd4bGNqdGNia05vWVc5elNHRnVaR3hsY2k1amFHRnZjMGhoYm1Sc1pYSlVjbWxuWjJWeVpXUkZkbVZ1ZEV0bGVTQTlJRndpWTI5dExtMXBZM0p2YzI5bWRDNXJhVzkwWVM1amFHRnZjMTlvWVc1a2JHVnlYM1J5YVdkblpYSmxaRndpTzF4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUVOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGlBZ1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNGdJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JOU1ZRZ1RHbGpaVzV6WlM1Y2JpQXFJRk5sWlNCTWFXTmxibk5sSUdsdUlIUm9aU0J3Y205cVpXTjBJSEp2YjNRZ1ptOXlJR3hwWTJWdWMyVWdhVzVtYjNKdFlYUnBiMjR1WEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2k5Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVRMmhoYjNOSVlXNWtiR1Z5VDNCMGFXOXVjMHRsZVNBOUlIWnZhV1FnTUR0Y2JtVjRjRzl5ZEhNdVEyaGhiM05JWVc1a2JHVnlUM0IwYVc5dWMwdGxlU0E5SUZ3aVEyaGhiM05JWVc1a2JHVnlUM0IwYVc5dWMwdGxlVndpTzF4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JtVjRjRzl5ZEhNdVZHVnNaVzFsZEhKNVNHRnVaR3hsY2lBOUlHVjRjRzl5ZEhNdVZHVnNaVzFsZEhKNVNHRnVaR3hsY2s5d2RHbHZibk5MWlhrZ1BTQjJiMmxrSURBN1hHNWxlSEJ2Y25SekxsUmxiR1Z0WlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6UzJWNUlEMGdYQ0pVWld4bGJXVjBjbmxJWVc1a2JHVnlUM0IwYVc5dWMwdGxlVndpTzF4dVkyeGhjM01nVkdWc1pXMWxkSEo1U0dGdVpHeGxjaUI3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvZEdWc1pXMWxkSEo1U0dGdVpHeGxjazl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBaV3hsYldWMGNubElZVzVrYkdWeVQzQjBhVzl1Y3lBOUlIUmxiR1Z0WlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6TzF4dUlDQWdJSDFjYmlBZ0lDQmxlR1ZqZFhSbEtIVnliQ3dnY21WeGRXVnpkRWx1YVhRc0lISmxjWFZsYzNSUGNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuUmxiR1Z0WlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6SUNZbUlIUm9hWE11ZEdWc1pXMWxkSEo1U0dGdVpHeGxjazl3ZEdsdmJuTXVkR1ZzWlcxbGRISjVRMjl1Wm1sbmRYSmhkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUmxiR1Z0WlhSeWVVaGhibVJzWlhKUGNIUnBiMjV6TG5SbGJHVnRaWFJ5ZVVOdmJtWnBaM1Z5WVhSdmNpaDFjbXdzSUhKbGNYVmxjM1JKYm1sMExDQnlaWEYxWlhOMFQzQjBhVzl1Y3l3Z2RHaHBjeTUwWld4bGJXVjBjbmxJWVc1a2JHVnlUM0IwYVc5dWN5NTBaV3hsYldWMGNubEpibVp2YldGMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoeVpYRjFaWE4wVDNCMGFXOXVjeUFtSmlCeVpYRjFaWE4wVDNCMGFXOXVjMXRsZUhCdmNuUnpMbFJsYkdWdFpYUnllVWhoYm1Sc1pYSlBjSFJwYjI1elMyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ4ZFdWemRFOXdkR2x2Ym5OYlpYaHdiM0owY3k1VVpXeGxiV1YwY25sSVlXNWtiR1Z5VDNCMGFXOXVjMHRsZVYwdWRHVnNaVzFsZEhKNVEyOXVabWxuZFhKaGRHOXlLSFZ5YkN3Z2NtVnhkV1Z6ZEVsdWFYUXNJSEpsY1hWbGMzUlBjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11Ym1WNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVVHeGxZWE5sSUhObGRDQjBhR1VnYm1WNGRDQnRhV1JrYkdWM1lYSmxJSFJ2SUdOdmJuUnBiblZsSUhSb1pTQnlaWEYxWlhOMFhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNWxlSFF1WlhobFkzVjBaU2gxY213c0lISmxjWFZsYzNSSmJtbDBMQ0J5WlhGMVpYTjBUM0IwYVc5dWN5azdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVVWld4bGJXVjBjbmxJWVc1a2JHVnlJRDBnVkdWc1pXMWxkSEo1U0dGdVpHeGxjanRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElFMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiaTRnSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdUlDQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlV1WEc0Z0tpQlRaV1VnVEdsalpXNXpaU0JwYmlCMGFHVWdjSEp2YW1WamRDQnliMjkwSUdadmNpQnNhV05sYm5ObElHbHVabTl5YldGMGFXOXVMbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiaThxS2x4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0JOYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0dUlDQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMaUFnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVJQ29nVTJWbElFeHBZMlZ1YzJVZ2FXNGdkR2hsSUhCeWIycGxZM1FnY205dmRDQm1iM0lnYkdsalpXNXpaU0JwYm1admNtMWhkR2x2Ymk1Y2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1WTI5dWMzUWdkSE5zYVdKZk1TQTlJSEpsY1hWcGNtVW9YQ0owYzJ4cFlsd2lLVHRjYmk4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5MGNtbHdiR1V0YzJ4aGMyZ3RjbVZtWlhKbGJtTmxLaTljYmk4dkx5QThjbVZtWlhKbGJtTmxJSEJoZEdnOUlGd2lMaTR2Wkc5dExuTm9hVzB1WkM1MGMxd2lJQzgrWEc1MGMyeHBZbDh4TGw5ZlpYaHdiM0owVTNSaGNpaHlaWEYxYVhKbEtGd2lMaTltWlhSamFGSmxjWFZsYzNSQlpHRndkR1Z5WENJcExDQmxlSEJ2Y25SektUdGNiblJ6YkdsaVh6RXVYMTlsZUhCdmNuUlRkR0Z5S0hKbGNYVnBjbVVvWENJdUwyaDBkSEJEYkdsbGJuUmNJaWtzSUdWNGNHOXlkSE1wTzF4dWRITnNhV0pmTVM1ZlgyVjRjRzl5ZEZOMFlYSW9jbVZ4ZFdseVpTaGNJaTR2Yldsa1pHeGxkMkZ5WlhNdmJXbGtaR3hsZDJGeVpWd2lLU3dnWlhod2IzSjBjeWs3WEc1MGMyeHBZbDh4TGw5ZlpYaHdiM0owVTNSaGNpaHlaWEYxYVhKbEtGd2lMaTl0YVdSa2JHVjNZWEpsY3k5amFHRnZjMGhoYm1Sc1pYSmNJaWtzSUdWNGNHOXlkSE1wTzF4dWRITnNhV0pmTVM1ZlgyVjRjRzl5ZEZOMFlYSW9jbVZ4ZFdseVpTaGNJaTR2Yldsa1pHeGxkMkZ5WlhNdlkzVnpkRzl0Um1WMFkyaElZVzVrYkdWeVhDSXBMQ0JsZUhCdmNuUnpLVHRjYm5SemJHbGlYekV1WDE5bGVIQnZjblJUZEdGeUtISmxjWFZwY21Vb1hDSXVMMjFwWkdSc1pYZGhjbVZ6TDNCaGNtRnRaWFJsY25OT1lXMWxSR1ZqYjJScGJtZElZVzVrYkdWeVhDSXBMQ0JsZUhCdmNuUnpLVHRjYm5SemJHbGlYekV1WDE5bGVIQnZjblJUZEdGeUtISmxjWFZwY21Vb1hDSXVMMjFwWkdSc1pYZGhjbVZ6TDNKbFpHbHlaV04wU0dGdVpHeGxjbHdpS1N3Z1pYaHdiM0owY3lrN1hHNTBjMnhwWWw4eExsOWZaWGh3YjNKMFUzUmhjaWh5WlhGMWFYSmxLRndpTGk5dGFXUmtiR1YzWVhKbGN5OXlaWFJ5ZVVoaGJtUnNaWEpjSWlrc0lHVjRjRzl5ZEhNcE8xeHVkSE5zYVdKZk1TNWZYMlY0Y0c5eWRGTjBZWElvY21WeGRXbHlaU2hjSWk0dmJXbGtaR3hsZDJGeVpYTXZkWE5sY2tGblpXNTBTR0Z1Wkd4bGNsd2lLU3dnWlhod2IzSjBjeWs3WEc1MGMyeHBZbDh4TGw5ZlpYaHdiM0owVTNSaGNpaHlaWEYxYVhKbEtGd2lMaTl0YVdSa2JHVjNZWEpsY3k5dmNIUnBiMjV6TDJOb1lXOXpTR0Z1Wkd4bGNrOXdkR2x2Ym5OY0lpa3NJR1Y0Y0c5eWRITXBPMXh1ZEhOc2FXSmZNUzVmWDJWNGNHOXlkRk4wWVhJb2NtVnhkV2x5WlNoY0lpNHZiV2xrWkd4bGQyRnlaWE12YjNCMGFXOXVjeTlqYUdGdmMxTjBjbUYwWldkNVhDSXBMQ0JsZUhCdmNuUnpLVHRjYm5SemJHbGlYekV1WDE5bGVIQnZjblJUZEdGeUtISmxjWFZwY21Vb1hDSXVMMjFwWkdSc1pYZGhjbVZ6TDI5d2RHbHZibk12Y0dGeVlXMWxkR1Z5YzA1aGJXVkVaV052WkdsdVowOXdkR2x2Ym5OY0lpa3NJR1Y0Y0c5eWRITXBPMXh1ZEhOc2FXSmZNUzVmWDJWNGNHOXlkRk4wWVhJb2NtVnhkV2x5WlNoY0lpNHZiV2xrWkd4bGQyRnlaWE12YjNCMGFXOXVjeTl5WldScGNtVmpkRWhoYm1Sc1pYSlBjSFJwYjI1elhDSXBMQ0JsZUhCdmNuUnpLVHRjYm5SemJHbGlYekV1WDE5bGVIQnZjblJUZEdGeUtISmxjWFZwY21Vb1hDSXVMMjFwWkdSc1pYZGhjbVZ6TDI5d2RHbHZibk12Y21WMGNubElZVzVrYkdWeVQzQjBhVzl1YzF3aUtTd2daWGh3YjNKMGN5azdYRzUwYzJ4cFlsOHhMbDlmWlhod2IzSjBVM1JoY2loeVpYRjFhWEpsS0Z3aUxpOXRhV1JrYkdWM1lYSmxjeTl2Y0hScGIyNXpMM1JsYkdWdFpYUnllVWhoYm1Sc1pYSlBjSFJwYjI1elhDSXBMQ0JsZUhCdmNuUnpLVHRjYm5SemJHbGlYekV1WDE5bGVIQnZjblJUZEdGeUtISmxjWFZwY21Vb1hDSXVMMjFwWkdSc1pYZGhjbVZ6TDI5d2RHbHZibk12ZFhObGNrRm5aVzUwU0dGdVpHeGxjazl3ZEdsdmJuTmNJaWtzSUdWNGNHOXlkSE1wTzF4dWRITnNhV0pmTVM1ZlgyVjRjRzl5ZEZOMFlYSW9jbVZ4ZFdseVpTaGNJaTR2Yldsa1pHeGxkMkZ5WlhNdmRHVnNaVzFsZEhKNVNHRnVaR3hsY2x3aUtTd2daWGh3YjNKMGN5azdYRzUwYzJ4cFlsOHhMbDlmWlhod2IzSjBVM1JoY2loeVpYRjFhWEpsS0Z3aUxpOXRhV1JrYkdWM1lYSmxjeTl0YVdSa2JHVjNZWEpsUm1GamRHOXllVndpS1N3Z1pYaHdiM0owY3lrN1hHNTBjMnhwWWw4eExsOWZaWGh3YjNKMFUzUmhjaWh5WlhGMWFYSmxLRndpTGk5MWRHbHNjeTlvWldGa1pYSnpWWFJwYkZ3aUtTd2daWGh3YjNKMGN5azdYRzUwYzJ4cFlsOHhMbDlmWlhod2IzSjBVM1JoY2loeVpYRjFhWEpsS0Z3aUxpOTFkR2xzY3k5bVpYUmphRVJsWm1sdWFYUnBiMjV6WENJcExDQmxlSEJ2Y25SektUdGNiaUlzSW1sdGNHOXlkQ0I3VW1WeGRXVnpkRTl3ZEdsdmJuMGdabkp2YlNBblFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxaFluTjBjbUZqZEdsdmJuTW5PMXh1WEc0dktpcGNiaUFxSUVOdmJtWnBaM1Z5WVhScGIyNGdabTl5SUhSb1pTQnlaWEYxWlhOMElITjFZMmdnWVhNZ2FHVmhaR1Z5Y3l3Z2NYVmxjbmtnY0dGeVlXMWxkR1Z5Y3l3Z1lXNWtJRzFwWkdSc1pYZGhjbVVnYjNCMGFXOXVjeTVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUVOb1pXTnJVbVZ4ZFdWemRFSjFhV3hrWlhKUWIzTjBVbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRnZTF4dUlDQWdJQzhxS2lCU1pYRjFaWE4wSUdobFlXUmxjbk1nS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdhR1ZoWkdWeWN6ODZJRkpsWTI5eVpEeHpkSEpwYm1jc0lITjBjbWx1WjF0ZFBpQjhJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQXZLaW9nVW1WeGRXVnpkQ0J2Y0hScGIyNXpJQ292WEc0Z0lDQWdjSFZpYkdsaklHOXdkR2x2Ym5NL09pQlNaWEYxWlhOMFQzQjBhVzl1VzEwZ2ZDQjFibVJsWm1sdVpXUTdYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UwRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU3dnVUdGeWMyVk9iMlJsTENCVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeWZTQm1jbTl0SUNkQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5YzdYRzVjYmk4cUtseHVJQ29nVFc5a2FXWjVVMlZoZEhOU1pYRjFaWE4wSUdGemMzVnRhVzVuSUhkbElHZGxkQ0IwYUdVZ2RYTmxja2xrSUdWMFl5Qm1jbTl0SUhSb1pTQnlaWEYxWlhOMFpYSWdhVzRnZEdobElHRjFkR2h2Y21sNllYUnBiMjRnYUdWaFpHVnlJSFJ2SUhaaGJHbGtZWFJsSUdsbUlHRnVJRndpWVdSdGFXNWNJaUJqWVc0Z1lXTjBkV0ZzYkhrZ1lXUmtJR3hwWTJWdWMyVnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdsalpXNXpaWE5mYzJWeWRtbGpaVWxrWDJKdlpIa2dhVzF3YkdWdFpXNTBjeUJCWkdScGRHbHZibUZzUkdGMFlVaHZiR1JsY2l3Z1VHRnljMkZpYkdVZ2UxeHVJQ0FnSUM4cUtpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMaUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdYMkZrWkdsMGFXOXVZV3hFWVhSaE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGp0Y2JpQWdJQ0F2S2lvZ1ZYTmxjaUJKUkhNZ2RHOGdZWE56YVdkdUlIUnZJSFJvWlNCc2FXTmxibk5sTGlBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnWDJGemMybG5iajg2SUhOMGNtbHVaMXRkSUh3Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUM4cUtpQlZjMlZ5SUVsRWN5QjBieUJ5WlcxdmRtVWdabkp2YlNCMGFHVWdiR2xqWlc1elpTNGdLaTljYmlBZ0lDQndjbWwyWVhSbElGOTFibUZ6YzJsbmJqODZJSE4wY21sdVoxdGRJSHdnZFc1a1pXWnBibVZrTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUdGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElHRmtaR2wwYVc5dVlXeEVZWFJoS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVdSa2FYUnBiMjVoYkVSaGRHRTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQmhaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVNCMllXeDFaUzRnVTNSdmNtVnpJR0ZrWkdsMGFXOXVZV3dnWkdGMFlTQnViM1FnWkdWelkzSnBZbVZrSUdsdUlIUm9aU0JQY0dWdVFWQkpJR1JsYzJOeWFYQjBhVzl1SUdadmRXNWtJSGRvWlc0Z1pHVnpaWEpwWVd4cGVtbHVaeTRnUTJGdUlHSmxJSFZ6WldRZ1ptOXlJSE5sY21saGJHbDZZWFJwYjI0Z1lYTWdkMlZzYkM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1Gc2RXVWdWbUZzZFdVZ2RHOGdjMlYwSUdadmNpQjBhR1VnUVdSa2FYUnBiMjVoYkVSaGRHRWdjSEp2Y0dWeWRIa3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGRDQmhaR1JwZEdsdmJtRnNSR0YwWVNoMllXeDFaVG9nVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFZ1BTQjJZV3gxWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUdGemMybG5iaUJ3Y205d1pYSjBlU0IyWVd4MVpTNGdWWE5sY2lCSlJITWdkRzhnWVhOemFXZHVJSFJ2SUhSb1pTQnNhV05sYm5ObExseHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdjM1J5YVc1blhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCaGMzTnBaMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloYzNOcFoyNDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQmhjM05wWjI0Z2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZWelpYSWdTVVJ6SUhSdklHRnpjMmxuYmlCMGJ5QjBhR1VnYkdsalpXNXpaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdZWE56YVdkdUlIQnliM0JsY25SNUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhRZ1lYTnphV2R1S0haaGJIVmxPaUJ6ZEhKcGJtZGJYU0I4SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aGMzTnBaMjRnUFNCMllXeDFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJNYVdObGJuTmxjMTl6WlhKMmFXTmxTV1JmWW05a2VTQmhibVFnYzJWMGN5QjBhR1VnWkdWbVlYVnNkQ0IyWVd4MVpYTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhaR1JwZEdsdmJtRnNSR0YwWVNBOUlIdDlPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUdSbGMyVnlhV0ZzYVhwaGRHbHZiaUJwYm1admNtMWhkR2x2YmlCbWIzSWdkR2hsSUdOMWNuSmxiblFnYlc5a1pXeGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkpsWTI5eVpEeHpkSEpwYm1jc0lDaHViMlJsT2lCUVlYSnpaVTV2WkdVcElEMCtJSFp2YVdRK1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZEVacFpXeGtSR1Z6WlhKcFlXeHBlbVZ5Y3lncElEb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z0tHNXZaR1U2SUZCaGNuTmxUbTlrWlNrZ1BUNGdkbTlwWkQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKaGMzTnBaMjVjSWpvZ2JpQTlQaUI3SUhSb2FYTXVZWE56YVdkdUlEMGdiaTVuWlhSRGIyeHNaV04wYVc5dVQyWlFjbWx0YVhScGRtVldZV3gxWlhNOGMzUnlhVzVuUGlncE95QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSjFibUZ6YzJsbmJsd2lPaUJ1SUQwK0lIc2dkR2hwY3k1MWJtRnpjMmxuYmlBOUlHNHVaMlYwUTI5c2JHVmpkR2x2Yms5bVVISnBiV2wwYVhabFZtRnNkV1Z6UEhOMGNtbHVaejRvS1RzZ2ZTeGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sY21saGJHbDZaWE1nYVc1bWIzSnRZWFJwYjI0Z2RHaGxJR04xY25KbGJuUWdiMkpxWldOMFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhkeWFYUmxjaUJUWlhKcFlXeHBlbUYwYVc5dUlIZHlhWFJsY2lCMGJ5QjFjMlVnZEc4Z2MyVnlhV0ZzYVhwbElIUm9hWE1nYlc5a1pXeGNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nYzJWeWFXRnNhWHBsS0hkeWFYUmxjam9nVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2lrZ09pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9JWGR5YVhSbGNpa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lkM0pwZEdWeUlHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhkeWFYUmxjaTUzY21sMFpVTnZiR3hsWTNScGIyNVBabEJ5YVcxcGRHbDJaVlpoYkhWbGN6eHpkSEpwYm1jK0tGd2lZWE56YVdkdVhDSXNJSFJvYVhNdVlYTnphV2R1S1R0Y2JpQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxRMjlzYkdWamRHbHZiazltVUhKcGJXbDBhWFpsVm1Gc2RXVnpQSE4wY21sdVp6NG9YQ0oxYm1GemMybG5ibHdpTENCMGFHbHpMblZ1WVhOemFXZHVLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFFXUmthWFJwYjI1aGJFUmhkR0VvZEdocGN5NWhaR1JwZEdsdmJtRnNSR0YwWVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCMWJtRnpjMmxuYmlCd2NtOXdaWEowZVNCMllXeDFaUzRnVlhObGNpQkpSSE1nZEc4Z2NtVnRiM1psSUdaeWIyMGdkR2hsSUd4cFkyVnVjMlV1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCemRISnBibWRjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJSFZ1WVhOemFXZHVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkVzVoYzNOcFoyNDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQjFibUZ6YzJsbmJpQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1ZYTmxjaUJKUkhNZ2RHOGdjbVZ0YjNabElHWnliMjBnZEdobElHeHBZMlZ1YzJVdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUhWdVlYTnphV2R1SUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnZFc1aGMzTnBaMjRvZG1Gc2RXVTZJSE4wY21sdVoxdGRJSHdnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNWdVlYTnphV2R1SUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUZCaGNuTmhZbXhsTENCUVlYSnpaVTV2WkdVc0lGTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSjlJR1p5YjIwZ0owQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlNCcGJYQnNaVzFsYm5SeklFRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU0I3WEc0Z0lDQWdMeW9xSUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZllXUmthWFJwYjI1aGJFUmhkR0U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtPMXh1SUNBZ0lDOHFLaUJVYUdVZ1pHVnpZM0pwY0hScGIyNGdjSEp2Y0dWeWRIa2dLaTljYmlBZ0lDQndjbWwyWVhSbElGOWtaWE5qY21sd2RHbHZiajg2SUhOMGNtbHVaeUI4SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0F2S2lvZ1ZHaGxJSEpsYzNWc2RDQndjbTl3WlhKMGVTQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gzSmxjM1ZzZEQ4NklHSnZiMnhsWVc0Z2ZDQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdZV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFFnWVdSa2FYUnBiMjVoYkVSaGRHRW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWhaR1JwZEdsdmJtRnNSR0YwWVR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUdGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCV1lXeDFaU0IwYnlCelpYUWdabTl5SUhSb1pTQkJaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLSFpoYkhWbE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUhaaGJIVmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzV6ZEdGdWRHbGhkR1Z6SUdFZ2JtVjNJRll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlNCaGJtUWdjMlYwY3lCMGFHVWdaR1ZtWVhWc2RDQjJZV3gxWlhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUh0OU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1pHVnpZM0pwY0hScGIyNGdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGUm9aU0JrWlhOamNtbHdkR2x2YmlCd2NtOXdaWEowZVZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUdFZ2MzUnlhVzVuWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0JrWlhOamNtbHdkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJSbGMyTnlhWEIwYVc5dU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1pHVnpZM0pwY0hScGIyNGdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGUm9aU0JrWlhOamNtbHdkR2x2YmlCd2NtOXdaWEowZVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQldZV3gxWlNCMGJ5QnpaWFFnWm05eUlIUm9aU0JrWlhOamNtbHdkR2x2YmlCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUdSbGMyTnlhWEIwYVc5dUtIWmhiSFZsT2lCemRISnBibWNnZkNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHVnpZM0pwY0hScGIyNGdQU0IyWVd4MVpUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGUm9aU0JrWlhObGNtbGhiR2w2WVhScGIyNGdhVzVtYjNKdFlYUnBiMjRnWm05eUlIUm9aU0JqZFhKeVpXNTBJRzF2WkdWc1hHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQlNaV052Y21ROGMzUnlhVzVuTENBb2JtOWtaVG9nVUdGeWMyVk9iMlJsS1NBOVBpQjJiMmxrUGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFJHYVdWc1pFUmxjMlZ5YVdGc2FYcGxjbk1vS1NBNklGSmxZMjl5WkR4emRISnBibWNzSUNodWIyUmxPaUJRWVhKelpVNXZaR1VwSUQwK0lIWnZhV1ErSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpWkdWelkzSnBjSFJwYjI1Y0lqb2diaUE5UGlCN0lIUm9hWE11WkdWelkzSnBjSFJwYjI0Z1BTQnVMbWRsZEZOMGNtbHVaMVpoYkhWbEtDazdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbkpsYzNWc2RGd2lPaUJ1SUQwK0lIc2dkR2hwY3k1eVpYTjFiSFFnUFNCdUxtZGxkRUp2YjJ4bFlXNVdZV3gxWlNncE95QjlMRnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMGN5QjBhR1VnY21WemRXeDBJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlVhR1VnY21WemRXeDBJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JpYjI5c1pXRnVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQnlaWE4xYkhRb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYTjFiSFE3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhSeklIUm9aU0J5WlhOMWJIUWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGUm9aU0J5WlhOMWJIUWdjSEp2Y0dWeWRIbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtRnNkV1VnVm1Gc2RXVWdkRzhnYzJWMElHWnZjaUIwYUdVZ2NtVnpkV3gwSUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnY21WemRXeDBLSFpoYkhWbE9pQmliMjlzWldGdUlId2dkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0psYzNWc2RDQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnlhV0ZzYVhwbGN5QnBibVp2Y20xaGRHbHZiaUIwYUdVZ1kzVnljbVZ1ZENCdlltcGxZM1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkM0pwZEdWeUlGTmxjbWxoYkdsNllYUnBiMjRnZDNKcGRHVnlJSFJ2SUhWelpTQjBieUJ6WlhKcFlXeHBlbVVnZEdocGN5QnRiMlJsYkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWEpwWVd4cGVtVW9kM0pwZEdWeU9pQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlLU0E2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0JwWmlnaGQzSnBkR1Z5S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKM2NtbDBaWElnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdkM0pwZEdWeUxuZHlhWFJsVTNSeWFXNW5WbUZzZFdVb1hDSmtaWE5qY21sd2RHbHZibHdpTENCMGFHbHpMbVJsYzJOeWFYQjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxRbTl2YkdWaGJsWmhiSFZsS0Z3aWNtVnpkV3gwWENJc0lIUm9hWE11Y21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFFXUmthWFJwYjI1aGJFUmhkR0VvZEdocGN5NWhaR1JwZEdsdmJtRnNSR0YwWVNrN1hHNGdJQ0FnZlR0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3UVdSa2FYUnBiMjVoYkVSaGRHRkliMnhrWlhJc0lGQmhjbk5oWW14bExDQlFZWEp6WlU1dlpHVXNJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEo5SUdaeWIyMGdKMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6Snp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlVnYVcxd2JHVnRaVzUwY3lCQlpHUnBkR2x2Ym1Gc1JHRjBZVWh2YkdSbGNpd2dVR0Z5YzJGaWJHVWdlMXh1SUNBZ0lDOHFLaUJUZEc5eVpYTWdZV1JrYVhScGIyNWhiQ0JrWVhSaElHNXZkQ0JrWlhOamNtbGlaV1FnYVc0Z2RHaGxJRTl3Wlc1QlVFa2daR1Z6WTNKcGNIUnBiMjRnWm05MWJtUWdkMmhsYmlCa1pYTmxjbWxoYkdsNmFXNW5MaUJEWVc0Z1ltVWdkWE5sWkNCbWIzSWdjMlZ5YVdGc2FYcGhkR2x2YmlCaGN5QjNaV3hzTGlBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnWDJGa1pHbDBhVzl1WVd4RVlYUmhPaUJTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBqdGNiaUFnSUNBdktpb2dRM1Z5Y21WdWRDQnVkVzFpWlhJZ2IyWWdZWFpoYVd4aFlteGxJSE5sWVhSeklIZG9hV05vSUdOaGJpQmlaU0JoYzNOcFoyNWxaQzRnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJRjl6WldGMGMwRjJZV2xzWVdKc1pUODZJRzUxYldKbGNpQjhJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQXZLaW9nVkc5MFlXd2diblZ0WW1WeUlHOW1JSE5sWVhSeklHRnpjMmxuYm1GaWJHVXVJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQmZjMlZoZEhOVWIzUmhiRDg2SUc1MWJXSmxjaUI4SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQmhaR1JwZEdsdmJtRnNSR0YwWVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwY3lCMGFHVWdZV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUVGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb2RtRnNkV1U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdkbUZzZFdVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJuTjBZVzUwYVdGMFpYTWdZU0J1WlhjZ1ZqRmhiSEJvWVVkbGRFeHBZMlZ1YzJWU1pYTndiMjV6WlNCaGJtUWdjMlYwY3lCMGFHVWdaR1ZtWVhWc2RDQjJZV3gxWlhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUh0OU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR1JsYzJWeWFXRnNhWHBoZEdsdmJpQnBibVp2Y20xaGRHbHZiaUJtYjNJZ2RHaGxJR04xY25KbGJuUWdiVzlrWld4Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGSmxZMjl5WkR4emRISnBibWNzSUNodWIyUmxPaUJRWVhKelpVNXZaR1VwSUQwK0lIWnZhV1ErWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkRVpwWld4a1JHVnpaWEpwWVd4cGVtVnljeWdwSURvZ1VtVmpiM0prUEhOMGNtbHVaeXdnS0c1dlpHVTZJRkJoY25ObFRtOWtaU2tnUFQ0Z2RtOXBaRDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p6WldGMGMwRjJZV2xzWVdKc1pWd2lPaUJ1SUQwK0lIc2dkR2hwY3k1elpXRjBjMEYyWVdsc1lXSnNaU0E5SUc0dVoyVjBUblZ0WW1WeVZtRnNkV1VvS1RzZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWMyVmhkSE5VYjNSaGJGd2lPaUJ1SUQwK0lIc2dkR2hwY3k1elpXRjBjMVJ2ZEdGc0lEMGdiaTVuWlhST2RXMWlaWEpXWVd4MVpTZ3BPeUI5TEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ2MyVmhkSE5CZG1GcGJHRmliR1VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRU4xY25KbGJuUWdiblZ0WW1WeUlHOW1JR0YyWVdsc1lXSnNaU0J6WldGMGN5QjNhR2xqYUNCallXNGdZbVVnWVhOemFXZHVaV1F1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCcGJuUmxaMlZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0J6WldGMGMwRjJZV2xzWVdKc1pTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTmxZWFJ6UVhaaGFXeGhZbXhsTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMGN5QjBhR1VnYzJWaGRITkJkbUZwYkdGaWJHVWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlFTjFjbkpsYm5RZ2JuVnRZbVZ5SUc5bUlHRjJZV2xzWVdKc1pTQnpaV0YwY3lCM2FHbGphQ0JqWVc0Z1ltVWdZWE56YVdkdVpXUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUZaaGJIVmxJSFJ2SUhObGRDQm1iM0lnZEdobElITmxZWFJ6UVhaaGFXeGhZbXhsSUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnYzJWaGRITkJkbUZwYkdGaWJHVW9kbUZzZFdVNklHNTFiV0psY2lCOElIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpaV0YwYzBGMllXbHNZV0pzWlNBOUlIWmhiSFZsTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMGN5QjBhR1VnYzJWaGRITlViM1JoYkNCd2NtOXdaWEowZVNCMllXeDFaUzRnVkc5MFlXd2diblZ0WW1WeUlHOW1JSE5sWVhSeklHRnpjMmxuYm1GaWJHVXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JwYm5SbFoyVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQnpaV0YwYzFSdmRHRnNLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMlZoZEhOVWIzUmhiRHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJSE5sWVhSelZHOTBZV3dnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRlJ2ZEdGc0lHNTFiV0psY2lCdlppQnpaV0YwY3lCaGMzTnBaMjVoWW14bExseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JXWVd4MVpTQjBieUJ6WlhRZ1ptOXlJSFJvWlNCelpXRjBjMVJ2ZEdGc0lIQnliM0JsY25SNUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhRZ2MyVmhkSE5VYjNSaGJDaDJZV3gxWlRvZ2JuVnRZbVZ5SUh3Z2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxZWFJ6Vkc5MFlXd2dQU0IyWVd4MVpUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxjbWxoYkdsNlpYTWdhVzVtYjNKdFlYUnBiMjRnZEdobElHTjFjbkpsYm5RZ2IySnFaV04wWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSGR5YVhSbGNpQlRaWEpwWVd4cGVtRjBhVzl1SUhkeWFYUmxjaUIwYnlCMWMyVWdkRzhnYzJWeWFXRnNhWHBsSUhSb2FYTWdiVzlrWld4Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlZ5YVdGc2FYcGxLSGR5YVhSbGNqb2dVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjaWtnT2lCMmIybGtJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYZHlhWFJsY2lrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWQzSnBkR1Z5SUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlU1MWJXSmxjbFpoYkhWbEtGd2ljMlZoZEhOQmRtRnBiR0ZpYkdWY0lpd2dkR2hwY3k1elpXRjBjMEYyWVdsc1lXSnNaU2s3WEc0Z0lDQWdJQ0FnSUhkeWFYUmxjaTUzY21sMFpVNTFiV0psY2xaaGJIVmxLRndpYzJWaGRITlViM1JoYkZ3aUxDQjBhR2x6TG5ObFlYUnpWRzkwWVd3cE8xeHVJQ0FnSUNBZ0lDQjNjbWwwWlhJdWQzSnBkR1ZCWkdScGRHbHZibUZzUkdGMFlTaDBhR2x6TG1Ga1pHbDBhVzl1WVd4RVlYUmhLVHRjYmlBZ0lDQjlPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIdFdNV0ZzY0doaFIyVjBVMlZoZEhOVmMyVnlVbVZ3Y21WelpXNTBZWFJwYjI1OUlHWnliMjBnSnk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUh0UVlYSnpaVTV2WkdWOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpWWXhZV3h3YUdGSFpYUlRaV0YwYzFWelpYSlNaWEJ5WlhObGJuUmhkR2x2YmtaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW9jR0Z5YzJWT2IyUmxPaUJRWVhKelpVNXZaR1VnZkNCMWJtUmxabWx1WldRcElEb2dWakZoYkhCb1lVZGxkRk5sWVhSelZYTmxjbEpsY0hKbGMyVnVkR0YwYVc5dUlIdGNiaUFnSUNCcFppZ2hjR0Z5YzJWT2IyUmxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhKelpVNXZaR1VnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGWXhZV3h3YUdGSFpYUlRaV0YwYzFWelpYSlNaWEJ5WlhObGJuUmhkR2x2YmlncE8xeHVmVnh1SWl3aWFXMXdiM0owSUh0amNtVmhkR1ZXTVdGc2NHaGhSMlYwVTJWaGRITlZjMlZ5VW1Wd2NtVnpaVzUwWVhScGIyNUdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsZlNCbWNtOXRJQ2N1TDJOeVpXRjBaVll4WVd4d2FHRkhaWFJUWldGMGMxVnpaWEpTWlhCeVpYTmxiblJoZEdsdmJrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VuTzF4dWFXMXdiM0owSUh0V01XRnNjR2hoUjJWMFUyVmhkSE5WYzJWeVVtVndjbVZ6Wlc1MFlYUnBiMjU5SUdaeWIyMGdKeTR2YVc1a1pYZ25PMXh1YVcxd2IzSjBJSHRCWkdScGRHbHZibUZzUkdGMFlVaHZiR1JsY2l3Z1VHRnljMkZpYkdVc0lGQmhjbk5sVG05a1pTd2dVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjbjBnWm5KdmJTQW5RRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk1uTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVmpGaGJIQm9ZVWRsZEZObFlYUnpVbVZ6Y0c5dWMyVWdhVzF3YkdWdFpXNTBjeUJCWkdScGRHbHZibUZzUkdGMFlVaHZiR1JsY2l3Z1VHRnljMkZpYkdVZ2UxeHVJQ0FnSUM4cUtpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMaUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdYMkZrWkdsMGFXOXVZV3hFWVhSaE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGp0Y2JpQWdJQ0F2S2lvZ1NuVnpkQ0IxYzJWeUlFbEVjeXdnZFc1c1pYTnpJRndpYVc1amJIVmtaVlZ6WlhKelhDSWdQU0IwY25WbExpQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gzVnpaWEp6UHpvZ1ZqRmhiSEJvWVVkbGRGTmxZWFJ6VlhObGNsSmxjSEpsYzJWdWRHRjBhVzl1VzEwZ2ZDQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdZV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFFnWVdSa2FYUnBiMjVoYkVSaGRHRW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWhaR1JwZEdsdmJtRnNSR0YwWVR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUdGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCV1lXeDFaU0IwYnlCelpYUWdabTl5SUhSb1pTQkJaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLSFpoYkhWbE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUhaaGJIVmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzV6ZEdGdWRHbGhkR1Z6SUdFZ2JtVjNJRll4WVd4d2FHRkhaWFJUWldGMGMxSmxjM0J2Ym5ObElHRnVaQ0J6WlhSeklIUm9aU0JrWldaaGRXeDBJSFpoYkhWbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoSUQwZ2UzMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnWkdWelpYSnBZV3hwZW1GMGFXOXVJR2x1Wm05eWJXRjBhVzl1SUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J0YjJSbGJGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z0tHNXZaR1U2SUZCaGNuTmxUbTlrWlNrZ1BUNGdkbTlwWkQ1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwUm1sbGJHUkVaWE5sY21saGJHbDZaWEp6S0NrZ09pQlNaV052Y21ROGMzUnlhVzVuTENBb2JtOWtaVG9nVUdGeWMyVk9iMlJsS1NBOVBpQjJiMmxrUGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5WelpYSnpYQ0k2SUc0Z1BUNGdleUIwYUdsekxuVnpaWEp6SUQwZ2JpNW5aWFJEYjJ4c1pXTjBhVzl1VDJaUFltcGxZM1JXWVd4MVpYTThWakZoYkhCb1lVZGxkRk5sWVhSelZYTmxjbEpsY0hKbGMyVnVkR0YwYVc5dVBpaGpjbVZoZEdWV01XRnNjR2hoUjJWMFUyVmhkSE5WYzJWeVVtVndjbVZ6Wlc1MFlYUnBiMjVHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbEtUc2dmU3hjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGNtbGhiR2w2WlhNZ2FXNW1iM0p0WVhScGIyNGdkR2hsSUdOMWNuSmxiblFnYjJKcVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIZHlhWFJsY2lCVFpYSnBZV3hwZW1GMGFXOXVJSGR5YVhSbGNpQjBieUIxYzJVZ2RHOGdjMlZ5YVdGc2FYcGxJSFJvYVhNZ2JXOWtaV3hjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVnlhV0ZzYVhwbEtIZHlhWFJsY2pvZ1UyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNpa2dPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lvSVhkeWFYUmxjaWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpZDNKcGRHVnlJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIZHlhWFJsY2k1M2NtbDBaVU52Ykd4bFkzUnBiMjVQWms5aWFtVmpkRlpoYkhWbGN6eFdNV0ZzY0doaFIyVjBVMlZoZEhOVmMyVnlVbVZ3Y21WelpXNTBZWFJwYjI0K0tGd2lkWE5sY25OY0lpd2dkR2hwY3k1MWMyVnljeWs3WEc0Z0lDQWdJQ0FnSUhkeWFYUmxjaTUzY21sMFpVRmtaR2wwYVc5dVlXeEVZWFJoS0hSb2FYTXVZV1JrYVhScGIyNWhiRVJoZEdFcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ2RYTmxjbk1nY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRXAxYzNRZ2RYTmxjaUJKUkhNc0lIVnViR1Z6Y3lCY0ltbHVZMngxWkdWVmMyVnljMXdpSUQwZ2RISjFaUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUhZeFlXeHdhR0ZIWlhSVFpXRjBjMVZ6WlhKU1pYQnlaWE5sYm5SaGRHbHZibHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdkWE5sY25Nb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MWMyVnljenRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJSFZ6WlhKeklIQnliM0JsY25SNUlIWmhiSFZsTGlCS2RYTjBJSFZ6WlhJZ1NVUnpMQ0IxYm14bGMzTWdYQ0pwYm1Oc2RXUmxWWE5sY25OY0lpQTlJSFJ5ZFdVdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUhWelpYSnpJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdkWE5sY25Nb2RtRnNkV1U2SUZZeFlXeHdhR0ZIWlhSVFpXRjBjMVZ6WlhKU1pYQnlaWE5sYm5SaGRHbHZibHRkSUh3Z2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVnpaWEp6SUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUZCaGNuTmhZbXhsTENCUVlYSnpaVTV2WkdVc0lGTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSjlJR1p5YjIwZ0owQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpKenRjYmx4dUx5b3FYRzRnS2lCM1pTQnRZWGtnY21WMGRYSnVJRzF2Y21VZ2RYTmxjbWx1Wm04c0lIUm9hWE1nYVhNZ1lTQnpkR0Z5ZEdsdVp5QndiMmx1ZEM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGWXhZV3h3YUdGSFpYUlRaV0YwYzFWelpYSlNaWEJ5WlhObGJuUmhkR2x2YmlCcGJYQnNaVzFsYm5SeklFRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU0I3WEc0Z0lDQWdMeW9xSUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZllXUmthWFJwYjI1aGJFUmhkR0U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtPMXh1SUNBZ0lDOHFLaUJVYUdVZ1lYTnphV2R1WldRZ2NISnZjR1Z5ZEhrZ0tpOWNiaUFnSUNCd2NtbDJZWFJsSUY5aGMzTnBaMjVsWkQ4NklHSnZiMnhsWVc0Z2ZDQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0x5b3FJRlJvWlNCa2FYTndiR0Y1VG1GdFpTQndjbTl3WlhKMGVTQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gyUnBjM0JzWVhsT1lXMWxQem9nYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrTzF4dUlDQWdJQzhxS2lCVWFHVWdhV1FnY0hKdmNHVnlkSGtnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJRjlwWkQ4NklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFJ6SUhSb1pTQmhaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVNCMllXeDFaUzRnVTNSdmNtVnpJR0ZrWkdsMGFXOXVZV3dnWkdGMFlTQnViM1FnWkdWelkzSnBZbVZrSUdsdUlIUm9aU0JQY0dWdVFWQkpJR1JsYzJOeWFYQjBhVzl1SUdadmRXNWtJSGRvWlc0Z1pHVnpaWEpwWVd4cGVtbHVaeTRnUTJGdUlHSmxJSFZ6WldRZ1ptOXlJSE5sY21saGJHbDZZWFJwYjI0Z1lYTWdkMlZzYkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0JoWkdScGRHbHZibUZzUkdGMFlTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMGN5QjBhR1VnWVdSa2FYUnBiMjVoYkVSaGRHRWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGTjBiM0psY3lCaFpHUnBkR2x2Ym1Gc0lHUmhkR0VnYm05MElHUmxjMk55YVdKbFpDQnBiaUIwYUdVZ1QzQmxia0ZRU1NCa1pYTmpjbWx3ZEdsdmJpQm1iM1Z1WkNCM2FHVnVJR1JsYzJWeWFXRnNhWHBwYm1jdUlFTmhiaUJpWlNCMWMyVmtJR1p2Y2lCelpYSnBZV3hwZW1GMGFXOXVJR0Z6SUhkbGJHd3VYRzRnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUZaaGJIVmxJSFJ2SUhObGRDQm1iM0lnZEdobElFRmtaR2wwYVc5dVlXeEVZWFJoSUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnWVdSa2FYUnBiMjVoYkVSaGRHRW9kbUZzZFdVNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFJ6SUhSb1pTQmhjM05wWjI1bFpDQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1ZHaGxJR0Z6YzJsbmJtVmtJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JpYjI5c1pXRnVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQmhjM05wWjI1bFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRnpjMmxuYm1Wa08xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1lYTnphV2R1WldRZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZSb1pTQmhjM05wWjI1bFpDQndjbTl3WlhKMGVWeHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JXWVd4MVpTQjBieUJ6WlhRZ1ptOXlJSFJvWlNCaGMzTnBaMjVsWkNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUdGemMybG5ibVZrS0haaGJIVmxPaUJpYjI5c1pXRnVJSHdnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGemMybG5ibVZrSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm5OMFlXNTBhV0YwWlhNZ1lTQnVaWGNnZGpGaGJIQm9ZVWRsZEZObFlYUnpWWE5sY2xKbGNISmxjMlZ1ZEdGMGFXOXVJR0Z1WkNCelpYUnpJSFJvWlNCa1pXWmhkV3gwSUhaaGJIVmxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdlMzA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhSeklIUm9aU0JrYVhOd2JHRjVUbUZ0WlNCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHUnBjM0JzWVhsT1lXMWxJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0J6ZEhKcGJtZGNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElHUnBjM0JzWVhsT1lXMWxLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaR2x6Y0d4aGVVNWhiV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhSeklIUm9aU0JrYVhOd2JHRjVUbUZ0WlNCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHUnBjM0JzWVhsT1lXMWxJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUZaaGJIVmxJSFJ2SUhObGRDQm1iM0lnZEdobElHUnBjM0JzWVhsT1lXMWxJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdaR2x6Y0d4aGVVNWhiV1VvZG1Gc2RXVTZJSE4wY21sdVp5QjhJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrYVhOd2JHRjVUbUZ0WlNBOUlIWmhiSFZsTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElHUmxjMlZ5YVdGc2FYcGhkR2x2YmlCcGJtWnZjbTFoZEdsdmJpQm1iM0lnZEdobElHTjFjbkpsYm5RZ2JXOWtaV3hjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZKbFkyOXlaRHh6ZEhKcGJtY3NJQ2h1YjJSbE9pQlFZWEp6WlU1dlpHVXBJRDArSUhadmFXUStYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRFWnBaV3hrUkdWelpYSnBZV3hwZW1WeWN5Z3BJRG9nVW1WamIzSmtQSE4wY21sdVp5d2dLRzV2WkdVNklGQmhjbk5sVG05a1pTa2dQVDRnZG05cFpENGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSmhjM05wWjI1bFpGd2lPaUJ1SUQwK0lIc2dkR2hwY3k1aGMzTnBaMjVsWkNBOUlHNHVaMlYwUW05dmJHVmhibFpoYkhWbEtDazdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbVJwYzNCc1lYbE9ZVzFsWENJNklHNGdQVDRnZXlCMGFHbHpMbVJwYzNCc1lYbE9ZVzFsSUQwZ2JpNW5aWFJUZEhKcGJtZFdZV3gxWlNncE95QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSnBaRndpT2lCdUlEMCtJSHNnZEdocGN5NXBaQ0E5SUc0dVoyVjBVM1J5YVc1blZtRnNkV1VvS1RzZ2ZTeGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJR2xrSUhCeWIzQmxjblI1SUhaaGJIVmxMaUJVYUdVZ2FXUWdjSEp2Y0dWeWRIbGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJSE4wY21sdVoxeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhRZ2FXUW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBaRHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR2xrSUhCeWIzQmxjblI1SUhaaGJIVmxMaUJVYUdVZ2FXUWdjSEp2Y0dWeWRIbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtRnNkV1VnVm1Gc2RXVWdkRzhnYzJWMElHWnZjaUIwYUdVZ2FXUWdjSEp2Y0dWeWRIa3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGRDQnBaQ2gyWVd4MVpUb2djM1J5YVc1bklId2dkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmxrSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhKcFlXeHBlbVZ6SUdsdVptOXliV0YwYVc5dUlIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM2NtbDBaWElnVTJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ2RHOGdkWE5sSUhSdklITmxjbWxoYkdsNlpTQjBhR2x6SUcxdlpHVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGNtbGhiR2w2WlNoM2NtbDBaWEk2SUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJcElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YzY21sMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbmR5YVhSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVkNiMjlzWldGdVZtRnNkV1VvWENKaGMzTnBaMjVsWkZ3aUxDQjBhR2x6TG1GemMybG5ibVZrS1R0Y2JpQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxVM1J5YVc1blZtRnNkV1VvWENKa2FYTndiR0Y1VG1GdFpWd2lMQ0IwYUdsekxtUnBjM0JzWVhsT1lXMWxLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFUzUnlhVzVuVm1Gc2RXVW9YQ0pwWkZ3aUxDQjBhR2x6TG1sa0tUdGNiaUFnSUNBZ0lDQWdkM0pwZEdWeUxuZHlhWFJsUVdSa2FYUnBiMjVoYkVSaGRHRW9kR2hwY3k1aFpHUnBkR2x2Ym1Gc1JHRjBZU2s3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUZCaGNuTmhZbXhsTENCUVlYSnpaVTV2WkdVc0lGTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSjlJR1p5YjIwZ0owQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRll4WVd4d2FHRk5iMlJwWm5sVFpXRjBjMUpsYzNCdmJuTmxJR2x0Y0d4bGJXVnVkSE1nUVdSa2FYUnBiMjVoYkVSaGRHRkliMnhrWlhJc0lGQmhjbk5oWW14bElIdGNiaUFnSUNBdktpb2dVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzRnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJRjloWkdScGRHbHZibUZzUkdGMFlUb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0N1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1lXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JXWVd4MVpTQjBieUJ6WlhRZ1ptOXlJSFJvWlNCQlpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR0ZrWkdsMGFXOXVZV3hFWVhSaEtIWmhiSFZsT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWkdScGRHbHZibUZzUkdGMFlTQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXpkR0Z1ZEdsaGRHVnpJR0VnYm1WM0lGWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObElHRnVaQ0J6WlhSeklIUm9aU0JrWldaaGRXeDBJSFpoYkhWbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoSUQwZ2UzMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnWkdWelpYSnBZV3hwZW1GMGFXOXVJR2x1Wm05eWJXRjBhVzl1SUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J0YjJSbGJGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z0tHNXZaR1U2SUZCaGNuTmxUbTlrWlNrZ1BUNGdkbTlwWkQ1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwUm1sbGJHUkVaWE5sY21saGJHbDZaWEp6S0NrZ09pQlNaV052Y21ROGMzUnlhVzVuTENBb2JtOWtaVG9nVUdGeWMyVk9iMlJsS1NBOVBpQjJiMmxrUGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWEpwWVd4cGVtVnpJR2x1Wm05eWJXRjBhVzl1SUhSb1pTQmpkWEp5Wlc1MElHOWlhbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzY21sMFpYSWdVMlZ5YVdGc2FYcGhkR2x2YmlCM2NtbDBaWElnZEc4Z2RYTmxJSFJ2SUhObGNtbGhiR2w2WlNCMGFHbHpJRzF2WkdWc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sY21saGJHbDZaU2gzY21sMFpYSTZJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWElwSURvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUtDRjNjbWwwWlhJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luZHlhWFJsY2lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWQlpHUnBkR2x2Ym1Gc1JHRjBZU2gwYUdsekxtRmtaR2wwYVc5dVlXeEVZWFJoS1R0Y2JpQWdJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRXTVdGc2NHaGhRMmhsWTJ0UVpYSnRhWE56YVc5dVVtVnpjRzl1YzJWOUlHWnliMjBnSnk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUh0UVlYSnpaVTV2WkdWOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpWWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaVVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVb2NHRnljMlZPYjJSbE9pQlFZWEp6WlU1dlpHVWdmQ0IxYm1SbFptbHVaV1FwSURvZ1ZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxJSHRjYmlBZ0lDQnBaaWdoY0dGeWMyVk9iMlJsS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKd1lYSnpaVTV2WkdVZ1kyRnVibTkwSUdKbElIVnVaR1ZtYVc1bFpGd2lLVHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlNncE8xeHVmVnh1SWl3aWFXMXdiM0owSUh0QlpHUnBkR2x2Ym1Gc1JHRjBZVWh2YkdSbGNpd2dRWEJwUlhKeWIzSXNJRkJoY25OaFlteGxMQ0JRWVhKelpVNXZaR1VzSUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhKOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR05zWVhOeklGWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaVFF3TVVWeWNtOXlJR1Y0ZEdWdVpITWdRWEJwUlhKeWIzSWdhVzF3YkdWdFpXNTBjeUJCWkdScGRHbHZibUZzUkdGMFlVaHZiR1JsY2l3Z1VHRnljMkZpYkdVZ2UxeHVJQ0FnSUM4cUtpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMaUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdYMkZrWkdsMGFXOXVZV3hFWVhSaE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQmhaR1JwZEdsdmJtRnNSR0YwWVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwY3lCMGFHVWdZV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUVGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb2RtRnNkV1U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdkbUZzZFdVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJuTjBZVzUwYVdGMFpYTWdZU0J1WlhjZ1ZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxOREF4UlhKeWIzSWdZVzVrSUhObGRITWdkR2hsSUdSbFptRjFiSFFnZG1Gc2RXVnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFZ1BTQjdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJvWlNCa1pYTmxjbWxoYkdsNllYUnBiMjRnYVc1bWIzSnRZWFJwYjI0Z1ptOXlJSFJvWlNCamRYSnlaVzUwSUcxdlpHVnNYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhSR2FXVnNaRVJsYzJWeWFXRnNhWHBsY25Nb0tTQTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lDaHViMlJsT2lCUVlYSnpaVTV2WkdVcElEMCtJSFp2YVdRK0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sY21saGJHbDZaWE1nYVc1bWIzSnRZWFJwYjI0Z2RHaGxJR04xY25KbGJuUWdiMkpxWldOMFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhkeWFYUmxjaUJUWlhKcFlXeHBlbUYwYVc5dUlIZHlhWFJsY2lCMGJ5QjFjMlVnZEc4Z2MyVnlhV0ZzYVhwbElIUm9hWE1nYlc5a1pXeGNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nYzJWeWFXRnNhWHBsS0hkeWFYUmxjam9nVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2lrZ09pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9JWGR5YVhSbGNpa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lkM0pwZEdWeUlHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhkeWFYUmxjaTUzY21sMFpVRmtaR2wwYVc5dVlXeEVZWFJoS0hSb2FYTXVZV1JrYVhScGIyNWhiRVJoZEdFcE8xeHVJQ0FnSUgwN1hHNTlYRzRpTENKcGJYQnZjblFnZTBGa1pHbDBhVzl1WVd4RVlYUmhTRzlzWkdWeUxDQkJjR2xGY25KdmNpd2dVR0Z5YzJGaWJHVXNJRkJoY25ObFRtOWtaU3dnVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY24wZ1puSnZiU0FuUUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5Nbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxOREF6UlhKeWIzSWdaWGgwWlc1a2N5QkJjR2xGY25KdmNpQnBiWEJzWlcxbGJuUnpJRUZrWkdsMGFXOXVZV3hFWVhSaFNHOXNaR1Z5TENCUVlYSnpZV0pzWlNCN1hHNGdJQ0FnTHlvcUlGTjBiM0psY3lCaFpHUnBkR2x2Ym1Gc0lHUmhkR0VnYm05MElHUmxjMk55YVdKbFpDQnBiaUIwYUdVZ1QzQmxia0ZRU1NCa1pYTmpjbWx3ZEdsdmJpQm1iM1Z1WkNCM2FHVnVJR1JsYzJWeWFXRnNhWHBwYm1jdUlFTmhiaUJpWlNCMWMyVmtJR1p2Y2lCelpYSnBZV3hwZW1GMGFXOXVJR0Z6SUhkbGJHd3VJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQmZZV1JrYVhScGIyNWhiRVJoZEdFNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUdGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElHRmtaR2wwYVc5dVlXeEVZWFJoS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVdSa2FYUnBiMjVoYkVSaGRHRTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQmhaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVNCMllXeDFaUzRnVTNSdmNtVnpJR0ZrWkdsMGFXOXVZV3dnWkdGMFlTQnViM1FnWkdWelkzSnBZbVZrSUdsdUlIUm9aU0JQY0dWdVFWQkpJR1JsYzJOeWFYQjBhVzl1SUdadmRXNWtJSGRvWlc0Z1pHVnpaWEpwWVd4cGVtbHVaeTRnUTJGdUlHSmxJSFZ6WldRZ1ptOXlJSE5sY21saGJHbDZZWFJwYjI0Z1lYTWdkMlZzYkM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1Gc2RXVWdWbUZzZFdVZ2RHOGdjMlYwSUdadmNpQjBhR1VnUVdSa2FYUnBiMjVoYkVSaGRHRWdjSEp2Y0dWeWRIa3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGRDQmhaR1JwZEdsdmJtRnNSR0YwWVNoMllXeDFaVG9nVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFZ1BTQjJZV3gxWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVsdWMzUmhiblJwWVhSbGN5QmhJRzVsZHlCV01XRnNjR2hoUTJobFkydFFaWEp0YVhOemFXOXVVbVZ6Y0c5dWMyVTBNRE5GY25KdmNpQmhibVFnYzJWMGN5QjBhR1VnWkdWbVlYVnNkQ0IyWVd4MVpYTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhaR1JwZEdsdmJtRnNSR0YwWVNBOUlIdDlPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUdSbGMyVnlhV0ZzYVhwaGRHbHZiaUJwYm1admNtMWhkR2x2YmlCbWIzSWdkR2hsSUdOMWNuSmxiblFnYlc5a1pXeGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkpsWTI5eVpEeHpkSEpwYm1jc0lDaHViMlJsT2lCUVlYSnpaVTV2WkdVcElEMCtJSFp2YVdRK1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZEVacFpXeGtSR1Z6WlhKcFlXeHBlbVZ5Y3lncElEb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z0tHNXZaR1U2SUZCaGNuTmxUbTlrWlNrZ1BUNGdkbTlwWkQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ5YVdGc2FYcGxjeUJwYm1admNtMWhkR2x2YmlCMGFHVWdZM1Z5Y21WdWRDQnZZbXBsWTNSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZDNKcGRHVnlJRk5sY21saGJHbDZZWFJwYjI0Z2QzSnBkR1Z5SUhSdklIVnpaU0IwYnlCelpYSnBZV3hwZW1VZ2RHaHBjeUJ0YjJSbGJGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhKcFlXeHBlbVVvZDNKcGRHVnlPaUJUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5S1NBNklIWnZhV1FnZTF4dUlDQWdJQ0FnSUNCcFppZ2hkM0pwZEdWeUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSjNjbWwwWlhJZ1kyRnVibTkwSUdKbElIVnVaR1ZtYVc1bFpGd2lLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFFXUmthWFJwYjI1aGJFUmhkR0VvZEdocGN5NWhaR1JwZEdsdmJtRnNSR0YwWVNrN1hHNGdJQ0FnZlR0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3UVdSa2FYUnBiMjVoYkVSaGRHRkliMnhrWlhJc0lFRndhVVZ5Y205eUxDQlFZWEp6WVdKc1pTd2dVR0Z5YzJWT2IyUmxMQ0JUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5ZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCV01XRnNjR2hoUTJobFkydFFaWEp0YVhOemFXOXVVbVZ6Y0c5dWMyVTFNREJGY25KdmNpQmxlSFJsYm1SeklFRndhVVZ5Y205eUlHbHRjR3hsYldWdWRITWdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUZCaGNuTmhZbXhsSUh0Y2JpQWdJQ0F2S2lvZ1UzUnZjbVZ6SUdGa1pHbDBhVzl1WVd3Z1pHRjBZU0J1YjNRZ1pHVnpZM0pwWW1Wa0lHbHVJSFJvWlNCUGNHVnVRVkJKSUdSbGMyTnlhWEIwYVc5dUlHWnZkVzVrSUhkb1pXNGdaR1Z6WlhKcFlXeHBlbWx1Wnk0Z1EyRnVJR0psSUhWelpXUWdabTl5SUhObGNtbGhiR2w2WVhScGIyNGdZWE1nZDJWc2JDNGdLaTljYmlBZ0lDQndjbWwyWVhSbElGOWhaR1JwZEdsdmJtRnNSR0YwWVRvZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajQ3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMGN5QjBhR1VnWVdSa2FYUnBiMjVoYkVSaGRHRWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGTjBiM0psY3lCaFpHUnBkR2x2Ym1Gc0lHUmhkR0VnYm05MElHUmxjMk55YVdKbFpDQnBiaUIwYUdVZ1QzQmxia0ZRU1NCa1pYTmpjbWx3ZEdsdmJpQm1iM1Z1WkNCM2FHVnVJR1JsYzJWeWFXRnNhWHBwYm1jdUlFTmhiaUJpWlNCMWMyVmtJR1p2Y2lCelpYSnBZV3hwZW1GMGFXOXVJR0Z6SUhkbGJHd3VYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhRZ1lXUmthWFJwYjI1aGJFUmhkR0VvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloWkdScGRHbHZibUZzUkdGMFlUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkSE1nZEdobElHRmtaR2wwYVc5dVlXeEVZWFJoSUhCeWIzQmxjblI1SUhaaGJIVmxMaUJUZEc5eVpYTWdZV1JrYVhScGIyNWhiQ0JrWVhSaElHNXZkQ0JrWlhOamNtbGlaV1FnYVc0Z2RHaGxJRTl3Wlc1QlVFa2daR1Z6WTNKcGNIUnBiMjRnWm05MWJtUWdkMmhsYmlCa1pYTmxjbWxoYkdsNmFXNW5MaUJEWVc0Z1ltVWdkWE5sWkNCbWIzSWdjMlZ5YVdGc2FYcGhkR2x2YmlCaGN5QjNaV3hzTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQldZV3gxWlNCMGJ5QnpaWFFnWm05eUlIUm9aU0JCWkdScGRHbHZibUZzUkdGMFlTQndjbTl3WlhKMGVTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nYzJWMElHRmtaR2wwYVc5dVlXeEVZWFJoS0haaGJIVmxPaUJTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhaR1JwZEdsdmJtRnNSR0YwWVNBOUlIWmhiSFZsTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1c1emRHRnVkR2xoZEdWeklHRWdibVYzSUZZeFlXeHdhR0ZEYUdWamExQmxjbTFwYzNOcGIyNVNaWE53YjI1elpUVXdNRVZ5Y205eUlHRnVaQ0J6WlhSeklIUm9aU0JrWldaaGRXeDBJSFpoYkhWbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoSUQwZ2UzMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnWkdWelpYSnBZV3hwZW1GMGFXOXVJR2x1Wm05eWJXRjBhVzl1SUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J0YjJSbGJGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z0tHNXZaR1U2SUZCaGNuTmxUbTlrWlNrZ1BUNGdkbTlwWkQ1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwUm1sbGJHUkVaWE5sY21saGJHbDZaWEp6S0NrZ09pQlNaV052Y21ROGMzUnlhVzVuTENBb2JtOWtaVG9nVUdGeWMyVk9iMlJsS1NBOVBpQjJiMmxrUGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWEpwWVd4cGVtVnpJR2x1Wm05eWJXRjBhVzl1SUhSb1pTQmpkWEp5Wlc1MElHOWlhbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzY21sMFpYSWdVMlZ5YVdGc2FYcGhkR2x2YmlCM2NtbDBaWElnZEc4Z2RYTmxJSFJ2SUhObGNtbGhiR2w2WlNCMGFHbHpJRzF2WkdWc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sY21saGJHbDZaU2gzY21sMFpYSTZJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWElwSURvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUtDRjNjbWwwWlhJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luZHlhWFJsY2lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWQlpHUnBkR2x2Ym1Gc1JHRjBZU2gwYUdsekxtRmtaR2wwYVc5dVlXeEVZWFJoS1R0Y2JpQWdJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRXTVdGc2NHaGhRMmhsWTJ0UVpYSnRhWE56YVc5dVVtVnpjRzl1YzJVME1ERkZjbkp2Y24wZ1puSnZiU0FuTGk5cGJtUmxlQ2M3WEc1cGJYQnZjblFnZTFCaGNuTmxUbTlrWlgwZ1puSnZiU0FuUUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5Nbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxOREF4UlhKeWIzSkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsS0hCaGNuTmxUbTlrWlRvZ1VHRnljMlZPYjJSbElId2dkVzVrWldacGJtVmtLU0E2SUZZeFlXeHdhR0ZEYUdWamExQmxjbTFwYzNOcGIyNVNaWE53YjI1elpUUXdNVVZ5Y205eUlIdGNiaUFnSUNCcFppZ2hjR0Z5YzJWT2IyUmxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhKelpVNXZaR1VnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaVFF3TVVWeWNtOXlLQ2s3WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMVl4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlRRd00wVnljbTl5ZlNCbWNtOXRJQ2N1TDJsdVpHVjRKenRjYm1sdGNHOXlkQ0I3VUdGeWMyVk9iMlJsZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWV01XRnNjR2hoUTJobFkydFFaWEp0YVhOemFXOXVVbVZ6Y0c5dWMyVTBNRE5GY25KdmNrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VvY0dGeWMyVk9iMlJsT2lCUVlYSnpaVTV2WkdVZ2ZDQjFibVJsWm1sdVpXUXBJRG9nVmpGaGJIQm9ZVU5vWldOclVHVnliV2x6YzJsdmJsSmxjM0J2Ym5ObE5EQXpSWEp5YjNJZ2UxeHVJQ0FnSUdsbUtDRndZWEp6WlU1dlpHVXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkJoY25ObFRtOWtaU0JqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1ZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxOREF6UlhKeWIzSW9LVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdWakZoYkhCb1lVTm9aV05yVUdWeWJXbHpjMmx2YmxKbGMzQnZibk5sTlRBd1JYSnliM0o5SUdaeWIyMGdKeTR2YVc1a1pYZ25PMXh1YVcxd2IzSjBJSHRRWVhKelpVNXZaR1Y5SUdaeWIyMGdKMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6Snp0Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnlaV0YwWlZZeFlXeHdhR0ZEYUdWamExQmxjbTFwYzNOcGIyNVNaWE53YjI1elpUVXdNRVZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU2h3WVhKelpVNXZaR1U2SUZCaGNuTmxUbTlrWlNCOElIVnVaR1ZtYVc1bFpDa2dPaUJXTVdGc2NHaGhRMmhsWTJ0UVpYSnRhWE56YVc5dVVtVnpjRzl1YzJVMU1EQkZjbkp2Y2lCN1hHNGdJQ0FnYVdZb0lYQmhjbk5sVG05a1pTa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2ljR0Z5YzJWT2IyUmxJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCV01XRnNjR2hoUTJobFkydFFaWEp0YVhOemFXOXVVbVZ6Y0c5dWMyVTFNREJGY25KdmNpZ3BPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIdFdNV0ZzY0doaFEyaGxZMnRRWlhKdGFYTnphVzl1VW1WeGRXVnpkQ3dnVmpGaGJIQm9ZVU5vWldOclVHVnliV2x6YzJsdmJsSmxjM0J2Ym5ObGZTQm1jbTl0SUNjdUxpOHVMaTl0YjJSbGJITW5PMXh1YVcxd2IzSjBJSHRqY21WaGRHVldNV0ZzY0doaFEyaGxZMnRRWlhKdGFYTnphVzl1VW1WemNHOXVjMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbGZTQm1jbTl0SUNjdUxpOHVMaTl0YjJSbGJITXZZM0psWVhSbFZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNjN1hHNXBiWEJ2Y25RZ2UwTm9aV05yVW1WeGRXVnpkRUoxYVd4a1pYSlFiM04wVW1WeGRXVnpkRU52Ym1acFozVnlZWFJwYjI1OUlHWnliMjBnSnk0dlkyaGxZMnRTWlhGMVpYTjBRblZwYkdSbGNsQnZjM1JTWlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmljN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlZZeFlXeHdhR0ZEYUdWamExQmxjbTFwYzNOcGIyNVNaWE53YjI1elpUUXdNVVZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaWDBnWm5KdmJTQW5MaTlqY21WaGRHVldNV0ZzY0doaFEyaGxZMnRRWlhKdGFYTnphVzl1VW1WemNHOXVjMlUwTURGRmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVbk8xeHVhVzF3YjNKMElIdGpjbVZoZEdWV01XRnNjR2hoUTJobFkydFFaWEp0YVhOemFXOXVVbVZ6Y0c5dWMyVTBNRE5GY25KdmNrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1Y5SUdaeWIyMGdKeTR2WTNKbFlYUmxWakZoYkhCb1lVTm9aV05yVUdWeWJXbHpjMmx2YmxKbGMzQnZibk5sTkRBelJYSnliM0pHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbEp6dGNibWx0Y0c5eWRDQjdZM0psWVhSbFZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxOVEF3UlhKeWIzSkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsZlNCbWNtOXRJQ2N1TDJOeVpXRjBaVll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlRVd01FVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTYzdYRzVwYlhCdmNuUWdlMVl4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlRRd01VVnljbTl5TENCV01XRnNjR2hoUTJobFkydFFaWEp0YVhOemFXOXVVbVZ6Y0c5dWMyVTBNRE5GY25KdmNpd2dWakZoYkhCb1lVTm9aV05yVUdWeWJXbHpjMmx2YmxKbGMzQnZibk5sTlRBd1JYSnliM0o5SUdaeWIyMGdKeTR2YVc1a1pYZ25PMXh1YVcxd2IzSjBJSHRuWlhSUVlYUm9VR0Z5WVcxbGRHVnljeXdnU0hSMGNFMWxkR2h2WkN3Z1VHRnljMkZpYkdVc0lGQmhjbk5oWW14bFJtRmpkRzl5ZVN3Z1VtVnhkV1Z6ZEVGa1lYQjBaWElzSUZKbGNYVmxjM1JKYm1admNtMWhkR2x2Yml3Z1VtVnhkV1Z6ZEU5d2RHbHZiaXdnVW1WemNHOXVjMlZJWVc1a2JHVnlmU0JtY205dElDZEFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeWM3WEc1Y2JpOHFLbHh1SUNvZ1FuVnBiR1J6SUdGdVpDQmxlR1ZqZFhSbGN5QnlaWEYxWlhOMGN5Qm1iM0lnYjNCbGNtRjBhVzl1Y3lCMWJtUmxjaUF2ZGpGaGJIQm9ZUzlqYUdWamExeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdRMmhsWTJ0U1pYRjFaWE4wUW5WcGJHUmxjaUI3WEc0Z0lDQWdMeW9xSUZCaGRHZ2djR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSEpsY1hWbGMzUWdLaTljYmlBZ0lDQndjbWwyWVhSbElIQmhkR2hRWVhKaGJXVjBaWEp6T2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQanRjYmlBZ0lDQXZLaW9nVkdobElISmxjWFZsYzNRZ1lXUmhjSFJsY2lCMGJ5QjFjMlVnZEc4Z1pYaGxZM1YwWlNCMGFHVWdjbVZ4ZFdWemRITXVJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQnlaWEYxWlhOMFFXUmhjSFJsY2pvZ1VtVnhkV1Z6ZEVGa1lYQjBaWEk3WEc0Z0lDQWdMeW9xSUZWeWJDQjBaVzF3YkdGMFpTQjBieUIxYzJVZ2RHOGdZblZwYkdRZ2RHaGxJRlZTVENCbWIzSWdkR2hsSUdOMWNuSmxiblFnY21WeGRXVnpkQ0JpZFdsc1pHVnlJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQjFjbXhVWlcxd2JHRjBaVG9nYzNSeWFXNW5PMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJEYUdWamExSmxjWFZsYzNSQ2RXbHNaR1Z5SUdGdVpDQnpaWFJ6SUhSb1pTQmtaV1poZFd4MElIWmhiSFZsY3k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnY0dGMGFGQmhjbUZ0WlhSbGNuTWdWR2hsSUhKaGR5QjFjbXdnYjNJZ2RHaGxJRlZ5YkNCMFpXMXdiR0YwWlNCd1lYSmhiV1YwWlhKeklHWnZjaUIwYUdVZ2NtVnhkV1Z6ZEM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnY21WeGRXVnpkRUZrWVhCMFpYSWdWR2hsSUhKbGNYVmxjM1FnWVdSaGNIUmxjaUIwYnlCMWMyVWdkRzhnWlhobFkzVjBaU0IwYUdVZ2NtVnhkV1Z6ZEhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0hCaGRHaFFZWEpoYldWMFpYSnpPaUJTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBpQjhJSE4wY21sdVp5QjhJSFZ1WkdWbWFXNWxaQ3dnY21WeGRXVnpkRUZrWVhCMFpYSTZJRkpsY1hWbGMzUkJaR0Z3ZEdWeUtTQjdYRzRnSUNBZ0lDQWdJR2xtS0NGd1lYUm9VR0Z5WVcxbGRHVnljeWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY0dGMGFGQmhjbUZ0WlhSbGNuTWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2FXWW9JWEpsY1hWbGMzUkJaR0Z3ZEdWeUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSnlaWEYxWlhOMFFXUmhjSFJsY2lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVnliRlJsYlhCc1lYUmxJRDBnWENKN0sySmhjMlYxY214OUwzWXhZV3h3YUdFdlkyaGxZMnRjSWp0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZFhKc1ZIQnNVR0Z5WVcxeklEMGdaMlYwVUdGMGFGQmhjbUZ0WlhSbGNuTW9jR0YwYUZCaGNtRnRaWFJsY25NcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGRHaFFZWEpoYldWMFpYSnpJRDBnZFhKc1ZIQnNVR0Z5WVcxek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGNYVmxjM1JCWkdGd2RHVnlJRDBnY21WeGRXVnpkRUZrWVhCMFpYSTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRhR1ZqYTFCbGNtMXBjM05wYjI0Z1pXNWtjRzlwYm5RZ2FYTWdkWE5sWkNCaWVTQjBhR1VnWTJ4cFpXNTBjeUIwYnlCa1pYUmxjbTFwYm1VZ2FXWWdkR2hsSUdkcGRtVnVJRndpYzNWaWFtVmpkRndpSUdoaGN5QjBhR1VnWjJsMlpXNGdjR1Z5YldsemMybHZiaUJjSWs5d1pYSmhkR2x2Ymx3aUlHOXVJR0VnWjJsMlpXNGdYQ0pTWlhOdmRYSmpaVndpWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR0p2WkhrZ1ZHaGxJSEpsY1hWbGMzUWdZbTlrZVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCRGIyNW1hV2QxY21GMGFXOXVJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRDQnpkV05vSUdGeklHaGxZV1JsY25Nc0lIRjFaWEo1SUhCaGNtRnRaWFJsY25Nc0lHRnVaQ0J0YVdSa2JHVjNZWEpsSUc5d2RHbHZibk11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpQlNaWE53YjI1elpTQm9ZVzVrYkdWeUlIUnZJSFZ6WlNCcGJpQndiR0ZqWlNCdlppQjBhR1VnWkdWbVlYVnNkQ0J5WlhOd2IyNXpaU0JvWVc1a2JHbHVaeUJ3Y205MmFXUmxaQ0JpZVNCMGFHVWdZMjl5WlNCelpYSjJhV05sWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCUWNtOXRhWE5sSUc5bUlGWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCd2IzTjBLR0p2WkhrNklGWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhGMVpYTjBJSHdnZFc1a1pXWnBibVZrTENCeVpYRjFaWE4wUTI5dVptbG5kWEpoZEdsdmJqODZJRU5vWldOclVtVnhkV1Z6ZEVKMWFXeGtaWEpRYjNOMFVtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNGdmQ0IxYm1SbFptbHVaV1FzSUhKbGMzQnZibk5sU0dGdVpHeGxjajg2SUZKbGMzQnZibk5sU0dGdVpHeGxjaUI4SUhWdVpHVm1hVzVsWkNrZ09pQlFjbTl0YVhObFBGWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaU0I4SUhWdVpHVm1hVzVsWkQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaWdoWW05a2VTa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lZbTlrZVNCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaWEYxWlhOMFNXNW1ieUE5SUhSb2FYTXVkRzlRYjNOMFVtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTd2djbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjVjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWlhKeWIzSk5ZWEJ3YVc1bk9pQlNaV052Y21ROGMzUnlhVzVuTENCUVlYSnpZV0pzWlVaaFkzUnZjbms4VUdGeWMyRmliR1UrUGlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aU5EQXhYQ0k2SUdOeVpXRjBaVll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlRRd01VVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aU5EQXpYQ0k2SUdOeVpXRjBaVll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlRRd00wVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aU5UQXdYQ0k2SUdOeVpXRjBaVll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlRVd01FVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTeGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVnhkV1Z6ZEVGa1lYQjBaWEkvTG5ObGJtUkJjM2x1WXp4V01XRnNjR2hoUTJobFkydFFaWEp0YVhOemFXOXVVbVZ6Y0c5dWMyVStLSEpsY1hWbGMzUkpibVp2TENCamNtVmhkR1ZXTVdGc2NHaGhRMmhsWTJ0UVpYSnRhWE56YVc5dVVtVnpjRzl1YzJWR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxMQ0J5WlhOd2IyNXpaVWhoYm1Sc1pYSXNJR1Z5Y205eVRXRndjR2x1WnlrZ1B6OGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZHlaWEYxWlhOMElHRmtZWEIwWlhJZ2FYTWdiblZzYkNjcEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTm9aV05yVUdWeWJXbHpjMmx2YmlCbGJtUndiMmx1ZENCcGN5QjFjMlZrSUdKNUlIUm9aU0JqYkdsbGJuUnpJSFJ2SUdSbGRHVnliV2x1WlNCcFppQjBhR1VnWjJsMlpXNGdYQ0p6ZFdKcVpXTjBYQ0lnYUdGeklIUm9aU0JuYVhabGJpQndaWEp0YVhOemFXOXVJRndpVDNCbGNtRjBhVzl1WENJZ2IyNGdZU0JuYVhabGJpQmNJbEpsYzI5MWNtTmxYQ0pjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZbTlrZVNCVWFHVWdjbVZ4ZFdWemRDQmliMlI1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1SUVOdmJtWnBaM1Z5WVhScGIyNGdabTl5SUhSb1pTQnlaWEYxWlhOMElITjFZMmdnWVhNZ2FHVmhaR1Z5Y3l3Z2NYVmxjbmtnY0dGeVlXMWxkR1Z5Y3l3Z1lXNWtJRzFwWkdSc1pYZGhjbVVnYjNCMGFXOXVjeTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZKbGNYVmxjM1JKYm1admNtMWhkR2x2Ymx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QjBiMUJ2YzNSU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0b1ltOWtlVG9nVmpGaGJIQm9ZVU5vWldOclVHVnliV2x6YzJsdmJsSmxjWFZsYzNRZ2ZDQjFibVJsWm1sdVpXUXNJSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1UHpvZ1EyaGxZMnRTWlhGMVpYTjBRblZwYkdSbGNsQnZjM1JTWlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCOElIVnVaR1ZtYVc1bFpDa2dPaUJTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjRnZTF4dUlDQWdJQ0FnSUNCcFppZ2hZbTlrZVNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVltOWtlU0JqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYRjFaWE4wU1c1bWJ5QTlJRzVsZHlCU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0b0tUdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFbHVabTh1ZFhKc1ZHVnRjR3hoZEdVZ1BTQjBhR2x6TG5WeWJGUmxiWEJzWVhSbE8xeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFNXNW1ieTV3WVhSb1VHRnlZVzFsZEdWeWN5QTlJSFJvYVhNdWNHRjBhRkJoY21GdFpYUmxjbk03WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JKYm1adkxtaDBkSEJOWlhSb2IyUWdQU0JJZEhSd1RXVjBhRzlrTGxCUFUxUTdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1obFlXUmxjbk5iWENKQlkyTmxjSFJjSWwwZ1BTQmJYQ0poY0hCc2FXTmhkR2x2Ymk5cWMyOXVYQ0pkTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1Ga1pGSmxjWFZsYzNSSVpXRmtaWEp6S0hKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUxtaGxZV1JsY25NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dVlXUmtVbVZ4ZFdWemRFOXdkR2x2Ym5Nb2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNHViM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dWMyVjBRMjl1ZEdWdWRFWnliMjFRWVhKellXSnNaU2gwYUdsekxuSmxjWFZsYzNSQlpHRndkR1Z5TENCY0ltRndjR3hwWTJGMGFXOXVMMnB6YjI1Y0lpd2dZbTlrZVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYRjFaWE4wU1c1bWJ6dGNiaUFnSUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUh0V01XRnNjR2hoUjJWMFRHbGpaVzV6WlZKbGMzQnZibk5sZlNCbWNtOXRJQ2N1TDJsdVpHVjRKenRjYm1sdGNHOXlkQ0I3VUdGeWMyVk9iMlJsZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWV01XRnNjR2hoUjJWMFRHbGpaVzV6WlZKbGMzQnZibk5sUm5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTaHdZWEp6WlU1dlpHVTZJRkJoY25ObFRtOWtaU0I4SUhWdVpHVm1hVzVsWkNrZ09pQldNV0ZzY0doaFIyVjBUR2xqWlc1elpWSmxjM0J2Ym5ObElIdGNiaUFnSUNCcFppZ2hjR0Z5YzJWT2IyUmxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhKelpVNXZaR1VnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGWXhZV3h3YUdGSFpYUk1hV05sYm5ObFVtVnpjRzl1YzJVb0tUdGNibjFjYmlJc0ltbHRjRzl5ZENCN1ZqRmhiSEJvWVUxdlpHbG1lVk5sWVhSelVtVnpjRzl1YzJWOUlHWnliMjBnSnk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUh0UVlYSnpaVTV2WkdWOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpWWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObFJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU2h3WVhKelpVNXZaR1U2SUZCaGNuTmxUbTlrWlNCOElIVnVaR1ZtYVc1bFpDa2dPaUJXTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaU0I3WEc0Z0lDQWdhV1lvSVhCaGNuTmxUbTlrWlNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWNHRnljMlZPYjJSbElHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJXTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaU2dwTzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRCWkdScGRHbHZibUZzUkdGMFlVaHZiR1JsY2l3Z1FYQnBSWEp5YjNJc0lGQmhjbk5oWW14bExDQlFZWEp6WlU1dlpHVXNJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEo5SUdaeWIyMGdKMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6Snp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUwTURGRmNuSnZjaUJsZUhSbGJtUnpJRUZ3YVVWeWNtOXlJR2x0Y0d4bGJXVnVkSE1nUVdSa2FYUnBiMjVoYkVSaGRHRkliMnhrWlhJc0lGQmhjbk5oWW14bElIdGNiaUFnSUNBdktpb2dVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzRnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJRjloWkdScGRHbHZibUZzUkdGMFlUb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0N1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1lXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JXWVd4MVpTQjBieUJ6WlhRZ1ptOXlJSFJvWlNCQlpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR0ZrWkdsMGFXOXVZV3hFWVhSaEtIWmhiSFZsT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWkdScGRHbHZibUZzUkdGMFlTQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXpkR0Z1ZEdsaGRHVnpJR0VnYm1WM0lGWXhZV3h3YUdGSFpYUk1hV05sYm5ObFVtVnpjRzl1YzJVME1ERkZjbkp2Y2lCaGJtUWdjMlYwY3lCMGFHVWdaR1ZtWVhWc2RDQjJZV3gxWlhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUh0OU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR1JsYzJWeWFXRnNhWHBoZEdsdmJpQnBibVp2Y20xaGRHbHZiaUJtYjNJZ2RHaGxJR04xY25KbGJuUWdiVzlrWld4Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGSmxZMjl5WkR4emRISnBibWNzSUNodWIyUmxPaUJRWVhKelpVNXZaR1VwSUQwK0lIWnZhV1ErWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkRVpwWld4a1JHVnpaWEpwWVd4cGVtVnljeWdwSURvZ1VtVmpiM0prUEhOMGNtbHVaeXdnS0c1dlpHVTZJRkJoY25ObFRtOWtaU2tnUFQ0Z2RtOXBaRDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnlhV0ZzYVhwbGN5QnBibVp2Y20xaGRHbHZiaUIwYUdVZ1kzVnljbVZ1ZENCdlltcGxZM1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkM0pwZEdWeUlGTmxjbWxoYkdsNllYUnBiMjRnZDNKcGRHVnlJSFJ2SUhWelpTQjBieUJ6WlhKcFlXeHBlbVVnZEdocGN5QnRiMlJsYkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWEpwWVd4cGVtVW9kM0pwZEdWeU9pQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlLU0E2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0JwWmlnaGQzSnBkR1Z5S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKM2NtbDBaWElnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdkM0pwZEdWeUxuZHlhWFJsUVdSa2FYUnBiMjVoYkVSaGRHRW9kR2hwY3k1aFpHUnBkR2x2Ym1Gc1JHRjBZU2s3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUVGd2FVVnljbTl5TENCUVlYSnpZV0pzWlN3Z1VHRnljMlZPYjJSbExDQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlmU0JtY205dElDZEFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJXTVdGc2NHaGhSMlYwVEdsalpXNXpaVkpsYzNCdmJuTmxOREF6UlhKeWIzSWdaWGgwWlc1a2N5QkJjR2xGY25KdmNpQnBiWEJzWlcxbGJuUnpJRUZrWkdsMGFXOXVZV3hFWVhSaFNHOXNaR1Z5TENCUVlYSnpZV0pzWlNCN1hHNGdJQ0FnTHlvcUlGTjBiM0psY3lCaFpHUnBkR2x2Ym1Gc0lHUmhkR0VnYm05MElHUmxjMk55YVdKbFpDQnBiaUIwYUdVZ1QzQmxia0ZRU1NCa1pYTmpjbWx3ZEdsdmJpQm1iM1Z1WkNCM2FHVnVJR1JsYzJWeWFXRnNhWHBwYm1jdUlFTmhiaUJpWlNCMWMyVmtJR1p2Y2lCelpYSnBZV3hwZW1GMGFXOXVJR0Z6SUhkbGJHd3VJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQmZZV1JrYVhScGIyNWhiRVJoZEdFNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUdGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElHRmtaR2wwYVc5dVlXeEVZWFJoS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVdSa2FYUnBiMjVoYkVSaGRHRTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQmhaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVNCMllXeDFaUzRnVTNSdmNtVnpJR0ZrWkdsMGFXOXVZV3dnWkdGMFlTQnViM1FnWkdWelkzSnBZbVZrSUdsdUlIUm9aU0JQY0dWdVFWQkpJR1JsYzJOeWFYQjBhVzl1SUdadmRXNWtJSGRvWlc0Z1pHVnpaWEpwWVd4cGVtbHVaeTRnUTJGdUlHSmxJSFZ6WldRZ1ptOXlJSE5sY21saGJHbDZZWFJwYjI0Z1lYTWdkMlZzYkM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1Gc2RXVWdWbUZzZFdVZ2RHOGdjMlYwSUdadmNpQjBhR1VnUVdSa2FYUnBiMjVoYkVSaGRHRWdjSEp2Y0dWeWRIa3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGRDQmhaR1JwZEdsdmJtRnNSR0YwWVNoMllXeDFaVG9nVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFZ1BTQjJZV3gxWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVsdWMzUmhiblJwWVhSbGN5QmhJRzVsZHlCV01XRnNjR2hoUjJWMFRHbGpaVzV6WlZKbGMzQnZibk5sTkRBelJYSnliM0lnWVc1a0lITmxkSE1nZEdobElHUmxabUYxYkhRZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdSa2FYUnBiMjVoYkVSaGRHRWdQU0I3ZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQmtaWE5sY21saGJHbDZZWFJwYjI0Z2FXNW1iM0p0WVhScGIyNGdabTl5SUhSb1pTQmpkWEp5Wlc1MElHMXZaR1ZzWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pXTnZjbVE4YzNSeWFXNW5MQ0FvYm05a1pUb2dVR0Z5YzJWT2IyUmxLU0E5UGlCMmIybGtQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUkdhV1ZzWkVSbGMyVnlhV0ZzYVhwbGNuTW9LU0E2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJQ2h1YjJSbE9pQlFZWEp6WlU1dlpHVXBJRDArSUhadmFXUStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGNtbGhiR2w2WlhNZ2FXNW1iM0p0WVhScGIyNGdkR2hsSUdOMWNuSmxiblFnYjJKcVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIZHlhWFJsY2lCVFpYSnBZV3hwZW1GMGFXOXVJSGR5YVhSbGNpQjBieUIxYzJVZ2RHOGdjMlZ5YVdGc2FYcGxJSFJvYVhNZ2JXOWtaV3hjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVnlhV0ZzYVhwbEtIZHlhWFJsY2pvZ1UyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNpa2dPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lvSVhkeWFYUmxjaWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpZDNKcGRHVnlJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIZHlhWFJsY2k1M2NtbDBaVUZrWkdsMGFXOXVZV3hFWVhSaEtIUm9hWE11WVdSa2FYUnBiMjVoYkVSaGRHRXBPMXh1SUNBZ0lIMDdYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UwRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JCY0dsRmNuSnZjaXdnVUdGeWMyRmliR1VzSUZCaGNuTmxUbTlrWlN3Z1UyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNuMGdabkp2YlNBblFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxaFluTjBjbUZqZEdsdmJuTW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdWakZoYkhCb1lVZGxkRXhwWTJWdWMyVlNaWE53YjI1elpUVXdNRVZ5Y205eUlHVjRkR1Z1WkhNZ1FYQnBSWEp5YjNJZ2FXMXdiR1Z0Wlc1MGN5QkJaR1JwZEdsdmJtRnNSR0YwWVVodmJHUmxjaXdnVUdGeWMyRmliR1VnZTF4dUlDQWdJQzhxS2lCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xpQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gyRmtaR2wwYVc5dVlXeEVZWFJoT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQanRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhSeklIUm9aU0JoWkdScGRHbHZibUZzUkdGMFlTQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1UzUnZjbVZ6SUdGa1pHbDBhVzl1WVd3Z1pHRjBZU0J1YjNRZ1pHVnpZM0pwWW1Wa0lHbHVJSFJvWlNCUGNHVnVRVkJKSUdSbGMyTnlhWEIwYVc5dUlHWnZkVzVrSUhkb1pXNGdaR1Z6WlhKcFlXeHBlbWx1Wnk0Z1EyRnVJR0psSUhWelpXUWdabTl5SUhObGNtbGhiR2w2WVhScGIyNGdZWE1nZDJWc2JDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCaFpHUnBkR2x2Ym1Gc1JHRjBZU2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1lXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpoYkhWbElGWmhiSFZsSUhSdklITmxkQ0JtYjNJZ2RHaGxJRUZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhRZ1lXUmthWFJwYjI1aGJFUmhkR0VvZG1Gc2RXVTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm5OMFlXNTBhV0YwWlhNZ1lTQnVaWGNnVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFV3TUVWeWNtOXlJR0Z1WkNCelpYUnpJSFJvWlNCa1pXWmhkV3gwSUhaaGJIVmxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdlMzA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCdGIyUmxiRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dLRzV2WkdVNklGQmhjbk5sVG05a1pTa2dQVDRnZG05cFpENWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMFJtbGxiR1JFWlhObGNtbGhiR2w2WlhKektDa2dPaUJTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhKcFlXeHBlbVZ6SUdsdVptOXliV0YwYVc5dUlIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM2NtbDBaWElnVTJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ2RHOGdkWE5sSUhSdklITmxjbWxoYkdsNlpTQjBhR2x6SUcxdlpHVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGNtbGhiR2w2WlNoM2NtbDBaWEk2SUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJcElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YzY21sMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbmR5YVhSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVkJaR1JwZEdsdmJtRnNSR0YwWVNoMGFHbHpMbUZrWkdsMGFXOXVZV3hFWVhSaEtUdGNiaUFnSUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUh0QlpHUnBkR2x2Ym1Gc1JHRjBZVWh2YkdSbGNpd2dRWEJwUlhKeWIzSXNJRkJoY25OaFlteGxMQ0JRWVhKelpVNXZaR1VzSUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhKOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR05zWVhOeklGWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObE5EQXhSWEp5YjNJZ1pYaDBaVzVrY3lCQmNHbEZjbkp2Y2lCcGJYQnNaVzFsYm5SeklFRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU0I3WEc0Z0lDQWdMeW9xSUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZllXUmthWFJwYjI1aGJFUmhkR0U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdRV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCaFpHUnBkR2x2Ym1Gc1JHRjBZU2gyWVd4MVpUb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXUmthWFJwYjI1aGJFUmhkR0VnUFNCMllXeDFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJXTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaVFF3TVVWeWNtOXlJR0Z1WkNCelpYUnpJSFJvWlNCa1pXWmhkV3gwSUhaaGJIVmxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdlMzA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCdGIyUmxiRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dLRzV2WkdVNklGQmhjbk5sVG05a1pTa2dQVDRnZG05cFpENWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMFJtbGxiR1JFWlhObGNtbGhiR2w2WlhKektDa2dPaUJTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhKcFlXeHBlbVZ6SUdsdVptOXliV0YwYVc5dUlIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM2NtbDBaWElnVTJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ2RHOGdkWE5sSUhSdklITmxjbWxoYkdsNlpTQjBhR2x6SUcxdlpHVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGNtbGhiR2w2WlNoM2NtbDBaWEk2SUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJcElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YzY21sMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbmR5YVhSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVkJaR1JwZEdsdmJtRnNSR0YwWVNoMGFHbHpMbUZrWkdsMGFXOXVZV3hFWVhSaEtUdGNiaUFnSUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUh0QlpHUnBkR2x2Ym1Gc1JHRjBZVWh2YkdSbGNpd2dRWEJwUlhKeWIzSXNJRkJoY25OaFlteGxMQ0JRWVhKelpVNXZaR1VzSUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhKOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR05zWVhOeklGWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObE5EQXpSWEp5YjNJZ1pYaDBaVzVrY3lCQmNHbEZjbkp2Y2lCcGJYQnNaVzFsYm5SeklFRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU0I3WEc0Z0lDQWdMeW9xSUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZllXUmthWFJwYjI1aGJFUmhkR0U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdRV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCaFpHUnBkR2x2Ym1Gc1JHRjBZU2gyWVd4MVpUb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXUmthWFJwYjI1aGJFUmhkR0VnUFNCMllXeDFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJXTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaVFF3TTBWeWNtOXlJR0Z1WkNCelpYUnpJSFJvWlNCa1pXWmhkV3gwSUhaaGJIVmxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdlMzA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCdGIyUmxiRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dLRzV2WkdVNklGQmhjbk5sVG05a1pTa2dQVDRnZG05cFpENWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMFJtbGxiR1JFWlhObGNtbGhiR2w2WlhKektDa2dPaUJTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhKcFlXeHBlbVZ6SUdsdVptOXliV0YwYVc5dUlIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM2NtbDBaWElnVTJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ2RHOGdkWE5sSUhSdklITmxjbWxoYkdsNlpTQjBhR2x6SUcxdlpHVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGNtbGhiR2w2WlNoM2NtbDBaWEk2SUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJcElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YzY21sMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbmR5YVhSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVkJaR1JwZEdsdmJtRnNSR0YwWVNoMGFHbHpMbUZrWkdsMGFXOXVZV3hFWVhSaEtUdGNiaUFnSUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUh0QlpHUnBkR2x2Ym1Gc1JHRjBZVWh2YkdSbGNpd2dRWEJwUlhKeWIzSXNJRkJoY25OaFlteGxMQ0JRWVhKelpVNXZaR1VzSUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhKOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR05zWVhOeklGWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObE5UQXdSWEp5YjNJZ1pYaDBaVzVrY3lCQmNHbEZjbkp2Y2lCcGJYQnNaVzFsYm5SeklFRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU0I3WEc0Z0lDQWdMeW9xSUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZllXUmthWFJwYjI1aGJFUmhkR0U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdRV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCaFpHUnBkR2x2Ym1Gc1JHRjBZU2gyWVd4MVpUb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXUmthWFJwYjI1aGJFUmhkR0VnUFNCMllXeDFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJXTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaVFV3TUVWeWNtOXlJR0Z1WkNCelpYUnpJSFJvWlNCa1pXWmhkV3gwSUhaaGJIVmxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdlMzA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCdGIyUmxiRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dLRzV2WkdVNklGQmhjbk5sVG05a1pTa2dQVDRnZG05cFpENWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMFJtbGxiR1JFWlhObGNtbGhiR2w2WlhKektDa2dPaUJTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhKcFlXeHBlbVZ6SUdsdVptOXliV0YwYVc5dUlIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM2NtbDBaWElnVTJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ2RHOGdkWE5sSUhSdklITmxjbWxoYkdsNlpTQjBhR2x6SUcxdlpHVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGNtbGhiR2w2WlNoM2NtbDBaWEk2SUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJcElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YzY21sMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbmR5YVhSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVkJaR1JwZEdsdmJtRnNSR0YwWVNoMGFHbHpMbUZrWkdsMGFXOXVZV3hFWVhSaEtUdGNiaUFnSUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUh0V01XRnNjR2hoUjJWMFRHbGpaVzV6WlZKbGMzQnZibk5sTkRBeFJYSnliM0o5SUdaeWIyMGdKeTR2YVc1a1pYZ25PMXh1YVcxd2IzSjBJSHRRWVhKelpVNXZaR1Y5SUdaeWIyMGdKMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6Snp0Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnlaV0YwWlZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUwTURGRmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVb2NHRnljMlZPYjJSbE9pQlFZWEp6WlU1dlpHVWdmQ0IxYm1SbFptbHVaV1FwSURvZ1ZqRmhiSEJvWVVkbGRFeHBZMlZ1YzJWU1pYTndiMjV6WlRRd01VVnljbTl5SUh0Y2JpQWdJQ0JwWmlnaGNHRnljMlZPYjJSbEtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSndZWEp6WlU1dlpHVWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUwTURGRmNuSnZjaWdwTzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRXTVdGc2NHaGhSMlYwVEdsalpXNXpaVkpsYzNCdmJuTmxOREF6UlhKeWIzSjlJR1p5YjIwZ0p5NHZhVzVrWlhnbk8xeHVhVzF3YjNKMElIdFFZWEp6WlU1dlpHVjlJR1p5YjIwZ0owQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpKenRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOeVpXRjBaVll4WVd4d2FHRkhaWFJNYVdObGJuTmxVbVZ6Y0c5dWMyVTBNRE5GY25KdmNrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VvY0dGeWMyVk9iMlJsT2lCUVlYSnpaVTV2WkdVZ2ZDQjFibVJsWm1sdVpXUXBJRG9nVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFF3TTBWeWNtOXlJSHRjYmlBZ0lDQnBaaWdoY0dGeWMyVk9iMlJsS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKd1lYSnpaVTV2WkdVZ1kyRnVibTkwSUdKbElIVnVaR1ZtYVc1bFpGd2lLVHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRll4WVd4d2FHRkhaWFJNYVdObGJuTmxVbVZ6Y0c5dWMyVTBNRE5GY25KdmNpZ3BPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIdFdNV0ZzY0doaFIyVjBUR2xqWlc1elpWSmxjM0J2Ym5ObE5UQXdSWEp5YjNKOUlHWnliMjBnSnk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUh0UVlYSnpaVTV2WkdWOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpWWXhZV3h3YUdGSFpYUk1hV05sYm5ObFVtVnpjRzl1YzJVMU1EQkZjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW9jR0Z5YzJWT2IyUmxPaUJRWVhKelpVNXZaR1VnZkNCMWJtUmxabWx1WldRcElEb2dWakZoYkhCb1lVZGxkRXhwWTJWdWMyVlNaWE53YjI1elpUVXdNRVZ5Y205eUlIdGNiaUFnSUNCcFppZ2hjR0Z5YzJWT2IyUmxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhKelpVNXZaR1VnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGWXhZV3h3YUdGSFpYUk1hV05sYm5ObFVtVnpjRzl1YzJVMU1EQkZjbkp2Y2lncE8xeHVmVnh1SWl3aWFXMXdiM0owSUh0V01XRnNjR2hoVFc5a2FXWjVVMlZoZEhOU1pYTndiMjV6WlRRd01VVnljbTl5ZlNCbWNtOXRJQ2N1TDJsdVpHVjRKenRjYm1sdGNHOXlkQ0I3VUdGeWMyVk9iMlJsZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWV01XRnNjR2hoVFc5a2FXWjVVMlZoZEhOU1pYTndiMjV6WlRRd01VVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTaHdZWEp6WlU1dlpHVTZJRkJoY25ObFRtOWtaU0I4SUhWdVpHVm1hVzVsWkNrZ09pQldNV0ZzY0doaFRXOWthV1o1VTJWaGRITlNaWE53YjI1elpUUXdNVVZ5Y205eUlIdGNiaUFnSUNCcFppZ2hjR0Z5YzJWT2IyUmxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhKelpVNXZaR1VnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObE5EQXhSWEp5YjNJb0tUdGNibjFjYmlJc0ltbHRjRzl5ZENCN1ZqRmhiSEJvWVUxdlpHbG1lVk5sWVhSelVtVnpjRzl1YzJVME1ETkZjbkp2Y24wZ1puSnZiU0FuTGk5cGJtUmxlQ2M3WEc1cGJYQnZjblFnZTFCaGNuTmxUbTlrWlgwZ1puSnZiU0FuUUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5Nbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFZqRmhiSEJvWVUxdlpHbG1lVk5sWVhSelVtVnpjRzl1YzJVME1ETkZjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW9jR0Z5YzJWT2IyUmxPaUJRWVhKelpVNXZaR1VnZkNCMWJtUmxabWx1WldRcElEb2dWakZoYkhCb1lVMXZaR2xtZVZObFlYUnpVbVZ6Y0c5dWMyVTBNRE5GY25KdmNpQjdYRzRnSUNBZ2FXWW9JWEJoY25ObFRtOWtaU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY0dGeWMyVk9iMlJsSUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QldNV0ZzY0doaFRXOWthV1o1VTJWaGRITlNaWE53YjI1elpUUXdNMFZ5Y205eUtDazdYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UxWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObE5UQXdSWEp5YjNKOUlHWnliMjBnSnk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUh0UVlYSnpaVTV2WkdWOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpWWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObE5UQXdSWEp5YjNKR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxLSEJoY25ObFRtOWtaVG9nVUdGeWMyVk9iMlJsSUh3Z2RXNWtaV1pwYm1Wa0tTQTZJRll4WVd4d2FHRk5iMlJwWm5sVFpXRjBjMUpsYzNCdmJuTmxOVEF3UlhKeWIzSWdlMXh1SUNBZ0lHbG1LQ0Z3WVhKelpVNXZaR1VwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5CaGNuTmxUbTlrWlNCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dWakZoYkhCb1lVMXZaR2xtZVZObFlYUnpVbVZ6Y0c5dWMyVTFNREJGY25KdmNpZ3BPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIdFdNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlgwZ1puSnZiU0FuTGk5cGJtUmxlQ2M3WEc1cGJYQnZjblFnZTFCaGNuTmxUbTlrWlgwZ1puSnZiU0FuUUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5Nbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbEtIQmhjbk5sVG05a1pUb2dVR0Z5YzJWT2IyUmxJSHdnZFc1a1pXWnBibVZrS1NBNklGWXhZV3h3YUdGSFpYUlRaV0YwYzFKbGMzQnZibk5sSUh0Y2JpQWdJQ0JwWmlnaGNHRnljMlZPYjJSbEtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSndZWEp6WlU1dlpHVWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZZeFlXeHdhR0ZIWlhSVFpXRjBjMUpsYzNCdmJuTmxLQ2s3WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMEZrWkdsMGFXOXVZV3hFWVhSaFNHOXNaR1Z5TENCQmNHbEZjbkp2Y2l3Z1VHRnljMkZpYkdVc0lGQmhjbk5sVG05a1pTd2dVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjbjBnWm5KdmJTQW5RRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk1uTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVmpGaGJIQm9ZVWRsZEZObFlYUnpVbVZ6Y0c5dWMyVTBNREZGY25KdmNpQmxlSFJsYm1SeklFRndhVVZ5Y205eUlHbHRjR3hsYldWdWRITWdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUZCaGNuTmhZbXhsSUh0Y2JpQWdJQ0F2S2lvZ1UzUnZjbVZ6SUdGa1pHbDBhVzl1WVd3Z1pHRjBZU0J1YjNRZ1pHVnpZM0pwWW1Wa0lHbHVJSFJvWlNCUGNHVnVRVkJKSUdSbGMyTnlhWEIwYVc5dUlHWnZkVzVrSUhkb1pXNGdaR1Z6WlhKcFlXeHBlbWx1Wnk0Z1EyRnVJR0psSUhWelpXUWdabTl5SUhObGNtbGhiR2w2WVhScGIyNGdZWE1nZDJWc2JDNGdLaTljYmlBZ0lDQndjbWwyWVhSbElGOWhaR1JwZEdsdmJtRnNSR0YwWVRvZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajQ3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMGN5QjBhR1VnWVdSa2FYUnBiMjVoYkVSaGRHRWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGTjBiM0psY3lCaFpHUnBkR2x2Ym1Gc0lHUmhkR0VnYm05MElHUmxjMk55YVdKbFpDQnBiaUIwYUdVZ1QzQmxia0ZRU1NCa1pYTmpjbWx3ZEdsdmJpQm1iM1Z1WkNCM2FHVnVJR1JsYzJWeWFXRnNhWHBwYm1jdUlFTmhiaUJpWlNCMWMyVmtJR1p2Y2lCelpYSnBZV3hwZW1GMGFXOXVJR0Z6SUhkbGJHd3VYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhRZ1lXUmthWFJwYjI1aGJFUmhkR0VvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloWkdScGRHbHZibUZzUkdGMFlUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkSE1nZEdobElHRmtaR2wwYVc5dVlXeEVZWFJoSUhCeWIzQmxjblI1SUhaaGJIVmxMaUJUZEc5eVpYTWdZV1JrYVhScGIyNWhiQ0JrWVhSaElHNXZkQ0JrWlhOamNtbGlaV1FnYVc0Z2RHaGxJRTl3Wlc1QlVFa2daR1Z6WTNKcGNIUnBiMjRnWm05MWJtUWdkMmhsYmlCa1pYTmxjbWxoYkdsNmFXNW5MaUJEWVc0Z1ltVWdkWE5sWkNCbWIzSWdjMlZ5YVdGc2FYcGhkR2x2YmlCaGN5QjNaV3hzTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQldZV3gxWlNCMGJ5QnpaWFFnWm05eUlIUm9aU0JCWkdScGRHbHZibUZzUkdGMFlTQndjbTl3WlhKMGVTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nYzJWMElHRmtaR2wwYVc5dVlXeEVZWFJoS0haaGJIVmxPaUJTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhaR1JwZEdsdmJtRnNSR0YwWVNBOUlIWmhiSFZsTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1c1emRHRnVkR2xoZEdWeklHRWdibVYzSUZZeFlXeHdhR0ZIWlhSVFpXRjBjMUpsYzNCdmJuTmxOREF4UlhKeWIzSWdZVzVrSUhObGRITWdkR2hsSUdSbFptRjFiSFFnZG1Gc2RXVnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFZ1BTQjdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJvWlNCa1pYTmxjbWxoYkdsNllYUnBiMjRnYVc1bWIzSnRZWFJwYjI0Z1ptOXlJSFJvWlNCamRYSnlaVzUwSUcxdlpHVnNYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhSR2FXVnNaRVJsYzJWeWFXRnNhWHBsY25Nb0tTQTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lDaHViMlJsT2lCUVlYSnpaVTV2WkdVcElEMCtJSFp2YVdRK0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sY21saGJHbDZaWE1nYVc1bWIzSnRZWFJwYjI0Z2RHaGxJR04xY25KbGJuUWdiMkpxWldOMFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhkeWFYUmxjaUJUWlhKcFlXeHBlbUYwYVc5dUlIZHlhWFJsY2lCMGJ5QjFjMlVnZEc4Z2MyVnlhV0ZzYVhwbElIUm9hWE1nYlc5a1pXeGNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nYzJWeWFXRnNhWHBsS0hkeWFYUmxjam9nVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2lrZ09pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9JWGR5YVhSbGNpa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lkM0pwZEdWeUlHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhkeWFYUmxjaTUzY21sMFpVRmtaR2wwYVc5dVlXeEVZWFJoS0hSb2FYTXVZV1JrYVhScGIyNWhiRVJoZEdFcE8xeHVJQ0FnSUgwN1hHNTlYRzRpTENKcGJYQnZjblFnZTBGa1pHbDBhVzl1WVd4RVlYUmhTRzlzWkdWeUxDQkJjR2xGY25KdmNpd2dVR0Z5YzJGaWJHVXNJRkJoY25ObFRtOWtaU3dnVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY24wZ1puSnZiU0FuUUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5Nbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlUwTURORmNuSnZjaUJsZUhSbGJtUnpJRUZ3YVVWeWNtOXlJR2x0Y0d4bGJXVnVkSE1nUVdSa2FYUnBiMjVoYkVSaGRHRkliMnhrWlhJc0lGQmhjbk5oWW14bElIdGNiaUFnSUNBdktpb2dVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzRnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJRjloWkdScGRHbHZibUZzUkdGMFlUb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0N1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1lXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JXWVd4MVpTQjBieUJ6WlhRZ1ptOXlJSFJvWlNCQlpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR0ZrWkdsMGFXOXVZV3hFWVhSaEtIWmhiSFZsT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWkdScGRHbHZibUZzUkdGMFlTQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXpkR0Z1ZEdsaGRHVnpJR0VnYm1WM0lGWXhZV3h3YUdGSFpYUlRaV0YwYzFKbGMzQnZibk5sTkRBelJYSnliM0lnWVc1a0lITmxkSE1nZEdobElHUmxabUYxYkhRZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdSa2FYUnBiMjVoYkVSaGRHRWdQU0I3ZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQmtaWE5sY21saGJHbDZZWFJwYjI0Z2FXNW1iM0p0WVhScGIyNGdabTl5SUhSb1pTQmpkWEp5Wlc1MElHMXZaR1ZzWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pXTnZjbVE4YzNSeWFXNW5MQ0FvYm05a1pUb2dVR0Z5YzJWT2IyUmxLU0E5UGlCMmIybGtQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUkdhV1ZzWkVSbGMyVnlhV0ZzYVhwbGNuTW9LU0E2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJQ2h1YjJSbE9pQlFZWEp6WlU1dlpHVXBJRDArSUhadmFXUStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGNtbGhiR2w2WlhNZ2FXNW1iM0p0WVhScGIyNGdkR2hsSUdOMWNuSmxiblFnYjJKcVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIZHlhWFJsY2lCVFpYSnBZV3hwZW1GMGFXOXVJSGR5YVhSbGNpQjBieUIxYzJVZ2RHOGdjMlZ5YVdGc2FYcGxJSFJvYVhNZ2JXOWtaV3hjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVnlhV0ZzYVhwbEtIZHlhWFJsY2pvZ1UyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNpa2dPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lvSVhkeWFYUmxjaWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpZDNKcGRHVnlJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIZHlhWFJsY2k1M2NtbDBaVUZrWkdsMGFXOXVZV3hFWVhSaEtIUm9hWE11WVdSa2FYUnBiMjVoYkVSaGRHRXBPMXh1SUNBZ0lIMDdYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UwRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JCY0dsRmNuSnZjaXdnVUdGeWMyRmliR1VzSUZCaGNuTmxUbTlrWlN3Z1UyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNuMGdabkp2YlNBblFHMXBZM0p2YzI5bWRDOXJhVzkwWVMxaFluTjBjbUZqZEdsdmJuTW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdWakZoYkhCb1lVZGxkRk5sWVhSelVtVnpjRzl1YzJVMU1EQkZjbkp2Y2lCbGVIUmxibVJ6SUVGd2FVVnljbTl5SUdsdGNHeGxiV1Z1ZEhNZ1FXUmthWFJwYjI1aGJFUmhkR0ZJYjJ4a1pYSXNJRkJoY25OaFlteGxJSHRjYmlBZ0lDQXZLaW9nVTNSdmNtVnpJR0ZrWkdsMGFXOXVZV3dnWkdGMFlTQnViM1FnWkdWelkzSnBZbVZrSUdsdUlIUm9aU0JQY0dWdVFWQkpJR1JsYzJOeWFYQjBhVzl1SUdadmRXNWtJSGRvWlc0Z1pHVnpaWEpwWVd4cGVtbHVaeTRnUTJGdUlHSmxJSFZ6WldRZ1ptOXlJSE5sY21saGJHbDZZWFJwYjI0Z1lYTWdkMlZzYkM0Z0tpOWNiaUFnSUNCd2NtbDJZWFJsSUY5aFpHUnBkR2x2Ym1Gc1JHRjBZVG9nVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdZV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFFnWVdSa2FYUnBiMjVoYkVSaGRHRW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWhaR1JwZEdsdmJtRnNSR0YwWVR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUdGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCV1lXeDFaU0IwYnlCelpYUWdabTl5SUhSb1pTQkJaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLSFpoYkhWbE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUhaaGJIVmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzV6ZEdGdWRHbGhkR1Z6SUdFZ2JtVjNJRll4WVd4d2FHRkhaWFJUWldGMGMxSmxjM0J2Ym5ObE5UQXdSWEp5YjNJZ1lXNWtJSE5sZEhNZ2RHaGxJR1JsWm1GMWJIUWdkbUZzZFdWekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXUmthWFJwYjI1aGJFUmhkR0VnUFNCN2ZUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGUm9aU0JrWlhObGNtbGhiR2w2WVhScGIyNGdhVzVtYjNKdFlYUnBiMjRnWm05eUlIUm9aU0JqZFhKeVpXNTBJRzF2WkdWc1hHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQlNaV052Y21ROGMzUnlhVzVuTENBb2JtOWtaVG9nVUdGeWMyVk9iMlJsS1NBOVBpQjJiMmxrUGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFJHYVdWc1pFUmxjMlZ5YVdGc2FYcGxjbk1vS1NBNklGSmxZMjl5WkR4emRISnBibWNzSUNodWIyUmxPaUJRWVhKelpVNXZaR1VwSUQwK0lIWnZhV1ErSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxjbWxoYkdsNlpYTWdhVzVtYjNKdFlYUnBiMjRnZEdobElHTjFjbkpsYm5RZ2IySnFaV04wWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSGR5YVhSbGNpQlRaWEpwWVd4cGVtRjBhVzl1SUhkeWFYUmxjaUIwYnlCMWMyVWdkRzhnYzJWeWFXRnNhWHBsSUhSb2FYTWdiVzlrWld4Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlZ5YVdGc2FYcGxLSGR5YVhSbGNqb2dVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjaWtnT2lCMmIybGtJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYZHlhWFJsY2lrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWQzSnBkR1Z5SUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlVGa1pHbDBhVzl1WVd4RVlYUmhLSFJvYVhNdVlXUmthWFJwYjI1aGJFUmhkR0VwTzF4dUlDQWdJSDA3WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMVl4WVd4d2FHRkhaWFJUWldGMGMxSmxjM0J2Ym5ObE5EQXhSWEp5YjNKOUlHWnliMjBnSnk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUh0UVlYSnpaVTV2WkdWOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpWWXhZV3h3YUdGSFpYUlRaV0YwYzFKbGMzQnZibk5sTkRBeFJYSnliM0pHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbEtIQmhjbk5sVG05a1pUb2dVR0Z5YzJWT2IyUmxJSHdnZFc1a1pXWnBibVZrS1NBNklGWXhZV3h3YUdGSFpYUlRaV0YwYzFKbGMzQnZibk5sTkRBeFJYSnliM0lnZTF4dUlDQWdJR2xtS0NGd1lYSnpaVTV2WkdVcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luQmhjbk5sVG05a1pTQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVmpGaGJIQm9ZVWRsZEZObFlYUnpVbVZ6Y0c5dWMyVTBNREZGY25KdmNpZ3BPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIdFdNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlRRd00wVnljbTl5ZlNCbWNtOXRJQ2N1TDJsdVpHVjRKenRjYm1sdGNHOXlkQ0I3VUdGeWMyVk9iMlJsZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWV01XRnNjR2hoUjJWMFUyVmhkSE5TWlhOd2IyNXpaVFF3TTBWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNod1lYSnpaVTV2WkdVNklGQmhjbk5sVG05a1pTQjhJSFZ1WkdWbWFXNWxaQ2tnT2lCV01XRnNjR2hoUjJWMFUyVmhkSE5TWlhOd2IyNXpaVFF3TTBWeWNtOXlJSHRjYmlBZ0lDQnBaaWdoY0dGeWMyVk9iMlJsS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKd1lYSnpaVTV2WkdVZ1kyRnVibTkwSUdKbElIVnVaR1ZtYVc1bFpGd2lLVHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRll4WVd4d2FHRkhaWFJUWldGMGMxSmxjM0J2Ym5ObE5EQXpSWEp5YjNJb0tUdGNibjFjYmlJc0ltbHRjRzl5ZENCN1ZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlUxTURCRmNuSnZjbjBnWm5KdmJTQW5MaTlwYm1SbGVDYzdYRzVwYlhCdmNuUWdlMUJoY25ObFRtOWtaWDBnWm5KdmJTQW5RRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk1uTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kzSmxZWFJsVmpGaGJIQm9ZVWRsZEZObFlYUnpVbVZ6Y0c5dWMyVTFNREJGY25KdmNrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VvY0dGeWMyVk9iMlJsT2lCUVlYSnpaVTV2WkdVZ2ZDQjFibVJsWm1sdVpXUXBJRG9nVmpGaGJIQm9ZVWRsZEZObFlYUnpVbVZ6Y0c5dWMyVTFNREJGY25KdmNpQjdYRzRnSUNBZ2FXWW9JWEJoY25ObFRtOWtaU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY0dGeWMyVk9iMlJsSUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QldNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlRVd01FVnljbTl5S0NrN1hHNTlYRzRpTENKcGJYQnZjblFnZTFZeFlXeHdhR0ZIWlhSVFpXRjBjMUpsYzNCdmJuTmxmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk4dUxpOXRiMlJsYkhNbk8xeHVhVzF3YjNKMElIdGpjbVZoZEdWV01XRnNjR2hoUjJWMFUyVmhkSE5TWlhOd2IyNXpaVVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdWOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMeTR1TDIxdlpHVnNjeTlqY21WaGRHVldNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlVaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW5PMXh1YVcxd2IzSjBJSHRqY21WaGRHVldNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlRRd01VVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpYMGdabkp2YlNBbkxpOWpjbVZoZEdWV01XRnNjR2hoUjJWMFUyVmhkSE5TWlhOd2IyNXpaVFF3TVVWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNjN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlZZeFlXeHdhR0ZIWlhSVFpXRjBjMUpsYzNCdmJuTmxOREF6UlhKeWIzSkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsZlNCbWNtOXRJQ2N1TDJOeVpXRjBaVll4WVd4d2FHRkhaWFJUWldGMGMxSmxjM0J2Ym5ObE5EQXpSWEp5YjNKR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxKenRjYm1sdGNHOXlkQ0I3WTNKbFlYUmxWakZoYkhCb1lVZGxkRk5sWVhSelVtVnpjRzl1YzJVMU1EQkZjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVjlJR1p5YjIwZ0p5NHZZM0psWVhSbFZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlUxTURCRmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVbk8xeHVhVzF3YjNKMElIdFdNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlRRd01VVnljbTl5TENCV01XRnNjR2hoUjJWMFUyVmhkSE5TWlhOd2IyNXpaVFF3TTBWeWNtOXlMQ0JXTVdGc2NHaGhSMlYwVTJWaGRITlNaWE53YjI1elpUVXdNRVZ5Y205eWZTQm1jbTl0SUNjdUwybHVaR1Y0Snp0Y2JtbHRjRzl5ZENCN1UyVmhkSE5TWlhGMVpYTjBRblZwYkdSbGNrZGxkRkpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1ZlNCbWNtOXRJQ2N1TDNObFlYUnpVbVZ4ZFdWemRFSjFhV3hrWlhKSFpYUlNaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaWM3WEc1cGJYQnZjblFnZTJkbGRGQmhkR2hRWVhKaGJXVjBaWEp6TENCSWRIUndUV1YwYUc5a0xDQlFZWEp6WVdKc1pTd2dVR0Z5YzJGaWJHVkdZV04wYjNKNUxDQlNaWEYxWlhOMFFXUmhjSFJsY2l3Z1VtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUxDQlNaWEYxWlhOMFQzQjBhVzl1TENCU1pYTndiMjV6WlVoaGJtUnNaWEo5SUdaeWIyMGdKMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6Snp0Y2JseHVMeW9xWEc0Z0tpQkNkV2xzWkhNZ1lXNWtJR1Y0WldOMWRHVnpJSEpsY1hWbGMzUnpJR1p2Y2lCdmNHVnlZWFJwYjI1eklIVnVaR1Z5SUM5Mk1XRnNjR2hoTDI5eVozTXZlMjl5WjBsa2ZTOXNhV05sYm5ObGN5OTdjMlZ5ZG1salpVbGtmUzl6WldGMGMxeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVMlZoZEhOU1pYRjFaWE4wUW5WcGJHUmxjaUI3WEc0Z0lDQWdMeW9xSUZCaGRHZ2djR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSEpsY1hWbGMzUWdLaTljYmlBZ0lDQndjbWwyWVhSbElIQmhkR2hRWVhKaGJXVjBaWEp6T2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQanRjYmlBZ0lDQXZLaW9nVkdobElISmxjWFZsYzNRZ1lXUmhjSFJsY2lCMGJ5QjFjMlVnZEc4Z1pYaGxZM1YwWlNCMGFHVWdjbVZ4ZFdWemRITXVJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQnlaWEYxWlhOMFFXUmhjSFJsY2pvZ1VtVnhkV1Z6ZEVGa1lYQjBaWEk3WEc0Z0lDQWdMeW9xSUZWeWJDQjBaVzF3YkdGMFpTQjBieUIxYzJVZ2RHOGdZblZwYkdRZ2RHaGxJRlZTVENCbWIzSWdkR2hsSUdOMWNuSmxiblFnY21WeGRXVnpkQ0JpZFdsc1pHVnlJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQjFjbXhVWlcxd2JHRjBaVG9nYzNSeWFXNW5PMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJUWldGMGMxSmxjWFZsYzNSQ2RXbHNaR1Z5SUdGdVpDQnpaWFJ6SUhSb1pTQmtaV1poZFd4MElIWmhiSFZsY3k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnY0dGMGFGQmhjbUZ0WlhSbGNuTWdWR2hsSUhKaGR5QjFjbXdnYjNJZ2RHaGxJRlZ5YkNCMFpXMXdiR0YwWlNCd1lYSmhiV1YwWlhKeklHWnZjaUIwYUdVZ2NtVnhkV1Z6ZEM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnY21WeGRXVnpkRUZrWVhCMFpYSWdWR2hsSUhKbGNYVmxjM1FnWVdSaGNIUmxjaUIwYnlCMWMyVWdkRzhnWlhobFkzVjBaU0IwYUdVZ2NtVnhkV1Z6ZEhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0hCaGRHaFFZWEpoYldWMFpYSnpPaUJTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBpQjhJSE4wY21sdVp5QjhJSFZ1WkdWbWFXNWxaQ3dnY21WeGRXVnpkRUZrWVhCMFpYSTZJRkpsY1hWbGMzUkJaR0Z3ZEdWeUtTQjdYRzRnSUNBZ0lDQWdJR2xtS0NGd1lYUm9VR0Z5WVcxbGRHVnljeWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY0dGMGFGQmhjbUZ0WlhSbGNuTWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2FXWW9JWEpsY1hWbGMzUkJaR0Z3ZEdWeUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSnlaWEYxWlhOMFFXUmhjSFJsY2lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVnliRlJsYlhCc1lYUmxJRDBnWENKN0sySmhjMlYxY214OUwzWXhZV3h3YUdFdmIzSm5jeTk3YjNKblNXUjlMMnhwWTJWdWMyVnpMM3R6WlhKMmFXTmxTV1I5TDNObFlYUnplejlwYm1Oc2RXUmxWWE5sY25NcUxHWnBiSFJsY2lwOVhDSTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliRlJ3YkZCaGNtRnRjeUE5SUdkbGRGQmhkR2hRWVhKaGJXVjBaWEp6S0hCaGRHaFFZWEpoYldWMFpYSnpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvVUdGeVlXMWxkR1Z5Y3lBOUlIVnliRlJ3YkZCaGNtRnRjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2lBOUlISmxjWFZsYzNSQlpHRndkR1Z5TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMElHUmxkR0ZwYkhNZ2IyWWdkWE5sY25NZ2QyaHZJR0Z5WlNCaGMzTnBaMjVsWkNCMGJ5QjBhR1VnYkdsalpXNXpaU0J2Y2lCaGRtRnBiR0ZpYkdVZ2RHOGdZbVVnWVhOemFXZHVaV1F1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1SUVOdmJtWnBaM1Z5WVhScGIyNGdabTl5SUhSb1pTQnlaWEYxWlhOMElITjFZMmdnWVhNZ2FHVmhaR1Z5Y3l3Z2NYVmxjbmtnY0dGeVlXMWxkR1Z5Y3l3Z1lXNWtJRzFwWkdSc1pYZGhjbVVnYjNCMGFXOXVjeTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdjbVZ6Y0c5dWMyVklZVzVrYkdWeUlGSmxjM0J2Ym5ObElHaGhibVJzWlhJZ2RHOGdkWE5sSUdsdUlIQnNZV05sSUc5bUlIUm9aU0JrWldaaGRXeDBJSEpsYzNCdmJuTmxJR2hoYm1Sc2FXNW5JSEJ5YjNacFpHVmtJR0o1SUhSb1pTQmpiM0psSUhObGNuWnBZMlZjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZCeWIyMXBjMlVnYjJZZ1ZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBLSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1UHpvZ1UyVmhkSE5TWlhGMVpYTjBRblZwYkdSbGNrZGxkRkpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1SUh3Z2RXNWtaV1pwYm1Wa0xDQnlaWE53YjI1elpVaGhibVJzWlhJL09pQlNaWE53YjI1elpVaGhibVJzWlhJZ2ZDQjFibVJsWm1sdVpXUXBJRG9nVUhKdmJXbHpaVHhXTVdGc2NHaGhSMlYwVTJWaGRITlNaWE53YjI1elpTQjhJSFZ1WkdWbWFXNWxaRDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WlhGMVpYTjBTVzVtYnlBOUlIUm9hWE11ZEc5SFpYUlNaWEYxWlhOMFNXNW1iM0p0WVhScGIyNG9YRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wUTI5dVptbG5kWEpoZEdsdmJseHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2sxaGNIQnBibWM2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJRkJoY25OaFlteGxSbUZqZEc5eWVUeFFZWEp6WVdKc1pUNCtJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0kwTURGY0lqb2dZM0psWVhSbFZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlUwTURGRmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSWpRd00xd2lPaUJqY21WaGRHVldNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlRRd00wVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aU5UQXdYQ0k2SUdOeVpXRjBaVll4WVd4d2FHRkhaWFJUWldGMGMxSmxjM0J2Ym5ObE5UQXdSWEp5YjNKR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxMRnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2o4dWMyVnVaRUZ6ZVc1alBGWXhZV3h3YUdGSFpYUlRaV0YwYzFKbGMzQnZibk5sUGloeVpYRjFaWE4wU1c1bWJ5d2dZM0psWVhSbFZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbExDQnlaWE53YjI1elpVaGhibVJzWlhJc0lHVnljbTl5VFdGd2NHbHVaeWtnUHo4Z1VISnZiV2x6WlM1eVpXcGxZM1FvYm1WM0lFVnljbTl5S0NkeVpYRjFaWE4wSUdGa1lYQjBaWElnYVhNZ2JuVnNiQ2NwS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRDQmtaWFJoYVd4eklHOW1JSFZ6WlhKeklIZG9ieUJoY21VZ1lYTnphV2R1WldRZ2RHOGdkR2hsSUd4cFkyVnVjMlVnYjNJZ1lYWmhhV3hoWW14bElIUnZJR0psSUdGemMybG5ibVZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCRGIyNW1hV2QxY21GMGFXOXVJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRDQnpkV05vSUdGeklHaGxZV1JsY25Nc0lIRjFaWEo1SUhCaGNtRnRaWFJsY25Nc0lHRnVaQ0J0YVdSa2JHVjNZWEpsSUc5d2RHbHZibk11WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdkRzlIWlhSU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0b2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNC9PaUJUWldGMGMxSmxjWFZsYzNSQ2RXbHNaR1Z5UjJWMFVtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNGdmQ0IxYm1SbFptbHVaV1FwSURvZ1VtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnhkV1Z6ZEVsdVptOGdQU0J1WlhjZ1VtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUtDazdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG5WeWJGUmxiWEJzWVhSbElEMGdkR2hwY3k1MWNteFVaVzF3YkdGMFpUdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFbHVabTh1Y0dGMGFGQmhjbUZ0WlhSbGNuTWdQU0IwYUdsekxuQmhkR2hRWVhKaGJXVjBaWEp6TzF4dUlDQWdJQ0FnSUNCeVpYRjFaWE4wU1c1bWJ5NW9kSFJ3VFdWMGFHOWtJRDBnU0hSMGNFMWxkR2h2WkM1SFJWUTdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1obFlXUmxjbk5iWENKQlkyTmxjSFJjSWwwZ1BTQmJYQ0poY0hCc2FXTmhkR2x2Ymk5cWMyOXVYQ0pkTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1Ga1pGSmxjWFZsYzNSSVpXRmtaWEp6S0hKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUxtaGxZV1JsY25NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dWMyVjBVWFZsY25sVGRISnBibWRRWVhKaGJXVjBaWEp6Um5KdmJWSmhkMDlpYW1WamRDaHlaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaTV4ZFdWeWVWQmhjbUZ0WlhSbGNuTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEVsdVptOHVZV1JrVW1WeGRXVnpkRTl3ZEdsdmJuTW9jbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjR1YjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGNYVmxjM1JKYm1adk8xeHVJQ0FnSUgwN1hHNTlYRzRpTENKcGJYQnZjblFnZTB4cFkyVnVjMlZ6WDNObGNuWnBZMlZKWkY5aWIyUjVMQ0JXTVdGc2NHaGhSMlYwVEdsalpXNXpaVkpsYzNCdmJuTmxMQ0JXTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaWDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2TGk0dmJXOWtaV3h6Snp0Y2JtbHRjRzl5ZENCN1kzSmxZWFJsVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdWOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMMjF2WkdWc2N5OWpjbVZoZEdWV01XRnNjR2hoUjJWMFRHbGpaVzV6WlZKbGMzQnZibk5sUm5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTYzdYRzVwYlhCdmNuUWdlMk55WldGMFpWWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObFJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaWDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2TGk0dmJXOWtaV3h6TDJOeVpXRjBaVll4WVd4d2FHRk5iMlJwWm5sVFpXRjBjMUpsYzNCdmJuTmxSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNjN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUwTURGRmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdWOUlHWnliMjBnSnk0dlkzSmxZWFJsVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFF3TVVWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNjN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUwTURORmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdWOUlHWnliMjBnSnk0dlkzSmxZWFJsVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFF3TTBWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNjN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUxTURCRmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdWOUlHWnliMjBnSnk0dlkzSmxZWFJsVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFV3TUVWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNjN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlZZeFlXeHdhR0ZOYjJScFpubFRaV0YwYzFKbGMzQnZibk5sTkRBeFJYSnliM0pHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbGZTQm1jbTl0SUNjdUwyTnlaV0YwWlZZeFlXeHdhR0ZOYjJScFpubFRaV0YwYzFKbGMzQnZibk5sTkRBeFJYSnliM0pHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbEp6dGNibWx0Y0c5eWRDQjdZM0psWVhSbFZqRmhiSEJvWVUxdlpHbG1lVk5sWVhSelVtVnpjRzl1YzJVME1ETkZjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVjlJR1p5YjIwZ0p5NHZZM0psWVhSbFZqRmhiSEJvWVUxdlpHbG1lVk5sWVhSelVtVnpjRzl1YzJVME1ETkZjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW5PMXh1YVcxd2IzSjBJSHRqY21WaGRHVldNV0ZzY0doaFRXOWthV1o1VTJWaGRITlNaWE53YjI1elpUVXdNRVZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaWDBnWm5KdmJTQW5MaTlqY21WaGRHVldNV0ZzY0doaFRXOWthV1o1VTJWaGRITlNaWE53YjI1elpUVXdNRVZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU2M3WEc1cGJYQnZjblFnZTFZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUwTURGRmNuSnZjaXdnVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFF3TTBWeWNtOXlMQ0JXTVdGc2NHaGhSMlYwVEdsalpXNXpaVkpsYzNCdmJuTmxOVEF3UlhKeWIzSXNJRll4WVd4d2FHRk5iMlJwWm5sVFpXRjBjMUpsYzNCdmJuTmxOREF4UlhKeWIzSXNJRll4WVd4d2FHRk5iMlJwWm5sVFpXRjBjMUpsYzNCdmJuTmxOREF6UlhKeWIzSXNJRll4WVd4d2FHRk5iMlJwWm5sVFpXRjBjMUpsYzNCdmJuTmxOVEF3UlhKeWIzSjlJR1p5YjIwZ0p5NHZhVzVrWlhnbk8xeHVhVzF3YjNKMElIdFRaV0YwYzFKbGNYVmxjM1JDZFdsc1pHVnlmU0JtY205dElDY3VMM05sWVhSekwzTmxZWFJ6VW1WeGRXVnpkRUoxYVd4a1pYSW5PMXh1YVcxd2IzSjBJSHRYYVhSb1UyVnlkbWxqWlVsMFpXMVNaWEYxWlhOMFFuVnBiR1JsY2tkbGRGSmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVmU0JtY205dElDY3VMM2RwZEdoVFpYSjJhV05sU1hSbGJWSmxjWFZsYzNSQ2RXbHNaR1Z5UjJWMFVtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNG5PMXh1YVcxd2IzSjBJSHRYYVhSb1UyVnlkbWxqWlVsMFpXMVNaWEYxWlhOMFFuVnBiR1JsY2xCdmMzUlNaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZibjBnWm5KdmJTQW5MaTkzYVhSb1UyVnlkbWxqWlVsMFpXMVNaWEYxWlhOMFFuVnBiR1JsY2xCdmMzUlNaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaWM3WEc1cGJYQnZjblFnZTJkbGRGQmhkR2hRWVhKaGJXVjBaWEp6TENCSWRIUndUV1YwYUc5a0xDQlFZWEp6WVdKc1pTd2dVR0Z5YzJGaWJHVkdZV04wYjNKNUxDQlNaWEYxWlhOMFFXUmhjSFJsY2l3Z1VtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUxDQlNaWEYxWlhOMFQzQjBhVzl1TENCU1pYTndiMjV6WlVoaGJtUnNaWEo5SUdaeWIyMGdKMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6Snp0Y2JseHVMeW9xWEc0Z0tpQkNkV2xzWkhNZ1lXNWtJR1Y0WldOMWRHVnpJSEpsY1hWbGMzUnpJR1p2Y2lCdmNHVnlZWFJwYjI1eklIVnVaR1Z5SUM5Mk1XRnNjR2hoTDI5eVozTXZlMjl5WjBsa2ZTOXNhV05sYm5ObGN5OTdjMlZ5ZG1salpVbGtmVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVjJsMGFGTmxjblpwWTJWSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhJZ2UxeHVJQ0FnSUM4cUtpQlFZWFJvSUhCaGNtRnRaWFJsY25NZ1ptOXlJSFJvWlNCeVpYRjFaWE4wSUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0J3WVhSb1VHRnlZVzFsZEdWeWN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0N1hHNGdJQ0FnTHlvcUlGUm9aU0J5WlhGMVpYTjBJR0ZrWVhCMFpYSWdkRzhnZFhObElIUnZJR1Y0WldOMWRHVWdkR2hsSUhKbGNYVmxjM1J6TGlBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnY21WeGRXVnpkRUZrWVhCMFpYSTZJRkpsY1hWbGMzUkJaR0Z3ZEdWeU8xeHVJQ0FnSUM4cUtpQlVhR1VnYzJWaGRITWdjSEp2Y0dWeWRIa2dLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJSE5sWVhSektDazZJRk5sWVhSelVtVnhkV1Z6ZEVKMWFXeGtaWElnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGTmxZWFJ6VW1WeGRXVnpkRUoxYVd4a1pYSW9kR2hwY3k1d1lYUm9VR0Z5WVcxbGRHVnljeXdnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2lrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2lCVmNtd2dkR1Z0Y0d4aGRHVWdkRzhnZFhObElIUnZJR0oxYVd4a0lIUm9aU0JWVWt3Z1ptOXlJSFJvWlNCamRYSnlaVzUwSUhKbGNYVmxjM1FnWW5WcGJHUmxjaUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdkWEpzVkdWdGNHeGhkR1U2SUhOMGNtbHVaenRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm5OMFlXNTBhV0YwWlhNZ1lTQnVaWGNnVjJsMGFGTmxjblpwWTJWSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhJZ1lXNWtJSE5sZEhNZ2RHaGxJR1JsWm1GMWJIUWdkbUZzZFdWekxseHVJQ0FnSUNBcUlFQndZWEpoYlNCd1lYUm9VR0Z5WVcxbGRHVnljeUJVYUdVZ2NtRjNJSFZ5YkNCdmNpQjBhR1VnVlhKc0lIUmxiWEJzWVhSbElIQmhjbUZ0WlhSbGNuTWdabTl5SUhSb1pTQnlaWEYxWlhOMExseHVJQ0FnSUNBcUlFQndZWEpoYlNCeVpYRjFaWE4wUVdSaGNIUmxjaUJVYUdVZ2NtVnhkV1Z6ZENCaFpHRndkR1Z5SUhSdklIVnpaU0IwYnlCbGVHVmpkWFJsSUhSb1pTQnlaWEYxWlhOMGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb2NHRjBhRkJoY21GdFpYUmxjbk02SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtJSHdnYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrTENCeVpYRjFaWE4wUVdSaGNIUmxjam9nVW1WeGRXVnpkRUZrWVhCMFpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYQmhkR2hRWVhKaGJXVjBaWEp6S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKd1lYUm9VR0Z5WVcxbGRHVnljeUJqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUNBZ0lDQnBaaWdoY21WeGRXVnpkRUZrWVhCMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkpsY1hWbGMzUkJaR0Z3ZEdWeUlHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEpzVkdWdGNHeGhkR1VnUFNCY0luc3JZbUZ6WlhWeWJIMHZkakZoYkhCb1lTOXZjbWR6TDN0dmNtZEpaSDB2YkdsalpXNXpaWE12ZTNObGNuWnBZMlZKWkgxY0lqdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RYSnNWSEJzVUdGeVlXMXpJRDBnWjJWMFVHRjBhRkJoY21GdFpYUmxjbk1vY0dGMGFGQmhjbUZ0WlhSbGNuTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2hRWVhKaGJXVjBaWEp6SUQwZ2RYSnNWSEJzVUdGeVlXMXpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxjWFZsYzNSQlpHRndkR1Z5SUQwZ2NtVnhkV1Z6ZEVGa1lYQjBaWEk3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJSFJvWlNCc2FXTmxibk5sTENBZ2FXNWpiSFZrYVc1bklIUm9aU0J1ZFcxaVpYSWdiMllnWlc1MGFYUnNaV1FnYzJWaGRITWdLRzFoZUdsdGRXMGdZWE56YVdkdVlXSnNaU2tnWVc1a0lIUm9aU0JqZFhKeVpXNTBJRzUxYldKbGNpQnZaaUJoZG1GcGJHRmliR1VnYzJWaGRITXVYRzRnSUNBZ0lDb2dRSEJoY21GdElISmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVJRU52Ym1acFozVnlZWFJwYjI0Z1ptOXlJSFJvWlNCeVpYRjFaWE4wSUhOMVkyZ2dZWE1nYUdWaFpHVnljeXdnY1hWbGNua2djR0Z5WVcxbGRHVnljeXdnWVc1a0lHMXBaR1JzWlhkaGNtVWdiM0IwYVc5dWN5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NtVnpjRzl1YzJWSVlXNWtiR1Z5SUZKbGMzQnZibk5sSUdoaGJtUnNaWElnZEc4Z2RYTmxJR2x1SUhCc1lXTmxJRzltSUhSb1pTQmtaV1poZFd4MElISmxjM0J2Ym5ObElHaGhibVJzYVc1bklIQnliM1pwWkdWa0lHSjVJSFJvWlNCamIzSmxJSE5sY25acFkyVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkJ5YjIxcGMyVWdiMllnVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUW9jbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjQvT2lCWGFYUm9VMlZ5ZG1salpVbDBaVzFTWlhGMVpYTjBRblZwYkdSbGNrZGxkRkpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1SUh3Z2RXNWtaV1pwYm1Wa0xDQnlaWE53YjI1elpVaGhibVJzWlhJL09pQlNaWE53YjI1elpVaGhibVJzWlhJZ2ZDQjFibVJsWm1sdVpXUXBJRG9nVUhKdmJXbHpaVHhXTVdGc2NHaGhSMlYwVEdsalpXNXpaVkpsYzNCdmJuTmxJSHdnZFc1a1pXWnBibVZrUGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhKbGNYVmxjM1JKYm1adklEMGdkR2hwY3k1MGIwZGxkRkpsY1hWbGMzUkpibVp2Y20xaGRHbHZiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eVRXRndjR2x1WnpvZ1VtVmpiM0prUEhOMGNtbHVaeXdnVUdGeWMyRmliR1ZHWVdOMGIzSjVQRkJoY25OaFlteGxQajRnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSWpRd01Wd2lPaUJqY21WaGRHVldNV0ZzY0doaFIyVjBUR2xqWlc1elpWSmxjM0J2Ym5ObE5EQXhSWEp5YjNKR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSTBNRE5jSWpvZ1kzSmxZWFJsVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFF3TTBWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpTlRBd1hDSTZJR055WldGMFpWWXhZV3h3YUdGSFpYUk1hV05sYm5ObFVtVnpjRzl1YzJVMU1EQkZjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVXNYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxjWFZsYzNSQlpHRndkR1Z5UHk1elpXNWtRWE41Ym1NOFZqRmhiSEJvWVVkbGRFeHBZMlZ1YzJWU1pYTndiMjV6WlQ0b2NtVnhkV1Z6ZEVsdVptOHNJR055WldGMFpWWXhZV3h3YUdGSFpYUk1hV05sYm5ObFVtVnpjRzl1YzJWR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxMQ0J5WlhOd2IyNXpaVWhoYm1Sc1pYSXNJR1Z5Y205eVRXRndjR2x1WnlrZ1B6OGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZHlaWEYxWlhOMElHRmtZWEIwWlhJZ2FYTWdiblZzYkNjcEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRnpjMmxuYmlCdmNpQjFibUZ6YzJsbmJpQjFjMlZ5Y3lCMGJ5QnZjaUJtY205dElIUm9aU0JzYVdObGJuTmxMaUFnVlhObGNuTWdZWE56YVdkdVpXUWdiV0Y1SUdGalkyVnpjeUIwYUdVZ2MyVnlkbWxqWlNCcFpHVnVkR2xtYVdWa0lHSjVJSE5sY25acFkyVkpaQ0JoY3lCamIyNTBjbUZqZEdWa0lIZHBkR2dnWVc0Z2IzSm5ZVzVwZW1GMGFXOXVJQ2hwWkdWdWRHbG1hV1ZrSUdKNUlHOXlaMGxrS1M0Z1FYTnphV2R1WldRZ2RYTmxjbk1nWTI5dWMzVnRaU0JoSUd4cGJXbDBaV1FnYm5WdFltVnlJRzltSUhObFlYUnpJR2x1SUdFZ2JHbGpaVzV6WlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWW05a2VTQk5iMlJwWm5sVFpXRjBjMUpsY1hWbGMzUWdZWE56ZFcxcGJtY2dkMlVnWjJWMElIUm9aU0IxYzJWeVNXUWdaWFJqSUdaeWIyMGdkR2hsSUhKbGNYVmxjM1JsY2lCcGJpQjBhR1VnWVhWMGFHOXlhWHBoZEdsdmJpQm9aV0ZrWlhJZ2RHOGdkbUZzYVdSaGRHVWdhV1lnWVc0Z1hDSmhaRzFwYmx3aUlHTmhiaUJoWTNSMVlXeHNlU0JoWkdRZ2JHbGpaVzV6WlhNdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUlFTnZibVpwWjNWeVlYUnBiMjRnWm05eUlIUm9aU0J5WlhGMVpYTjBJSE4xWTJnZ1lYTWdhR1ZoWkdWeWN5d2djWFZsY25rZ2NHRnlZVzFsZEdWeWN5d2dZVzVrSUcxcFpHUnNaWGRoY21VZ2IzQjBhVzl1Y3k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnY21WemNHOXVjMlZJWVc1a2JHVnlJRkpsYzNCdmJuTmxJR2hoYm1Sc1pYSWdkRzhnZFhObElHbHVJSEJzWVdObElHOW1JSFJvWlNCa1pXWmhkV3gwSUhKbGMzQnZibk5sSUdoaGJtUnNhVzVuSUhCeWIzWnBaR1ZrSUdKNUlIUm9aU0JqYjNKbElITmxjblpwWTJWY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGQnliMjFwYzJVZ2IyWWdWakZoYkhCb1lVMXZaR2xtZVZObFlYUnpVbVZ6Y0c5dWMyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nY0c5emRDaGliMlI1T2lCTWFXTmxibk5sYzE5elpYSjJhV05sU1dSZlltOWtlU0I4SUhWdVpHVm1hVzVsWkN3Z2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNC9PaUJYYVhSb1UyVnlkbWxqWlVsMFpXMVNaWEYxWlhOMFFuVnBiR1JsY2xCdmMzUlNaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaUI4SUhWdVpHVm1hVzVsWkN3Z2NtVnpjRzl1YzJWSVlXNWtiR1Z5UHpvZ1VtVnpjRzl1YzJWSVlXNWtiR1Z5SUh3Z2RXNWtaV1pwYm1Wa0tTQTZJRkJ5YjIxcGMyVThWakZoYkhCb1lVMXZaR2xtZVZObFlYUnpVbVZ6Y0c5dWMyVWdmQ0IxYm1SbFptbHVaV1ErSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9JV0p2WkhrcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltSnZaSGtnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnhkV1Z6ZEVsdVptOGdQU0IwYUdsekxuUnZVRzl6ZEZKbGNYVmxjM1JKYm1admNtMWhkR2x2YmloY2JpQWdJQ0FnSUNBZ0lDQWdJR0p2Wkhrc0lISmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eVRXRndjR2x1WnpvZ1VtVmpiM0prUEhOMGNtbHVaeXdnVUdGeWMyRmliR1ZHWVdOMGIzSjVQRkJoY25OaFlteGxQajRnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSWpRd01Wd2lPaUJqY21WaGRHVldNV0ZzY0doaFRXOWthV1o1VTJWaGRITlNaWE53YjI1elpUUXdNVVZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lOREF6WENJNklHTnlaV0YwWlZZeFlXeHdhR0ZOYjJScFpubFRaV0YwYzFKbGMzQnZibk5sTkRBelJYSnliM0pHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENJMU1EQmNJam9nWTNKbFlYUmxWakZoYkhCb1lVMXZaR2xtZVZObFlYUnpVbVZ6Y0c5dWMyVTFNREJGY25KdmNrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsY1hWbGMzUkJaR0Z3ZEdWeVB5NXpaVzVrUVhONWJtTThWakZoYkhCb1lVMXZaR2xtZVZObFlYUnpVbVZ6Y0c5dWMyVStLSEpsY1hWbGMzUkpibVp2TENCamNtVmhkR1ZXTVdGc2NHaGhUVzlrYVdaNVUyVmhkSE5TWlhOd2IyNXpaVVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVc0lISmxjM0J2Ym5ObFNHRnVaR3hsY2l3Z1pYSnliM0pOWVhCd2FXNW5LU0EvUHlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvSjNKbGNYVmxjM1FnWVdSaGNIUmxjaUJwY3lCdWRXeHNKeWtwTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUJwYm1admNtMWhkR2x2YmlCaFltOTFkQ0IwYUdVZ2JHbGpaVzV6WlN3Z0lHbHVZMngxWkdsdVp5QjBhR1VnYm5WdFltVnlJRzltSUdWdWRHbDBiR1ZrSUhObFlYUnpJQ2h0WVhocGJYVnRJR0Z6YzJsbmJtRmliR1VwSUdGdVpDQjBhR1VnWTNWeWNtVnVkQ0J1ZFcxaVpYSWdiMllnWVhaaGFXeGhZbXhsSUhObFlYUnpMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnlaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaUJEYjI1bWFXZDFjbUYwYVc5dUlHWnZjaUIwYUdVZ2NtVnhkV1Z6ZENCemRXTm9JR0Z6SUdobFlXUmxjbk1zSUhGMVpYSjVJSEJoY21GdFpYUmxjbk1zSUdGdVpDQnRhV1JrYkdWM1lYSmxJRzl3ZEdsdmJuTXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2RHOUhaWFJTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjRvY21WeGRXVnpkRU52Ym1acFozVnlZWFJwYjI0L09pQlhhWFJvVTJWeWRtbGpaVWwwWlcxU1pYRjFaWE4wUW5WcGJHUmxja2RsZEZKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUlId2dkVzVrWldacGJtVmtLU0E2SUZKbGNYVmxjM1JKYm1admNtMWhkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhKbGNYVmxjM1JKYm1adklEMGdibVYzSUZKbGNYVmxjM1JKYm1admNtMWhkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFNXNW1ieTUxY214VVpXMXdiR0YwWlNBOUlIUm9hWE11ZFhKc1ZHVnRjR3hoZEdVN1hHNGdJQ0FnSUNBZ0lISmxjWFZsYzNSSmJtWnZMbkJoZEdoUVlYSmhiV1YwWlhKeklEMGdkR2hwY3k1d1lYUm9VR0Z5WVcxbGRHVnljenRjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dWFIUjBjRTFsZEdodlpDQTlJRWgwZEhCTlpYUm9iMlF1UjBWVU8xeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFNXNW1ieTVvWldGa1pYSnpXMXdpUVdOalpYQjBYQ0pkSUQwZ1cxd2lZWEJ3YkdsallYUnBiMjR2YW5OdmJsd2lYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWEYxWlhOMFNXNW1ieTVoWkdSU1pYRjFaWE4wU0dWaFpHVnljeWh5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2Ymk1b1pXRmtaWEp6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1Ga1pGSmxjWFZsYzNSUGNIUnBiMjV6S0hKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUxtOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWEYxWlhOMFNXNW1ienRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ6YzJsbmJpQnZjaUIxYm1GemMybG5iaUIxYzJWeWN5QjBieUJ2Y2lCbWNtOXRJSFJvWlNCc2FXTmxibk5sTGlBZ1ZYTmxjbk1nWVhOemFXZHVaV1FnYldGNUlHRmpZMlZ6Y3lCMGFHVWdjMlZ5ZG1salpTQnBaR1Z1ZEdsbWFXVmtJR0o1SUhObGNuWnBZMlZKWkNCaGN5QmpiMjUwY21GamRHVmtJSGRwZEdnZ1lXNGdiM0puWVc1cGVtRjBhVzl1SUNocFpHVnVkR2xtYVdWa0lHSjVJRzl5WjBsa0tTNGdRWE56YVdkdVpXUWdkWE5sY25NZ1kyOXVjM1Z0WlNCaElHeHBiV2wwWldRZ2JuVnRZbVZ5SUc5bUlITmxZWFJ6SUdsdUlHRWdiR2xqWlc1elpTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1ltOWtlU0JOYjJScFpubFRaV0YwYzFKbGNYVmxjM1FnWVhOemRXMXBibWNnZDJVZ1oyVjBJSFJvWlNCMWMyVnlTV1FnWlhSaklHWnliMjBnZEdobElISmxjWFZsYzNSbGNpQnBiaUIwYUdVZ1lYVjBhRzl5YVhwaGRHbHZiaUJvWldGa1pYSWdkRzhnZG1Gc2FXUmhkR1VnYVdZZ1lXNGdYQ0poWkcxcGJsd2lJR05oYmlCaFkzUjFZV3hzZVNCaFpHUWdiR2xqWlc1elpYTXVYRzRnSUNBZ0lDb2dRSEJoY21GdElISmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVJRU52Ym1acFozVnlZWFJwYjI0Z1ptOXlJSFJvWlNCeVpYRjFaWE4wSUhOMVkyZ2dZWE1nYUdWaFpHVnljeXdnY1hWbGNua2djR0Z5WVcxbGRHVnljeXdnWVc1a0lHMXBaR1JzWlhkaGNtVWdiM0IwYVc5dWN5NWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkpsY1hWbGMzUkpibVp2Y20xaGRHbHZibHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCMGIxQnZjM1JTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjRvWW05a2VUb2dUR2xqWlc1elpYTmZjMlZ5ZG1salpVbGtYMkp2WkhrZ2ZDQjFibVJsWm1sdVpXUXNJSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1UHpvZ1YybDBhRk5sY25acFkyVkpkR1Z0VW1WeGRXVnpkRUoxYVd4a1pYSlFiM04wVW1WeGRXVnpkRU52Ym1acFozVnlZWFJwYjI0Z2ZDQjFibVJsWm1sdVpXUXBJRG9nVW1WeGRXVnpkRWx1Wm05eWJXRjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2FXWW9JV0p2WkhrcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltSnZaSGtnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnhkV1Z6ZEVsdVptOGdQU0J1WlhjZ1VtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUtDazdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG5WeWJGUmxiWEJzWVhSbElEMGdkR2hwY3k1MWNteFVaVzF3YkdGMFpUdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFbHVabTh1Y0dGMGFGQmhjbUZ0WlhSbGNuTWdQU0IwYUdsekxuQmhkR2hRWVhKaGJXVjBaWEp6TzF4dUlDQWdJQ0FnSUNCeVpYRjFaWE4wU1c1bWJ5NW9kSFJ3VFdWMGFHOWtJRDBnU0hSMGNFMWxkR2h2WkM1UVQxTlVPMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBTVzVtYnk1b1pXRmtaWEp6VzF3aVFXTmpaWEIwWENKZElEMGdXMXdpWVhCd2JHbGpZWFJwYjI0dmFuTnZibHdpWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhGMVpYTjBTVzVtYnk1aFpHUlNaWEYxWlhOMFNHVmhaR1Z5Y3loeVpYRjFaWE4wUTI5dVptbG5kWEpoZEdsdmJpNW9aV0ZrWlhKektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNYVmxjM1JKYm1adkxtRmtaRkpsY1hWbGMzUlBjSFJwYjI1ektISmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVMbTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JKYm1adkxuTmxkRU52Ym5SbGJuUkdjbTl0VUdGeWMyRmliR1VvZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2l3Z1hDSmhjSEJzYVdOaGRHbHZiaTlxYzI5dVhDSXNJR0p2WkhrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnhkV1Z6ZEVsdVptODdYRzRnSUNBZ2ZUdGNibjFjYmlJc0ltbHRjRzl5ZENCN1oyVjBVR0YwYUZCaGNtRnRaWFJsY25Nc0lGSmxjWFZsYzNSQlpHRndkR1Z5ZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNiaThxS2x4dUlDb2dRblZwYkdSeklHRnVaQ0JsZUdWamRYUmxjeUJ5WlhGMVpYTjBjeUJtYjNJZ2IzQmxjbUYwYVc5dWN5QjFibVJsY2lBdmRqRmhiSEJvWVM5dmNtZHpMM3R2Y21kSlpIMHZiR2xqWlc1elpYTmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRXhwWTJWdWMyVnpVbVZ4ZFdWemRFSjFhV3hrWlhJZ2UxeHVJQ0FnSUM4cUtpQlFZWFJvSUhCaGNtRnRaWFJsY25NZ1ptOXlJSFJvWlNCeVpYRjFaWE4wSUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0J3WVhSb1VHRnlZVzFsZEdWeWN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0N1hHNGdJQ0FnTHlvcUlGUm9aU0J5WlhGMVpYTjBJR0ZrWVhCMFpYSWdkRzhnZFhObElIUnZJR1Y0WldOMWRHVWdkR2hsSUhKbGNYVmxjM1J6TGlBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnY21WeGRXVnpkRUZrWVhCMFpYSTZJRkpsY1hWbGMzUkJaR0Z3ZEdWeU8xeHVJQ0FnSUM4cUtpQlZjbXdnZEdWdGNHeGhkR1VnZEc4Z2RYTmxJSFJ2SUdKMWFXeGtJSFJvWlNCVlVrd2dabTl5SUhSb1pTQmpkWEp5Wlc1MElISmxjWFZsYzNRZ1luVnBiR1JsY2lBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnZFhKc1ZHVnRjR3hoZEdVNklITjBjbWx1Wnp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJuTjBZVzUwYVdGMFpYTWdZU0J1WlhjZ1RHbGpaVzV6WlhOU1pYRjFaWE4wUW5WcGJHUmxjaUJoYm1RZ2MyVjBjeUIwYUdVZ1pHVm1ZWFZzZENCMllXeDFaWE11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJoZEdoUVlYSmhiV1YwWlhKeklGUm9aU0J5WVhjZ2RYSnNJRzl5SUhSb1pTQlZjbXdnZEdWdGNHeGhkR1VnY0dGeVlXMWxkR1Z5Y3lCbWIzSWdkR2hsSUhKbGNYVmxjM1F1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsY1hWbGMzUkJaR0Z3ZEdWeUlGUm9aU0J5WlhGMVpYTjBJR0ZrWVhCMFpYSWdkRzhnZFhObElIUnZJR1Y0WldOMWRHVWdkR2hsSUhKbGNYVmxjM1J6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWh3WVhSb1VHRnlZVzFsZEdWeWN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0Z2ZDQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUXNJSEpsY1hWbGMzUkJaR0Z3ZEdWeU9pQlNaWEYxWlhOMFFXUmhjSFJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaWdoY0dGMGFGQmhjbUZ0WlhSbGNuTXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkJoZEdoUVlYSmhiV1YwWlhKeklHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUdsbUtDRnlaWEYxWlhOMFFXUmhjSFJsY2lrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWNtVnhkV1Z6ZEVGa1lYQjBaWElnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNteFVaVzF3YkdGMFpTQTlJRndpZXl0aVlYTmxkWEpzZlM5Mk1XRnNjR2hoTDI5eVozTXZlMjl5WjBsa2ZTOXNhV05sYm5ObGMxd2lPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjbXhVY0d4UVlYSmhiWE1nUFNCblpYUlFZWFJvVUdGeVlXMWxkR1Z5Y3lod1lYUm9VR0Z5WVcxbGRHVnljeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUZCaGNtRnRaWFJsY25NZ1BTQjFjbXhVY0d4UVlYSmhiWE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdWemRFRmtZWEIwWlhJZ1BTQnlaWEYxWlhOMFFXUmhjSFJsY2p0Y2JpQWdJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRYYVhSb1UyVnlkbWxqWlVsMFpXMVNaWEYxWlhOMFFuVnBiR1JsY24wZ1puSnZiU0FuTGk5c2FXTmxibk5sY3k5cGRHVnRMM2RwZEdoVFpYSjJhV05sU1hSbGJWSmxjWFZsYzNSQ2RXbHNaR1Z5Snp0Y2JtbHRjRzl5ZENCN1RHbGpaVzV6WlhOU1pYRjFaWE4wUW5WcGJHUmxjbjBnWm5KdmJTQW5MaTlzYVdObGJuTmxjeTlzYVdObGJuTmxjMUpsY1hWbGMzUkNkV2xzWkdWeUp6dGNibWx0Y0c5eWRDQjdaMlYwVUdGMGFGQmhjbUZ0WlhSbGNuTXNJRkpsY1hWbGMzUkJaR0Z3ZEdWeWZTQm1jbTl0SUNkQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5YzdYRzVjYmk4cUtseHVJQ29nUW5WcGJHUnpJR0Z1WkNCbGVHVmpkWFJsY3lCeVpYRjFaWE4wY3lCbWIzSWdiM0JsY21GMGFXOXVjeUIxYm1SbGNpQXZkakZoYkhCb1lTOXZjbWR6TDN0dmNtZEpaSDFjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZkcGRHaFBjbWRKZEdWdFVtVnhkV1Z6ZEVKMWFXeGtaWElnZTF4dUlDQWdJQzhxS2lCVWFHVWdiR2xqWlc1elpYTWdjSEp2Y0dWeWRIa2dLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJR3hwWTJWdWMyVnpLQ2s2SUV4cFkyVnVjMlZ6VW1WeGRXVnpkRUoxYVd4a1pYSWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUV4cFkyVnVjMlZ6VW1WeGRXVnpkRUoxYVd4a1pYSW9kR2hwY3k1d1lYUm9VR0Z5WVcxbGRHVnljeXdnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2lrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2lCUVlYUm9JSEJoY21GdFpYUmxjbk1nWm05eUlIUm9aU0J5WlhGMVpYTjBJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQndZWFJvVUdGeVlXMWxkR1Z5Y3pvZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajQ3WEc0Z0lDQWdMeW9xSUZSb1pTQnlaWEYxWlhOMElHRmtZWEIwWlhJZ2RHOGdkWE5sSUhSdklHVjRaV04xZEdVZ2RHaGxJSEpsY1hWbGMzUnpMaUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdjbVZ4ZFdWemRFRmtZWEIwWlhJNklGSmxjWFZsYzNSQlpHRndkR1Z5TzF4dUlDQWdJQzhxS2lCVmNtd2dkR1Z0Y0d4aGRHVWdkRzhnZFhObElIUnZJR0oxYVd4a0lIUm9aU0JWVWt3Z1ptOXlJSFJvWlNCamRYSnlaVzUwSUhKbGNYVmxjM1FnWW5WcGJHUmxjaUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdkWEpzVkdWdGNHeGhkR1U2SUhOMGNtbHVaenRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm5OMFlXNTBhV0YwWlhNZ1lTQnVaWGNnVjJsMGFFOXlaMGwwWlcxU1pYRjFaWE4wUW5WcGJHUmxjaUJoYm1RZ2MyVjBjeUIwYUdVZ1pHVm1ZWFZzZENCMllXeDFaWE11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJoZEdoUVlYSmhiV1YwWlhKeklGUm9aU0J5WVhjZ2RYSnNJRzl5SUhSb1pTQlZjbXdnZEdWdGNHeGhkR1VnY0dGeVlXMWxkR1Z5Y3lCbWIzSWdkR2hsSUhKbGNYVmxjM1F1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsY1hWbGMzUkJaR0Z3ZEdWeUlGUm9aU0J5WlhGMVpYTjBJR0ZrWVhCMFpYSWdkRzhnZFhObElIUnZJR1Y0WldOMWRHVWdkR2hsSUhKbGNYVmxjM1J6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWh3WVhSb1VHRnlZVzFsZEdWeWN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0Z2ZDQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUXNJSEpsY1hWbGMzUkJaR0Z3ZEdWeU9pQlNaWEYxWlhOMFFXUmhjSFJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaWdoY0dGMGFGQmhjbUZ0WlhSbGNuTXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkJoZEdoUVlYSmhiV1YwWlhKeklHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUdsbUtDRnlaWEYxWlhOMFFXUmhjSFJsY2lrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWNtVnhkV1Z6ZEVGa1lYQjBaWElnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNteFVaVzF3YkdGMFpTQTlJRndpZXl0aVlYTmxkWEpzZlM5Mk1XRnNjR2hoTDI5eVozTXZlMjl5WjBsa2ZWd2lPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjbXhVY0d4UVlYSmhiWE1nUFNCblpYUlFZWFJvVUdGeVlXMWxkR1Z5Y3lod1lYUm9VR0Z5WVcxbGRHVnljeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUZCaGNtRnRaWFJsY25NZ1BTQjFjbXhVY0d4UVlYSmhiWE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdWemRFRmtZWEIwWlhJZ1BTQnlaWEYxWlhOMFFXUmhjSFJsY2p0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdZVzRnYVhSbGJTQm1jbTl0SUhSb1pTQkJjR2xUWkdzdWRqRmhiSEJvWVM1dmNtZHpMbWwwWlcwdWJHbGpaVzV6WlhNdWFYUmxiU0JqYjJ4c1pXTjBhVzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR2xrSUZWdWFYRjFaU0JwWkdWdWRHbG1hV1Z5SUc5bUlIUm9aU0JwZEdWdFhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQlhhWFJvVTJWeWRtbGpaVWwwWlcxU1pYRjFaWE4wUW5WcGJHUmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCc2FXTmxibk5sYzBKNVNXUW9hV1E2SUhOMGNtbHVaeWtnT2lCWGFYUm9VMlZ5ZG1salpVbDBaVzFTWlhGMVpYTjBRblZwYkdSbGNpQjdYRzRnSUNBZ0lDQWdJR2xtS0NGcFpDa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lhV1FnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RYSnNWSEJzVUdGeVlXMXpJRDBnWjJWMFVHRjBhRkJoY21GdFpYUmxjbk1vZEdocGN5NXdZWFJvVUdGeVlXMWxkR1Z5Y3lrN1hHNGdJQ0FnSUNBZ0lIVnliRlJ3YkZCaGNtRnRjMXRjSW5ObGNuWnBZMlZKWkZ3aVhTQTlJR2xrWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1YybDBhRk5sY25acFkyVkpkR1Z0VW1WeGRXVnpkRUoxYVd4a1pYSW9kWEpzVkhCc1VHRnlZVzF6TENCMGFHbHpMbkpsY1hWbGMzUkJaR0Z3ZEdWeUtUdGNiaUFnSUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUh0blpYUlFZWFJvVUdGeVlXMWxkR1Z5Y3l3Z1VtVnhkV1Z6ZEVGa1lYQjBaWEo5SUdaeWIyMGdKMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6Snp0Y2JseHVMeW9xWEc0Z0tpQkNkV2xzWkhNZ1lXNWtJR1Y0WldOMWRHVnpJSEpsY1hWbGMzUnpJR1p2Y2lCdmNHVnlZWFJwYjI1eklIVnVaR1Z5SUM5Mk1XRnNjR2hoTDI5eVozTmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTl5WjNOU1pYRjFaWE4wUW5WcGJHUmxjaUI3WEc0Z0lDQWdMeW9xSUZCaGRHZ2djR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSEpsY1hWbGMzUWdLaTljYmlBZ0lDQndjbWwyWVhSbElIQmhkR2hRWVhKaGJXVjBaWEp6T2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQanRjYmlBZ0lDQXZLaW9nVkdobElISmxjWFZsYzNRZ1lXUmhjSFJsY2lCMGJ5QjFjMlVnZEc4Z1pYaGxZM1YwWlNCMGFHVWdjbVZ4ZFdWemRITXVJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQnlaWEYxWlhOMFFXUmhjSFJsY2pvZ1VtVnhkV1Z6ZEVGa1lYQjBaWEk3WEc0Z0lDQWdMeW9xSUZWeWJDQjBaVzF3YkdGMFpTQjBieUIxYzJVZ2RHOGdZblZwYkdRZ2RHaGxJRlZTVENCbWIzSWdkR2hsSUdOMWNuSmxiblFnY21WeGRXVnpkQ0JpZFdsc1pHVnlJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQjFjbXhVWlcxd2JHRjBaVG9nYzNSeWFXNW5PMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJQY21kelVtVnhkV1Z6ZEVKMWFXeGtaWElnWVc1a0lITmxkSE1nZEdobElHUmxabUYxYkhRZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J3WVhSb1VHRnlZVzFsZEdWeWN5QlVhR1VnY21GM0lIVnliQ0J2Y2lCMGFHVWdWWEpzSUhSbGJYQnNZWFJsSUhCaGNtRnRaWFJsY25NZ1ptOXlJSFJvWlNCeVpYRjFaWE4wTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J5WlhGMVpYTjBRV1JoY0hSbGNpQlVhR1VnY21WeGRXVnpkQ0JoWkdGd2RHVnlJSFJ2SUhWelpTQjBieUJsZUdWamRYUmxJSFJvWlNCeVpYRjFaWE4wY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdZMjl1YzNSeWRXTjBiM0lvY0dGMGFGQmhjbUZ0WlhSbGNuTTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K0lId2djM1J5YVc1bklId2dkVzVrWldacGJtVmtMQ0J5WlhGMVpYTjBRV1JoY0hSbGNqb2dVbVZ4ZFdWemRFRmtZWEIwWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lvSVhCaGRHaFFZWEpoYldWMFpYSnpLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhSb1VHRnlZVzFsZEdWeWN5QmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCcFppZ2hjbVZ4ZFdWemRFRmtZWEIwWlhJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luSmxjWFZsYzNSQlpHRndkR1Z5SUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYSnNWR1Z0Y0d4aGRHVWdQU0JjSW5zclltRnpaWFZ5YkgwdmRqRmhiSEJvWVM5dmNtZHpYQ0k3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFZ5YkZSd2JGQmhjbUZ0Y3lBOUlHZGxkRkJoZEdoUVlYSmhiV1YwWlhKektIQmhkR2hRWVhKaGJXVjBaWEp6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb1VHRnlZVzFsZEdWeWN5QTlJSFZ5YkZSd2JGQmhjbUZ0Y3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhGMVpYTjBRV1JoY0hSbGNpQTlJSEpsY1hWbGMzUkJaR0Z3ZEdWeU8xeHVJQ0FnSUgwN1hHNTlYRzRpTENKcGJYQnZjblFnZTBOb1pXTnJVbVZ4ZFdWemRFSjFhV3hrWlhKOUlHWnliMjBnSnk0dlkyaGxZMnN2WTJobFkydFNaWEYxWlhOMFFuVnBiR1JsY2ljN1hHNXBiWEJ2Y25RZ2UxZHBkR2hQY21kSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhKOUlHWnliMjBnSnk0dmIzSm5jeTlwZEdWdEwzZHBkR2hQY21kSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhJbk8xeHVhVzF3YjNKMElIdFBjbWR6VW1WeGRXVnpkRUoxYVd4a1pYSjlJR1p5YjIwZ0p5NHZiM0puY3k5dmNtZHpVbVZ4ZFdWemRFSjFhV3hrWlhJbk8xeHVhVzF3YjNKMElIdG5aWFJRWVhSb1VHRnlZVzFsZEdWeWN5d2dVbVZ4ZFdWemRFRmtZWEIwWlhKOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1THlvcVhHNGdLaUJDZFdsc1pITWdZVzVrSUdWNFpXTjFkR1Z6SUhKbGNYVmxjM1J6SUdadmNpQnZjR1Z5WVhScGIyNXpJSFZ1WkdWeUlDOTJNV0ZzY0doaFhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QldNV0ZzY0doaFVtVnhkV1Z6ZEVKMWFXeGtaWElnZTF4dUlDQWdJQzhxS2lCVWFHVWdZMmhsWTJzZ2NISnZjR1Z5ZEhrZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElHTm9aV05yS0NrNklFTm9aV05yVW1WeGRXVnpkRUoxYVd4a1pYSWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVOb1pXTnJVbVZ4ZFdWemRFSjFhV3hrWlhJb2RHaHBjeTV3WVhSb1VHRnlZVzFsZEdWeWN5d2dkR2hwY3k1eVpYRjFaWE4wUVdSaGNIUmxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLaUJVYUdVZ2IzSm5jeUJ3Y205d1pYSjBlU0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFFnYjNKbmN5Z3BPaUJQY21kelVtVnhkV1Z6ZEVKMWFXeGtaWElnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFOXlaM05TWlhGMVpYTjBRblZwYkdSbGNpaDBhR2x6TG5CaGRHaFFZWEpoYldWMFpYSnpMQ0IwYUdsekxuSmxjWFZsYzNSQlpHRndkR1Z5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xSUZCaGRHZ2djR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSEpsY1hWbGMzUWdLaTljYmlBZ0lDQndjbWwyWVhSbElIQmhkR2hRWVhKaGJXVjBaWEp6T2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQanRjYmlBZ0lDQXZLaW9nVkdobElISmxjWFZsYzNRZ1lXUmhjSFJsY2lCMGJ5QjFjMlVnZEc4Z1pYaGxZM1YwWlNCMGFHVWdjbVZ4ZFdWemRITXVJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQnlaWEYxWlhOMFFXUmhjSFJsY2pvZ1VtVnhkV1Z6ZEVGa1lYQjBaWEk3WEc0Z0lDQWdMeW9xSUZWeWJDQjBaVzF3YkdGMFpTQjBieUIxYzJVZ2RHOGdZblZwYkdRZ2RHaGxJRlZTVENCbWIzSWdkR2hsSUdOMWNuSmxiblFnY21WeGRXVnpkQ0JpZFdsc1pHVnlJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQjFjbXhVWlcxd2JHRjBaVG9nYzNSeWFXNW5PMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJXTVdGc2NHaGhVbVZ4ZFdWemRFSjFhV3hrWlhJZ1lXNWtJSE5sZEhNZ2RHaGxJR1JsWm1GMWJIUWdkbUZzZFdWekxseHVJQ0FnSUNBcUlFQndZWEpoYlNCd1lYUm9VR0Z5WVcxbGRHVnljeUJVYUdVZ2NtRjNJSFZ5YkNCdmNpQjBhR1VnVlhKc0lIUmxiWEJzWVhSbElIQmhjbUZ0WlhSbGNuTWdabTl5SUhSb1pTQnlaWEYxWlhOMExseHVJQ0FnSUNBcUlFQndZWEpoYlNCeVpYRjFaWE4wUVdSaGNIUmxjaUJVYUdVZ2NtVnhkV1Z6ZENCaFpHRndkR1Z5SUhSdklIVnpaU0IwYnlCbGVHVmpkWFJsSUhSb1pTQnlaWEYxWlhOMGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb2NHRjBhRkJoY21GdFpYUmxjbk02SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtJSHdnYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrTENCeVpYRjFaWE4wUVdSaGNIUmxjam9nVW1WeGRXVnpkRUZrWVhCMFpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYQmhkR2hRWVhKaGJXVjBaWEp6S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKd1lYUm9VR0Z5WVcxbGRHVnljeUJqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUNBZ0lDQnBaaWdoY21WeGRXVnpkRUZrWVhCMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkpsY1hWbGMzUkJaR0Z3ZEdWeUlHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEpzVkdWdGNHeGhkR1VnUFNCY0luc3JZbUZ6WlhWeWJIMHZkakZoYkhCb1lWd2lPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjbXhVY0d4UVlYSmhiWE1nUFNCblpYUlFZWFJvVUdGeVlXMWxkR1Z5Y3lod1lYUm9VR0Z5WVcxbGRHVnljeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUZCaGNtRnRaWFJsY25NZ1BTQjFjbXhVY0d4UVlYSmhiWE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdWemRFRmtZWEIwWlhJZ1BTQnlaWEYxWlhOMFFXUmhjSFJsY2p0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdZVzRnYVhSbGJTQm1jbTl0SUhSb1pTQkJjR2xUWkdzdWRqRmhiSEJvWVM1dmNtZHpMbWwwWlcwZ1kyOXNiR1ZqZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCcFpDQlZibWx4ZFdVZ2FXUmxiblJwWm1sbGNpQnZaaUIwYUdVZ2FYUmxiVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVjJsMGFFOXlaMGwwWlcxU1pYRjFaWE4wUW5WcGJHUmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCdmNtZHpRbmxKWkNocFpEb2djM1J5YVc1bktTQTZJRmRwZEdoUGNtZEpkR1Z0VW1WeGRXVnpkRUoxYVd4a1pYSWdlMXh1SUNBZ0lDQWdJQ0JwWmlnaGFXUXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbWxrSUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliRlJ3YkZCaGNtRnRjeUE5SUdkbGRGQmhkR2hRWVhKaGJXVjBaWEp6S0hSb2FYTXVjR0YwYUZCaGNtRnRaWFJsY25NcE8xeHVJQ0FnSUNBZ0lDQjFjbXhVY0d4UVlYSmhiWE5iWENKdmNtZEpaRndpWFNBOUlHbGtYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVjJsMGFFOXlaMGwwWlcxU1pYRjFaWE4wUW5WcGJHUmxjaWgxY214VWNHeFFZWEpoYlhNc0lIUm9hWE11Y21WeGRXVnpkRUZrWVhCMFpYSXBPMXh1SUNBZ0lIMDdYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QkVZWFJsVDI1c2VTd2dSSFZ5WVhScGIyNHNJRlJwYldWUGJteDVMQ0IwYjBacGNuTjBRMmhoY21GamRHVnlWWEJ3WlhJc0lIMGdabkp2YlNCY0lrQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpYQ0k3WEc1bGVIQnZjblFnWTJ4aGMzTWdTbk52YmxCaGNuTmxUbTlrWlNCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loZmFuTnZiazV2WkdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFuTnZiazV2WkdVZ1BTQmZhbk52Yms1dlpHVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyVjBVM1J5YVc1blZtRnNkV1VnUFNBb0tTQTlQaUIwYUdsekxsOXFjMjl1VG05a1pUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1blpYUkRhR2xzWkU1dlpHVWdQU0FvYVdSbGJuUnBabWxsY2lrZ1BUNGdibVYzSUVwemIyNVFZWEp6WlU1dlpHVW9kR2hwY3k1ZmFuTnZiazV2WkdWYmFXUmxiblJwWm1sbGNsMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtZGxkRUp2YjJ4bFlXNVdZV3gxWlNBOUlDZ3BJRDArSUhSb2FYTXVYMnB6YjI1T2IyUmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtZGxkRTUxYldKbGNsWmhiSFZsSUQwZ0tDa2dQVDRnZEdocGN5NWZhbk52Yms1dlpHVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyVjBSM1ZwWkZaaGJIVmxJRDBnS0NrZ1BUNGdkR2hwY3k1ZmFuTnZiazV2WkdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WjJWMFJHRjBaVlpoYkhWbElEMGdLQ2tnUFQ0Z2RHaHBjeTVmYW5OdmJrNXZaR1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMlYwUkdGMFpVOXViSGxXWVd4MVpTQTlJQ2dwSUQwK0lFUmhkR1ZQYm14NUxuQmhjbk5sS0hSb2FYTXVaMlYwVTNSeWFXNW5WbUZzZFdVb0tTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyVjBWR2x0WlU5dWJIbFdZV3gxWlNBOUlDZ3BJRDArSUZScGJXVlBibXg1TG5CaGNuTmxLSFJvYVhNdVoyVjBVM1J5YVc1blZtRnNkV1VvS1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WjJWMFJIVnlZWFJwYjI1V1lXeDFaU0E5SUNncElEMCtJRVIxY21GMGFXOXVMbkJoY25ObEtIUm9hWE11WjJWMFUzUnlhVzVuVm1Gc2RXVW9LU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMlYwUTI5c2JHVmpkR2x2Yms5bVVISnBiV2wwYVhabFZtRnNkV1Z6SUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJwemIyNU9iMlJsTG0xaGNDZ29lQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOMWNuSmxiblJRWVhKelpVNXZaR1VnUFNCdVpYY2dTbk52YmxCaGNuTmxUbTlrWlNoNEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMGVYQmxUMlpZSUQwZ2RIbHdaVzltSUhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWUFpsZ2dQVDA5SUZ3aVltOXZiR1ZoYmx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBVR0Z5YzJWT2IyUmxMbWRsZEVKdmIyeGxZVzVXWVd4MVpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gwZVhCbFQyWllJRDA5UFNCY0luTjBjbWx1WjF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBVR0Z5YzJWT2IyUmxMbWRsZEZOMGNtbHVaMVpoYkhWbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFI1Y0dWUFpsZ2dQVDA5SUZ3aWJuVnRZbVZ5WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR04xY25KbGJuUlFZWEp6WlU1dlpHVXVaMlYwVG5WdFltVnlWbUZzZFdVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9lQ0JwYm5OMFlXNWpaVzltSUVSaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOMWNuSmxiblJRWVhKelpVNXZaR1V1WjJWMFJHRjBaVlpoYkhWbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSGdnYVc1emRHRnVZMlZ2WmlCRVlYUmxUMjVzZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZM1Z5Y21WdWRGQmhjbk5sVG05a1pTNW5aWFJFWVhSbFZtRnNkV1VvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2VDQnBibk4wWVc1alpXOW1JRlJwYldWUGJteDVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwVUdGeWMyVk9iMlJsTG1kbGRFUmhkR1ZXWVd4MVpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2g0SUdsdWMzUmhibU5sYjJZZ1JIVnlZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR04xY25KbGJuUlFZWEp6WlU1dlpHVXVaMlYwUkdGMFpWWmhiSFZsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHVnVZMjkxYm5SbGNtVmtJR0Z1SUhWdWEyNXZkMjRnZEhsd1pTQmtkWEpwYm1jZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUNSN2RIbHdaVzltSUhoOVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMlYwUTI5c2JHVmpkR2x2Yms5bVQySnFaV04wVm1Gc2RXVnpJRDBnS0hSNWNHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cWMyOXVUbTlrWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1dFlYQW9LSGdwSUQwK0lHNWxkeUJLYzI5dVVHRnljMlZPYjJSbEtIZ3BLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV0WVhBb0tIZ3BJRDArSUhndVoyVjBUMkpxWldOMFZtRnNkV1VvZEhsd1pTa3BPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWRsZEU5aWFtVmpkRlpoYkhWbElEMGdLSFI1Y0dVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMzVnNkQ0E5SUhSNWNHVW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2YmtKbFptOXlaVUZ6YzJsbmJrWnBaV3hrVm1Gc2RXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZia0psWm05eVpVRnpjMmxuYmtacFpXeGtWbUZzZFdWektISmxjM1ZzZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GemMybG5ia1pwWld4a1ZtRnNkV1Z6S0hKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZia0ZtZEdWeVFYTnphV2R1Um1sbGJHUldZV3gxWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dVFXWjBaWEpCYzNOcFoyNUdhV1ZzWkZaaGJIVmxjeWh5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW5aWFJGYm5WdFZtRnNkV1Z6SUQwZ0tIUjVjR1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpoZDFaaGJIVmxjeUE5SUhSb2FYTXVaMlYwVTNSeWFXNW5WbUZzZFdVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjbUYzVm1Gc2RXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKaGQxWmhiSFZsY3k1emNHeHBkQ2hjSWl4Y0lpa3ViV0Z3S0NoNEtTQTlQaUIwZVhCbFczUnZSbWx5YzNSRGFHRnlZV04wWlhKVmNIQmxjaWg0S1YwcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtZGxkRVZ1ZFcxV1lXeDFaU0E5SUNoMGVYQmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlhNZ1BTQjBhR2x6TG1kbGRFVnVkVzFXWVd4MVpYTW9kSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1Z6TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1Z6V3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoYzNOcFoyNUdhV1ZzWkZaaGJIVmxjeUE5SUNocGRHVnRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQm1hV1ZzWkhNZ1BTQnBkR1Z0TG1kbGRFWnBaV3hrUkdWelpYSnBZV3hwZW1WeWN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2wwWlcxQlpHUnBkR2x2Ym1Gc1JHRjBZVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdodmJHUmxjaUE5SUdsMFpXMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hRzlzWkdWeUlDWW1JR2h2YkdSbGNpNWhaR1JwZEdsdmJtRnNSR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzFCWkdScGRHbHZibUZzUkdGMFlTQTlJR2h2YkdSbGNpNWhaR1JwZEdsdmJtRnNSR0YwWVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZhbk52Yms1dlpHVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9kR2hwY3k1ZmFuTnZiazV2WkdVcExtWnZja1ZoWTJnb0tGdHJMQ0IyWFNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUmxjMlZ5YVdGc2FYcGxjaUE5SUdacFpXeGtjMXRyWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR1Z6WlhKcFlXeHBlbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYzJWeWFXRnNhWHBsY2lodVpYY2dTbk52YmxCaGNuTmxUbTlrWlNoMktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR2wwWlcxQlpHUnBkR2x2Ym1Gc1JHRjBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0UVdSa2FYUnBiMjVoYkVSaGRHRmJhMTBnUFNCMk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNibjFjYmlJc0lpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTExYm5WelpXUXRaWGh3Y21WemMybHZibk1nS2k5Y2JtbHRjRzl5ZENCN0lFUmhkR1ZQYm14NUxDQkVkWEpoZEdsdmJpd2dWR2x0WlU5dWJIa3NJSDBnWm5KdmJTQmNJa0J0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6WENJN1hHNWxlSEJ2Y25RZ1kyeGhjM01nU25OdmJsTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbmR5YVhSbGNpQTlJRnRkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmR5YVhSbFUzUnlhVzVuVm1Gc2RXVWdQU0FvYTJWNUxDQjJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVJQ1ltSUhaaGJIVmxJQ1ltSUhSb2FYTXVkM0pwZEdWUWNtOXdaWEowZVU1aGJXVW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbElDWW1JSFJvYVhNdWQzSnBkR1Z5TG5CMWMyZ29ZRndpSkh0MllXeDFaWDFjSW1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUlDWW1JSFpoYkhWbElDWW1JSFJvYVhNdWQzSnBkR1Z5TG5CMWMyZ29Tbk52YmxObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJdWNISnZjR1Z5ZEhsVFpYQmhjbUYwYjNJcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsVUhKdmNHVnlkSGxPWVcxbElEMGdLR3RsZVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzY21sMFpYSXVjSFZ6YUNoZ1hDSWtlMnRsZVgxY0lqcGdLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzY21sMFpVSnZiMnhsWVc1V1lXeDFaU0E5SUNoclpYa3NJSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGMxWmhiSFZsVUhKbGMyVnVkQ0E5SUhaaGJIVmxJQ0U5UFNCdWRXeHNJQ1ltSUhaaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ0ppWWdhWE5XWVd4MVpWQnlaWE5sYm5RZ0ppWWdkR2hwY3k1M2NtbDBaVkJ5YjNCbGNuUjVUbUZ0WlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTldZV3gxWlZCeVpYTmxiblFnSmlZZ2RHaHBjeTUzY21sMFpYSXVjSFZ6YUNoZ0pIdDJZV3gxWlgxZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6Vm1Gc2RXVlFjbVZ6Wlc1MElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2NtbDBaWEl1Y0hWemFDaEtjMjl1VTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2k1d2NtOXdaWEowZVZObGNHRnlZWFJ2Y2lrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR1ZPZFcxaVpYSldZV3gxWlNBOUlDaHJaWGtzSUhaaGJIVmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ0ppWWdkbUZzZFdVZ0ppWWdkR2hwY3k1M2NtbDBaVkJ5YjNCbGNuUjVUbUZ0WlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnSmlZZ2RHaHBjeTUzY21sMFpYSXVjSFZ6YUNoZ0pIdDJZV3gxWlgxZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVTQW1KaUIyWVd4MVpTQW1KaUIwYUdsekxuZHlhWFJsY2k1d2RYTm9LRXB6YjI1VFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeUxuQnliM0JsY25SNVUyVndZWEpoZEc5eUtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNjbWwwWlVkMWFXUldZV3gxWlNBOUlDaHJaWGtzSUhaaGJIVmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ0ppWWdkbUZzZFdVZ0ppWWdkR2hwY3k1M2NtbDBaVkJ5YjNCbGNuUjVUbUZ0WlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnSmlZZ2RHaHBjeTUzY21sMFpYSXVjSFZ6YUNoZ1hDSWtlM1poYkhWbGZWd2lZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGtnSmlZZ2RtRnNkV1VnSmlZZ2RHaHBjeTUzY21sMFpYSXVjSFZ6YUNoS2MyOXVVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjaTV3Y205d1pYSjBlVk5sY0dGeVlYUnZjaWs3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDNKcGRHVkVZWFJsVm1Gc2RXVWdQU0FvYTJWNUxDQjJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVJQ1ltSUhaaGJIVmxJQ1ltSUhSb2FYTXVkM0pwZEdWUWNtOXdaWEowZVU1aGJXVW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbElDWW1JSFJvYVhNdWQzSnBkR1Z5TG5CMWMyZ29ZRndpSkh0MllXeDFaUzUwYjBsVFQxTjBjbWx1WnlncGZWd2lZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGtnSmlZZ2RtRnNkV1VnSmlZZ2RHaHBjeTUzY21sMFpYSXVjSFZ6YUNoS2MyOXVVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjaTV3Y205d1pYSjBlVk5sY0dGeVlYUnZjaWs3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDNKcGRHVkVZWFJsVDI1c2VWWmhiSFZsSUQwZ0tHdGxlU3dnZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVNBbUppQjJZV3gxWlNBbUppQjBhR2x6TG5keWFYUmxVSEp2Y0dWeWRIbE9ZVzFsS0d0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaU0FtSmlCMGFHbHpMbmR5YVhSbGNpNXdkWE5vS0dCY0lpUjdkbUZzZFdVdWRHOVRkSEpwYm1jb0tYMWNJbUFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1SUNZbUlIWmhiSFZsSUNZbUlIUm9hWE11ZDNKcGRHVnlMbkIxYzJnb1NuTnZibE5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEl1Y0hKdmNHVnlkSGxUWlhCaGNtRjBiM0lwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxWR2x0WlU5dWJIbFdZV3gxWlNBOUlDaHJaWGtzSUhaaGJIVmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ0ppWWdkbUZzZFdVZ0ppWWdkR2hwY3k1M2NtbDBaVkJ5YjNCbGNuUjVUbUZ0WlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnSmlZZ2RHaHBjeTUzY21sMFpYSXVjSFZ6YUNoZ1hDSWtlM1poYkhWbExuUnZVM1J5YVc1bktDbDlYQ0pnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVNBbUppQjJZV3gxWlNBbUppQjBhR2x6TG5keWFYUmxjaTV3ZFhOb0tFcHpiMjVUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5TG5CeWIzQmxjblI1VTJWd1lYSmhkRzl5S1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M2NtbDBaVVIxY21GMGFXOXVWbUZzZFdVZ1BTQW9hMlY1TENCMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUlDWW1JSFpoYkhWbElDWW1JSFJvYVhNdWQzSnBkR1ZRY205d1pYSjBlVTVoYldVb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsSUNZbUlIUm9hWE11ZDNKcGRHVnlMbkIxYzJnb1lGd2lKSHQyWVd4MVpTNTBiMU4wY21sdVp5Z3BmVndpWUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ0ppWWdkbUZzZFdVZ0ppWWdkR2hwY3k1M2NtbDBaWEl1Y0hWemFDaEtjMjl1VTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2k1d2NtOXdaWEowZVZObGNHRnlZWFJ2Y2lrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR1ZPZFd4c1ZtRnNkV1VnUFNBb2EyVjVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ0ppWWdkR2hwY3k1M2NtbDBaVkJ5YjNCbGNuUjVUbUZ0WlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzY21sMFpYSXVjSFZ6YUNoZ2JuVnNiR0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1SUNZbUlIUm9hWE11ZDNKcGRHVnlMbkIxYzJnb1NuTnZibE5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEl1Y0hKdmNHVnlkSGxUWlhCaGNtRjBiM0lwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxRMjlzYkdWamRHbHZiazltVUhKcGJXbDBhWFpsVm1Gc2RXVnpJRDBnS0d0bGVTd2dkbUZzZFdWektTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUlDWW1JSFJvYVhNdWQzSnBkR1ZRY205d1pYSjBlVTVoYldVb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsY2k1d2RYTm9LR0JiWUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6TG1admNrVmhZMmdvS0hZc0lHbGtlQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsUVc1NVZtRnNkV1VvZFc1a1pXWnBibVZrTENCMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdSNElDc2dNU0E4SUhaaGJIVmxjeTVzWlc1bmRHZ2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR1Z5TG5CMWMyZ29Tbk52YmxObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJdWNISnZjR1Z5ZEhsVFpYQmhjbUYwYjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR1Z5TG5CMWMyZ29ZRjFnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYa2dKaVlnZEdocGN5NTNjbWwwWlhJdWNIVnphQ2hLYzI5dVUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNpNXdjbTl3WlhKMGVWTmxjR0Z5WVhSdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR1ZEYjJ4c1pXTjBhVzl1VDJaUFltcGxZM1JXWVd4MVpYTWdQU0FvYTJWNUxDQjJZV3gxWlhNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ0ppWWdkR2hwY3k1M2NtbDBaVkJ5YjNCbGNuUjVUbUZ0WlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR1Z5TG5CMWMyZ29ZRnRnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaWE11Wm05eVJXRmphQ2dvZGlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmR5YVhSbFQySnFaV04wVm1Gc2RXVW9kVzVrWldacGJtVmtMQ0IyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2NtbDBaWEl1Y0hWemFDaEtjMjl1VTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2k1d2NtOXdaWEowZVZObGNHRnlZWFJ2Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0haaGJIVmxjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2Y21WdGIzWnBibWNnZEdobElHeGhjM1FnYzJWd1lYSmhkRzl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDNKcGRHVnlMbkJ2Y0NncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxjaTV3ZFhOb0tHQmRZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUlDWW1JSFJvYVhNdWQzSnBkR1Z5TG5CMWMyZ29Tbk52YmxObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJdWNISnZjR1Z5ZEhsVFpYQmhjbUYwYjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxUMkpxWldOMFZtRnNkV1VnUFNBb2EyVjVMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxVSEp2Y0dWeWRIbE9ZVzFsS0d0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNUNaV1p2Y21WUFltcGxZM1JUWlhKcFlXeHBlbUYwYVc5dUlDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViMjVDWldadmNtVlBZbXBsWTNSVFpYSnBZV3hwZW1GMGFXOXVLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxjaTV3ZFhOb0tHQjdZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZibE4wWVhKMFQySnFaV04wVTJWeWFXRnNhWHBoZEdsdmJpQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VTNSaGNuUlBZbXBsWTNSVFpYSnBZV3hwZW1GMGFXOXVLSFpoYkhWbExDQjBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaUzV6WlhKcFlXeHBlbVVvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrRm1kR1Z5VDJKcVpXTjBVMlZ5YVdGc2FYcGhkR2x2YmlBbUppQjBhR2x6TG05dVFXWjBaWEpQWW1wbFkzUlRaWEpwWVd4cGVtRjBhVzl1S0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUzY21sMFpYSXViR1Z1WjNSb0lENGdNQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxjbHQwYUdsekxuZHlhWFJsY2k1c1pXNW5kR2dnTFNBeFhTQTlQVDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXB6YjI1VFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeUxuQnliM0JsY25SNVUyVndZWEpoZEc5eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dmNtVnRiM1pwYm1jZ2RHaGxJR3hoYzNRZ2MyVndZWEpoZEc5eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR1Z5TG5CdmNDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsY2k1d2RYTm9LR0I5WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVJQ1ltSUhSb2FYTXVkM0pwZEdWeUxuQjFjMmdvU25OdmJsTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSXVjSEp2Y0dWeWRIbFRaWEJoY21GMGIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsUlc1MWJWWmhiSFZsSUQwZ0tHdGxlU3dnTGk0dWRtRnNkV1Z6S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdWekxteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlZWGRXWVd4MVpYTWdQU0IyWVd4MVpYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1acGJIUmxjaWdvZUNrZ1BUNGdlQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YldGd0tDaDRLU0E5UGlCZ0pIdDRmV0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlZWGRXWVd4MVpYTXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxVM1J5YVc1blZtRnNkV1VvYTJWNUxDQnlZWGRXWVd4MVpYTXVjbVZrZFdObEtDaDRMQ0I1S1NBOVBpQmdKSHQ0ZlN3Z0pIdDVmV0FwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WjJWMFUyVnlhV0ZzYVhwbFpFTnZiblJsYm5RZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIyNTJaWEowVTNSeWFXNW5WRzlCY25KaGVVSjFabVpsY2loMGFHbHpMbmR5YVhSbGNpNXFiMmx1S0dCZ0tTazdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZG1WeWRGTjBjbWx1WjFSdlFYSnlZWGxDZFdabVpYSWdQU0FvYzNSeUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGNuSmhlVUoxWm1abGNpQTlJRzVsZHlCQmNuSmhlVUoxWm1abGNpaHpkSEl1YkdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhWcGJuUTRRWEp5WVhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoaGNuSmhlVUoxWm1abGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElITjBjaTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnBiblE0UVhKeVlYbGJhVjBnUFNCemRISXVZMmhoY2tOdlpHVkJkQ2hwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVUoxWm1abGNqdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNjbWwwWlVGa1pHbDBhVzl1WVd4RVlYUmhJRDBnS0haaGJIVmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYWmhiSFZsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdhMlY1SUdsdUlIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzY21sMFpVRnVlVlpoYkhWbEtHdGxlU3dnZG1Gc2RXVmJhMlY1WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDNKcGRHVk9iMjVRWVhKellXSnNaVTlpYW1WamRGWmhiSFZsSUQwZ0tHdGxlU3dnZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoclpYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsVUhKdmNHVnlkSGxPWVcxbEtHdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmR5YVhSbGNpNXdkWE5vS0VwVFQwNHVjM1J5YVc1bmFXWjVLSFpoYkhWbEtTd2dTbk52YmxObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJdWNISnZjR1Z5ZEhsVFpYQmhjbUYwYjNJcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsUVc1NVZtRnNkV1VnUFNBb2EyVjVMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0haaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkbUZzZFdVZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMllXeDFaVlI1Y0dVZ1BTQjBlWEJsYjJZZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsVkhsd1pTQTlQVDBnWENKaWIyOXNaV0Z1WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNjbWwwWlVKdmIyeGxZVzVXWVd4MVpTaHJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvZG1Gc2RXVlVlWEJsSUQwOVBTQmNJbk4wY21sdVoxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDNKcGRHVlRkSEpwYm1kV1lXeDFaU2hyWlhrc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCRVlYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDNKcGRHVkVZWFJsVm1Gc2RXVW9hMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0haaGJIVmxJR2x1YzNSaGJtTmxiMllnUkdGMFpVOXViSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2NtbDBaVVJoZEdWUGJteDVWbUZzZFdVb2EyVjVMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdWR2x0WlU5dWJIa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzY21sMFpWUnBiV1ZQYm14NVZtRnNkV1VvYTJWNUxDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1JIVnlZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNjbWwwWlVSMWNtRjBhVzl1Vm1Gc2RXVW9hMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0haaGJIVmxWSGx3WlNBOVBUMGdYQ0p1ZFcxaVpYSmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxUblZ0WW1WeVZtRnNkV1VvYTJWNUxDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDNKcGRHVkRiMnhzWldOMGFXOXVUMlpRY21sdGFYUnBkbVZXWVd4MVpYTW9hMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0haaGJIVmxWSGx3WlNBOVBUMGdYQ0p2WW1wbFkzUmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxUbTl1VUdGeWMyRmliR1ZQWW1wbFkzUldZV3gxWlNoclpYa3NJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdaVzVqYjNWdWRHVnlaV1FnZFc1cmJtOTNiaUIyWVd4MVpTQjBlWEJsSUdSMWNtbHVaeUJ6WlhKcFlXeHBlbUYwYVc5dUlDUjdkbUZzZFdWVWVYQmxmV0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkM0pwZEdWT2RXeHNWbUZzZFdVb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzU5WEc1S2MyOXVVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjaTV3Y205d1pYSjBlVk5sY0dGeVlYUnZjaUE5SUdBc1lEdGNiaUlzSW1sdGNHOXlkQ0I3SUVwemIyNVFZWEp6WlU1dlpHVWdmU0JtY205dElGd2lMaTh1TGk5cWMyOXVVR0Z5YzJWT2IyUmxYQ0k3WEc1bGVIQnZjblFnWTJ4aGMzTWdTbk52YmxCaGNuTmxUbTlrWlVaaFkzUnZjbmtnZTF4dUlDQWdJR2RsZEZaaGJHbGtRMjl1ZEdWdWRGUjVjR1VvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0ltRndjR3hwWTJGMGFXOXVMMnB6YjI1Y0lqdGNiaUFnSUNCOVhHNGdJQ0FnWjJWMFVtOXZkRkJoY25ObFRtOWtaU2hqYjI1MFpXNTBWSGx3WlN3Z1kyOXVkR1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdOdmJuUmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbU52Ym5SbGJuUWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaQ0J2WmlCbGJYQjBlVndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDZ2hZMjl1ZEdWdWRGUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbU52Ym5SbGJuUWdkSGx3WlNCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa0lHOXlJR1Z0Y0hSNVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hSb2FYTXVaMlYwVm1Gc2FXUkRiMjUwWlc1MFZIbHdaU2dwSUNFOVBTQmpiMjUwWlc1MFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQmxlSEJsWTNSbFpDQmhJQ1I3ZEdocGN5NW5aWFJXWVd4cFpFTnZiblJsYm5SVWVYQmxLQ2w5SUdOdmJuUmxiblFnZEhsd1pXQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NuTnZibEJoY25ObFRtOWtaU2gwYUdsekxtTnZiblpsY25SQmNuSmhlVUoxWm1abGNsUnZTbk52YmloamIyNTBaVzUwS1NrN1hHNGdJQ0FnZlZ4dUlDQWdJR052Ym5abGNuUkJjbkpoZVVKMVptWmxjbFJ2U25OdmJpaGpiMjUwWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHUmxZMjlrWlhJZ1BTQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXVkR1Z1ZEVGelUzUnlJRDBnWkdWamIyUmxjaTVrWldOdlpHVW9ZMjl1ZEdWdWRDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5CaGNuTmxLR052Ym5SbGJuUkJjMU4wY2lrN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnU25OdmJsTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSWdmU0JtY205dElGd2lMaTlxYzI5dVUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNsd2lPMXh1Wlhod2IzSjBJR05zWVhOeklFcHpiMjVUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5Um1GamRHOXllU0I3WEc0Z0lDQWdaMlYwVm1Gc2FXUkRiMjUwWlc1MFZIbHdaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVlYQndiR2xqWVhScGIyNHZhbk52Ymx3aU8xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhSVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeUtHTnZiblJsYm5SVWVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZMjl1ZEdWdWRGUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbU52Ym5SbGJuUWdkSGx3WlNCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa0lHOXlJR1Z0Y0hSNVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hSb2FYTXVaMlYwVm1Gc2FXUkRiMjUwWlc1MFZIbHdaU2dwSUNFOVBTQmpiMjUwWlc1MFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQmxlSEJsWTNSbFpDQmhJQ1I3ZEdocGN5NW5aWFJXWVd4cFpFTnZiblJsYm5SVWVYQmxLQ2w5SUdOdmJuUmxiblFnZEhsd1pXQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NuTnZibE5sY21saGJHbDZZWFJwYjI1WGNtbDBaWElvS1R0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMVl4WVd4d2FHRlNaWEYxWlhOMFFuVnBiR1JsY24wZ1puSnZiU0FuTGk5Mk1XRnNjR2hoTDNZeFlXeHdhR0ZTWlhGMVpYTjBRblZwYkdSbGNpYzdYRzVwYlhCdmNuUWdlM0psWjJsemRHVnlSR1ZtWVhWc2RFUmxjMlZ5YVdGc2FYcGxjaXdnY21WbmFYTjBaWEpFWldaaGRXeDBVMlZ5YVdGc2FYcGxjaXdnVW1WeGRXVnpkRUZrWVhCMFpYSjlJR1p5YjIwZ0owQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpKenRjYm1sdGNHOXlkQ0I3U25OdmJsQmhjbk5sVG05a1pVWmhZM1J2Y25rc0lFcHpiMjVUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5Um1GamRHOXllWDBnWm5KdmJTQW5RRzFwWTNKdmMyOW1kQzlyYVc5MFlTMXpaWEpwWVd4cGVtRjBhVzl1TFdwemIyNG5PMXh1WEc0dktpcGNiaUFxSUZSb1pTQnRZV2x1SUdWdWRISjVJSEJ2YVc1MElHOW1JSFJvWlNCVFJFc3NJR1Y0Y0c5elpYTWdkR2hsSUdOdmJtWnBaM1Z5WVhScGIyNGdZVzVrSUhSb1pTQm1iSFZsYm5RZ1FWQkpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUVhWMGFIb2dlMXh1SUNBZ0lDOHFLaUJRWVhSb0lIQmhjbUZ0WlhSbGNuTWdabTl5SUhSb1pTQnlaWEYxWlhOMElDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCd1lYUm9VR0Z5WVcxbGRHVnljem9nVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNDdYRzRnSUNBZ0x5b3FJRlJvWlNCeVpYRjFaWE4wSUdGa1lYQjBaWElnZEc4Z2RYTmxJSFJ2SUdWNFpXTjFkR1VnZEdobElISmxjWFZsYzNSekxpQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ2NtVnhkV1Z6ZEVGa1lYQjBaWEk2SUZKbGNYVmxjM1JCWkdGd2RHVnlPMXh1SUNBZ0lDOHFLaUJWY213Z2RHVnRjR3hoZEdVZ2RHOGdkWE5sSUhSdklHSjFhV3hrSUhSb1pTQlZVa3dnWm05eUlIUm9aU0JqZFhKeVpXNTBJSEpsY1hWbGMzUWdZblZwYkdSbGNpQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ2RYSnNWR1Z0Y0d4aGRHVTZJSE4wY21sdVp6dGNiaUFnSUNBdktpb2dWR2hsSUhZeFlXeHdhR0VnY0hKdmNHVnlkSGtnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUhZeFlXeHdhR0VvS1RvZ1ZqRmhiSEJvWVZKbGNYVmxjM1JDZFdsc1pHVnlJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCV01XRnNjR2hoVW1WeGRXVnpkRUoxYVd4a1pYSW9kR2hwY3k1d1lYUm9VR0Z5WVcxbGRHVnljeXdnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2lrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVsdWMzUmhiblJwWVhSbGN5QmhJRzVsZHlCQmRYUm9laUJoYm1RZ2MyVjBjeUIwYUdVZ1pHVm1ZWFZzZENCMllXeDFaWE11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsY1hWbGMzUkJaR0Z3ZEdWeUlGUm9aU0J5WlhGMVpYTjBJR0ZrWVhCMFpYSWdkRzhnZFhObElIUnZJR1Y0WldOMWRHVWdkR2hsSUhKbGNYVmxjM1J6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWh5WlhGMVpYTjBRV1JoY0hSbGNqb2dVbVZ4ZFdWemRFRmtZWEIwWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lvSVhKbGNYVmxjM1JCWkdGd2RHVnlLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p5WlhGMVpYTjBRV1JoY0hSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdoUVlYSmhiV1YwWlhKeklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEpzVkdWdGNHeGhkR1VnUFNCY0luc3JZbUZ6WlhWeWJIMWNJanRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2lBOUlISmxjWFZsYzNSQlpHRndkR1Z5TzF4dUlDQWdJQ0FnSUNCeVpXZHBjM1JsY2tSbFptRjFiSFJUWlhKcFlXeHBlbVZ5S0VwemIyNVRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlSbUZqZEc5eWVTazdYRzRnSUNBZ0lDQWdJSEpsWjJsemRHVnlSR1ZtWVhWc2RFUmxjMlZ5YVdGc2FYcGxjaWhLYzI5dVVHRnljMlZPYjJSbFJtRmpkRzl5ZVNrN1hHNGdJQ0FnSUNBZ0lDOHZJR2xtSUNoeVpYRjFaWE4wUVdSaGNIUmxjaTVpWVhObFZYSnNJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2djbVZ4ZFdWemRFRmtZWEIwWlhJdVltRnpaVlZ5YkNBOVBUMGdYQ0pjSWlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUFnSUNBZ2NtVnhkV1Z6ZEVGa1lYQjBaWEl1WW1GelpWVnliQ0E5SUZ3aWFIUjBjSE02THk5amFXRnRMV0YxZEdoNkxXaDNMV05wWVcwdFlYVjBhSG90TFhKMWJuUnBiV1V0WlhoMExtRndjSE11WlhoMExuTndiMnRsTG5CeVpYQnliMlF1ZFhNdFpXRnpkQzB4TG1GM2N5NXdZV0Z6TG5KbFpHaGhkQzVqYjIxY0lqdGNiaUFnSUNBZ0lDQWdMeThnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdoUVlYSmhiV1YwWlhKelcxd2lZbUZ6WlhWeWJGd2lYU0E5SUZ3aVhDSTdYRzRnSUNBZ2ZUdGNibjFjYmlJc0ltbHRjRzl5ZENCN0lFWmxkR05vVW1WeGRXVnpkRUZrWVhCMFpYSWdmU0JtY205dElGd2lRRzFwWTNKdmMyOW1kQzlyYVc5MFlTMW9kSFJ3TFdabGRHTm9iR2xpY21GeWVWd2lPMXh1YVcxd2IzSjBJSHNnUVc1dmJubHRiM1Z6UVhWMGFHVnVkR2xqWVhScGIyNVFjbTkyYVdSbGNpQjlJR1p5YjIwZ1hDSkFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjMXdpTzF4dVhHNXBiWEJ2Y25RZ2V5QkRhR1ZqYTFKbGNYVmxjM1JDZFdsc1pHVnlVRzl6ZEZKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUlIMGdabkp2YlNCY0lpNHZkakZoYkhCb1lTOWphR1ZqYXk5amFHVmphMUpsY1hWbGMzUkNkV2xzWkdWeVVHOXpkRkpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1WENJN1hHNXBiWEJ2Y25RZ2V5Qk1hV05sYm5ObExDQk1hV05sYm5ObFUyVnlkbWxqWlN3Z1ZYTmxjaUI5SUdaeWIyMGdYQ0l1TGk5elpYSjJhV05sWENJN1hHNXBiWEJ2Y25RZ2V5Qk1hV05sYm5ObGMxOXpaWEoyYVdObFNXUmZZbTlrZVNCOUlHWnliMjBnWENJdUwyMXZaR1ZzYzF3aU8xeHVhVzF3YjNKMElIc2dRWFYwYUhvZ2ZTQm1jbTl0SUZ3aUxpOWhkWFJvZWx3aU8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1EybGhiVUYxZEdoNklHbHRjR3hsYldWdWRITWdUR2xqWlc1elpWTmxjblpwWTJVZ2UxeHVJQ0J3Y21sMllYUmxJR05zYVdWdWREb2dRWFYwYUhvN1hHNGdJSEJ5YVhaaGRHVWdjbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjQ3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWW1GelpWVnliRDg2SUhOMGNtbHVaeWtnZTF4dUlDQWdJR052Ym5OMElHRmtZWEIwWlhJZ1BTQnVaWGNnUm1WMFkyaFNaWEYxWlhOMFFXUmhjSFJsY2loY2JpQWdJQ0FnSUc1bGR5QkJibTl1ZVcxdmRYTkJkWFJvWlc1MGFXTmhkR2x2YmxCeWIzWnBaR1Z5S0NsY2JpQWdJQ0FwTzF4dUlDQWdJR0ZrWVhCMFpYSXVZbUZ6WlZWeWJDQTlJR0poYzJWVmNtd2dmSHdnWENKY0lqdGNiaUFnSUNCMGFHbHpMbU5zYVdWdWRDQTlJRzVsZHlCQmRYUm9laWhoWkdGd2RHVnlLVHRjYmlBZ0lDQjBhR2x6TG5KbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUlEMWNiaUFnSUNBZ0lHNWxkeUJEYUdWamExSmxjWFZsYzNSQ2RXbHNaR1Z5VUc5emRGSmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVLQ2s3WEc0Z0lDQWdkR2hwY3k1eVpYRjFaWE4wUTI5dVptbG5kWEpoZEdsdmJpNW9aV0ZrWlhKeklEMGdleUJCZFhSb2IzSnBlbUYwYVc5dU9pQmJYQ0owYjJ0bGJsd2lYU0I5TzF4dUlDQjlYRzVjYmlBZ1lYTjVibU1nWjJWMEtHOXlaMGxrT2lCemRISnBibWNzSUhObGNuWnBZMlZKWkRvZ2MzUnlhVzVuS1RvZ1VISnZiV2x6WlR4TWFXTmxibk5sUGlCN1hHNGdJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdZWGRoYVhRZ2RHaHBjeTVqYkdsbGJuUXVkakZoYkhCb1lWeHVJQ0FnSUNBZ0xtOXlaM05DZVVsa0tHOXlaMGxrS1Z4dUlDQWdJQ0FnTG14cFkyVnVjMlZ6UW5sSlpDaHpaWEoyYVdObFNXUXBYRzRnSUNBZ0lDQXVaMlYwS0hSb2FYTXVjbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRwTzF4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQmhkbUZwYkdGaWJHVTZJSEpsYzNWc2REOHVjMlZoZEhOQmRtRnBiR0ZpYkdVZ2ZId2dNQ3hjYmlBZ0lDQWdJSFJ2ZEdGc09pQnlaWE4xYkhRL0xuTmxZWFJ6Vkc5MFlXd2dmSHdnTUN4Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ1lYTjVibU1nYzJWaGRITW9YRzRnSUNBZ2IzSm5TV1E2SUhOMGNtbHVaeXhjYmlBZ0lDQnpaWEoyYVdObFNXUTZJSE4wY21sdVp5eGNiaUFnSUNCaGMzTnBaMjVsWkRvZ1ltOXZiR1ZoYmlCOElIVnVaR1ZtYVc1bFpDQTlJSFJ5ZFdWY2JpQWdLVG9nVUhKdmJXbHpaVHhWYzJWeVcxMCtJSHRjYmlBZ0lDQmpiMjV6ZENCeVpYTjFiSFFnUFNCaGQyRnBkQ0IwYUdsekxtTnNhV1Z1ZEM1Mk1XRnNjR2hoWEc0Z0lDQWdJQ0F1YjNKbmMwSjVTV1FvYjNKblNXUXBYRzRnSUNBZ0lDQXViR2xqWlc1elpYTkNlVWxrS0hObGNuWnBZMlZKWkNsY2JpQWdJQ0FnSUM1elpXRjBjeTVuWlhRb2UxeHVJQ0FnSUNBZ0lDQm9aV0ZrWlhKek9pQjBhR2x6TG5KbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUxtaGxZV1JsY25Nc1hHNGdJQ0FnSUNBZ0lIRjFaWEo1VUdGeVlXMWxkR1Z5Y3pvZ2V5Qm1hV3gwWlhJNklHRnpjMmxuYm1Wa0lEOGdYQ0poYzNOcFoyNWxaRndpSURvZ1hDSmhjM05wWjI1aFlteGxYQ0lnZlN4Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0J5WlhOMWJIUS9MblZ6WlhKelB5NXRZWEFvS0hzZ2FXUXNJR1JwYzNCc1lYbE9ZVzFsTENCaGMzTnBaMjVsWkNCOUtTQTlQaUFvZTF4dUlDQWdJQ0FnSUNCcFpEb2dhV1FnZkh3Z1hDSmNJaXhjYmlBZ0lDQWdJQ0FnYm1GdFpUb2daR2x6Y0d4aGVVNWhiV1VnZkh3Z1hDSmNJaXhjYmlBZ0lDQWdJQ0FnWVhOemFXZHVaV1E2SUNFaFlYTnphV2R1WldRc1hHNGdJQ0FnSUNCOUtTa2dmSHdnVzExY2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ1lYTjVibU1nWVhOemFXZHVLRnh1SUNBZ0lHOXlaMGxrT2lCemRISnBibWNzWEc0Z0lDQWdjMlZ5ZG1salpVbGtPaUJ6ZEhKcGJtY3NYRzRnSUNBZ2RYTmxja2xrY3pvZ2MzUnlhVzVuVzExY2JpQWdLVG9nVUhKdmJXbHpaVHgyYjJsa1BpQjdYRzRnSUNBZ1kyOXVjM1FnWW05a2VTQTlJRzVsZHlCTWFXTmxibk5sYzE5elpYSjJhV05sU1dSZlltOWtlU2dwTzF4dUlDQWdJR0p2WkhrdVlYTnphV2R1SUQwZ2RYTmxja2xrY3p0Y2JpQWdJQ0JoZDJGcGRDQjBhR2x6TG0xdlpHbG1lU2h2Y21kSlpDd2djMlZ5ZG1salpVbGtMQ0JpYjJSNUtUdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNCaGMzbHVZeUIxYmtGemMybG5iaWhjYmlBZ0lDQnZjbWRKWkRvZ2MzUnlhVzVuTEZ4dUlDQWdJSE5sY25acFkyVkpaRG9nYzNSeWFXNW5MRnh1SUNBZ0lIVnpaWEpKWkhNNklITjBjbWx1WjF0ZFhHNGdJQ2s2SUZCeWIyMXBjMlU4ZG05cFpENGdlMXh1SUNBZ0lHTnZibk4wSUdKdlpIa2dQU0J1WlhjZ1RHbGpaVzV6WlhOZmMyVnlkbWxqWlVsa1gySnZaSGtvS1R0Y2JpQWdJQ0JpYjJSNUxuVnVZWE56YVdkdUlEMGdkWE5sY2tsa2N6dGNiaUFnSUNCaGQyRnBkQ0IwYUdsekxtMXZaR2xtZVNodmNtZEpaQ3dnYzJWeWRtbGpaVWxrTENCaWIyUjVLVHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElHRnplVzVqSUcxdlpHbG1lU2hjYmlBZ0lDQnZjbWRKWkRvZ2MzUnlhVzVuTEZ4dUlDQWdJSE5sY25acFkyVkpaRG9nYzNSeWFXNW5MRnh1SUNBZ0lHSnZaSGs2SUV4cFkyVnVjMlZ6WDNObGNuWnBZMlZKWkY5aWIyUjVYRzRnSUNrNklGQnliMjFwYzJVOGRtOXBaRDRnZTF4dUlDQWdJSFJvYVhNdVkyeHBaVzUwTG5ZeFlXeHdhR0ZjYmlBZ0lDQWdJQzV2Y21kelFubEpaQ2h2Y21kSlpDbGNiaUFnSUNBZ0lDNXNhV05sYm5ObGMwSjVTV1FvYzJWeWRtbGpaVWxrS1Z4dUlDQWdJQ0FnTG5CdmMzUW9ZbTlrZVN3Z2RHaHBjeTV5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlrN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdRMjl0Y0d4cFlXNWpaVk5qY21WbGJtbHVaMFZ5Y205eVVtVnpjRzl1YzJWZlpYSnliM0p6ZlNCbWNtOXRJQ2N1TDJsdVpHVjRKenRjYm1sdGNHOXlkQ0I3VUdGeWMyVk9iMlJsZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWRGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blJYSnliM0pTWlhOd2IyNXpaVjlsY25KdmNuTkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsS0hCaGNuTmxUbTlrWlRvZ1VHRnljMlZPYjJSbElId2dkVzVrWldacGJtVmtLU0E2SUVOdmJYQnNhV0Z1WTJWVFkzSmxaVzVwYm1kRmNuSnZjbEpsYzNCdmJuTmxYMlZ5Y205eWN5QjdYRzRnSUNBZ2FXWW9JWEJoY25ObFRtOWtaU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY0dGeWMyVk9iMlJsSUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkRiMjF3YkdsaGJtTmxVMk55WldWdWFXNW5SWEp5YjNKU1pYTndiMjV6WlY5bGNuSnZjbk1vS1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3WTNKbFlYUmxRMjl0Y0d4cFlXNWpaVk5qY21WbGJtbHVaMFZ5Y205eVVtVnpjRzl1YzJWZlpYSnliM0p6Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpYMGdabkp2YlNBbkxpOWpjbVZoZEdWRGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blJYSnliM0pTWlhOd2IyNXpaVjlsY25KdmNuTkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsSnp0Y2JtbHRjRzl5ZENCN1EyOXRjR3hwWVc1alpWTmpjbVZsYm1sdVowVnljbTl5VW1WemNHOXVjMlZmWlhKeWIzSnpmU0JtY205dElDY3VMMmx1WkdWNEp6dGNibWx0Y0c5eWRDQjdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUVGd2FVVnljbTl5TENCUVlYSnpZV0pzWlN3Z1VHRnljMlZPYjJSbExDQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlmU0JtY205dElDZEFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJEYjIxd2JHbGhibU5sVTJOeVpXVnVhVzVuUlhKeWIzSlNaWE53YjI1elpTQmxlSFJsYm1SeklFRndhVVZ5Y205eUlHbHRjR3hsYldWdWRITWdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUZCaGNuTmhZbXhsSUh0Y2JpQWdJQ0F2S2lvZ1UzUnZjbVZ6SUdGa1pHbDBhVzl1WVd3Z1pHRjBZU0J1YjNRZ1pHVnpZM0pwWW1Wa0lHbHVJSFJvWlNCUGNHVnVRVkJKSUdSbGMyTnlhWEIwYVc5dUlHWnZkVzVrSUhkb1pXNGdaR1Z6WlhKcFlXeHBlbWx1Wnk0Z1EyRnVJR0psSUhWelpXUWdabTl5SUhObGNtbGhiR2w2WVhScGIyNGdZWE1nZDJWc2JDNGdLaTljYmlBZ0lDQndjbWwyWVhSbElGOWhaR1JwZEdsdmJtRnNSR0YwWVRvZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajQ3WEc0Z0lDQWdMeW9xSUZSb1pTQmxjbkp2Y25NZ2NISnZjR1Z5ZEhrZ0tpOWNiaUFnSUNCd2NtbDJZWFJsSUY5bGNuSnZjbk0vT2lCRGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blJYSnliM0pTWlhOd2IyNXpaVjlsY25KdmNuTmJYU0I4SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQmhaR1JwZEdsdmJtRnNSR0YwWVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwY3lCMGFHVWdZV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUVGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb2RtRnNkV1U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdkbUZzZFdVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJuTjBZVzUwYVdGMFpYTWdZU0J1WlhjZ1EyOXRjR3hwWVc1alpWTmpjbVZsYm1sdVowVnljbTl5VW1WemNHOXVjMlVnWVc1a0lITmxkSE1nZEdobElHUmxabUYxYkhRZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdSa2FYUnBiMjVoYkVSaGRHRWdQU0I3ZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUdWeWNtOXljeUJ3Y205d1pYSjBlU0IyWVd4MVpTNGdWR2hsSUdWeWNtOXljeUJ3Y205d1pYSjBlVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnUTI5dGNHeHBZVzVqWlZOamNtVmxibWx1WjBWeWNtOXlVbVZ6Y0c5dWMyVmZaWEp5YjNKelhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCbGNuSnZjbk1vS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsY25KdmNuTTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQmxjbkp2Y25NZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZSb1pTQmxjbkp2Y25NZ2NISnZjR1Z5ZEhsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1Gc2RXVWdWbUZzZFdVZ2RHOGdjMlYwSUdadmNpQjBhR1VnWlhKeWIzSnpJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdaWEp5YjNKektIWmhiSFZsT2lCRGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blJYSnliM0pTWlhOd2IyNXpaVjlsY25KdmNuTmJYU0I4SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGNuSnZjbk1nUFNCMllXeDFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJvWlNCa1pYTmxjbWxoYkdsNllYUnBiMjRnYVc1bWIzSnRZWFJwYjI0Z1ptOXlJSFJvWlNCamRYSnlaVzUwSUcxdlpHVnNYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhSR2FXVnNaRVJsYzJWeWFXRnNhWHBsY25Nb0tTQTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lDaHViMlJsT2lCUVlYSnpaVTV2WkdVcElEMCtJSFp2YVdRK0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVpYSnliM0p6WENJNklHNGdQVDRnZXlCMGFHbHpMbVZ5Y205eWN5QTlJRzR1WjJWMFEyOXNiR1ZqZEdsdmJrOW1UMkpxWldOMFZtRnNkV1Z6UEVOdmJYQnNhV0Z1WTJWVFkzSmxaVzVwYm1kRmNuSnZjbEpsYzNCdmJuTmxYMlZ5Y205eWN6NG9ZM0psWVhSbFEyOXRjR3hwWVc1alpWTmpjbVZsYm1sdVowVnljbTl5VW1WemNHOXVjMlZmWlhKeWIzSnpSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNrN0lIMHNYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhKcFlXeHBlbVZ6SUdsdVptOXliV0YwYVc5dUlIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM2NtbDBaWElnVTJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ2RHOGdkWE5sSUhSdklITmxjbWxoYkdsNlpTQjBhR2x6SUcxdlpHVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGNtbGhiR2w2WlNoM2NtbDBaWEk2SUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJcElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YzY21sMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbmR5YVhSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVkRiMnhzWldOMGFXOXVUMlpQWW1wbFkzUldZV3gxWlhNOFEyOXRjR3hwWVc1alpWTmpjbVZsYm1sdVowVnljbTl5VW1WemNHOXVjMlZmWlhKeWIzSnpQaWhjSW1WeWNtOXljMXdpTENCMGFHbHpMbVZ5Y205eWN5azdYRzRnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlVGa1pHbDBhVzl1WVd4RVlYUmhLSFJvYVhNdVlXUmthWFJwYjI1aGJFUmhkR0VwTzF4dUlDQWdJSDA3WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMEZrWkdsMGFXOXVZV3hFWVhSaFNHOXNaR1Z5TENCUVlYSnpZV0pzWlN3Z1VHRnljMlZPYjJSbExDQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlmU0JtY205dElDZEFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJEYjIxd2JHbGhibU5sVTJOeVpXVnVhVzVuUlhKeWIzSlNaWE53YjI1elpWOWxjbkp2Y25NZ2FXMXdiR1Z0Wlc1MGN5QkJaR1JwZEdsdmJtRnNSR0YwWVVodmJHUmxjaXdnVUdGeWMyRmliR1VnZTF4dUlDQWdJQzhxS2lCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xpQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gyRmtaR2wwYVc5dVlXeEVZWFJoT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQanRjYmlBZ0lDQXZLaW9nVkdobElHVnljbTl5SUhCeWIzQmxjblI1SUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0JmWlhKeWIzSkZjMk5oY0dWa1B6b2djM1J5YVc1bklId2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDOHFLaUJVYUdVZ2FXUmxiblJwZEhrZ2NISnZjR1Z5ZEhrZ0tpOWNiaUFnSUNCd2NtbDJZWFJsSUY5cFpHVnVkR2wwZVQ4NklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBdktpb2dWR2hsSUdsa1pXNTBhWFI1Vkhsd1pTQndjbTl3WlhKMGVTQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gybGtaVzUwYVhSNVZIbHdaVDg2SUhOMGNtbHVaeUI4SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQmhaR1JwZEdsdmJtRnNSR0YwWVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwY3lCMGFHVWdZV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUVGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb2RtRnNkV1U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdkbUZzZFdVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJuTjBZVzUwYVdGMFpYTWdZU0J1WlhjZ1EyOXRjR3hwWVc1alpWTmpjbVZsYm1sdVowVnljbTl5VW1WemNHOXVjMlZmWlhKeWIzSnpJR0Z1WkNCelpYUnpJSFJvWlNCa1pXWmhkV3gwSUhaaGJIVmxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdlMzA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhSeklIUm9aU0JsY25KdmNpQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1ZHaGxJR1Z5Y205eUlIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQnpkSEpwYm1kY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdWeWNtOXlSWE5qWVhCbFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyVnljbTl5UlhOallYQmxaRHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR1Z5Y205eUlIQnliM0JsY25SNUlIWmhiSFZsTGlCVWFHVWdaWEp5YjNJZ2NISnZjR1Z5ZEhsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1Gc2RXVWdWbUZzZFdVZ2RHOGdjMlYwSUdadmNpQjBhR1VnWlhKeWIzSkZjMk5oY0dWa0lIQnliM0JsY25SNUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhRZ1pYSnliM0pGYzJOaGNHVmtLSFpoYkhWbE9pQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaWEp5YjNKRmMyTmhjR1ZrSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCdGIyUmxiRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dLRzV2WkdVNklGQmhjbk5sVG05a1pTa2dQVDRnZG05cFpENWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMFJtbGxiR1JFWlhObGNtbGhiR2w2WlhKektDa2dPaUJTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltVnljbTl5WENJNklHNGdQVDRnZXlCMGFHbHpMbVZ5Y205eVJYTmpZWEJsWkNBOUlHNHVaMlYwVTNSeWFXNW5WbUZzZFdVb0tUc2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lhV1JsYm5ScGRIbGNJam9nYmlBOVBpQjdJSFJvYVhNdWFXUmxiblJwZEhrZ1BTQnVMbWRsZEZOMGNtbHVaMVpoYkhWbEtDazdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbWxrWlc1MGFYUjVWSGx3WlZ3aU9pQnVJRDArSUhzZ2RHaHBjeTVwWkdWdWRHbDBlVlI1Y0dVZ1BTQnVMbWRsZEZOMGNtbHVaMVpoYkhWbEtDazdJSDBzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCcFpHVnVkR2wwZVNCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHbGtaVzUwYVhSNUlIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQnpkSEpwYm1kY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdsa1pXNTBhWFI1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVdSbGJuUnBkSGs3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhSeklIUm9aU0JwWkdWdWRHbDBlU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdWR2hsSUdsa1pXNTBhWFI1SUhCeWIzQmxjblI1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpoYkhWbElGWmhiSFZsSUhSdklITmxkQ0JtYjNJZ2RHaGxJR2xrWlc1MGFYUjVJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdhV1JsYm5ScGRIa29kbUZzZFdVNklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBaR1Z1ZEdsMGVTQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ2FXUmxiblJwZEhsVWVYQmxJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlVhR1VnYVdSbGJuUnBkSGxVZVhCbElIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQnpkSEpwYm1kY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdsa1pXNTBhWFI1Vkhsd1pTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybGtaVzUwYVhSNVZIbHdaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR2xrWlc1MGFYUjVWSGx3WlNCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHbGtaVzUwYVhSNVZIbHdaU0J3Y205d1pYSjBlVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCV1lXeDFaU0IwYnlCelpYUWdabTl5SUhSb1pTQnBaR1Z1ZEdsMGVWUjVjR1VnY0hKdmNHVnlkSGt1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklITmxkQ0JwWkdWdWRHbDBlVlI1Y0dVb2RtRnNkV1U2SUhOMGNtbHVaeUI4SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cFpHVnVkR2wwZVZSNWNHVWdQU0IyWVd4MVpUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxjbWxoYkdsNlpYTWdhVzVtYjNKdFlYUnBiMjRnZEdobElHTjFjbkpsYm5RZ2IySnFaV04wWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSGR5YVhSbGNpQlRaWEpwWVd4cGVtRjBhVzl1SUhkeWFYUmxjaUIwYnlCMWMyVWdkRzhnYzJWeWFXRnNhWHBsSUhSb2FYTWdiVzlrWld4Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlZ5YVdGc2FYcGxLSGR5YVhSbGNqb2dVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjaWtnT2lCMmIybGtJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYZHlhWFJsY2lrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWQzSnBkR1Z5SUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlZOMGNtbHVaMVpoYkhWbEtGd2laWEp5YjNKY0lpd2dkR2hwY3k1bGNuSnZja1Z6WTJGd1pXUXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWVGRISnBibWRXWVd4MVpTaGNJbWxrWlc1MGFYUjVYQ0lzSUhSb2FYTXVhV1JsYm5ScGRIa3BPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWVGRISnBibWRXWVd4MVpTaGNJbWxrWlc1MGFYUjVWSGx3WlZ3aUxDQjBhR2x6TG1sa1pXNTBhWFI1Vkhsd1pTazdYRzRnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlVGa1pHbDBhVzl1WVd4RVlYUmhLSFJvYVhNdVlXUmthWFJwYjI1aGJFUmhkR0VwTzF4dUlDQWdJSDA3WEc1OVhHNGlMQ0psZUhCdmNuUWdaVzUxYlNCRGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blVtVnpjRzl1YzJWZmNtVnpkV3gwSUh0Y2JpQWdJQ0JQU3lBOUlGd2lUMHRjSWl4Y2JpQWdJQ0JGVWxKUFVsOVVOU0E5SUZ3aVJWSlNUMUpmVkRWY0lpeGNiaUFnSUNCRlVsSlBVbDlQUmtGRElEMGdYQ0pGVWxKUFVsOVBSa0ZEWENJc1hHNGdJQ0FnUlZKU1QxSmZSVmhRVDFKVVgwTlBUbFJTVDB3Z1BTQmNJa1ZTVWs5U1gwVllVRTlTVkY5RFQwNVVVazlNWENJc1hHNTlYRzRpTENKcGJYQnZjblFnZTBOdmJYQnNhV0Z1WTJWVFkzSmxaVzVwYm1kU1pYTndiMjV6WlY5eVpYTjFiSFI5SUdaeWIyMGdKeTR2WTI5dGNHeHBZVzVqWlZOamNtVmxibWx1WjFKbGMzQnZibk5sWDNKbGMzVnNkQ2M3WEc1cGJYQnZjblFnZTBGa1pHbDBhVzl1WVd4RVlYUmhTRzlzWkdWeUxDQlFZWEp6WVdKc1pTd2dVR0Z5YzJWT2IyUmxMQ0JUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5ZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blVtVnpjRzl1YzJVZ2FXMXdiR1Z0Wlc1MGN5QkJaR1JwZEdsdmJtRnNSR0YwWVVodmJHUmxjaXdnVUdGeWMyRmliR1VnZTF4dUlDQWdJQzhxS2lCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xpQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gyRmtaR2wwYVc5dVlXeEVZWFJoT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQanRjYmlBZ0lDQXZLaW9nVkdobElHUmxjMk55YVhCMGFXOXVJSEJ5YjNCbGNuUjVJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQmZaR1Z6WTNKcGNIUnBiMjQvT2lCemRISnBibWNnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnTHlvcUlGUm9aU0J5WlhOMWJIUWdjSEp2Y0dWeWRIa2dLaTljYmlBZ0lDQndjbWwyWVhSbElGOXlaWE4xYkhRL09pQkRiMjF3YkdsaGJtTmxVMk55WldWdWFXNW5VbVZ6Y0c5dWMyVmZjbVZ6ZFd4MElId2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdRV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCaFpHUnBkR2x2Ym1Gc1JHRjBZU2gyWVd4MVpUb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXUmthWFJwYjI1aGJFUmhkR0VnUFNCMllXeDFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJEYjIxd2JHbGhibU5sVTJOeVpXVnVhVzVuVW1WemNHOXVjMlVnWVc1a0lITmxkSE1nZEdobElHUmxabUYxYkhRZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdSa2FYUnBiMjVoYkVSaGRHRWdQU0I3ZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUdSbGMyTnlhWEIwYVc5dUlIQnliM0JsY25SNUlIWmhiSFZsTGlCVWFHVWdaR1Z6WTNKcGNIUnBiMjRnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUhOMGNtbHVaMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdaR1Z6WTNKcGNIUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrWlhOamNtbHdkR2x2Ymp0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUdSbGMyTnlhWEIwYVc5dUlIQnliM0JsY25SNUlIWmhiSFZsTGlCVWFHVWdaR1Z6WTNKcGNIUnBiMjRnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdaR1Z6WTNKcGNIUnBiMjRnY0hKdmNHVnlkSGt1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklITmxkQ0JrWlhOamNtbHdkR2x2YmloMllXeDFaVG9nYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSbGMyTnlhWEIwYVc5dUlEMGdkbUZzZFdVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFHVWdaR1Z6WlhKcFlXeHBlbUYwYVc5dUlHbHVabTl5YldGMGFXOXVJR1p2Y2lCMGFHVWdZM1Z5Y21WdWRDQnRiMlJsYkZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUdFZ1VtVmpiM0prUEhOMGNtbHVaeXdnS0c1dlpHVTZJRkJoY25ObFRtOWtaU2tnUFQ0Z2RtOXBaRDVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBSbWxsYkdSRVpYTmxjbWxoYkdsNlpYSnpLQ2tnT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0FvYm05a1pUb2dVR0Z5YzJWT2IyUmxLU0E5UGlCMmIybGtQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbVJsYzJOeWFYQjBhVzl1WENJNklHNGdQVDRnZXlCMGFHbHpMbVJsYzJOeWFYQjBhVzl1SUQwZ2JpNW5aWFJUZEhKcGJtZFdZV3gxWlNncE95QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSnlaWE4xYkhSY0lqb2diaUE5UGlCN0lIUm9hWE11Y21WemRXeDBJRDBnYmk1blpYUkZiblZ0Vm1Gc2RXVThRMjl0Y0d4cFlXNWpaVk5qY21WbGJtbHVaMUpsYzNCdmJuTmxYM0psYzNWc2RENG9RMjl0Y0d4cFlXNWpaVk5qY21WbGJtbHVaMUpsYzNCdmJuTmxYM0psYzNWc2RDazdJSDBzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCeVpYTjFiSFFnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRlJvWlNCeVpYTjFiSFFnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUVOdmJYQnNhV0Z1WTJWVFkzSmxaVzVwYm1kU1pYTndiMjV6WlY5eVpYTjFiSFJjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJSEpsYzNWc2RDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjM1ZzZER0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUhKbGMzVnNkQ0J3Y205d1pYSjBlU0IyWVd4MVpTNGdWR2hsSUhKbGMzVnNkQ0J3Y205d1pYSjBlVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCV1lXeDFaU0IwYnlCelpYUWdabTl5SUhSb1pTQnlaWE4xYkhRZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCeVpYTjFiSFFvZG1Gc2RXVTZJRU52YlhCc2FXRnVZMlZUWTNKbFpXNXBibWRTWlhOd2IyNXpaVjl5WlhOMWJIUWdmQ0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WemRXeDBJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWEpwWVd4cGVtVnpJR2x1Wm05eWJXRjBhVzl1SUhSb1pTQmpkWEp5Wlc1MElHOWlhbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzY21sMFpYSWdVMlZ5YVdGc2FYcGhkR2x2YmlCM2NtbDBaWElnZEc4Z2RYTmxJSFJ2SUhObGNtbGhiR2w2WlNCMGFHbHpJRzF2WkdWc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sY21saGJHbDZaU2gzY21sMFpYSTZJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWElwSURvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUtDRjNjbWwwWlhJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luZHlhWFJsY2lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWVGRISnBibWRXWVd4MVpTaGNJbVJsYzJOeWFYQjBhVzl1WENJc0lIUm9hWE11WkdWelkzSnBjSFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQjNjbWwwWlhJdWQzSnBkR1ZGYm5WdFZtRnNkV1U4UTI5dGNHeHBZVzVqWlZOamNtVmxibWx1WjFKbGMzQnZibk5sWDNKbGMzVnNkRDRvWENKeVpYTjFiSFJjSWl3Z2RHaHBjeTV5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWQlpHUnBkR2x2Ym1Gc1JHRjBZU2gwYUdsekxtRmtaR2wwYVc5dVlXeEVZWFJoS1R0Y2JpQWdJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRFWlhCbGJtUmxibU41UlhKeWIzSlNaWE53YjI1elpWOWxjbkp2Y24wZ1puSnZiU0FuTGk5cGJtUmxlQ2M3WEc1cGJYQnZjblFnZTFCaGNuTmxUbTlrWlgwZ1puSnZiU0FuUUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5Nbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFJHVndaVzVrWlc1amVVVnljbTl5VW1WemNHOXVjMlZmWlhKeWIzSkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsS0hCaGNuTmxUbTlrWlRvZ1VHRnljMlZPYjJSbElId2dkVzVrWldacGJtVmtLU0E2SUVSbGNHVnVaR1Z1WTNsRmNuSnZjbEpsYzNCdmJuTmxYMlZ5Y205eUlIdGNiaUFnSUNCcFppZ2hjR0Z5YzJWT2IyUmxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhKelpVNXZaR1VnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFUmxjR1Z1WkdWdVkzbEZjbkp2Y2xKbGMzQnZibk5sWDJWeWNtOXlLQ2s3WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMk55WldGMFpVUmxjR1Z1WkdWdVkzbEZjbkp2Y2xKbGMzQnZibk5sWDJWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlgwZ1puSnZiU0FuTGk5amNtVmhkR1ZFWlhCbGJtUmxibU41UlhKeWIzSlNaWE53YjI1elpWOWxjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW5PMXh1YVcxd2IzSjBJSHRFWlhCbGJtUmxibU41UlhKeWIzSlNaWE53YjI1elpWOWxjbkp2Y24wZ1puSnZiU0FuTGk5cGJtUmxlQ2M3WEc1cGJYQnZjblFnZTBGa1pHbDBhVzl1WVd4RVlYUmhTRzlzWkdWeUxDQkJjR2xGY25KdmNpd2dVR0Z5YzJGaWJHVXNJRkJoY25ObFRtOWtaU3dnVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY24wZ1puSnZiU0FuUUcxcFkzSnZjMjltZEM5cmFXOTBZUzFoWW5OMGNtRmpkR2x2Ym5Nbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1JHVndaVzVrWlc1amVVVnljbTl5VW1WemNHOXVjMlVnWlhoMFpXNWtjeUJCY0dsRmNuSnZjaUJwYlhCc1pXMWxiblJ6SUVGa1pHbDBhVzl1WVd4RVlYUmhTRzlzWkdWeUxDQlFZWEp6WVdKc1pTQjdYRzRnSUNBZ0x5b3FJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1SUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0JmWVdSa2FYUnBiMjVoYkVSaGRHRTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K08xeHVJQ0FnSUM4cUtpQlVhR1VnWlhKeWIzSWdjSEp2Y0dWeWRIa2dLaTljYmlBZ0lDQndjbWwyWVhSbElGOWxjbkp2Y2tWelkyRndaV1EvT2lCRVpYQmxibVJsYm1ONVJYSnliM0pTWlhOd2IyNXpaVjlsY25KdmNpQjhJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhSeklIUm9aU0JoWkdScGRHbHZibUZzUkdGMFlTQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1UzUnZjbVZ6SUdGa1pHbDBhVzl1WVd3Z1pHRjBZU0J1YjNRZ1pHVnpZM0pwWW1Wa0lHbHVJSFJvWlNCUGNHVnVRVkJKSUdSbGMyTnlhWEIwYVc5dUlHWnZkVzVrSUhkb1pXNGdaR1Z6WlhKcFlXeHBlbWx1Wnk0Z1EyRnVJR0psSUhWelpXUWdabTl5SUhObGNtbGhiR2w2WVhScGIyNGdZWE1nZDJWc2JDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCaFpHUnBkR2x2Ym1Gc1JHRjBZU2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1lXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpoYkhWbElGWmhiSFZsSUhSdklITmxkQ0JtYjNJZ2RHaGxJRUZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhRZ1lXUmthWFJwYjI1aGJFUmhkR0VvZG1Gc2RXVTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm5OMFlXNTBhV0YwWlhNZ1lTQnVaWGNnUkdWd1pXNWtaVzVqZVVWeWNtOXlVbVZ6Y0c5dWMyVWdZVzVrSUhObGRITWdkR2hsSUdSbFptRjFiSFFnZG1Gc2RXVnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFZ1BTQjdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJR1Z5Y205eUlIQnliM0JsY25SNUlIWmhiSFZsTGlCVWFHVWdaWEp5YjNJZ2NISnZjR1Z5ZEhsY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElFUmxjR1Z1WkdWdVkzbEZjbkp2Y2xKbGMzQnZibk5sWDJWeWNtOXlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQmxjbkp2Y2tWelkyRndaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsY25KdmNrVnpZMkZ3WldRN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCbGNuSnZjaUJ3Y205d1pYSjBlU0IyWVd4MVpTNGdWR2hsSUdWeWNtOXlJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUZaaGJIVmxJSFJ2SUhObGRDQm1iM0lnZEdobElHVnljbTl5UlhOallYQmxaQ0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR1Z5Y205eVJYTmpZWEJsWkNoMllXeDFaVG9nUkdWd1pXNWtaVzVqZVVWeWNtOXlVbVZ6Y0c5dWMyVmZaWEp5YjNJZ2ZDQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaWEp5YjNKRmMyTmhjR1ZrSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCdGIyUmxiRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dLRzV2WkdVNklGQmhjbk5sVG05a1pTa2dQVDRnZG05cFpENWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMFJtbGxiR1JFWlhObGNtbGhiR2w2WlhKektDa2dPaUJTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltVnljbTl5WENJNklHNGdQVDRnZXlCMGFHbHpMbVZ5Y205eVJYTmpZWEJsWkNBOUlHNHVaMlYwVDJKcVpXTjBWbUZzZFdVOFJHVndaVzVrWlc1amVVVnljbTl5VW1WemNHOXVjMlZmWlhKeWIzSStLR055WldGMFpVUmxjR1Z1WkdWdVkzbEZjbkp2Y2xKbGMzQnZibk5sWDJWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNrN0lIMHNYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhKcFlXeHBlbVZ6SUdsdVptOXliV0YwYVc5dUlIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM2NtbDBaWElnVTJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ2RHOGdkWE5sSUhSdklITmxjbWxoYkdsNlpTQjBhR2x6SUcxdlpHVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGNtbGhiR2w2WlNoM2NtbDBaWEk2SUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJcElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YzY21sMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbmR5YVhSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVlBZbXBsWTNSV1lXeDFaVHhFWlhCbGJtUmxibU41UlhKeWIzSlNaWE53YjI1elpWOWxjbkp2Y2o0b1hDSmxjbkp2Y2x3aUxDQjBhR2x6TG1WeWNtOXlSWE5qWVhCbFpDazdYRzRnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlVGa1pHbDBhVzl1WVd4RVlYUmhLSFJvYVhNdVlXUmthWFJwYjI1aGJFUmhkR0VwTzF4dUlDQWdJSDA3WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMEZrWkdsMGFXOXVZV3hFWVhSaFNHOXNaR1Z5TENCUVlYSnpZV0pzWlN3Z1VHRnljMlZPYjJSbExDQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlmU0JtY205dElDZEFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJFWlhCbGJtUmxibU41UlhKeWIzSlNaWE53YjI1elpWOWxjbkp2Y2lCcGJYQnNaVzFsYm5SeklFRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU0I3WEc0Z0lDQWdMeW9xSUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZllXUmthWFJwYjI1aGJFUmhkR0U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV1JrYVhScGIyNWhiRVJoZEdFN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCaFpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdVM1J2Y21WeklHRmtaR2wwYVc5dVlXd2daR0YwWVNCdWIzUWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlBjR1Z1UVZCSklHUmxjMk55YVhCMGFXOXVJR1p2ZFc1a0lIZG9aVzRnWkdWelpYSnBZV3hwZW1sdVp5NGdRMkZ1SUdKbElIVnpaV1FnWm05eUlITmxjbWxoYkdsNllYUnBiMjRnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdRV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCaFpHUnBkR2x2Ym1Gc1JHRjBZU2gyWVd4MVpUb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXUmthWFJwYjI1aGJFUmhkR0VnUFNCMllXeDFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YzNSaGJuUnBZWFJsY3lCaElHNWxkeUJFWlhCbGJtUmxibU41UlhKeWIzSlNaWE53YjI1elpWOWxjbkp2Y2lCaGJtUWdjMlYwY3lCMGFHVWdaR1ZtWVhWc2RDQjJZV3gxWlhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUh0OU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR1JsYzJWeWFXRnNhWHBoZEdsdmJpQnBibVp2Y20xaGRHbHZiaUJtYjNJZ2RHaGxJR04xY25KbGJuUWdiVzlrWld4Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGSmxZMjl5WkR4emRISnBibWNzSUNodWIyUmxPaUJRWVhKelpVNXZaR1VwSUQwK0lIWnZhV1ErWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkRVpwWld4a1JHVnpaWEpwWVd4cGVtVnljeWdwSURvZ1VtVmpiM0prUEhOMGNtbHVaeXdnS0c1dlpHVTZJRkJoY25ObFRtOWtaU2tnUFQ0Z2RtOXBaRDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnlhV0ZzYVhwbGN5QnBibVp2Y20xaGRHbHZiaUIwYUdVZ1kzVnljbVZ1ZENCdlltcGxZM1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkM0pwZEdWeUlGTmxjbWxoYkdsNllYUnBiMjRnZDNKcGRHVnlJSFJ2SUhWelpTQjBieUJ6WlhKcFlXeHBlbVVnZEdocGN5QnRiMlJsYkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWEpwWVd4cGVtVW9kM0pwZEdWeU9pQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlLU0E2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0JwWmlnaGQzSnBkR1Z5S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKM2NtbDBaWElnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdkM0pwZEdWeUxuZHlhWFJsUVdSa2FYUnBiMjVoYkVSaGRHRW9kR2hwY3k1aFpHUnBkR2x2Ym1Gc1JHRjBZU2s3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUVGd2FVVnljbTl5TENCUVlYSnpZV0pzWlN3Z1VHRnljMlZPYjJSbExDQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlmU0JtY205dElDZEFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJGY25KdmNrVnpZMkZ3WldRZ1pYaDBaVzVrY3lCQmNHbEZjbkp2Y2lCcGJYQnNaVzFsYm5SeklFRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU0I3WEc0Z0lDQWdMeW9xSUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZllXUmthWFJwYjI1aGJFUmhkR0U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtPMXh1SUNBZ0lDOHFLaUJVYUdVZ1pYSnliM0lnY0hKdmNHVnlkSGtnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJRjlsY25KdmNrVnpZMkZ3WldRL09pQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdZV1JrYVhScGIyNWhiRVJoZEdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZOMGIzSmxjeUJoWkdScGRHbHZibUZzSUdSaGRHRWdibTkwSUdSbGMyTnlhV0psWkNCcGJpQjBhR1VnVDNCbGJrRlFTU0JrWlhOamNtbHdkR2x2YmlCbWIzVnVaQ0IzYUdWdUlHUmxjMlZ5YVdGc2FYcHBibWN1SUVOaGJpQmlaU0IxYzJWa0lHWnZjaUJ6WlhKcFlXeHBlbUYwYVc5dUlHRnpJSGRsYkd3dVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFFnWVdSa2FYUnBiMjVoYkVSaGRHRW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWhaR1JwZEdsdmJtRnNSR0YwWVR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUdGa1pHbDBhVzl1WVd4RVlYUmhJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCV1lXeDFaU0IwYnlCelpYUWdabTl5SUhSb1pTQkJaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUdGa1pHbDBhVzl1WVd4RVlYUmhLSFpoYkhWbE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUhaaGJIVmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzV6ZEdGdWRHbGhkR1Z6SUdFZ2JtVjNJRVZ5Y205eVJYTmpZWEJsWkNCaGJtUWdjMlYwY3lCMGFHVWdaR1ZtWVhWc2RDQjJZV3gxWlhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUh0OU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1pYSnliM0lnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRlJvWlNCbGNuSnZjaUJ3Y205d1pYSjBlVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnYzNSeWFXNW5YRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQmxjbkp2Y2tWelkyRndaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsY25KdmNrVnpZMkZ3WldRN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCbGNuSnZjaUJ3Y205d1pYSjBlU0IyWVd4MVpTNGdWR2hsSUdWeWNtOXlJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUZaaGJIVmxJSFJ2SUhObGRDQm1iM0lnZEdobElHVnljbTl5UlhOallYQmxaQ0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR1Z5Y205eVJYTmpZWEJsWkNoMllXeDFaVG9nYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWeWNtOXlSWE5qWVhCbFpDQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR1JsYzJWeWFXRnNhWHBoZEdsdmJpQnBibVp2Y20xaGRHbHZiaUJtYjNJZ2RHaGxJR04xY25KbGJuUWdiVzlrWld4Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGSmxZMjl5WkR4emRISnBibWNzSUNodWIyUmxPaUJRWVhKelpVNXZaR1VwSUQwK0lIWnZhV1ErWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkRVpwWld4a1JHVnpaWEpwWVd4cGVtVnljeWdwSURvZ1VtVmpiM0prUEhOMGNtbHVaeXdnS0c1dlpHVTZJRkJoY25ObFRtOWtaU2tnUFQ0Z2RtOXBaRDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0psY25KdmNsd2lPaUJ1SUQwK0lIc2dkR2hwY3k1bGNuSnZja1Z6WTJGd1pXUWdQU0J1TG1kbGRGTjBjbWx1WjFaaGJIVmxLQ2s3SUgwc1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWEpwWVd4cGVtVnpJR2x1Wm05eWJXRjBhVzl1SUhSb1pTQmpkWEp5Wlc1MElHOWlhbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzY21sMFpYSWdVMlZ5YVdGc2FYcGhkR2x2YmlCM2NtbDBaWElnZEc4Z2RYTmxJSFJ2SUhObGNtbGhiR2w2WlNCMGFHbHpJRzF2WkdWc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sY21saGJHbDZaU2gzY21sMFpYSTZJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWElwSURvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUtDRjNjbWwwWlhJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luZHlhWFJsY2lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWVGRISnBibWRXWVd4MVpTaGNJbVZ5Y205eVhDSXNJSFJvYVhNdVpYSnliM0pGYzJOaGNHVmtLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFFXUmthWFJwYjI1aGJFUmhkR0VvZEdocGN5NWhaR1JwZEdsdmJtRnNSR0YwWVNrN1hHNGdJQ0FnZlR0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3VUdGbmFXNWhkR2x2Ymt4cGJtdHpmU0JtY205dElDY3VMMmx1WkdWNEp6dGNibWx0Y0c5eWRDQjdVR0Z5YzJWT2IyUmxmU0JtY205dElDZEFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeWM3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZRWVdkcGJtRjBhVzl1VEdsdWEzTkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsS0hCaGNuTmxUbTlrWlRvZ1VHRnljMlZPYjJSbElId2dkVzVrWldacGJtVmtLU0E2SUZCaFoybHVZWFJwYjI1TWFXNXJjeUI3WEc0Z0lDQWdhV1lvSVhCaGNuTmxUbTlrWlNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWNHRnljMlZPYjJSbElHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRWVdkcGJtRjBhVzl1VEdsdWEzTW9LVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdVR0ZuYVc1aGRHbHZiazFsZEdGOUlHWnliMjBnSnk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUh0UVlYSnpaVTV2WkdWOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpWQmhaMmx1WVhScGIyNU5aWFJoUm5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTaHdZWEp6WlU1dlpHVTZJRkJoY25ObFRtOWtaU0I4SUhWdVpHVm1hVzVsWkNrZ09pQlFZV2RwYm1GMGFXOXVUV1YwWVNCN1hHNGdJQ0FnYVdZb0lYQmhjbk5sVG05a1pTa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2ljR0Z5YzJWT2IyUmxJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUVlXZHBibUYwYVc5dVRXVjBZU2dwTzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRqY21WaGRHVlFZV2RwYm1GMGFXOXVUR2x1YTNOR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxmU0JtY205dElDY3VMMk55WldGMFpWQmhaMmx1WVhScGIyNU1hVzVyYzBaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW5PMXh1YVcxd2IzSjBJSHRqY21WaGRHVlFZV2RwYm1GMGFXOXVUV1YwWVVaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVjlJR1p5YjIwZ0p5NHZZM0psWVhSbFVHRm5hVzVoZEdsdmJrMWxkR0ZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbEp6dGNibWx0Y0c5eWRDQjdVR0ZuYVc1aGRHbHZia3hwYm10ekxDQlFZV2RwYm1GMGFXOXVUV1YwWVgwZ1puSnZiU0FuTGk5cGJtUmxlQ2M3WEc1cGJYQnZjblFnZTBGa1pHbDBhVzl1WVd4RVlYUmhTRzlzWkdWeUxDQlFZWEp6WVdKc1pTd2dVR0Z5YzJWT2IyUmxMQ0JUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5ZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTWFYTjBVR0ZuYVc1aGRHbHZiaUJwYlhCc1pXMWxiblJ6SUVGa1pHbDBhVzl1WVd4RVlYUmhTRzlzWkdWeUxDQlFZWEp6WVdKc1pTQjdYRzRnSUNBZ0x5b3FJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1SUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0JmWVdSa2FYUnBiMjVoYkVSaGRHRTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K08xeHVJQ0FnSUM4cUtpQlVhR1VnYkdsdWEzTWdjSEp2Y0dWeWRIa2dLaTljYmlBZ0lDQndjbWwyWVhSbElGOXNhVzVyY3o4NklGQmhaMmx1WVhScGIyNU1hVzVyY3lCOElIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBdktpb2dWR2hsSUcxbGRHRWdjSEp2Y0dWeWRIa2dLaTljYmlBZ0lDQndjbWwyWVhSbElGOXRaWFJoUHpvZ1VHRm5hVzVoZEdsdmJrMWxkR0VnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1lXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JXWVd4MVpTQjBieUJ6WlhRZ1ptOXlJSFJvWlNCQlpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR0ZrWkdsMGFXOXVZV3hFWVhSaEtIWmhiSFZsT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWkdScGRHbHZibUZzUkdGMFlTQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXpkR0Z1ZEdsaGRHVnpJR0VnYm1WM0lFeHBjM1JRWVdkcGJtRjBhVzl1SUdGdVpDQnpaWFJ6SUhSb1pTQmtaV1poZFd4MElIWmhiSFZsY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhJRDBnZTMwN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFHVWdaR1Z6WlhKcFlXeHBlbUYwYVc5dUlHbHVabTl5YldGMGFXOXVJR1p2Y2lCMGFHVWdZM1Z5Y21WdWRDQnRiMlJsYkZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUdFZ1VtVmpiM0prUEhOMGNtbHVaeXdnS0c1dlpHVTZJRkJoY25ObFRtOWtaU2tnUFQ0Z2RtOXBaRDVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBSbWxsYkdSRVpYTmxjbWxoYkdsNlpYSnpLQ2tnT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0FvYm05a1pUb2dVR0Z5YzJWT2IyUmxLU0E5UGlCMmIybGtQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbXhwYm10elhDSTZJRzRnUFQ0Z2V5QjBhR2x6TG14cGJtdHpJRDBnYmk1blpYUlBZbXBsWTNSV1lXeDFaVHhRWVdkcGJtRjBhVzl1VEdsdWEzTStLR055WldGMFpWQmhaMmx1WVhScGIyNU1hVzVyYzBaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVXBPeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p0WlhSaFhDSTZJRzRnUFQ0Z2V5QjBhR2x6TG0xbGRHRWdQU0J1TG1kbGRFOWlhbVZqZEZaaGJIVmxQRkJoWjJsdVlYUnBiMjVOWlhSaFBpaGpjbVZoZEdWUVlXZHBibUYwYVc5dVRXVjBZVVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVcE95QjlMRnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMGN5QjBhR1VnYkdsdWEzTWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGUm9aU0JzYVc1cmN5QndjbTl3WlhKMGVWeHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVR0ZuYVc1aGRHbHZia3hwYm10elhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCc2FXNXJjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMnhwYm10ek8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ2JHbHVhM01nY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRlJvWlNCc2FXNXJjeUJ3Y205d1pYSjBlVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCV1lXeDFaU0IwYnlCelpYUWdabTl5SUhSb1pTQnNhVzVyY3lCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUd4cGJtdHpLSFpoYkhWbE9pQlFZV2RwYm1GMGFXOXVUR2x1YTNNZ2ZDQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiR2x1YTNNZ1BTQjJZV3gxWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUcxbGRHRWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGUm9aU0J0WlhSaElIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQlFZV2RwYm1GMGFXOXVUV1YwWVZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFFnYldWMFlTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMWxkR0U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhSeklIUm9aU0J0WlhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVWFHVWdiV1YwWVNCd2NtOXdaWEowZVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQldZV3gxWlNCMGJ5QnpaWFFnWm05eUlIUm9aU0J0WlhSaElIQnliM0JsY25SNUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhRZ2JXVjBZU2gyWVd4MVpUb2dVR0ZuYVc1aGRHbHZiazFsZEdFZ2ZDQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiV1YwWVNBOUlIWmhiSFZsTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWeWFXRnNhWHBsY3lCcGJtWnZjbTFoZEdsdmJpQjBhR1VnWTNWeWNtVnVkQ0J2WW1wbFkzUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2QzSnBkR1Z5SUZObGNtbGhiR2w2WVhScGIyNGdkM0pwZEdWeUlIUnZJSFZ6WlNCMGJ5QnpaWEpwWVd4cGVtVWdkR2hwY3lCdGIyUmxiRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYSnBZV3hwZW1Vb2QzSnBkR1Z5T2lCVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeUtTQTZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQnBaaWdoZDNKcGRHVnlLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0ozY21sMFpYSWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxUMkpxWldOMFZtRnNkV1U4VUdGbmFXNWhkR2x2Ymt4cGJtdHpQaWhjSW14cGJtdHpYQ0lzSUhSb2FYTXViR2x1YTNNcE8xeHVJQ0FnSUNBZ0lDQjNjbWwwWlhJdWQzSnBkR1ZQWW1wbFkzUldZV3gxWlR4UVlXZHBibUYwYVc5dVRXVjBZVDRvWENKdFpYUmhYQ0lzSUhSb2FYTXViV1YwWVNrN1hHNGdJQ0FnSUNBZ0lIZHlhWFJsY2k1M2NtbDBaVUZrWkdsMGFXOXVZV3hFWVhSaEtIUm9hWE11WVdSa2FYUnBiMjVoYkVSaGRHRXBPMXh1SUNBZ0lIMDdYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UwRmtaR2wwYVc5dVlXeEVZWFJoU0c5c1pHVnlMQ0JRWVhKellXSnNaU3dnVUdGeWMyVk9iMlJsTENCVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeWZTQm1jbTl0SUNkQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5YzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlFZV2RwYm1GMGFXOXVUR2x1YTNNZ2FXMXdiR1Z0Wlc1MGN5QkJaR1JwZEdsdmJtRnNSR0YwWVVodmJHUmxjaXdnVUdGeWMyRmliR1VnZTF4dUlDQWdJQzhxS2lCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xpQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gyRmtaR2wwYVc5dVlXeEVZWFJoT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQanRjYmlBZ0lDQXZLaW9nVkdobElHWnBjbk4wSUhCeWIzQmxjblI1SUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0JmWm1seWMzUS9PaUJ6ZEhKcGJtY2dmQ0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdMeW9xSUZSb1pTQnNZWE4wSUhCeWIzQmxjblI1SUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0JmYkdGemREODZJSE4wY21sdVp5QjhJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQXZLaW9nVkdobElHNWxlSFFnY0hKdmNHVnlkSGtnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJRjl1WlhoMFB6b2djM1J5YVc1bklId2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDOHFLaUJVYUdVZ2NISmxkbWx2ZFhNZ2NISnZjR1Z5ZEhrZ0tpOWNiaUFnSUNCd2NtbDJZWFJsSUY5d2NtVjJhVzkxY3o4NklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFJ6SUhSb1pTQmhaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVNCMllXeDFaUzRnVTNSdmNtVnpJR0ZrWkdsMGFXOXVZV3dnWkdGMFlTQnViM1FnWkdWelkzSnBZbVZrSUdsdUlIUm9aU0JQY0dWdVFWQkpJR1JsYzJOeWFYQjBhVzl1SUdadmRXNWtJSGRvWlc0Z1pHVnpaWEpwWVd4cGVtbHVaeTRnUTJGdUlHSmxJSFZ6WldRZ1ptOXlJSE5sY21saGJHbDZZWFJwYjI0Z1lYTWdkMlZzYkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0JoWkdScGRHbHZibUZzUkdGMFlTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMGN5QjBhR1VnWVdSa2FYUnBiMjVoYkVSaGRHRWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGTjBiM0psY3lCaFpHUnBkR2x2Ym1Gc0lHUmhkR0VnYm05MElHUmxjMk55YVdKbFpDQnBiaUIwYUdVZ1QzQmxia0ZRU1NCa1pYTmpjbWx3ZEdsdmJpQm1iM1Z1WkNCM2FHVnVJR1JsYzJWeWFXRnNhWHBwYm1jdUlFTmhiaUJpWlNCMWMyVmtJR1p2Y2lCelpYSnBZV3hwZW1GMGFXOXVJR0Z6SUhkbGJHd3VYRzRnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUZaaGJIVmxJSFJ2SUhObGRDQm1iM0lnZEdobElFRmtaR2wwYVc5dVlXeEVZWFJoSUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnWVdSa2FYUnBiMjVoYkVSaGRHRW9kbUZzZFdVNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpibk4wWVc1MGFXRjBaWE1nWVNCdVpYY2dVR0ZuYVc1aGRHbHZia3hwYm10eklHRnVaQ0J6WlhSeklIUm9aU0JrWldaaGRXeDBJSFpoYkhWbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoSUQwZ2UzMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFJ6SUhSb1pTQm1hWEp6ZENCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHWnBjbk4wSUhCeWIzQmxjblI1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCemRISnBibWRjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJR1pwY25OMEtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlptbHljM1E3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhSeklIUm9aU0JtYVhKemRDQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1ZHaGxJR1pwY25OMElIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUdacGNuTjBJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdabWx5YzNRb2RtRnNkV1U2SUhOMGNtbHVaeUI4SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bWFYSnpkQ0E5SUhaaGJIVmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUdSbGMyVnlhV0ZzYVhwaGRHbHZiaUJwYm1admNtMWhkR2x2YmlCbWIzSWdkR2hsSUdOMWNuSmxiblFnYlc5a1pXeGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkpsWTI5eVpEeHpkSEpwYm1jc0lDaHViMlJsT2lCUVlYSnpaVTV2WkdVcElEMCtJSFp2YVdRK1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZEVacFpXeGtSR1Z6WlhKcFlXeHBlbVZ5Y3lncElEb2dVbVZqYjNKa1BITjBjbWx1Wnl3Z0tHNXZaR1U2SUZCaGNuTmxUbTlrWlNrZ1BUNGdkbTlwWkQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKbWFYSnpkRndpT2lCdUlEMCtJSHNnZEdocGN5NW1hWEp6ZENBOUlHNHVaMlYwVTNSeWFXNW5WbUZzZFdVb0tUc2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2liR0Z6ZEZ3aU9pQnVJRDArSUhzZ2RHaHBjeTVzWVhOMElEMGdiaTVuWlhSVGRISnBibWRXWVd4MVpTZ3BPeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p1WlhoMFhDSTZJRzRnUFQ0Z2V5QjBhR2x6TG01bGVIUWdQU0J1TG1kbGRGTjBjbWx1WjFaaGJIVmxLQ2s3SUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5CeVpYWnBiM1Z6WENJNklHNGdQVDRnZXlCMGFHbHpMbkJ5WlhacGIzVnpJRDBnYmk1blpYUlRkSEpwYm1kV1lXeDFaU2dwT3lCOUxGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdiR0Z6ZENCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHeGhjM1FnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUhOMGNtbHVaMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdiR0Z6ZENncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJ4aGMzUTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQnNZWE4wSUhCeWIzQmxjblI1SUhaaGJIVmxMaUJVYUdVZ2JHRnpkQ0J3Y205d1pYSjBlVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCV1lXeDFaU0IwYnlCelpYUWdabTl5SUhSb1pTQnNZWE4wSUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnYkdGemRDaDJZV3gxWlRvZ2MzUnlhVzVuSUh3Z2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeGhjM1FnUFNCMllXeDFaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJRzVsZUhRZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZSb1pTQnVaWGgwSUhCeWIzQmxjblI1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCemRISnBibWRjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJRzVsZUhRb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dVpYaDBPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwY3lCMGFHVWdibVY0ZENCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHNWxlSFFnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdibVY0ZENCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUc1bGVIUW9kbUZzZFdVNklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXVaWGgwSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhSeklIUm9aU0J3Y21WMmFXOTFjeUJ3Y205d1pYSjBlU0IyWVd4MVpTNGdWR2hsSUhCeVpYWnBiM1Z6SUhCeWIzQmxjblI1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCemRISnBibWRjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJSEJ5WlhacGIzVnpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjSEpsZG1sdmRYTTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQndjbVYyYVc5MWN5QndjbTl3WlhKMGVTQjJZV3gxWlM0Z1ZHaGxJSEJ5WlhacGIzVnpJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUZaaGJIVmxJSFJ2SUhObGRDQm1iM0lnZEdobElIQnlaWFpwYjNWeklIQnliM0JsY25SNUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhRZ2NISmxkbWx2ZFhNb2RtRnNkV1U2SUhOMGNtbHVaeUI4SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2NtVjJhVzkxY3lBOUlIWmhiSFZsTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWeWFXRnNhWHBsY3lCcGJtWnZjbTFoZEdsdmJpQjBhR1VnWTNWeWNtVnVkQ0J2WW1wbFkzUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2QzSnBkR1Z5SUZObGNtbGhiR2w2WVhScGIyNGdkM0pwZEdWeUlIUnZJSFZ6WlNCMGJ5QnpaWEpwWVd4cGVtVWdkR2hwY3lCdGIyUmxiRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYSnBZV3hwZW1Vb2QzSnBkR1Z5T2lCVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeUtTQTZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQnBaaWdoZDNKcGRHVnlLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0ozY21sMFpYSWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxVM1J5YVc1blZtRnNkV1VvWENKbWFYSnpkRndpTENCMGFHbHpMbVpwY25OMEtUdGNiaUFnSUNBZ0lDQWdkM0pwZEdWeUxuZHlhWFJsVTNSeWFXNW5WbUZzZFdVb1hDSnNZWE4wWENJc0lIUm9hWE11YkdGemRDazdYRzRnSUNBZ0lDQWdJSGR5YVhSbGNpNTNjbWwwWlZOMGNtbHVaMVpoYkhWbEtGd2libVY0ZEZ3aUxDQjBhR2x6TG01bGVIUXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWVGRISnBibWRXWVd4MVpTaGNJbkJ5WlhacGIzVnpYQ0lzSUhSb2FYTXVjSEpsZG1sdmRYTXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWQlpHUnBkR2x2Ym1Gc1JHRjBZU2gwYUdsekxtRmtaR2wwYVc5dVlXeEVZWFJoS1R0Y2JpQWdJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRCWkdScGRHbHZibUZzUkdGMFlVaHZiR1JsY2l3Z1VHRnljMkZpYkdVc0lGQmhjbk5sVG05a1pTd2dVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjbjBnWm5KdmJTQW5RRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk1uTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVUdGbmFXNWhkR2x2YmsxbGRHRWdhVzF3YkdWdFpXNTBjeUJCWkdScGRHbHZibUZzUkdGMFlVaHZiR1JsY2l3Z1VHRnljMkZpYkdVZ2UxeHVJQ0FnSUM4cUtpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMaUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdYMkZrWkdsMGFXOXVZV3hFWVhSaE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGp0Y2JpQWdJQ0F2S2lvZ1ZHaGxJR052ZFc1MElIQnliM0JsY25SNUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZlkyOTFiblEvT2lCdWRXMWlaWElnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1lXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JXWVd4MVpTQjBieUJ6WlhRZ1ptOXlJSFJvWlNCQlpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR0ZrWkdsMGFXOXVZV3hFWVhSaEtIWmhiSFZsT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWkdScGRHbHZibUZzUkdGMFlTQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXpkR0Z1ZEdsaGRHVnpJR0VnYm1WM0lGQmhaMmx1WVhScGIyNU5aWFJoSUdGdVpDQnpaWFJ6SUhSb1pTQmtaV1poZFd4MElIWmhiSFZsY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhJRDBnZTMwN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCamIzVnVkQ0J3Y205d1pYSjBlU0IyWVd4MVpTNGdWR2hsSUdOdmRXNTBJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JwYm5RMk5GeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhRZ1kyOTFiblFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqYjNWdWREdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkSE1nZEdobElHTnZkVzUwSUhCeWIzQmxjblI1SUhaaGJIVmxMaUJVYUdVZ1kyOTFiblFnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ1ZtRnNkV1VnZEc4Z2MyVjBJR1p2Y2lCMGFHVWdZMjkxYm5RZ2NISnZjR1Z5ZEhrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCamIzVnVkQ2gyWVd4MVpUb2diblZ0WW1WeUlId2dkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk52ZFc1MElEMGdkbUZzZFdVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFHVWdaR1Z6WlhKcFlXeHBlbUYwYVc5dUlHbHVabTl5YldGMGFXOXVJR1p2Y2lCMGFHVWdZM1Z5Y21WdWRDQnRiMlJsYkZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUdFZ1VtVmpiM0prUEhOMGNtbHVaeXdnS0c1dlpHVTZJRkJoY25ObFRtOWtaU2tnUFQ0Z2RtOXBaRDVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBSbWxsYkdSRVpYTmxjbWxoYkdsNlpYSnpLQ2tnT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0FvYm05a1pUb2dVR0Z5YzJWT2IyUmxLU0E5UGlCMmIybGtQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbU52ZFc1MFhDSTZJRzRnUFQ0Z2V5QjBhR2x6TG1OdmRXNTBJRDBnYmk1blpYUk9kVzFpWlhKV1lXeDFaU2dwT3lCOUxGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ5YVdGc2FYcGxjeUJwYm1admNtMWhkR2x2YmlCMGFHVWdZM1Z5Y21WdWRDQnZZbXBsWTNSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZDNKcGRHVnlJRk5sY21saGJHbDZZWFJwYjI0Z2QzSnBkR1Z5SUhSdklIVnpaU0IwYnlCelpYSnBZV3hwZW1VZ2RHaHBjeUJ0YjJSbGJGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ6WlhKcFlXeHBlbVVvZDNKcGRHVnlPaUJUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5S1NBNklIWnZhV1FnZTF4dUlDQWdJQ0FnSUNCcFppZ2hkM0pwZEdWeUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSjNjbWwwWlhJZ1kyRnVibTkwSUdKbElIVnVaR1ZtYVc1bFpGd2lLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFRuVnRZbVZ5Vm1Gc2RXVW9YQ0pqYjNWdWRGd2lMQ0IwYUdsekxtTnZkVzUwS1R0Y2JpQWdJQ0FnSUNBZ2QzSnBkR1Z5TG5keWFYUmxRV1JrYVhScGIyNWhiRVJoZEdFb2RHaHBjeTVoWkdScGRHbHZibUZzUkdGMFlTazdYRzRnSUNBZ2ZUdGNibjFjYmlJc0ltbHRjRzl5ZENCN1FXUmthWFJwYjI1aGJFUmhkR0ZJYjJ4a1pYSXNJRkJoY25OaFlteGxMQ0JRWVhKelpVNXZaR1VzSUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhKOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR05zWVhOeklGTmxZWFFnYVcxd2JHVnRaVzUwY3lCQlpHUnBkR2x2Ym1Gc1JHRjBZVWh2YkdSbGNpd2dVR0Z5YzJGaWJHVWdlMXh1SUNBZ0lDOHFLaUJVYUdVZ1lXTmpiM1Z1ZEY5MWMyVnlibUZ0WlNCd2NtOXdaWEowZVNBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnWDJGalkyOTFiblJmZFhObGNtNWhiV1UvT2lCemRISnBibWNnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnTHlvcUlGTjBiM0psY3lCaFpHUnBkR2x2Ym1Gc0lHUmhkR0VnYm05MElHUmxjMk55YVdKbFpDQnBiaUIwYUdVZ1QzQmxia0ZRU1NCa1pYTmpjbWx3ZEdsdmJpQm1iM1Z1WkNCM2FHVnVJR1JsYzJWeWFXRnNhWHBwYm1jdUlFTmhiaUJpWlNCMWMyVmtJR1p2Y2lCelpYSnBZV3hwZW1GMGFXOXVJR0Z6SUhkbGJHd3VJQ292WEc0Z0lDQWdjSEpwZG1GMFpTQmZZV1JrYVhScGIyNWhiRVJoZEdFNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrTzF4dUlDQWdJQzhxS2lCVWFHVWdjM1ZpYzJOeWFYQjBhVzl1WDJsa0lIQnliM0JsY25SNUlDb3ZYRzRnSUNBZ2NISnBkbUYwWlNCZmMzVmljMk55YVhCMGFXOXVYMmxrUHpvZ2MzUnlhVzVuSUh3Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkSE1nZEdobElHRmpZMjkxYm5SZmRYTmxjbTVoYldVZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZSb1pTQmhZMk52ZFc1MFgzVnpaWEp1WVcxbElIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1lTQnpkSEpwYm1kY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdGalkyOTFiblJmZFhObGNtNWhiV1VvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloWTJOdmRXNTBYM1Z6WlhKdVlXMWxPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwY3lCMGFHVWdZV05qYjNWdWRGOTFjMlZ5Ym1GdFpTQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1ZHaGxJR0ZqWTI5MWJuUmZkWE5sY201aGJXVWdjSEp2Y0dWeWRIbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtRnNkV1VnVm1Gc2RXVWdkRzhnYzJWMElHWnZjaUIwYUdVZ1lXTmpiM1Z1ZEY5MWMyVnlibUZ0WlNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUdGalkyOTFiblJmZFhObGNtNWhiV1VvZG1Gc2RXVTZJSE4wY21sdVp5QjhJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWTJOdmRXNTBYM1Z6WlhKdVlXMWxJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFJ6SUhSb1pTQmhaR1JwZEdsdmJtRnNSR0YwWVNCd2NtOXdaWEowZVNCMllXeDFaUzRnVTNSdmNtVnpJR0ZrWkdsMGFXOXVZV3dnWkdGMFlTQnViM1FnWkdWelkzSnBZbVZrSUdsdUlIUm9aU0JQY0dWdVFWQkpJR1JsYzJOeWFYQjBhVzl1SUdadmRXNWtJSGRvWlc0Z1pHVnpaWEpwWVd4cGVtbHVaeTRnUTJGdUlHSmxJSFZ6WldRZ1ptOXlJSE5sY21saGJHbDZZWFJwYjI0Z1lYTWdkMlZzYkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0JoWkdScGRHbHZibUZzUkdGMFlTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMGN5QjBhR1VnWVdSa2FYUnBiMjVoYkVSaGRHRWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGTjBiM0psY3lCaFpHUnBkR2x2Ym1Gc0lHUmhkR0VnYm05MElHUmxjMk55YVdKbFpDQnBiaUIwYUdVZ1QzQmxia0ZRU1NCa1pYTmpjbWx3ZEdsdmJpQm1iM1Z1WkNCM2FHVnVJR1JsYzJWeWFXRnNhWHBwYm1jdUlFTmhiaUJpWlNCMWMyVmtJR1p2Y2lCelpYSnBZV3hwZW1GMGFXOXVJR0Z6SUhkbGJHd3VYRzRnSUNBZ0lDb2dRSEJoY21GdElIWmhiSFZsSUZaaGJIVmxJSFJ2SUhObGRDQm1iM0lnZEdobElFRmtaR2wwYVc5dVlXeEVZWFJoSUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnWVdSa2FYUnBiMjVoYkVSaGRHRW9kbUZzZFdVNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGa1pHbDBhVzl1WVd4RVlYUmhJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpibk4wWVc1MGFXRjBaWE1nWVNCdVpYY2dVMlZoZENCaGJtUWdjMlYwY3lCMGFHVWdaR1ZtWVhWc2RDQjJZV3gxWlhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZU0E5SUh0OU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR1JsYzJWeWFXRnNhWHBoZEdsdmJpQnBibVp2Y20xaGRHbHZiaUJtYjNJZ2RHaGxJR04xY25KbGJuUWdiVzlrWld4Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElGSmxZMjl5WkR4emRISnBibWNzSUNodWIyUmxPaUJRWVhKelpVNXZaR1VwSUQwK0lIWnZhV1ErWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkRVpwWld4a1JHVnpaWEpwWVd4cGVtVnljeWdwSURvZ1VtVmpiM0prUEhOMGNtbHVaeXdnS0c1dlpHVTZJRkJoY25ObFRtOWtaU2tnUFQ0Z2RtOXBaRDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0poWTJOdmRXNTBYM1Z6WlhKdVlXMWxYQ0k2SUc0Z1BUNGdleUIwYUdsekxtRmpZMjkxYm5SZmRYTmxjbTVoYldVZ1BTQnVMbWRsZEZOMGNtbHVaMVpoYkhWbEtDazdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbk4xWW5OamNtbHdkR2x2Ymw5cFpGd2lPaUJ1SUQwK0lIc2dkR2hwY3k1emRXSnpZM0pwY0hScGIyNWZhV1FnUFNCdUxtZGxkRk4wY21sdVoxWmhiSFZsS0NrN0lIMHNYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhKcFlXeHBlbVZ6SUdsdVptOXliV0YwYVc5dUlIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM2NtbDBaWElnVTJWeWFXRnNhWHBoZEdsdmJpQjNjbWwwWlhJZ2RHOGdkWE5sSUhSdklITmxjbWxoYkdsNlpTQjBhR2x6SUcxdlpHVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGNtbGhiR2w2WlNoM2NtbDBaWEk2SUZObGNtbGhiR2w2WVhScGIyNVhjbWwwWlhJcElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YzY21sMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbmR5YVhSbGNpQmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVlRkSEpwYm1kV1lXeDFaU2hjSW1GalkyOTFiblJmZFhObGNtNWhiV1ZjSWl3Z2RHaHBjeTVoWTJOdmRXNTBYM1Z6WlhKdVlXMWxLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFUzUnlhVzVuVm1Gc2RXVW9YQ0p6ZFdKelkzSnBjSFJwYjI1ZmFXUmNJaXdnZEdocGN5NXpkV0p6WTNKcGNIUnBiMjVmYVdRcE8xeHVJQ0FnSUNBZ0lDQjNjbWwwWlhJdWQzSnBkR1ZCWkdScGRHbHZibUZzUkdGMFlTaDBhR2x6TG1Ga1pHbDBhVzl1WVd4RVlYUmhLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJSE4xWW5OamNtbHdkR2x2Ymw5cFpDQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1ZHaGxJSE4xWW5OamNtbHdkR2x2Ymw5cFpDQndjbTl3WlhKMGVWeHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdjM1J5YVc1blhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCemRXSnpZM0pwY0hScGIyNWZhV1FvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1ZmFXUTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQnpkV0p6WTNKcGNIUnBiMjVmYVdRZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZSb1pTQnpkV0p6WTNKcGNIUnBiMjVmYVdRZ2NISnZjR1Z5ZEhsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1Gc2RXVWdWbUZzZFdVZ2RHOGdjMlYwSUdadmNpQjBhR1VnYzNWaWMyTnlhWEIwYVc5dVgybGtJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCelpYUWdjM1ZpYzJOeWFYQjBhVzl1WDJsa0tIWmhiSFZsT2lCemRISnBibWNnZkNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVYMmxrSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdRV1JrYVhScGIyNWhiRVJoZEdGSWIyeGtaWElzSUZCaGNuTmhZbXhsTENCUVlYSnpaVTV2WkdVc0lGTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSjlJR1p5YjIwZ0owQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRk5sWVhSU1pYRjFaWE4wSUdsdGNHeGxiV1Z1ZEhNZ1FXUmthWFJwYjI1aGJFUmhkR0ZJYjJ4a1pYSXNJRkJoY25OaFlteGxJSHRjYmlBZ0lDQXZLaW9nVkdobElHRmpZMjkxYm5SZmRYTmxjbTVoYldVZ2NISnZjR1Z5ZEhrZ0tpOWNiaUFnSUNCd2NtbDJZWFJsSUY5aFkyTnZkVzUwWDNWelpYSnVZVzFsUHpvZ2MzUnlhVzVuSUh3Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUM4cUtpQlRkRzl5WlhNZ1lXUmthWFJwYjI1aGJDQmtZWFJoSUc1dmRDQmtaWE5qY21saVpXUWdhVzRnZEdobElFOXdaVzVCVUVrZ1pHVnpZM0pwY0hScGIyNGdabTkxYm1RZ2QyaGxiaUJrWlhObGNtbGhiR2w2YVc1bkxpQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ2MyVnlhV0ZzYVhwaGRHbHZiaUJoY3lCM1pXeHNMaUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdYMkZrWkdsMGFXOXVZV3hFWVhSaE9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCaFkyTnZkVzUwWDNWelpYSnVZVzFsSUhCeWIzQmxjblI1SUhaaGJIVmxMaUJVYUdVZ1lXTmpiM1Z1ZEY5MWMyVnlibUZ0WlNCd2NtOXdaWEowZVZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUdFZ2MzUnlhVzVuWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0JoWTJOdmRXNTBYM1Z6WlhKdVlXMWxLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV05qYjNWdWRGOTFjMlZ5Ym1GdFpUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkSE1nZEdobElHRmpZMjkxYm5SZmRYTmxjbTVoYldVZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZSb1pTQmhZMk52ZFc1MFgzVnpaWEp1WVcxbElIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUdGalkyOTFiblJmZFhObGNtNWhiV1VnY0hKdmNHVnlkSGt1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklITmxkQ0JoWTJOdmRXNTBYM1Z6WlhKdVlXMWxLSFpoYkhWbE9pQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV05qYjNWdWRGOTFjMlZ5Ym1GdFpTQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1lXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdZV1JrYVhScGIyNWhiRVJoZEdFb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5aFpHUnBkR2x2Ym1Gc1JHRjBZVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR0ZrWkdsMGFXOXVZV3hFWVhSaElIQnliM0JsY25SNUlIWmhiSFZsTGlCVGRHOXlaWE1nWVdSa2FYUnBiMjVoYkNCa1lYUmhJRzV2ZENCa1pYTmpjbWxpWldRZ2FXNGdkR2hsSUU5d1pXNUJVRWtnWkdWelkzSnBjSFJwYjI0Z1ptOTFibVFnZDJobGJpQmtaWE5sY21saGJHbDZhVzVuTGlCRFlXNGdZbVVnZFhObFpDQm1iM0lnYzJWeWFXRnNhWHBoZEdsdmJpQmhjeUIzWld4c0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JXWVd4MVpTQjBieUJ6WlhRZ1ptOXlJSFJvWlNCQlpHUnBkR2x2Ym1Gc1JHRjBZU0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR0ZrWkdsMGFXOXVZV3hFWVhSaEtIWmhiSFZsT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWkdScGRHbHZibUZzUkdGMFlTQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXpkR0Z1ZEdsaGRHVnpJR0VnYm1WM0lGTmxZWFJTWlhGMVpYTjBJR0Z1WkNCelpYUnpJSFJvWlNCa1pXWmhkV3gwSUhaaGJIVmxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkdsMGFXOXVZV3hFWVhSaElEMGdlMzA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1pHVnpaWEpwWVd4cGVtRjBhVzl1SUdsdVptOXliV0YwYVc5dUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCdGIyUmxiRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnVW1WamIzSmtQSE4wY21sdVp5d2dLRzV2WkdVNklGQmhjbk5sVG05a1pTa2dQVDRnZG05cFpENWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMFJtbGxiR1JFWlhObGNtbGhiR2w2WlhKektDa2dPaUJTWldOdmNtUThjM1J5YVc1bkxDQW9ibTlrWlRvZ1VHRnljMlZPYjJSbEtTQTlQaUIyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltRmpZMjkxYm5SZmRYTmxjbTVoYldWY0lqb2diaUE5UGlCN0lIUm9hWE11WVdOamIzVnVkRjkxYzJWeWJtRnRaU0E5SUc0dVoyVjBVM1J5YVc1blZtRnNkV1VvS1RzZ2ZTeGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sY21saGJHbDZaWE1nYVc1bWIzSnRZWFJwYjI0Z2RHaGxJR04xY25KbGJuUWdiMkpxWldOMFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhkeWFYUmxjaUJUWlhKcFlXeHBlbUYwYVc5dUlIZHlhWFJsY2lCMGJ5QjFjMlVnZEc4Z2MyVnlhV0ZzYVhwbElIUm9hWE1nYlc5a1pXeGNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nYzJWeWFXRnNhWHBsS0hkeWFYUmxjam9nVTJWeWFXRnNhWHBoZEdsdmJsZHlhWFJsY2lrZ09pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9JWGR5YVhSbGNpa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lkM0pwZEdWeUlHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhkeWFYUmxjaTUzY21sMFpWTjBjbWx1WjFaaGJIVmxLRndpWVdOamIzVnVkRjkxYzJWeWJtRnRaVndpTENCMGFHbHpMbUZqWTI5MWJuUmZkWE5sY201aGJXVXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWQlpHUnBkR2x2Ym1Gc1JHRjBZU2gwYUdsekxtRmtaR2wwYVc5dVlXeEVZWFJoS1R0Y2JpQWdJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRCWkdScGRHbHZibUZzUkdGMFlVaHZiR1JsY2l3Z1VHRnljMkZpYkdVc0lGQmhjbk5sVG05a1pTd2dVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxjbjBnWm5KdmJTQW5RRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk1uTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVTJWeWRtbGpaU0JwYlhCc1pXMWxiblJ6SUVGa1pHbDBhVzl1WVd4RVlYUmhTRzlzWkdWeUxDQlFZWEp6WVdKc1pTQjdYRzRnSUNBZ0x5b3FJRk4wYjNKbGN5QmhaR1JwZEdsdmJtRnNJR1JoZEdFZ2JtOTBJR1JsYzJOeWFXSmxaQ0JwYmlCMGFHVWdUM0JsYmtGUVNTQmtaWE5qY21sd2RHbHZiaUJtYjNWdVpDQjNhR1Z1SUdSbGMyVnlhV0ZzYVhwcGJtY3VJRU5oYmlCaVpTQjFjMlZrSUdadmNpQnpaWEpwWVd4cGVtRjBhVzl1SUdGeklIZGxiR3d1SUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0JmWVdSa2FYUnBiMjVoYkVSaGRHRTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K08xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkSE1nZEdobElHRmtaR2wwYVc5dVlXeEVZWFJoSUhCeWIzQmxjblI1SUhaaGJIVmxMaUJUZEc5eVpYTWdZV1JrYVhScGIyNWhiQ0JrWVhSaElHNXZkQ0JrWlhOamNtbGlaV1FnYVc0Z2RHaGxJRTl3Wlc1QlVFa2daR1Z6WTNKcGNIUnBiMjRnWm05MWJtUWdkMmhsYmlCa1pYTmxjbWxoYkdsNmFXNW5MaUJEWVc0Z1ltVWdkWE5sWkNCbWIzSWdjMlZ5YVdGc2FYcGhkR2x2YmlCaGN5QjNaV3hzTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUdFZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJR0ZrWkdsMGFXOXVZV3hFWVhSaEtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZllXUmthWFJwYjI1aGJFUmhkR0U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhSeklIUm9aU0JoWkdScGRHbHZibUZzUkdGMFlTQndjbTl3WlhKMGVTQjJZV3gxWlM0Z1UzUnZjbVZ6SUdGa1pHbDBhVzl1WVd3Z1pHRjBZU0J1YjNRZ1pHVnpZM0pwWW1Wa0lHbHVJSFJvWlNCUGNHVnVRVkJKSUdSbGMyTnlhWEIwYVc5dUlHWnZkVzVrSUhkb1pXNGdaR1Z6WlhKcFlXeHBlbWx1Wnk0Z1EyRnVJR0psSUhWelpXUWdabTl5SUhObGNtbGhiR2w2WVhScGIyNGdZWE1nZDJWc2JDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtRnNkV1VnVm1Gc2RXVWdkRzhnYzJWMElHWnZjaUIwYUdVZ1FXUmthWFJwYjI1aGJFUmhkR0VnY0hKdmNHVnlkSGt1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklITmxkQ0JoWkdScGRHbHZibUZzUkdGMFlTaDJZV3gxWlRvZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajRwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdSa2FYUnBiMjVoYkVSaGRHRWdQU0IyWVd4MVpUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFbHVjM1JoYm5ScFlYUmxjeUJoSUc1bGR5QlRaWEoyYVdObElHRnVaQ0J6WlhSeklIUm9aU0JrWldaaGRXeDBJSFpoYkhWbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaR2wwYVc5dVlXeEVZWFJoSUQwZ2UzMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnWkdWelpYSnBZV3hwZW1GMGFXOXVJR2x1Wm05eWJXRjBhVzl1SUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J0YjJSbGJGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z0tHNXZaR1U2SUZCaGNuTmxUbTlrWlNrZ1BUNGdkbTlwWkQ1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwUm1sbGJHUkVaWE5sY21saGJHbDZaWEp6S0NrZ09pQlNaV052Y21ROGMzUnlhVzVuTENBb2JtOWtaVG9nVUdGeWMyVk9iMlJsS1NBOVBpQjJiMmxrUGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWEpwWVd4cGVtVnpJR2x1Wm05eWJXRjBhVzl1SUhSb1pTQmpkWEp5Wlc1MElHOWlhbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzY21sMFpYSWdVMlZ5YVdGc2FYcGhkR2x2YmlCM2NtbDBaWElnZEc4Z2RYTmxJSFJ2SUhObGNtbGhiR2w2WlNCMGFHbHpJRzF2WkdWc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sY21saGJHbDZaU2gzY21sMFpYSTZJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWElwSURvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUtDRjNjbWwwWlhJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luZHlhWFJsY2lCallXNXViM1FnWW1VZ2RXNWtaV1pwYm1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0IzY21sMFpYSXVkM0pwZEdWQlpHUnBkR2x2Ym1Gc1JHRjBZU2gwYUdsekxtRmtaR2wwYVc5dVlXeEVZWFJoS1R0Y2JpQWdJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHRUWldGMGZTQm1jbTl0SUNjdUwybHVaR1Y0Snp0Y2JtbHRjRzl5ZENCN1VHRnljMlZPYjJSbGZTQm1jbTl0SUNkQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5YzdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqY21WaGRHVlRaV0YwUm5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTaHdZWEp6WlU1dlpHVTZJRkJoY25ObFRtOWtaU0I4SUhWdVpHVm1hVzVsWkNrZ09pQlRaV0YwSUh0Y2JpQWdJQ0JwWmlnaGNHRnljMlZPYjJSbEtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSndZWEp6WlU1dlpHVWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZObFlYUW9LVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdZM0psWVhSbFUyVmhkRVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdWOUlHWnliMjBnSnk0dlkzSmxZWFJsVTJWaGRFWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VuTzF4dWFXMXdiM0owSUh0TWFYTjBVR0ZuYVc1aGRHbHZiaXdnVTJWaGRIMGdabkp2YlNBbkxpOXBibVJsZUNjN1hHNXBiWEJ2Y25RZ2UxQmhjbk5oWW14bExDQlFZWEp6WlU1dlpHVXNJRk5sY21saGJHbDZZWFJwYjI1WGNtbDBaWEo5SUdaeWIyMGdKMEJ0YVdOeWIzTnZablF2YTJsdmRHRXRZV0p6ZEhKaFkzUnBiMjV6Snp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUV4cGMzUlRaV0YwYzFKbGMzQnZibk5sVUdGbmFXNWhkR2x2YmlCbGVIUmxibVJ6SUV4cGMzUlFZV2RwYm1GMGFXOXVJR2x0Y0d4bGJXVnVkSE1nVUdGeWMyRmliR1VnZTF4dUlDQWdJQzhxS2lCVWFHVWdZV3hzYjNkbFpDQndjbTl3WlhKMGVTQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gyRnNiRzkzWldRL09pQnVkVzFpWlhJZ2ZDQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0x5b3FJRlJvWlNCamIyNXpkVzFsWkNCd2NtOXdaWEowZVNBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnWDJOdmJuTjFiV1ZrUHpvZ2JuVnRZbVZ5SUh3Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUM4cUtpQlVhR1VnWkdGMFlTQndjbTl3WlhKMGVTQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ1gyUmhkR0UvT2lCVFpXRjBXMTBnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ1lXeHNiM2RsWkNCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHRnNiRzkzWldRZ2NISnZjR1Z5ZEhsY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCaElHbHVkRFkwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0JoYkd4dmQyVmtLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV3hzYjNkbFpEdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkSE1nZEdobElHRnNiRzkzWldRZ2NISnZjR1Z5ZEhrZ2RtRnNkV1V1SUZSb1pTQmhiR3h2ZDJWa0lIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUdGc2JHOTNaV1FnY0hKdmNHVnlkSGt1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklITmxkQ0JoYkd4dmQyVmtLSFpoYkhWbE9pQnVkVzFpWlhJZ2ZDQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV3hzYjNkbFpDQTlJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXpkR0Z1ZEdsaGRHVnpJR0VnYm1WM0lFeHBjM1JUWldGMGMxSmxjM0J2Ym5ObFVHRm5hVzVoZEdsdmJpQmhibVFnYzJWMGN5QjBhR1VnWkdWbVlYVnNkQ0IyWVd4MVpYTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdZMjl1YzNWdFpXUWdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlGUm9aU0JqYjI1emRXMWxaQ0J3Y205d1pYSjBlVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR0VnYVc1ME5qUmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElHTnZibk4xYldWa0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkyOXVjM1Z0WldRN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCamIyNXpkVzFsWkNCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHTnZibk4xYldWa0lIQnliM0JsY25SNVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlpoYkhWbElIUnZJSE5sZENCbWIzSWdkR2hsSUdOdmJuTjFiV1ZrSUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnWTI5dWMzVnRaV1FvZG1Gc2RXVTZJRzUxYldKbGNpQjhJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1emRXMWxaQ0E5SUhaaGJIVmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdaR0YwWVNCd2NtOXdaWEowZVNCMllXeDFaUzRnVkdobElHUmhkR0VnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZObFlYUmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElHUmhkR0VvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrWVhSaE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1pHRjBZU0J3Y205d1pYSjBlU0IyWVd4MVpTNGdWR2hsSUdSaGRHRWdjSEp2Y0dWeWRIbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtRnNkV1VnVm1Gc2RXVWdkRzhnYzJWMElHWnZjaUIwYUdVZ1pHRjBZU0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJR1JoZEdFb2RtRnNkV1U2SUZObFlYUmJYU0I4SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a1lYUmhJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnWkdWelpYSnBZV3hwZW1GMGFXOXVJR2x1Wm05eWJXRjBhVzl1SUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J0YjJSbGJGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZqYjNKa1BITjBjbWx1Wnl3Z0tHNXZaR1U2SUZCaGNuTmxUbTlrWlNrZ1BUNGdkbTlwWkQ1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwUm1sbGJHUkVaWE5sY21saGJHbDZaWEp6S0NrZ09pQlNaV052Y21ROGMzUnlhVzVuTENBb2JtOWtaVG9nVUdGeWMyVk9iMlJsS1NBOVBpQjJiMmxrUGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN0xpNHVjM1Z3WlhJdVoyVjBSbWxsYkdSRVpYTmxjbWxoYkdsNlpYSnpLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbUZzYkc5M1pXUmNJam9nYmlBOVBpQjdJSFJvYVhNdVlXeHNiM2RsWkNBOUlHNHVaMlYwVG5WdFltVnlWbUZzZFdVb0tUc2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lZMjl1YzNWdFpXUmNJam9nYmlBOVBpQjdJSFJvYVhNdVkyOXVjM1Z0WldRZ1BTQnVMbWRsZEU1MWJXSmxjbFpoYkhWbEtDazdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbVJoZEdGY0lqb2diaUE5UGlCN0lIUm9hWE11WkdGMFlTQTlJRzR1WjJWMFEyOXNiR1ZqZEdsdmJrOW1UMkpxWldOMFZtRnNkV1Z6UEZObFlYUStLR055WldGMFpWTmxZWFJHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbEtUc2dmU3hjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGNtbGhiR2w2WlhNZ2FXNW1iM0p0WVhScGIyNGdkR2hsSUdOMWNuSmxiblFnYjJKcVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIZHlhWFJsY2lCVFpYSnBZV3hwZW1GMGFXOXVJSGR5YVhSbGNpQjBieUIxYzJVZ2RHOGdjMlZ5YVdGc2FYcGxJSFJvYVhNZ2JXOWtaV3hjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVnlhV0ZzYVhwbEtIZHlhWFJsY2pvZ1UyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNpa2dPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lvSVhkeWFYUmxjaWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpZDNKcGRHVnlJR05oYm01dmRDQmlaU0IxYm1SbFptbHVaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5TG5ObGNtbGhiR2w2WlNoM2NtbDBaWElwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1ZDNKcGRHVk9kVzFpWlhKV1lXeDFaU2hjSW1Gc2JHOTNaV1JjSWl3Z2RHaHBjeTVoYkd4dmQyVmtLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFRuVnRZbVZ5Vm1Gc2RXVW9YQ0pqYjI1emRXMWxaRndpTENCMGFHbHpMbU52Ym5OMWJXVmtLVHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMbmR5YVhSbFEyOXNiR1ZqZEdsdmJrOW1UMkpxWldOMFZtRnNkV1Z6UEZObFlYUStLRndpWkdGMFlWd2lMQ0IwYUdsekxtUmhkR0VwTzF4dUlDQWdJSDA3WEc1OVhHNGlMQ0pwYlhCdmNuUWdlME52YlhCc2FXRnVZMlZUWTNKbFpXNXBibWRGY25KdmNsSmxjM0J2Ym5ObGZTQm1jbTl0SUNjdUwybHVaR1Y0Snp0Y2JtbHRjRzl5ZENCN1VHRnljMlZPYjJSbGZTQm1jbTl0SUNkQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5YzdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqY21WaGRHVkRiMjF3YkdsaGJtTmxVMk55WldWdWFXNW5SWEp5YjNKU1pYTndiMjV6WlVaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW9jR0Z5YzJWT2IyUmxPaUJRWVhKelpVNXZaR1VnZkNCMWJtUmxabWx1WldRcElEb2dRMjl0Y0d4cFlXNWpaVk5qY21WbGJtbHVaMFZ5Y205eVVtVnpjRzl1YzJVZ2UxeHVJQ0FnSUdsbUtDRndZWEp6WlU1dlpHVXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkJoY25ObFRtOWtaU0JqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1EyOXRjR3hwWVc1alpWTmpjbVZsYm1sdVowVnljbTl5VW1WemNHOXVjMlVvS1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3UTI5dGNHeHBZVzVqWlZOamNtVmxibWx1WjFKbGMzQnZibk5sZlNCbWNtOXRJQ2N1TDJsdVpHVjRKenRjYm1sdGNHOXlkQ0I3VUdGeWMyVk9iMlJsZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWRGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blVtVnpjRzl1YzJWR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxLSEJoY25ObFRtOWtaVG9nVUdGeWMyVk9iMlJsSUh3Z2RXNWtaV1pwYm1Wa0tTQTZJRU52YlhCc2FXRnVZMlZUWTNKbFpXNXBibWRTWlhOd2IyNXpaU0I3WEc0Z0lDQWdhV1lvSVhCaGNuTmxUbTlrWlNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWNHRnljMlZPYjJSbElHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJEYjIxd2JHbGhibU5sVTJOeVpXVnVhVzVuVW1WemNHOXVjMlVvS1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3UkdWd1pXNWtaVzVqZVVWeWNtOXlVbVZ6Y0c5dWMyVjlJR1p5YjIwZ0p5NHZhVzVrWlhnbk8xeHVhVzF3YjNKMElIdFFZWEp6WlU1dlpHVjlJR1p5YjIwZ0owQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpKenRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOeVpXRjBaVVJsY0dWdVpHVnVZM2xGY25KdmNsSmxjM0J2Ym5ObFJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU2h3WVhKelpVNXZaR1U2SUZCaGNuTmxUbTlrWlNCOElIVnVaR1ZtYVc1bFpDa2dPaUJFWlhCbGJtUmxibU41UlhKeWIzSlNaWE53YjI1elpTQjdYRzRnSUNBZ2FXWW9JWEJoY25ObFRtOWtaU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY0dGeWMyVk9iMlJsSUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkVaWEJsYm1SbGJtTjVSWEp5YjNKU1pYTndiMjV6WlNncE8xeHVmVnh1SWl3aWFXMXdiM0owSUh0RGIyMXdiR2xoYm1ObFUyTnlaV1Z1YVc1blJYSnliM0pTWlhOd2IyNXpaU3dnUTI5dGNHeHBZVzVqWlZOamNtVmxibWx1WjFKbGMzQnZibk5sTENCRVpYQmxibVJsYm1ONVJYSnliM0pTWlhOd2IyNXpaWDBnWm5KdmJTQW5MaTR2Ylc5a1pXeHpMeWM3WEc1cGJYQnZjblFnZTJOeVpXRjBaVU52YlhCc2FXRnVZMlZUWTNKbFpXNXBibWRGY25KdmNsSmxjM0J2Ym5ObFJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaWDBnWm5KdmJTQW5MaTR2Ylc5a1pXeHpMMk55WldGMFpVTnZiWEJzYVdGdVkyVlRZM0psWlc1cGJtZEZjbkp2Y2xKbGMzQnZibk5sUm5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTYzdYRzVwYlhCdmNuUWdlMk55WldGMFpVTnZiWEJzYVdGdVkyVlRZM0psWlc1cGJtZFNaWE53YjI1elpVWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1Y5SUdaeWIyMGdKeTR1TDIxdlpHVnNjeTlqY21WaGRHVkRiMjF3YkdsaGJtTmxVMk55WldWdWFXNW5VbVZ6Y0c5dWMyVkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsSnp0Y2JtbHRjRzl5ZENCN1kzSmxZWFJsUkdWd1pXNWtaVzVqZVVWeWNtOXlVbVZ6Y0c5dWMyVkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsZlNCbWNtOXRJQ2N1TGk5dGIyUmxiSE12WTNKbFlYUmxSR1Z3Wlc1a1pXNWplVVZ5Y205eVVtVnpjRzl1YzJWR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxKenRjYm1sdGNHOXlkQ0I3UTI5dGNHeHBZVzVqWlZKbGNYVmxjM1JDZFdsc1pHVnlSMlYwVW1WeGRXVnpkRU52Ym1acFozVnlZWFJwYjI1OUlHWnliMjBnSnk0dlkyOXRjR3hwWVc1alpWSmxjWFZsYzNSQ2RXbHNaR1Z5UjJWMFVtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNG5PMXh1YVcxd2IzSjBJSHRuWlhSUVlYUm9VR0Z5WVcxbGRHVnljeXdnU0hSMGNFMWxkR2h2WkN3Z1VHRnljMkZpYkdVc0lGQmhjbk5oWW14bFJtRmpkRzl5ZVN3Z1VtVnhkV1Z6ZEVGa1lYQjBaWElzSUZKbGNYVmxjM1JKYm1admNtMWhkR2x2Yml3Z1VtVnhkV1Z6ZEU5d2RHbHZiaXdnVW1WemNHOXVjMlZJWVc1a2JHVnlmU0JtY205dElDZEFiV2xqY205emIyWjBMMnRwYjNSaExXRmljM1J5WVdOMGFXOXVjeWM3WEc1Y2JpOHFLbHh1SUNvZ1FuVnBiR1J6SUdGdVpDQmxlR1ZqZFhSbGN5QnlaWEYxWlhOMGN5Qm1iM0lnYjNCbGNtRjBhVzl1Y3lCMWJtUmxjaUF2WTI5dGNHeHBZVzVqWlZ4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1EyOXRjR3hwWVc1alpWSmxjWFZsYzNSQ2RXbHNaR1Z5SUh0Y2JpQWdJQ0F2S2lvZ1VHRjBhQ0J3WVhKaGJXVjBaWEp6SUdadmNpQjBhR1VnY21WeGRXVnpkQ0FxTDF4dUlDQWdJSEJ5YVhaaGRHVWdjR0YwYUZCaGNtRnRaWFJsY25NNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrTzF4dUlDQWdJQzhxS2lCVWFHVWdjbVZ4ZFdWemRDQmhaR0Z3ZEdWeUlIUnZJSFZ6WlNCMGJ5QmxlR1ZqZFhSbElIUm9aU0J5WlhGMVpYTjBjeTRnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJSEpsY1hWbGMzUkJaR0Z3ZEdWeU9pQlNaWEYxWlhOMFFXUmhjSFJsY2p0Y2JpQWdJQ0F2S2lvZ1ZYSnNJSFJsYlhCc1lYUmxJSFJ2SUhWelpTQjBieUJpZFdsc1pDQjBhR1VnVlZKTUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCeVpYRjFaWE4wSUdKMWFXeGtaWElnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJSFZ5YkZSbGJYQnNZWFJsT2lCemRISnBibWM3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1c1emRHRnVkR2xoZEdWeklHRWdibVYzSUVOdmJYQnNhV0Z1WTJWU1pYRjFaWE4wUW5WcGJHUmxjaUJoYm1RZ2MyVjBjeUIwYUdVZ1pHVm1ZWFZzZENCMllXeDFaWE11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJoZEdoUVlYSmhiV1YwWlhKeklGUm9aU0J5WVhjZ2RYSnNJRzl5SUhSb1pTQlZjbXdnZEdWdGNHeGhkR1VnY0dGeVlXMWxkR1Z5Y3lCbWIzSWdkR2hsSUhKbGNYVmxjM1F1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsY1hWbGMzUkJaR0Z3ZEdWeUlGUm9aU0J5WlhGMVpYTjBJR0ZrWVhCMFpYSWdkRzhnZFhObElIUnZJR1Y0WldOMWRHVWdkR2hsSUhKbGNYVmxjM1J6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmpiMjV6ZEhKMVkzUnZjaWh3WVhSb1VHRnlZVzFsZEdWeWN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0Z2ZDQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUXNJSEpsY1hWbGMzUkJaR0Z3ZEdWeU9pQlNaWEYxWlhOMFFXUmhjSFJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaWdoY0dGMGFGQmhjbUZ0WlhSbGNuTXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkJoZEdoUVlYSmhiV1YwWlhKeklHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUdsbUtDRnlaWEYxWlhOMFFXUmhjSFJsY2lrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWNtVnhkV1Z6ZEVGa1lYQjBaWElnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNteFVaVzF3YkdGMFpTQTlJRndpZXl0aVlYTmxkWEpzZlM5amIyMXdiR2xoYm1ObFhDSTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliRlJ3YkZCaGNtRnRjeUE5SUdkbGRGQmhkR2hRWVhKaGJXVjBaWEp6S0hCaGRHaFFZWEpoYldWMFpYSnpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvVUdGeVlXMWxkR1Z5Y3lBOUlIVnliRlJ3YkZCaGNtRnRjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2lBOUlISmxjWFZsYzNSQlpHRndkR1Z5TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nZG1WeWFXWjVJR1Y0Y0c5eWRITWdZMjl0Y0d4cFlXNWpaU0JtYjNJZ1lTQm5hWFpsYmlCMWMyVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElISmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVJRU52Ym1acFozVnlZWFJwYjI0Z1ptOXlJSFJvWlNCeVpYRjFaWE4wSUhOMVkyZ2dZWE1nYUdWaFpHVnljeXdnY1hWbGNua2djR0Z5WVcxbGRHVnljeXdnWVc1a0lHMXBaR1JzWlhkaGNtVWdiM0IwYVc5dWN5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NtVnpjRzl1YzJWSVlXNWtiR1Z5SUZKbGMzQnZibk5sSUdoaGJtUnNaWElnZEc4Z2RYTmxJR2x1SUhCc1lXTmxJRzltSUhSb1pTQmtaV1poZFd4MElISmxjM0J2Ym5ObElHaGhibVJzYVc1bklIQnliM1pwWkdWa0lHSjVJSFJvWlNCamIzSmxJSE5sY25acFkyVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkJ5YjIxcGMyVWdiMllnUTI5dGNHeHBZVzVqWlZOamNtVmxibWx1WjFKbGMzQnZibk5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ2h5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2Ymo4NklFTnZiWEJzYVdGdVkyVlNaWEYxWlhOMFFuVnBiR1JsY2tkbGRGSmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVJSHdnZFc1a1pXWnBibVZrTENCeVpYTndiMjV6WlVoaGJtUnNaWEkvT2lCU1pYTndiMjV6WlVoaGJtUnNaWElnZkNCMWJtUmxabWx1WldRcElEb2dVSEp2YldselpUeERiMjF3YkdsaGJtTmxVMk55WldWdWFXNW5VbVZ6Y0c5dWMyVWdmQ0IxYm1SbFptbHVaV1ErSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WeGRXVnpkRWx1Wm04Z1BTQjBhR2x6TG5SdlIyVjBVbVZ4ZFdWemRFbHVabTl5YldGMGFXOXVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaWEp5YjNKTllYQndhVzVuT2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0JRWVhKellXSnNaVVpoWTNSdmNuazhVR0Z5YzJGaWJHVStQaUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpTkRBd1hDSTZJR055WldGMFpVTnZiWEJzYVdGdVkyVlRZM0psWlc1cGJtZEZjbkp2Y2xKbGMzQnZibk5sUm5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aU5UQXdYQ0k2SUdOeVpXRjBaVVJsY0dWdVpHVnVZM2xGY25KdmNsSmxjM0J2Ym5ObFJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU3hjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ4ZFdWemRFRmtZWEIwWlhJL0xuTmxibVJCYzNsdVl6eERiMjF3YkdsaGJtTmxVMk55WldWdWFXNW5VbVZ6Y0c5dWMyVStLSEpsY1hWbGMzUkpibVp2TENCamNtVmhkR1ZEYjIxd2JHbGhibU5sVTJOeVpXVnVhVzVuVW1WemNHOXVjMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbExDQnlaWE53YjI1elpVaGhibVJzWlhJc0lHVnljbTl5VFdGd2NHbHVaeWtnUHo4Z1VISnZiV2x6WlM1eVpXcGxZM1FvYm1WM0lFVnljbTl5S0NkeVpYRjFaWE4wSUdGa1lYQjBaWElnYVhNZ2JuVnNiQ2NwS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUhabGNtbG1lU0JsZUhCdmNuUnpJR052YlhCc2FXRnVZMlVnWm05eUlHRWdaMmwyWlc0Z2RYTmxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnlaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaUJEYjI1bWFXZDFjbUYwYVc5dUlHWnZjaUIwYUdVZ2NtVnhkV1Z6ZENCemRXTm9JR0Z6SUdobFlXUmxjbk1zSUhGMVpYSjVJSEJoY21GdFpYUmxjbk1zSUdGdVpDQnRhV1JrYkdWM1lYSmxJRzl3ZEdsdmJuTXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdZU0JTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2RHOUhaWFJTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjRvY21WeGRXVnpkRU52Ym1acFozVnlZWFJwYjI0L09pQkRiMjF3YkdsaGJtTmxVbVZ4ZFdWemRFSjFhV3hrWlhKSFpYUlNaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaUI4SUhWdVpHVm1hVzVsWkNrZ09pQlNaWEYxWlhOMFNXNW1iM0p0WVhScGIyNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaWEYxWlhOMFNXNW1ieUE5SUc1bGR5QlNaWEYxWlhOMFNXNW1iM0p0WVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dWRYSnNWR1Z0Y0d4aGRHVWdQU0IwYUdsekxuVnliRlJsYlhCc1lYUmxPMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBTVzVtYnk1d1lYUm9VR0Z5WVcxbGRHVnljeUE5SUhSb2FYTXVjR0YwYUZCaGNtRnRaWFJsY25NN1hHNGdJQ0FnSUNBZ0lISmxjWFZsYzNSSmJtWnZMbWgwZEhCTlpYUm9iMlFnUFNCSWRIUndUV1YwYUc5a0xrZEZWRHRjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dWFHVmhaR1Z5YzF0Y0lrRmpZMlZ3ZEZ3aVhTQTlJRnRjSW1Gd2NHeHBZMkYwYVc5dUwycHpiMjVjSWwwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dVlXUmtVbVZ4ZFdWemRFaGxZV1JsY25Nb2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNHVhR1ZoWkdWeWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wU1c1bWJ5NWhaR1JTWlhGMVpYTjBUM0IwYVc5dWN5aHlaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaTV2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WeGRXVnpkRWx1Wm04N1hHNGdJQ0FnZlR0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3UlhKeWIzSkZjMk5oY0dWa2ZTQm1jbTl0SUNjdUwybHVaR1Y0Snp0Y2JtbHRjRzl5ZENCN1VHRnljMlZPYjJSbGZTQm1jbTl0SUNkQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5YzdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqY21WaGRHVkZjbkp2Y2tWelkyRndaV1JHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbEtIQmhjbk5sVG05a1pUb2dVR0Z5YzJWT2IyUmxJSHdnZFc1a1pXWnBibVZrS1NBNklFVnljbTl5UlhOallYQmxaQ0I3WEc0Z0lDQWdhV1lvSVhCaGNuTmxUbTlrWlNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWNHRnljMlZPYjJSbElHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJGY25KdmNrVnpZMkZ3WldRb0tUdGNibjFjYmlJc0ltbHRjRzl5ZENCN1JYSnliM0pGYzJOaGNHVmtmU0JtY205dElDY3VMaTh1TGk5dGIyUmxiSE12Snp0Y2JtbHRjRzl5ZENCN1kzSmxZWFJsUlhKeWIzSkZjMk5oY0dWa1JuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaWDBnWm5KdmJTQW5MaTR2TGk0dmJXOWtaV3h6TDJOeVpXRjBaVVZ5Y205eVJYTmpZWEJsWkVaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVW5PMXh1YVcxd2IzSjBJSHRUWldGMGMwbDBaVzFTWlhGMVpYTjBRblZwYkdSbGNrUmxiR1YwWlZKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dWZTQm1jbTl0SUNjdUwzTmxZWFJ6U1hSbGJWSmxjWFZsYzNSQ2RXbHNaR1Z5UkdWc1pYUmxVbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRuTzF4dWFXMXdiM0owSUh0blpYUlFZWFJvVUdGeVlXMWxkR1Z5Y3l3Z1NIUjBjRTFsZEdodlpDd2dVR0Z5YzJGaWJHVXNJRkJoY25OaFlteGxSbUZqZEc5eWVTd2dVbVZ4ZFdWemRFRmtZWEIwWlhJc0lGSmxjWFZsYzNSSmJtWnZjbTFoZEdsdmJpd2dVbVZ4ZFdWemRFOXdkR2x2Yml3Z1VtVnpjRzl1YzJWSVlXNWtiR1Z5ZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNiaThxS2x4dUlDb2dRblZwYkdSeklHRnVaQ0JsZUdWamRYUmxjeUJ5WlhGMVpYTjBjeUJtYjNJZ2IzQmxjbUYwYVc5dWN5QjFibVJsY2lBdmMyVmhkSE12ZTJsa2ZWeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVMlZoZEhOSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhJZ2UxeHVJQ0FnSUM4cUtpQlFZWFJvSUhCaGNtRnRaWFJsY25NZ1ptOXlJSFJvWlNCeVpYRjFaWE4wSUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0J3WVhSb1VHRnlZVzFsZEdWeWN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0N1hHNGdJQ0FnTHlvcUlGUm9aU0J5WlhGMVpYTjBJR0ZrWVhCMFpYSWdkRzhnZFhObElIUnZJR1Y0WldOMWRHVWdkR2hsSUhKbGNYVmxjM1J6TGlBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnY21WeGRXVnpkRUZrWVhCMFpYSTZJRkpsY1hWbGMzUkJaR0Z3ZEdWeU8xeHVJQ0FnSUM4cUtpQlZjbXdnZEdWdGNHeGhkR1VnZEc4Z2RYTmxJSFJ2SUdKMWFXeGtJSFJvWlNCVlVrd2dabTl5SUhSb1pTQmpkWEp5Wlc1MElISmxjWFZsYzNRZ1luVnBiR1JsY2lBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnZFhKc1ZHVnRjR3hoZEdVNklITjBjbWx1Wnp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJuTjBZVzUwYVdGMFpYTWdZU0J1WlhjZ1UyVmhkSE5KZEdWdFVtVnhkV1Z6ZEVKMWFXeGtaWElnWVc1a0lITmxkSE1nZEdobElHUmxabUYxYkhRZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J3WVhSb1VHRnlZVzFsZEdWeWN5QlVhR1VnY21GM0lIVnliQ0J2Y2lCMGFHVWdWWEpzSUhSbGJYQnNZWFJsSUhCaGNtRnRaWFJsY25NZ1ptOXlJSFJvWlNCeVpYRjFaWE4wTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J5WlhGMVpYTjBRV1JoY0hSbGNpQlVhR1VnY21WeGRXVnpkQ0JoWkdGd2RHVnlJSFJ2SUhWelpTQjBieUJsZUdWamRYUmxJSFJvWlNCeVpYRjFaWE4wY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdZMjl1YzNSeWRXTjBiM0lvY0dGMGFGQmhjbUZ0WlhSbGNuTTZJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K0lId2djM1J5YVc1bklId2dkVzVrWldacGJtVmtMQ0J5WlhGMVpYTjBRV1JoY0hSbGNqb2dVbVZ4ZFdWemRFRmtZWEIwWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lvSVhCaGRHaFFZWEpoYldWMFpYSnpLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhSb1VHRnlZVzFsZEdWeWN5QmpZVzV1YjNRZ1ltVWdkVzVrWldacGJtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCcFppZ2hjbVZ4ZFdWemRFRmtZWEIwWlhJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luSmxjWFZsYzNSQlpHRndkR1Z5SUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYSnNWR1Z0Y0d4aGRHVWdQU0JjSW5zclltRnpaWFZ5YkgwdmMyVmhkSE12ZTJsa2ZWd2lPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjbXhVY0d4UVlYSmhiWE1nUFNCblpYUlFZWFJvVUdGeVlXMWxkR1Z5Y3lod1lYUm9VR0Z5WVcxbGRHVnljeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUZCaGNtRnRaWFJsY25NZ1BTQjFjbXhVY0d4UVlYSmhiWE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdWemRFRmtZWEIwWlhJZ1BTQnlaWEYxWlhOMFFXUmhjSFJsY2p0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUhKbGJXOTJaU0JoSUhWelpYSWdabkp2YlNCaElITmxZWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdjbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRnUTI5dVptbG5kWEpoZEdsdmJpQm1iM0lnZEdobElISmxjWFZsYzNRZ2MzVmphQ0JoY3lCb1pXRmtaWEp6TENCeGRXVnllU0J3WVhKaGJXVjBaWEp6TENCaGJtUWdiV2xrWkd4bGQyRnlaU0J2Y0hScGIyNXpMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnlaWE53YjI1elpVaGhibVJzWlhJZ1VtVnpjRzl1YzJVZ2FHRnVaR3hsY2lCMGJ5QjFjMlVnYVc0Z2NHeGhZMlVnYjJZZ2RHaGxJR1JsWm1GMWJIUWdjbVZ6Y0c5dWMyVWdhR0Z1Wkd4cGJtY2djSEp2ZG1sa1pXUWdZbmtnZEdobElHTnZjbVVnYzJWeWRtbGpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCa1pXeGxkR1VvY21WeGRXVnpkRU52Ym1acFozVnlZWFJwYjI0L09pQlRaV0YwYzBsMFpXMVNaWEYxWlhOMFFuVnBiR1JsY2tSbGJHVjBaVkpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1SUh3Z2RXNWtaV1pwYm1Wa0xDQnlaWE53YjI1elpVaGhibVJzWlhJL09pQlNaWE53YjI1elpVaGhibVJzWlhJZ2ZDQjFibVJsWm1sdVpXUXBJRG9nVUhKdmJXbHpaVHgyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjWFZsYzNSSmJtWnZJRDBnZEdocGN5NTBiMFJsYkdWMFpWSmxjWFZsYzNSSmJtWnZjbTFoZEdsdmJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dVhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHVnljbTl5VFdGd2NHbHVaem9nVW1WamIzSmtQSE4wY21sdVp5d2dVR0Z5YzJGaWJHVkdZV04wYjNKNVBGQmhjbk5oWW14bFBqNGdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJalF3TUZ3aU9pQmpjbVZoZEdWRmNuSnZja1Z6WTJGd1pXUkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0kwTUROY0lqb2dZM0psWVhSbFJYSnliM0pGYzJOaGNHVmtSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlN4Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WeGRXVnpkRUZrWVhCMFpYSS9Mbk5sYm1ST2IxSmxjM0J2Ym5ObFEyOXVkR1Z1ZEVGemVXNWpLSEpsY1hWbGMzUkpibVp2TENCeVpYTndiMjV6WlVoaGJtUnNaWElzSUdWeWNtOXlUV0Z3Y0dsdVp5a2dQejhnVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLQ2R5WlhGMVpYTjBJR0ZrWVhCMFpYSWdhWE1nYm5Wc2JDY3BLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJSEpsYlc5MlpTQmhJSFZ6WlhJZ1puSnZiU0JoSUhObFlYUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNGdRMjl1Wm1sbmRYSmhkR2x2YmlCbWIzSWdkR2hsSUhKbGNYVmxjM1FnYzNWamFDQmhjeUJvWldGa1pYSnpMQ0J4ZFdWeWVTQndZWEpoYldWMFpYSnpMQ0JoYm1RZ2JXbGtaR3hsZDJGeVpTQnZjSFJwYjI1ekxseHVJQ0FnSUNBcUlFQnlaWFIxY201eklHRWdVbVZ4ZFdWemRFbHVabTl5YldGMGFXOXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhSdlJHVnNaWFJsVW1WeGRXVnpkRWx1Wm05eWJXRjBhVzl1S0hKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dVB6b2dVMlZoZEhOSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhKRVpXeGxkR1ZTWlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCOElIVnVaR1ZtYVc1bFpDa2dPaUJTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WlhGMVpYTjBTVzVtYnlBOUlHNWxkeUJTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEVsdVptOHVkWEpzVkdWdGNHeGhkR1VnUFNCMGFHbHpMblZ5YkZSbGJYQnNZWFJsTzF4dUlDQWdJQ0FnSUNCeVpYRjFaWE4wU1c1bWJ5NXdZWFJvVUdGeVlXMWxkR1Z5Y3lBOUlIUm9hWE11Y0dGMGFGQmhjbUZ0WlhSbGNuTTdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1oMGRIQk5aWFJvYjJRZ1BTQklkSFJ3VFdWMGFHOWtMa1JGVEVWVVJUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wU1c1bWJ5NWhaR1JTWlhGMVpYTjBTR1ZoWkdWeWN5aHlaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaTVvWldGa1pYSnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZsYzNSSmJtWnZMbUZrWkZKbGNYVmxjM1JQY0hScGIyNXpLSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1TG05d2RHbHZibk1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYRjFaWE4wU1c1bWJ6dGNiaUFnSUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUh0TWFYTjBVMlZoZEhOU1pYTndiMjV6WlZCaFoybHVZWFJwYjI1OUlHWnliMjBnSnk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUh0UVlYSnpaVTV2WkdWOUlHWnliMjBnSjBCdGFXTnliM052Wm5RdmEybHZkR0V0WVdKemRISmhZM1JwYjI1ekp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpVeHBjM1JUWldGMGMxSmxjM0J2Ym5ObFVHRm5hVzVoZEdsdmJrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VvY0dGeWMyVk9iMlJsT2lCUVlYSnpaVTV2WkdVZ2ZDQjFibVJsWm1sdVpXUXBJRG9nVEdsemRGTmxZWFJ6VW1WemNHOXVjMlZRWVdkcGJtRjBhVzl1SUh0Y2JpQWdJQ0JwWmlnaGNHRnljMlZPYjJSbEtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSndZWEp6WlU1dlpHVWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUV4cGMzUlRaV0YwYzFKbGMzQnZibk5sVUdGbmFXNWhkR2x2YmlncE8xeHVmVnh1SWl3aWFXMXdiM0owSUh0RmNuSnZja1Z6WTJGd1pXUXNJRXhwYzNSVFpXRjBjMUpsYzNCdmJuTmxVR0ZuYVc1aGRHbHZiaXdnVTJWaGRDd2dVMlZoZEZKbGNYVmxjM1I5SUdaeWIyMGdKeTR1TDIxdlpHVnNjeThuTzF4dWFXMXdiM0owSUh0amNtVmhkR1ZGY25KdmNrVnpZMkZ3WldSR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxmU0JtY205dElDY3VMaTl0YjJSbGJITXZZM0psWVhSbFJYSnliM0pGYzJOaGNHVmtSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNjN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlV4cGMzUlRaV0YwYzFKbGMzQnZibk5sVUdGbmFXNWhkR2x2YmtaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVjlJR1p5YjIwZ0p5NHVMMjF2WkdWc2N5OWpjbVZoZEdWTWFYTjBVMlZoZEhOU1pYTndiMjV6WlZCaFoybHVZWFJwYjI1R2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxKenRjYm1sdGNHOXlkQ0I3WTNKbFlYUmxVMlZoZEVaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVjlJR1p5YjIwZ0p5NHVMMjF2WkdWc2N5OWpjbVZoZEdWVFpXRjBSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNjN1hHNXBiWEJ2Y25RZ2UxTmxZWFJ6VW1WeGRXVnpkRUoxYVd4a1pYSkhaWFJTWlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2Ym4wZ1puSnZiU0FuTGk5elpXRjBjMUpsY1hWbGMzUkNkV2xzWkdWeVIyVjBVbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRuTzF4dWFXMXdiM0owSUh0VFpXRjBjMUpsY1hWbGMzUkNkV2xzWkdWeVVHOXpkRkpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1ZlNCbWNtOXRJQ2N1TDNObFlYUnpVbVZ4ZFdWemRFSjFhV3hrWlhKUWIzTjBVbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRuTzF4dWFXMXdiM0owSUh0blpYUlFZWFJvVUdGeVlXMWxkR1Z5Y3l3Z1NIUjBjRTFsZEdodlpDd2dVR0Z5YzJGaWJHVXNJRkJoY25OaFlteGxSbUZqZEc5eWVTd2dVbVZ4ZFdWemRFRmtZWEIwWlhJc0lGSmxjWFZsYzNSSmJtWnZjbTFoZEdsdmJpd2dVbVZ4ZFdWemRFOXdkR2x2Yml3Z1VtVnpjRzl1YzJWSVlXNWtiR1Z5ZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNiaThxS2x4dUlDb2dRblZwYkdSeklHRnVaQ0JsZUdWamRYUmxjeUJ5WlhGMVpYTjBjeUJtYjNJZ2IzQmxjbUYwYVc5dWN5QjFibVJsY2lBdmMyVmhkSE5jYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZObFlYUnpVbVZ4ZFdWemRFSjFhV3hrWlhJZ2UxeHVJQ0FnSUM4cUtpQlFZWFJvSUhCaGNtRnRaWFJsY25NZ1ptOXlJSFJvWlNCeVpYRjFaWE4wSUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0J3WVhSb1VHRnlZVzFsZEdWeWN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0N1hHNGdJQ0FnTHlvcUlGUm9aU0J5WlhGMVpYTjBJR0ZrWVhCMFpYSWdkRzhnZFhObElIUnZJR1Y0WldOMWRHVWdkR2hsSUhKbGNYVmxjM1J6TGlBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnY21WeGRXVnpkRUZrWVhCMFpYSTZJRkpsY1hWbGMzUkJaR0Z3ZEdWeU8xeHVJQ0FnSUM4cUtpQlZjbXdnZEdWdGNHeGhkR1VnZEc4Z2RYTmxJSFJ2SUdKMWFXeGtJSFJvWlNCVlVrd2dabTl5SUhSb1pTQmpkWEp5Wlc1MElISmxjWFZsYzNRZ1luVnBiR1JsY2lBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnZFhKc1ZHVnRjR3hoZEdVNklITjBjbWx1Wnp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJuTjBZVzUwYVdGMFpYTWdZU0J1WlhjZ1UyVmhkSE5TWlhGMVpYTjBRblZwYkdSbGNpQmhibVFnYzJWMGN5QjBhR1VnWkdWbVlYVnNkQ0IyWVd4MVpYTXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIQmhkR2hRWVhKaGJXVjBaWEp6SUZSb1pTQnlZWGNnZFhKc0lHOXlJSFJvWlNCVmNtd2dkR1Z0Y0d4aGRHVWdjR0Z5WVcxbGRHVnljeUJtYjNJZ2RHaGxJSEpsY1hWbGMzUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElISmxjWFZsYzNSQlpHRndkR1Z5SUZSb1pTQnlaWEYxWlhOMElHRmtZWEIwWlhJZ2RHOGdkWE5sSUhSdklHVjRaV04xZEdVZ2RHaGxJSEpsY1hWbGMzUnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCamIyNXpkSEoxWTNSdmNpaHdZWFJvVUdGeVlXMWxkR1Z5Y3pvZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajRnZkNCemRISnBibWNnZkNCMWJtUmxabWx1WldRc0lISmxjWFZsYzNSQlpHRndkR1Z5T2lCU1pYRjFaWE4wUVdSaGNIUmxjaWtnZTF4dUlDQWdJQ0FnSUNCcFppZ2hjR0YwYUZCaGNtRnRaWFJsY25NcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luQmhkR2hRWVhKaGJXVjBaWEp6SUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJR2xtS0NGeVpYRjFaWE4wUVdSaGNIUmxjaWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY21WeGRXVnpkRUZrWVhCMFpYSWdZMkZ1Ym05MElHSmxJSFZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY214VVpXMXdiR0YwWlNBOUlGd2lleXRpWVhObGRYSnNmUzl6WldGMGMzcy9iR2x0YVhRcUxHOW1abk5sZENwOVhDSTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliRlJ3YkZCaGNtRnRjeUE5SUdkbGRGQmhkR2hRWVhKaGJXVjBaWEp6S0hCaGRHaFFZWEpoYldWMFpYSnpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvVUdGeVlXMWxkR1Z5Y3lBOUlIVnliRlJ3YkZCaGNtRnRjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWEYxWlhOMFFXUmhjSFJsY2lBOUlISmxjWFZsYzNSQlpHRndkR1Z5TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nY21WMGRYSnVjeUJzYVhOMElHOW1JSFZ6WlhKeklHOWpZM1Z3ZVdsdVp5QnpaV0YwYzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0J5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCRGIyNW1hV2QxY21GMGFXOXVJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRDQnpkV05vSUdGeklHaGxZV1JsY25Nc0lIRjFaWEo1SUhCaGNtRnRaWFJsY25Nc0lHRnVaQ0J0YVdSa2JHVjNZWEpsSUc5d2RHbHZibk11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpQlNaWE53YjI1elpTQm9ZVzVrYkdWeUlIUnZJSFZ6WlNCcGJpQndiR0ZqWlNCdlppQjBhR1VnWkdWbVlYVnNkQ0J5WlhOd2IyNXpaU0JvWVc1a2JHbHVaeUJ3Y205MmFXUmxaQ0JpZVNCMGFHVWdZMjl5WlNCelpYSjJhV05sWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCUWNtOXRhWE5sSUc5bUlFeHBjM1JUWldGMGMxSmxjM0J2Ym5ObFVHRm5hVzVoZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhRb2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNC9PaUJUWldGMGMxSmxjWFZsYzNSQ2RXbHNaR1Z5UjJWMFVtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNGdmQ0IxYm1SbFptbHVaV1FzSUhKbGMzQnZibk5sU0dGdVpHeGxjajg2SUZKbGMzQnZibk5sU0dGdVpHeGxjaUI4SUhWdVpHVm1hVzVsWkNrZ09pQlFjbTl0YVhObFBFeHBjM1JUWldGMGMxSmxjM0J2Ym5ObFVHRm5hVzVoZEdsdmJpQjhJSFZ1WkdWbWFXNWxaRDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WlhGMVpYTjBTVzVtYnlBOUlIUm9hWE11ZEc5SFpYUlNaWEYxWlhOMFNXNW1iM0p0WVhScGIyNG9YRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wUTI5dVptbG5kWEpoZEdsdmJseHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2sxaGNIQnBibWM2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJRkJoY25OaFlteGxSbUZqZEc5eWVUeFFZWEp6WVdKc1pUNCtJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0kxTURCY0lqb2dZM0psWVhSbFJYSnliM0pGYzJOaGNHVmtSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlN4Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WeGRXVnpkRUZrWVhCMFpYSS9Mbk5sYm1SQmMzbHVZenhNYVhOMFUyVmhkSE5TWlhOd2IyNXpaVkJoWjJsdVlYUnBiMjQrS0hKbGNYVmxjM1JKYm1adkxDQmpjbVZoZEdWTWFYTjBVMlZoZEhOU1pYTndiMjV6WlZCaFoybHVZWFJwYjI1R2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxMQ0J5WlhOd2IyNXpaVWhoYm1Sc1pYSXNJR1Z5Y205eVRXRndjR2x1WnlrZ1B6OGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZHlaWEYxWlhOMElHRmtZWEIwWlhJZ2FYTWdiblZzYkNjcEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHRnpjMmxuYmlCaElIVnpaWElnZEc4Z1lTQnpaV0YwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR0p2WkhrZ1ZHaGxJSEpsY1hWbGMzUWdZbTlrZVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCRGIyNW1hV2QxY21GMGFXOXVJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRDQnpkV05vSUdGeklHaGxZV1JsY25Nc0lIRjFaWEo1SUhCaGNtRnRaWFJsY25Nc0lHRnVaQ0J0YVdSa2JHVjNZWEpsSUc5d2RHbHZibk11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpQlNaWE53YjI1elpTQm9ZVzVrYkdWeUlIUnZJSFZ6WlNCcGJpQndiR0ZqWlNCdlppQjBhR1VnWkdWbVlYVnNkQ0J5WlhOd2IyNXpaU0JvWVc1a2JHbHVaeUJ3Y205MmFXUmxaQ0JpZVNCMGFHVWdZMjl5WlNCelpYSjJhV05sWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCUWNtOXRhWE5sSUc5bUlGTmxZWFJjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2NHOXpkQ2hpYjJSNU9pQlRaV0YwVW1WeGRXVnpkQ0I4SUhWdVpHVm1hVzVsWkN3Z2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNC9PaUJUWldGMGMxSmxjWFZsYzNSQ2RXbHNaR1Z5VUc5emRGSmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVJSHdnZFc1a1pXWnBibVZrTENCeVpYTndiMjV6WlVoaGJtUnNaWEkvT2lCU1pYTndiMjV6WlVoaGJtUnNaWElnZkNCMWJtUmxabWx1WldRcElEb2dVSEp2YldselpUeFRaV0YwSUh3Z2RXNWtaV1pwYm1Wa1BpQjdYRzRnSUNBZ0lDQWdJR2xtS0NGaWIyUjVLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0ppYjJSNUlHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsY1hWbGMzUkpibVp2SUQwZ2RHaHBjeTUwYjFCdmMzUlNaWEYxWlhOMFNXNW1iM0p0WVhScGIyNG9YRzRnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVMQ0J5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2Ymx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbGNuSnZjazFoY0hCcGJtYzZJRkpsWTI5eVpEeHpkSEpwYm1jc0lGQmhjbk5oWW14bFJtRmpkRzl5ZVR4UVlYSnpZV0pzWlQ0K0lEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSTBNREJjSWpvZ1kzSmxZWFJsUlhKeWIzSkZjMk5oY0dWa1JuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU3hjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ4ZFdWemRFRmtZWEIwWlhJL0xuTmxibVJCYzNsdVl6eFRaV0YwUGloeVpYRjFaWE4wU1c1bWJ5d2dZM0psWVhSbFUyVmhkRVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVc0lISmxjM0J2Ym5ObFNHRnVaR3hsY2l3Z1pYSnliM0pOWVhCd2FXNW5LU0EvUHlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvSjNKbGNYVmxjM1FnWVdSaGNIUmxjaUJwY3lCdWRXeHNKeWtwTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nY21WMGRYSnVjeUJzYVhOMElHOW1JSFZ6WlhKeklHOWpZM1Z3ZVdsdVp5QnpaV0YwYzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0J5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCRGIyNW1hV2QxY21GMGFXOXVJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRDQnpkV05vSUdGeklHaGxZV1JsY25Nc0lIRjFaWEo1SUhCaGNtRnRaWFJsY25Nc0lHRnVaQ0J0YVdSa2JHVjNZWEpsSUc5d2RHbHZibk11WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdkRzlIWlhSU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0b2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNC9PaUJUWldGMGMxSmxjWFZsYzNSQ2RXbHNaR1Z5UjJWMFVtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNGdmQ0IxYm1SbFptbHVaV1FwSURvZ1VtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnhkV1Z6ZEVsdVptOGdQU0J1WlhjZ1VtVnhkV1Z6ZEVsdVptOXliV0YwYVc5dUtDazdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG5WeWJGUmxiWEJzWVhSbElEMGdkR2hwY3k1MWNteFVaVzF3YkdGMFpUdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFbHVabTh1Y0dGMGFGQmhjbUZ0WlhSbGNuTWdQU0IwYUdsekxuQmhkR2hRWVhKaGJXVjBaWEp6TzF4dUlDQWdJQ0FnSUNCeVpYRjFaWE4wU1c1bWJ5NW9kSFJ3VFdWMGFHOWtJRDBnU0hSMGNFMWxkR2h2WkM1SFJWUTdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1obFlXUmxjbk5iWENKQlkyTmxjSFJjSWwwZ1BTQmJYQ0poY0hCc2FXTmhkR2x2Ymk5cWMyOXVYQ0pkTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1Ga1pGSmxjWFZsYzNSSVpXRmtaWEp6S0hKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUxtaGxZV1JsY25NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dWMyVjBVWFZsY25sVGRISnBibWRRWVhKaGJXVjBaWEp6Um5KdmJWSmhkMDlpYW1WamRDaHlaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaTV4ZFdWeWVWQmhjbUZ0WlhSbGNuTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEVsdVptOHVZV1JrVW1WeGRXVnpkRTl3ZEdsdmJuTW9jbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjR1YjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGNYVmxjM1JKYm1adk8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1lYTnphV2R1SUdFZ2RYTmxjaUIwYnlCaElITmxZWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZbTlrZVNCVWFHVWdjbVZ4ZFdWemRDQmliMlI1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1SUVOdmJtWnBaM1Z5WVhScGIyNGdabTl5SUhSb1pTQnlaWEYxWlhOMElITjFZMmdnWVhNZ2FHVmhaR1Z5Y3l3Z2NYVmxjbmtnY0dGeVlXMWxkR1Z5Y3l3Z1lXNWtJRzFwWkdSc1pYZGhjbVVnYjNCMGFXOXVjeTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUZKbGNYVmxjM1JKYm1admNtMWhkR2x2Ymx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QjBiMUJ2YzNSU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0b1ltOWtlVG9nVTJWaGRGSmxjWFZsYzNRZ2ZDQjFibVJsWm1sdVpXUXNJSEpsY1hWbGMzUkRiMjVtYVdkMWNtRjBhVzl1UHpvZ1UyVmhkSE5TWlhGMVpYTjBRblZwYkdSbGNsQnZjM1JTWlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCOElIVnVaR1ZtYVc1bFpDa2dPaUJTWlhGMVpYTjBTVzVtYjNKdFlYUnBiMjRnZTF4dUlDQWdJQ0FnSUNCcFppZ2hZbTlrZVNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVltOWtlU0JqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYRjFaWE4wU1c1bWJ5QTlJRzVsZHlCU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0b0tUdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFbHVabTh1ZFhKc1ZHVnRjR3hoZEdVZ1BTQjBhR2x6TG5WeWJGUmxiWEJzWVhSbE8xeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFNXNW1ieTV3WVhSb1VHRnlZVzFsZEdWeWN5QTlJSFJvYVhNdWNHRjBhRkJoY21GdFpYUmxjbk03WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JKYm1adkxtaDBkSEJOWlhSb2IyUWdQU0JJZEhSd1RXVjBhRzlrTGxCUFUxUTdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1obFlXUmxjbk5iWENKQlkyTmxjSFJjSWwwZ1BTQmJYQ0poY0hCc2FXTmhkR2x2Ymk5cWMyOXVYQ0pkTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ4ZFdWemRFTnZibVpwWjNWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUkpibVp2TG1Ga1pGSmxjWFZsYzNSSVpXRmtaWEp6S0hKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dUxtaGxZV1JsY25NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dVlXUmtVbVZ4ZFdWemRFOXdkR2x2Ym5Nb2NtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNHViM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRWx1Wm04dWMyVjBRMjl1ZEdWdWRFWnliMjFRWVhKellXSnNaU2gwYUdsekxuSmxjWFZsYzNSQlpHRndkR1Z5TENCY0ltRndjR3hwWTJGMGFXOXVMMnB6YjI1Y0lpd2dZbTlrZVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYRjFaWE4wU1c1bWJ6dGNiaUFnSUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUh0VFpYSjJhV05sZlNCbWNtOXRJQ2N1TDJsdVpHVjRKenRjYm1sdGNHOXlkQ0I3VUdGeWMyVk9iMlJsZlNCbWNtOXRJQ2RBYldsamNtOXpiMlowTDJ0cGIzUmhMV0ZpYzNSeVlXTjBhVzl1Y3ljN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWVFpYSjJhV05sUm5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTaHdZWEp6WlU1dlpHVTZJRkJoY25ObFRtOWtaU0I4SUhWdVpHVm1hVzVsWkNrZ09pQlRaWEoyYVdObElIdGNiaUFnSUNCcFppZ2hjR0Z5YzJWT2IyUmxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p3WVhKelpVNXZaR1VnWTJGdWJtOTBJR0psSUhWdVpHVm1hVzVsWkZ3aUtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGTmxjblpwWTJVb0tUdGNibjFjYmlJc0ltbHRjRzl5ZENCN1UyVnlkbWxqWlgwZ1puSnZiU0FuTGk0dmJXOWtaV3h6THljN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlZObGNuWnBZMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbGZTQm1jbTl0SUNjdUxpOXRiMlJsYkhNdlkzSmxZWFJsVTJWeWRtbGpaVVp5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVbk8xeHVhVzF3YjNKMElIdFRaWEoyYVdObGMxSmxjWFZsYzNSQ2RXbHNaR1Z5UjJWMFVtVnhkV1Z6ZEVOdmJtWnBaM1Z5WVhScGIyNTlJR1p5YjIwZ0p5NHZjMlZ5ZG1salpYTlNaWEYxWlhOMFFuVnBiR1JsY2tkbGRGSmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVKenRjYm1sdGNHOXlkQ0I3WjJWMFVHRjBhRkJoY21GdFpYUmxjbk1zSUVoMGRIQk5aWFJvYjJRc0lGQmhjbk5oWW14bExDQlFZWEp6WVdKc1pVWmhZM1J2Y25rc0lGSmxjWFZsYzNSQlpHRndkR1Z5TENCU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0c0lGSmxjWFZsYzNSUGNIUnBiMjRzSUZKbGMzQnZibk5sU0dGdVpHeGxjbjBnWm5KdmJTQW5RRzFwWTNKdmMyOW1kQzlyYVc5MFlTMWhZbk4wY21GamRHbHZibk1uTzF4dVhHNHZLaXBjYmlBcUlFSjFhV3hrY3lCaGJtUWdaWGhsWTNWMFpYTWdjbVZ4ZFdWemRITWdabTl5SUc5d1pYSmhkR2x2Ym5NZ2RXNWtaWElnTDNObGNuWnBZMlZ6WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVFpYSjJhV05sYzFKbGNYVmxjM1JDZFdsc1pHVnlJSHRjYmlBZ0lDQXZLaW9nVUdGMGFDQndZWEpoYldWMFpYSnpJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRDQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ2NHRjBhRkJoY21GdFpYUmxjbk02SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtPMXh1SUNBZ0lDOHFLaUJVYUdVZ2NtVnhkV1Z6ZENCaFpHRndkR1Z5SUhSdklIVnpaU0IwYnlCbGVHVmpkWFJsSUhSb1pTQnlaWEYxWlhOMGN5NGdLaTljYmlBZ0lDQndjbWwyWVhSbElISmxjWFZsYzNSQlpHRndkR1Z5T2lCU1pYRjFaWE4wUVdSaGNIUmxjanRjYmlBZ0lDQXZLaW9nVlhKc0lIUmxiWEJzWVhSbElIUnZJSFZ6WlNCMGJ5QmlkV2xzWkNCMGFHVWdWVkpNSUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J5WlhGMVpYTjBJR0oxYVd4a1pYSWdLaTljYmlBZ0lDQndjbWwyWVhSbElIVnliRlJsYlhCc1lYUmxPaUJ6ZEhKcGJtYzdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzV6ZEdGdWRHbGhkR1Z6SUdFZ2JtVjNJRk5sY25acFkyVnpVbVZ4ZFdWemRFSjFhV3hrWlhJZ1lXNWtJSE5sZEhNZ2RHaGxJR1JsWm1GMWJIUWdkbUZzZFdWekxseHVJQ0FnSUNBcUlFQndZWEpoYlNCd1lYUm9VR0Z5WVcxbGRHVnljeUJVYUdVZ2NtRjNJSFZ5YkNCdmNpQjBhR1VnVlhKc0lIUmxiWEJzWVhSbElIQmhjbUZ0WlhSbGNuTWdabTl5SUhSb1pTQnlaWEYxWlhOMExseHVJQ0FnSUNBcUlFQndZWEpoYlNCeVpYRjFaWE4wUVdSaGNIUmxjaUJVYUdVZ2NtVnhkV1Z6ZENCaFpHRndkR1Z5SUhSdklIVnpaU0IwYnlCbGVHVmpkWFJsSUhSb1pTQnlaWEYxWlhOMGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWTI5dWMzUnlkV04wYjNJb2NHRjBhRkJoY21GdFpYUmxjbk02SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtJSHdnYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrTENCeVpYRjFaWE4wUVdSaGNIUmxjam9nVW1WeGRXVnpkRUZrWVhCMFpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYQmhkR2hRWVhKaGJXVjBaWEp6S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKd1lYUm9VR0Z5WVcxbGRHVnljeUJqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUNBZ0lDQnBaaWdoY21WeGRXVnpkRUZrWVhCMFpYSXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbkpsY1hWbGMzUkJaR0Z3ZEdWeUlHTmhibTV2ZENCaVpTQjFibVJsWm1sdVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEpzVkdWdGNHeGhkR1VnUFNCY0luc3JZbUZ6WlhWeWJIMHZjMlZ5ZG1salpYTmNJanRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkWEpzVkhCc1VHRnlZVzF6SUQwZ1oyVjBVR0YwYUZCaGNtRnRaWFJsY25Nb2NHRjBhRkJoY21GdFpYUmxjbk1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdoUVlYSmhiV1YwWlhKeklEMGdkWEpzVkhCc1VHRnlZVzF6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsY1hWbGMzUkJaR0Z3ZEdWeUlEMGdjbVZ4ZFdWemRFRmtZWEIwWlhJN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCblpYUWdZU0JzYVhOMElHOW1JSE5sY25acFkyVnpJR0VnZFhObGNpQnBjeUJsYm5ScGRHeGxaQ0IwYjF4dUlDQWdJQ0FxSUVCd1lYSmhiU0J5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlCRGIyNW1hV2QxY21GMGFXOXVJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRDQnpkV05vSUdGeklHaGxZV1JsY25Nc0lIRjFaWEo1SUhCaGNtRnRaWFJsY25Nc0lHRnVaQ0J0YVdSa2JHVjNZWEpsSUc5d2RHbHZibk11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsYzNCdmJuTmxTR0Z1Wkd4bGNpQlNaWE53YjI1elpTQm9ZVzVrYkdWeUlIUnZJSFZ6WlNCcGJpQndiR0ZqWlNCdlppQjBhR1VnWkdWbVlYVnNkQ0J5WlhOd2IyNXpaU0JvWVc1a2JHbHVaeUJ3Y205MmFXUmxaQ0JpZVNCMGFHVWdZMjl5WlNCelpYSjJhV05sWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWVNCUWNtOXRhWE5sSUc5bUlGTmxjblpwWTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwS0hKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dVB6b2dVMlZ5ZG1salpYTlNaWEYxWlhOMFFuVnBiR1JsY2tkbGRGSmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVJSHdnZFc1a1pXWnBibVZrTENCeVpYTndiMjV6WlVoaGJtUnNaWEkvT2lCU1pYTndiMjV6WlVoaGJtUnNaWElnZkNCMWJtUmxabWx1WldRcElEb2dVSEp2YldselpUeFRaWEoyYVdObElId2dkVzVrWldacGJtVmtQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsY1hWbGMzUkpibVp2SUQwZ2RHaHBjeTUwYjBkbGRGSmxjWFZsYzNSSmJtWnZjbTFoZEdsdmJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNYVmxjM1JEYjI1bWFXZDFjbUYwYVc5dVhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGNYVmxjM1JCWkdGd2RHVnlQeTV6Wlc1a1FYTjVibU04VTJWeWRtbGpaVDRvY21WeGRXVnpkRWx1Wm04c0lHTnlaV0YwWlZObGNuWnBZMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbExDQnlaWE53YjI1elpVaGhibVJzWlhJc0lIVnVaR1ZtYVc1bFpDa2dQejhnVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLQ2R5WlhGMVpYTjBJR0ZrWVhCMFpYSWdhWE1nYm5Wc2JDY3BLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR2RsZENCaElHeHBjM1FnYjJZZ2MyVnlkbWxqWlhNZ1lTQjFjMlZ5SUdseklHVnVkR2wwYkdWa0lIUnZYRzRnSUNBZ0lDb2dRSEJoY21GdElISmxjWFZsYzNSRGIyNW1hV2QxY21GMGFXOXVJRU52Ym1acFozVnlZWFJwYjI0Z1ptOXlJSFJvWlNCeVpYRjFaWE4wSUhOMVkyZ2dZWE1nYUdWaFpHVnljeXdnY1hWbGNua2djR0Z5WVcxbGRHVnljeXdnWVc1a0lHMXBaR1JzWlhkaGNtVWdiM0IwYVc5dWN5NWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRkpsY1hWbGMzUkpibVp2Y20xaGRHbHZibHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCMGIwZGxkRkpsY1hWbGMzUkpibVp2Y20xaGRHbHZiaWh5WlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2Ymo4NklGTmxjblpwWTJWelVtVnhkV1Z6ZEVKMWFXeGtaWEpIWlhSU1pYRjFaWE4wUTI5dVptbG5kWEpoZEdsdmJpQjhJSFZ1WkdWbWFXNWxaQ2tnT2lCU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYRjFaWE4wU1c1bWJ5QTlJRzVsZHlCU1pYRjFaWE4wU1c1bWIzSnRZWFJwYjI0b0tUdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFbHVabTh1ZFhKc1ZHVnRjR3hoZEdVZ1BTQjBhR2x6TG5WeWJGUmxiWEJzWVhSbE8xeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFNXNW1ieTV3WVhSb1VHRnlZVzFsZEdWeWN5QTlJSFJvYVhNdWNHRjBhRkJoY21GdFpYUmxjbk03WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JKYm1adkxtaDBkSEJOWlhSb2IyUWdQU0JJZEhSd1RXVjBhRzlrTGtkRlZEdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFbHVabTh1YUdWaFpHVnljMXRjSWtGalkyVndkRndpWFNBOUlGdGNJbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNWNJbDA3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWEYxWlhOMFEyOXVabWxuZFhKaGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ4ZFdWemRFbHVabTh1WVdSa1VtVnhkV1Z6ZEVobFlXUmxjbk1vY21WeGRXVnpkRU52Ym1acFozVnlZWFJwYjI0dWFHVmhaR1Z5Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhGMVpYTjBTVzVtYnk1aFpHUlNaWEYxWlhOMFQzQjBhVzl1Y3loeVpYRjFaWE4wUTI5dVptbG5kWEpoZEdsdmJpNXZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ4ZFdWemRFbHVabTg3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdRMjl0Y0d4cFlXNWpaVkpsY1hWbGMzUkNkV2xzWkdWeWZTQm1jbTl0SUNjdUwyTnZiWEJzYVdGdVkyVXZZMjl0Y0d4cFlXNWpaVkpsY1hWbGMzUkNkV2xzWkdWeUp6dGNibWx0Y0c5eWRDQjdVMlZoZEhOSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhKOUlHWnliMjBnSnk0dmMyVmhkSE12YVhSbGJTOXpaV0YwYzBsMFpXMVNaWEYxWlhOMFFuVnBiR1JsY2ljN1hHNXBiWEJ2Y25RZ2UxTmxZWFJ6VW1WeGRXVnpkRUoxYVd4a1pYSjlJR1p5YjIwZ0p5NHZjMlZoZEhNdmMyVmhkSE5TWlhGMVpYTjBRblZwYkdSbGNpYzdYRzVwYlhCdmNuUWdlMU5sY25acFkyVnpVbVZ4ZFdWemRFSjFhV3hrWlhKOUlHWnliMjBnSnk0dmMyVnlkbWxqWlhNdmMyVnlkbWxqWlhOU1pYRjFaWE4wUW5WcGJHUmxjaWM3WEc1cGJYQnZjblFnZTJWdVlXSnNaVUpoWTJ0cGJtZFRkRzl5WlVadmNsTmxjbWxoYkdsNllYUnBiMjVYY21sMFpYSkdZV04wYjNKNUxDQm5aWFJRWVhSb1VHRnlZVzFsZEdWeWN5d2dVR0Z5YzJWT2IyUmxSbUZqZEc5eWVWSmxaMmx6ZEhKNUxDQnlaV2RwYzNSbGNrUmxabUYxYkhSRVpYTmxjbWxoYkdsNlpYSXNJSEpsWjJsemRHVnlSR1ZtWVhWc2RGTmxjbWxoYkdsNlpYSXNJRkpsY1hWbGMzUkJaR0Z3ZEdWeUxDQlRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlSbUZqZEc5eWVWSmxaMmx6ZEhKNWZTQm1jbTl0SUNkQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdGaWMzUnlZV04wYVc5dWN5YzdYRzVwYlhCdmNuUWdlMHB6YjI1UVlYSnpaVTV2WkdWR1lXTjBiM0o1TENCS2MyOXVVMlZ5YVdGc2FYcGhkR2x2YmxkeWFYUmxja1poWTNSdmNubDlJR1p5YjIwZ0owQnRhV055YjNOdlpuUXZhMmx2ZEdFdGMyVnlhV0ZzYVhwaGRHbHZiaTFxYzI5dUp6dGNibHh1THlvcVhHNGdLaUJVYUdVZ2JXRnBiaUJsYm5SeWVTQndiMmx1ZENCdlppQjBhR1VnVTBSTExDQmxlSEJ2YzJWeklIUm9aU0JqYjI1bWFXZDFjbUYwYVc5dUlHRnVaQ0IwYUdVZ1pteDFaVzUwSUVGUVNTNWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRVZ1ZEdsMGJHVnRaVzUwY3lCN1hHNGdJQ0FnTHlvcUlGUm9aU0JqYjIxd2JHbGhibU5sSUhCeWIzQmxjblI1SUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCamIyMXdiR2xoYm1ObEtDazZJRU52YlhCc2FXRnVZMlZTWlhGMVpYTjBRblZwYkdSbGNpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnUTI5dGNHeHBZVzVqWlZKbGNYVmxjM1JDZFdsc1pHVnlLSFJvYVhNdWNHRjBhRkJoY21GdFpYUmxjbk1zSUhSb2FYTXVjbVZ4ZFdWemRFRmtZWEIwWlhJcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lvZ1VHRjBhQ0J3WVhKaGJXVjBaWEp6SUdadmNpQjBhR1VnY21WeGRXVnpkQ0FxTDF4dUlDQWdJSEJ5YVhaaGRHVWdjR0YwYUZCaGNtRnRaWFJsY25NNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrTzF4dUlDQWdJQzhxS2lCVWFHVWdjbVZ4ZFdWemRDQmhaR0Z3ZEdWeUlIUnZJSFZ6WlNCMGJ5QmxlR1ZqZFhSbElIUm9aU0J5WlhGMVpYTjBjeTRnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJSEpsY1hWbGMzUkJaR0Z3ZEdWeU9pQlNaWEYxWlhOMFFXUmhjSFJsY2p0Y2JpQWdJQ0F2S2lvZ1ZHaGxJSE5sWVhSeklIQnliM0JsY25SNUlDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQnpaV0YwY3lncE9pQlRaV0YwYzFKbGNYVmxjM1JDZFdsc1pHVnlJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVFpXRjBjMUpsY1hWbGMzUkNkV2xzWkdWeUtIUm9hWE11Y0dGMGFGQmhjbUZ0WlhSbGNuTXNJSFJvYVhNdWNtVnhkV1Z6ZEVGa1lYQjBaWElwTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaW9nVkdobElITmxjblpwWTJWeklIQnliM0JsY25SNUlDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQnpaWEoyYVdObGN5Z3BPaUJUWlhKMmFXTmxjMUpsY1hWbGMzUkNkV2xzWkdWeUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJUWlhKMmFXTmxjMUpsY1hWbGMzUkNkV2xzWkdWeUtIUm9hWE11Y0dGMGFGQmhjbUZ0WlhSbGNuTXNJSFJvYVhNdWNtVnhkV1Z6ZEVGa1lYQjBaWElwTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaW9nVlhKc0lIUmxiWEJzWVhSbElIUnZJSFZ6WlNCMGJ5QmlkV2xzWkNCMGFHVWdWVkpNSUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J5WlhGMVpYTjBJR0oxYVd4a1pYSWdLaTljYmlBZ0lDQndjbWwyWVhSbElIVnliRlJsYlhCc1lYUmxPaUJ6ZEhKcGJtYzdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzV6ZEdGdWRHbGhkR1Z6SUdFZ2JtVjNJRVZ1ZEdsMGJHVnRaVzUwY3lCaGJtUWdjMlYwY3lCMGFHVWdaR1ZtWVhWc2RDQjJZV3gxWlhNdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhKbGNYVmxjM1JCWkdGd2RHVnlJRlJvWlNCeVpYRjFaWE4wSUdGa1lYQjBaWElnZEc4Z2RYTmxJSFJ2SUdWNFpXTjFkR1VnZEdobElISmxjWFZsYzNSekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2loeVpYRjFaWE4wUVdSaGNIUmxjam9nVW1WeGRXVnpkRUZrWVhCMFpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYSmxjWFZsYzNSQlpHRndkR1Z5S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKeVpYRjFaWE4wUVdSaGNIUmxjaUJqWVc1dWIzUWdZbVVnZFc1a1pXWnBibVZrWENJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGRHaFFZWEpoYldWMFpYSnpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhKc1ZHVnRjR3hoZEdVZ1BTQmNJbnNyWW1GelpYVnliSDFjSWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhGMVpYTjBRV1JoY0hSbGNpQTlJSEpsY1hWbGMzUkJaR0Z3ZEdWeU8xeHVJQ0FnSUNBZ0lDQnlaV2RwYzNSbGNrUmxabUYxYkhSVFpYSnBZV3hwZW1WeUtFcHpiMjVUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5Um1GamRHOXllU2s3WEc0Z0lDQWdJQ0FnSUhKbFoybHpkR1Z5UkdWbVlYVnNkRVJsYzJWeWFXRnNhWHBsY2loS2MyOXVVR0Z5YzJWT2IyUmxSbUZqZEc5eWVTazdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYRjFaWE4wUVdSaGNIUmxjaTVpWVhObFZYSnNJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2djbVZ4ZFdWemRFRmtZWEIwWlhJdVltRnpaVlZ5YkNBOVBUMGdYQ0pjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRUZrWVhCMFpYSXVZbUZ6WlZWeWJDQTlJRndpTDJGd2FTOWxiblJwZEd4bGJXVnVkSE12ZGpGY0lqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2hRWVhKaGJXVjBaWEp6VzF3aVltRnpaWFZ5YkZ3aVhTQTlJSEpsY1hWbGMzUkJaR0Z3ZEdWeUxtSmhjMlZWY213N1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJR0Z1SUdsMFpXMGdabkp2YlNCMGFHVWdRWEJwVTJSckxuTmxZWFJ6TG1sMFpXMGdZMjlzYkdWamRHbHZibHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBaQ0JWYm1seGRXVWdhV1JsYm5ScFptbGxjaUJ2WmlCMGFHVWdhWFJsYlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUdFZ1UyVmhkSE5KZEdWdFVtVnhkV1Z6ZEVKMWFXeGtaWEpjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVmhkSE5DZVVsa0tHbGtPaUJ6ZEhKcGJtY3BJRG9nVTJWaGRITkpkR1Z0VW1WeGRXVnpkRUoxYVd4a1pYSWdlMXh1SUNBZ0lDQWdJQ0JwWmlnaGFXUXBJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbWxrSUdOaGJtNXZkQ0JpWlNCMWJtUmxabWx1WldSY0lpazdYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliRlJ3YkZCaGNtRnRjeUE5SUdkbGRGQmhkR2hRWVhKaGJXVjBaWEp6S0hSb2FYTXVjR0YwYUZCaGNtRnRaWFJsY25NcE8xeHVJQ0FnSUNBZ0lDQjFjbXhVY0d4UVlYSmhiWE5iWENKcFpGd2lYU0E5SUdsa1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVMlZoZEhOSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhJb2RYSnNWSEJzVUdGeVlXMXpMQ0IwYUdsekxuSmxjWFZsYzNSQlpHRndkR1Z5S1R0Y2JpQWdJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHNnUm1WMFkyaFNaWEYxWlhOMFFXUmhjSFJsY2lCOUlHWnliMjBnWENKQWJXbGpjbTl6YjJaMEwydHBiM1JoTFdoMGRIQXRabVYwWTJoc2FXSnlZWEo1WENJN1hHNXBiWEJ2Y25RZ2V5Qk1hV05sYm5ObExDQk1hV05sYm5ObFUyVnlkbWxqWlN3Z1ZYTmxjaUI5SUdaeWIyMGdYQ0l1TGk5elpYSjJhV05sWENJN1hHNXBiWEJ2Y25RZ2V5QkZiblJwZEd4bGJXVnVkSE1nZlNCbWNtOXRJRndpTGk5bGJuUnBkR3hsYldWdWRITmNJanRjYm1sdGNHOXlkQ0I3WEc0Z0lFRmpZMlZ6YzFSdmEyVnVVSEp2ZG1sa1pYSXNYRzRnSUVGc2JHOTNaV1JJYjNOMGMxWmhiR2xrWVhSdmNpeGNiaUFnUW1GelpVSmxZWEpsY2xSdmEyVnVRWFYwYUdWdWRHbGpZWFJwYjI1UWNtOTJhV1JsY2l4Y2JuMGdabkp2YlNCY0lrQnRhV055YjNOdlpuUXZhMmx2ZEdFdFlXSnpkSEpoWTNScGIyNXpYQ0k3WEc1cGJYQnZjblFnZXlCVFpXRjBVbVZ4ZFdWemRDQjlJR1p5YjIwZ1hDSXVMMjF2WkdWc2Mxd2lPMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdSVzUwYVhSc1pXMWxiblJ6VTJWeWRtbGpaU0JwYlhCc1pXMWxiblJ6SUV4cFkyVnVjMlZUWlhKMmFXTmxJSHRjYmlBZ2NISnBkbUYwWlNCamJHbGxiblE2SUVWdWRHbDBiR1Z0Wlc1MGN6dGNiaUFnY0hKcGRtRjBaU0JoWTJObGMzTlViMnRsYmxCeWIzWnBaR1Z5T2lCQlkyTmxjM05VYjJ0bGJsQnliM1pwWkdWeU8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHSmhjMlZWY213L09pQnpkSEpwYm1jcElIdGNiaUFnSUNCMGFHbHpMbUZqWTJWemMxUnZhMlZ1VUhKdmRtbGtaWElnUFNCdVpYY2dWRzlyWlc1UWNtOTJhV1JsY2lncE8xeHVJQ0FnSUdOdmJuTjBJR0ZrWVhCMFpYSWdQU0J1WlhjZ1JtVjBZMmhTWlhGMVpYTjBRV1JoY0hSbGNpaGNiaUFnSUNBZ0lHNWxkeUJDWVhObFFtVmhjbVZ5Vkc5clpXNUJkWFJvWlc1MGFXTmhkR2x2YmxCeWIzWnBaR1Z5S0hSb2FYTXVZV05qWlhOelZHOXJaVzVRY205MmFXUmxjaWxjYmlBZ0lDQXBPMXh1SUNBZ0lHRmtZWEIwWlhJdVltRnpaVlZ5YkNBOUlHSmhjMlZWY213Z2ZId2dYQ0pjSWp0Y2JpQWdJQ0IwYUdsekxtTnNhV1Z1ZENBOUlHNWxkeUJGYm5ScGRHeGxiV1Z1ZEhNb1lXUmhjSFJsY2lrN1hHNGdJSDFjYmx4dUlDQmhjM2x1WXlCblpYUW9iM0puU1dRNklITjBjbWx1Wnl3Z2MyVnlkbWxqWlVsa09pQnpkSEpwYm1jcE9pQlFjbTl0YVhObFBFeHBZMlZ1YzJVK0lIdGNiaUFnSUNCamIyNXpkQ0J5WlhOMWJIUWdQU0JoZDJGcGRDQjBhR2x6TG1Oc2FXVnVkQzV6WldGMGN5NW5aWFFvS1R0Y2JpQWdJQ0J5WlhSMWNtNGdleUIwYjNSaGJEb2djbVZ6ZFd4MFB5NWpiMjV6ZFcxbFpDQjhmQ0F3TENCaGRtRnBiR0ZpYkdVNklISmxjM1ZzZEQ4dVlXeHNiM2RsWkNCOGZDQXdJSDA3WEc0Z0lIMWNibHh1SUNCaGMzbHVZeUJ6WldGMGN5aGNiaUFnSUNCdmNtZEpaRG9nYzNSeWFXNW5MRnh1SUNBZ0lITmxjblpwWTJWSlpEb2djM1J5YVc1bkxGeHVJQ0FnSUdGemMybG5ibVZrUHpvZ1ltOXZiR1ZoYmlCOElIVnVaR1ZtYVc1bFpGeHVJQ0FwT2lCUWNtOXRhWE5sUEZWelpYSmJYVDRnZTF4dUlDQWdJR052Ym5OMElISmxjM1ZzZENBOUlHRjNZV2wwSUhSb2FYTXVZMnhwWlc1MExuTmxZWFJ6TG1kbGRDZ3BPMXh1WEc0Z0lDQWdhV1lnS0NGeVpYTjFiSFEvTG1SaGRHRXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmJYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTG1SaGRHRXViV0Z3S0NoN0lITjFZbk5qY21sd2RHbHZibDlwWkN3Z1lXTmpiM1Z1ZEY5MWMyVnlibUZ0WlNCOUtTQTlQaUFvZTF4dUlDQWdJQ0FnYVdRNklITjFZbk5qY21sd2RHbHZibDlwWkNFc1hHNGdJQ0FnSUNCdVlXMWxPaUJoWTJOdmRXNTBYM1Z6WlhKdVlXMWxJU3hjYmlBZ0lDQWdJR0Z6YzJsbmJtVmtPaUIwY25WbExGeHVJQ0FnSUgwcEtUdGNiaUFnZlZ4dVhHNGdJR0Z6ZVc1aklHRnpjMmxuYmloY2JpQWdJQ0J2Y21kSlpEb2djM1J5YVc1bkxGeHVJQ0FnSUhObGNuWnBZMlZKWkRvZ2MzUnlhVzVuTEZ4dUlDQWdJSFZ6WlhKSlpITTZJSE4wY21sdVoxdGRYRzRnSUNrNklGQnliMjFwYzJVOGRtOXBaRDRnZTF4dUlDQWdJR052Ym5OMElHSnZaSGtnUFNCdVpYY2dVMlZoZEZKbGNYVmxjM1FvS1R0Y2JpQWdJQ0JpYjJSNUxtRmpZMjkxYm5SZmRYTmxjbTVoYldVZ1BTQjFjMlZ5U1dSeld6QmRPMXh1SUNBZ0lHRjNZV2wwSUhSb2FYTXVZMnhwWlc1MExuTmxZWFJ6TG5CdmMzUW9ZbTlrZVNrN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNWNiaUFnWVhONWJtTWdkVzVCYzNOcFoyNG9YRzRnSUNBZ2IzSm5TV1E2SUhOMGNtbHVaeXhjYmlBZ0lDQnpaWEoyYVdObFNXUTZJSE4wY21sdVp5eGNiaUFnSUNCMWMyVnlTV1J6T2lCemRISnBibWRiWFZ4dUlDQXBPaUJRY205dGFYTmxQSFp2YVdRK0lIdGNiaUFnSUNCaGQyRnBkQ0IwYUdsekxtTnNhV1Z1ZEM1elpXRjBjMEo1U1dRb2RYTmxja2xrYzFzd1hTa3VaR1ZzWlhSbEtDazdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzU5WEc1Y2JtTnNZWE56SUZSdmEyVnVVSEp2ZG1sa1pYSWdhVzF3YkdWdFpXNTBjeUJCWTJObGMzTlViMnRsYmxCeWIzWnBaR1Z5SUh0Y2JpQWdaMlYwUVhWMGFHOXlhWHBoZEdsdmJsUnZhMlZ1S0Z4dUlDQWdJSFZ5YkQ4NklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpDeGNiaUFnSUNCaFpHUnBkR2x2Ym1Gc1FYVjBhR1Z1ZEdsallYUnBiMjVEYjI1MFpYaDBQem9nVW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNGdmQ0IxYm1SbFptbHVaV1JjYmlBZ0tUb2dVSEp2YldselpUeHpkSEpwYm1jK0lIdGNiaUFnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLRndpWkhWdGJYbGNJaWs3WEc0Z0lIMWNibHh1SUNCblpYUkJiR3h2ZDJWa1NHOXpkSE5XWVd4cFpHRjBiM0lvS1RvZ1FXeHNiM2RsWkVodmMzUnpWbUZzYVdSaGRHOXlJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRUZzYkc5M1pXUkliM04wYzFaaGJHbGtZWFJ2Y2lodVpYY2dVMlYwS0NrcE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdleUJOYjJOclUyVnlkbWxqWlNCOUlHWnliMjBnWENJdUwyRndhUzl0YjJOckxYTmxjblpwWTJWY0lqdGNibWx0Y0c5eWRDQjdJRU5wWVcxQmRYUm9laUI5SUdaeWIyMGdYQ0l1TDJGd2FTOWphV0Z0TFhObGNuWnBZMlZjSWp0Y2JtbHRjRzl5ZENCN0lFVnVkR2wwYkdWdFpXNTBjMU5sY25acFkyVWdmU0JtY205dElGd2lMaTlsYm5ScGRHeGxiV1Z1ZEhNdFlYQnBMMlZ1ZEdsMGJHVnRaVzUwY3kxelpYSjJhV05sWENJN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUV4cFkyVnVjMlVnUFNCN1hHNGdJR0YyWVdsc1lXSnNaVG9nYm5WdFltVnlPMXh1SUNCMGIzUmhiRG9nYm5WdFltVnlPMXh1ZlR0Y2JseHVaWGh3YjNKMElIUjVjR1VnVlhObGNpQTlJSHRjYmlBZ2FXUTZJSE4wY21sdVp6dGNiaUFnYm1GdFpUb2djM1J5YVc1bk8xeHVJQ0JoYzNOcFoyNWxaRG9nWW05dmJHVmhianRjYm4wN1hHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdUR2xqWlc1elpWTmxjblpwWTJVZ2UxeHVJQ0JuWlhRb2IzSm5TV1E2SUhOMGNtbHVaeXdnYzJWeWRtbGpaVWxrT2lCemRISnBibWNwT2lCUWNtOXRhWE5sUEV4cFkyVnVjMlUrTzF4dVhHNGdJSE5sWVhSektHOXlaMGxrT2lCemRISnBibWNzSUhObGNuWnBZMlZKWkRvZ2MzUnlhVzVuTENCaGMzTnBaMjVsWkQ4NklHSnZiMnhsWVc0cE9pQlFjbTl0YVhObFBGVnpaWEpiWFQ0N1hHNWNiaUFnWVhOemFXZHVLRzl5WjBsa09pQnpkSEpwYm1jc0lITmxjblpwWTJWSlpEb2djM1J5YVc1bkxDQjFjMlZ5U1dSek9pQnpkSEpwYm1kYlhTazZJRkJ5YjIxcGMyVThkbTlwWkQ0N1hHNWNiaUFnZFc1QmMzTnBaMjRvYjNKblNXUTZJSE4wY21sdVp5d2djMlZ5ZG1salpVbGtPaUJ6ZEhKcGJtY3NJSFZ6WlhKSlpITTZJSE4wY21sdVoxdGRLVG9nVUhKdmJXbHpaVHgyYjJsa1BqdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRGTmxjblpwWTJVb2MyVnlkbWxqWlV0bGVUb2djM1J5YVc1bkxDQmlZWE5sVlhKc1B6b2djM1J5YVc1bktUb2dUR2xqWlc1elpWTmxjblpwWTJVZ2UxeHVJQ0J6ZDJsMFkyZ2dLSE5sY25acFkyVkxaWGtwSUh0Y2JpQWdJQ0JqWVhObElGd2lRMGxCVFY5QmRYUm9lbHdpT2x4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlCRGFXRnRRWFYwYUhvb1ltRnpaVlZ5YkNrN1hHNGdJQ0FnWTJGelpTQmNJbVZ1ZEdsMGJHVnRaVzUwYzF3aU9seHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkZiblJwZEd4bGJXVnVkSE5UWlhKMmFXTmxLR0poYzJWVmNtd3BPMXh1SUNBZ0lHTmhjMlVnWENKdGIyTnJYQ0k2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUUxdlkydFRaWEoyYVdObEtDazdYRzRnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW01dklHbHRjR3hsYldWdWRHRjBhVzl1SUdadmRXNWtJR1p2Y2lCY0lpQXJJSE5sY25acFkyVkxaWGtwTzF4dUlDQjlYRzU5WEc0aVhTd2libUZ0WlhNaU9sc2lUVzlqYTFObGNuWnBZMlVpTENKdmNtZEpaQ0lzSW5ObGNuWnBZMlZKWkNJc0luUnZkR0ZzVTJWaGRITWlMQ0poZG1GcGJHRmliR1ZUWldGMGN5SXNJbUZ6YzJsbmJtVmtJaXdpZFhObGNtNWhiV1VpTENKbWFYSnpkRTVoYldVaUxDSnNZWE4wVG1GdFpTSXNJblZ6WlhKSlpITWlMQ0pmWDJWNGRHVnVaSE1pTENKZlgyRnpjMmxuYmlJc0lsOWZjbVZ6ZENJc0lsOWZaR1ZqYjNKaGRHVWlMQ0pmWDNCaGNtRnRJaXdpWDE5bGMwUmxZMjl5WVhSbElpd2lYMTl5ZFc1SmJtbDBhV0ZzYVhwbGNuTWlMQ0pmWDNCeWIzQkxaWGtpTENKZlgzTmxkRVoxYm1OMGFXOXVUbUZ0WlNJc0lsOWZiV1YwWVdSaGRHRWlMQ0pmWDJGM1lXbDBaWElpTENKZlgyZGxibVZ5WVhSdmNpSXNJbDlmWlhod2IzSjBVM1JoY2lJc0lsOWZkbUZzZFdWeklpd2lYMTl5WldGa0lpd2lYMTl6Y0hKbFlXUWlMQ0pmWDNOd2NtVmhaRUZ5Y21GNWN5SXNJbDlmYzNCeVpXRmtRWEp5WVhraUxDSmZYMkYzWVdsMElpd2lYMTloYzNsdVkwZGxibVZ5WVhSdmNpSXNJbDlmWVhONWJtTkVaV3hsWjJGMGIzSWlMQ0pmWDJGemVXNWpWbUZzZFdWeklpd2lYMTl0WVd0bFZHVnRjR3hoZEdWUFltcGxZM1FpTENKZlgybHRjRzl5ZEZOMFlYSWlMQ0pmWDJsdGNHOXlkRVJsWm1GMWJIUWlMQ0pmWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrUjJWMElpd2lYMTlqYkdGemMxQnlhWFpoZEdWR2FXVnNaRk5sZENJc0lsOWZZMnhoYzNOUWNtbDJZWFJsUm1sbGJHUkpiaUlzSWw5ZlkzSmxZWFJsUW1sdVpHbHVaeUlzSW1aaFkzUnZjbmtpTENKeWIyOTBJaXdpWjJ4dlltRnNJaXdpWTNKbFlYUmxSWGh3YjNKMFpYSWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpY0hKbGRtbHZkWE1pTENKcFpDSXNJbllpTENKbGVIQnZjblJsY2lJc0ltVjRkR1Z1WkZOMFlYUnBZM01pTENKa0lpd2lZaUlzSWw5Zklpd2lkQ0lzSW5NaUxDSnBJaXdpYmlJc0luQWlMQ0psSWl3aVpHVmpiM0poZEc5eWN5SXNJblJoY21kbGRDSXNJbXRsZVNJc0ltUmxjMk1pTENKaklpd2ljaUlzSW5CaGNtRnRTVzVrWlhnaUxDSmtaV052Y21GMGIzSWlMQ0pqZEc5eUlpd2laR1Z6WTNKcGNIUnZja2x1SWl3aVkyOXVkR1Y0ZEVsdUlpd2lhVzVwZEdsaGJHbDZaWEp6SWl3aVpYaDBjbUZKYm1sMGFXRnNhWHBsY25NaUxDSmhZMk5sY0hRaUxDSm1JaXdpYTJsdVpDSXNJbVJsYzJOeWFYQjBiM0lpTENKZklpd2laRzl1WlNJc0ltTnZiblJsZUhRaUxDSnlaWE4xYkhRaUxDSjBhR2x6UVhKbklpd2lkbUZzZFdVaUxDSjFjMlZXWVd4MVpTSXNJbmdpTENKdVlXMWxJaXdpY0hKbFptbDRJaXdpYldWMFlXUmhkR0ZMWlhraUxDSnRaWFJoWkdGMFlWWmhiSFZsSWl3aVgyRnlaM1Z0Wlc1MGN5SXNJbEFpTENKblpXNWxjbUYwYjNJaUxDSmhaRzl3ZENJc0luSmxjMjlzZG1VaUxDSnlaV3BsWTNRaUxDSm1kV3htYVd4c1pXUWlMQ0p6ZEdWd0lpd2ljbVZxWldOMFpXUWlMQ0ppYjJSNUlpd2llU0lzSW1jaUxDSjJaWEppSWl3aWIzQWlMQ0p0SWl3aWJ5SXNJbXNpTENKck1pSXNJbUZ5SWl3aVpYSnliM0lpTENKcGJDSXNJbUVpTENKcUlpd2lhbXdpTENKMGJ5SXNJbVp5YjIwaUxDSndZV05ySWl3aWJDSXNJbkVpTENKeVpYTjFiV1VpTENKelpYUjBiR1VpTENKbWRXeG1hV3hzSWl3aVkyOXZhMlZrSWl3aWNtRjNJaXdpWDE5elpYUk5iMlIxYkdWRVpXWmhkV3gwSWl3aWJXOWtJaXdpY21WalpXbDJaWElpTENKemRHRjBaU0lzSWxCaGNuTmxUbTlrWlVaaFkzUnZjbmxTWldkcGMzUnllU0lzSW1OdmJuUmxiblJVZVhCbElpd2lZMjl1ZEdWdWRDSXNJblpsYm1SdmNsTndaV05wWm1salEyOXVkR1Z1ZEZSNWNHVWlMQ0pqYkdWaGJtVmtRMjl1ZEdWdWRGUjVjR1VpTENKUVlYSnpaVTV2WkdWUWNtOTRlVVpoWTNSdmNua2lMQ0pmWTI5dVkzSmxkR1VpTENKZmIyNUNaV1p2Y21VaUxDSmZiMjVCWm5SbGNpSXNJbTV2WkdVaUxDSnZjbWxuYVc1aGJFSmxabTl5WlNJc0ltOXlhV2RwYm1Gc1FXWjBaWElpTENKVFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVZKbFoybHpkSEo1SWl3aVUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNsQnliM2g1Um1GamRHOXllU0lzSWw5dmJsTjBZWEowSWl3aWQzSnBkR1Z5SWl3aWIzSnBaMmx1WVd4VGRHRnlkQ0lzSW1kbGRGSmhibVJ2YlZaaGJIVmxjeUlzSW5KdVpITTRJaXdpY201bklpd2lZbmwwWlZSdlNHVjRJaXdpZFc1ellXWmxVM1J5YVc1bmFXWjVJaXdpWVhKeUlpd2liMlptYzJWMElpd2ljbUZ1Wkc5dFZWVkpSQ0lzSW01aGRHbDJaU0lzSW5ZMElpd2liM0IwYVc5dWN5SXNJbUoxWmlJc0luSnVaSE1pTENKSmJrMWxiVzl5ZVVKaFkydHBibWRUZEc5eVpTSXNJbmR5WVhCd1pYSWlMQ0p2YkdSV1lXeDFaVmR5WVhCd1pYSWlMQ0p2YkdSV1lXeDFaU0lzSW5OMVlpSXNJbVpwYkhSbGNtRmliR1ZCY25KaGVTSXNJbXRsZVhNaUxDSmxiblJ5ZVNJc0ltTmhiR3hpWVdOcklpd2ljM1ZpYzJOeWFYQjBhVzl1U1dRaUxDSjFkV2xrZGpRaUxDSkpiazFsYlc5eWVVSmhZMnRwYm1kVGRHOXlaVVpoWTNSdmNua2lMQ0pDWVdOcmFXNW5VM1J2Y21WR1lXTjBiM0o1VTJsdVoyeGxkRzl1SWl3aVFtRmphMmx1WjFOMGIzSmxVR0Z5YzJWT2IyUmxSbUZqZEc5eWVTSXNJbU52Ym1OeVpYUmxJaXdpWW1GamEyVmtUVzlrWld3aUxDSkNZV05yYVc1blUzUnZjbVZUWlhKcFlXeHBlbUYwYVc5dVYzSnBkR1Z5VUhKdmVIbEdZV04wYjNKNUlpd2ljbVZuYVhOMFpYSkVaV1poZFd4MFUyVnlhV0ZzYVhwbGNpSXNJblI1Y0dVaUxDSnpaWEpwWVd4cGVtVnlJaXdpY21WbmFYTjBaWEpFWldaaGRXeDBSR1Z6WlhKcFlXeHBlbVZ5SWl3aVpHVnpaWEpwWVd4cGVtVnlJaXdpWlc1aFlteGxRbUZqYTJsdVoxTjBiM0psUm05eVUyVnlhV0ZzYVhwaGRHbHZibGR5YVhSbGNrWmhZM1J2Y25raUxDSnZjbWxuYVc1aGJDSXNJbVZ1WVdKc1pVSmhZMnRwYm1kVGRHOXlaVVp2Y2xObGNtbGhiR2w2WVhScGIyNVNaV2RwYzNSeWVTSXNJbVZ1WVdKc1pVSmhZMnRwYm1kVGRHOXlaVVp2Y2xCaGNuTmxUbTlrWlZKbFoybHpkSEo1SWl3aVpXNWhZbXhsUW1GamEybHVaMU4wYjNKbFJtOXlVR0Z5YzJWT2IyUmxSbUZqZEc5eWVTSXNJbkpsWjJsemRISjVJaXdpUVhCcFJYSnliM0lpTENKdFpYTnpZV2RsSWl3aVFXeHNiM2RsWkVodmMzUnpWbUZzYVdSaGRHOXlJaXdpWVd4c2IzZGxaRWh2YzNSeklpd2lkWEpzSWl3aVgyRWlMQ0p6WTJobGJXVkJibVJTWlhOMElpd2ljbVZ6ZENJc0ltaHZjM1JCYm1SU1pYTjBJaXdpYUc5emRDSXNJblpoYkdsa1lYUmxVSEp2ZEc5amIyd2lMQ0ozYVc1a2IzZFZjbXhUZEdGeWRITlhhWFJvU0hSMGNITWlMQ0pCY0dsTFpYbEJkWFJvWlc1MGFXTmhkR2x2YmxCeWIzWnBaR1Z5SWl3aVlYQnBTMlY1SWl3aWNHRnlZVzFsZEdWeVRtRnRaU0lzSW14dlkyRjBhVzl1SWl3aWRtRnNhV1JJYjNOMGN5SXNJa0Z3YVV0bGVVeHZZMkYwYVc5dUlpd2ljbVZ4ZFdWemRDSXNJbUZrWkdsMGFXOXVZV3hCZFhSb1pXNTBhV05oZEdsdmJrTnZiblJsZUhRaUxDSkJibTl1ZVcxdmRYTkJkWFJvWlc1MGFXTmhkR2x2YmxCeWIzWnBaR1Z5SWl3aVh6SWlMQ0pDWVhObFFtVmhjbVZ5Vkc5clpXNUJkWFJvWlc1MGFXTmhkR2x2YmxCeWIzWnBaR1Z5SWl3aVlXTmpaWE56Vkc5clpXNVFjbTkyYVdSbGNpSXNJblJ2YTJWdUlpd2lYMmRzYjJKaGJGUm9hWE1pTENKV1JWSlRTVTlPSWl3aWNtVWlMQ0pmYldGclpVTnZiWEJoZEdsaWFXeHBkSGxEYUdWamF5SXNJbTkzYmxabGNuTnBiMjRpTENKaFkyTmxjSFJsWkZabGNuTnBiMjV6SWl3aWNtVnFaV04wWldSV1pYSnphVzl1Y3lJc0ltMTVWbVZ5YzJsdmJrMWhkR05vSWl3aWIzZHVWbVZ5YzJsdmJsQmhjbk5sWkNJc0ltZHNiMkpoYkZabGNuTnBiMjRpTENKZmNtVnFaV04wSWl3aVgyRmpZMlZ3ZENJc0ltZHNiMkpoYkZabGNuTnBiMjVOWVhSamFDSXNJbWRzYjJKaGJGWmxjbk5wYjI1UVlYSnpaV1FpTENKcGMwTnZiWEJoZEdsaWJHVWlMQ0p0WVdwdmNpSXNJa2RNVDBKQlRGOVBVRVZPVkVWTVJVMUZWRkpaWDBGUVNWOUxSVmtpTENKZloyeHZZbUZzSWl3aWNtVm5hWE4wWlhKSGJHOWlZV3dpTENKcGJuTjBZVzVqWlNJc0ltUnBZV2NpTENKaGJHeHZkMDkyWlhKeWFXUmxJaXdpWVhCcElpd2laWEp5SWl3aVoyVjBSMnh2WW1Gc0lpd2lYMklpTENKMWJuSmxaMmx6ZEdWeVIyeHZZbUZzSWl3aWRHaHBjeUlzSWtScFlXZERiMjF3YjI1bGJuUk1iMmRuWlhJaUxDSndjbTl3Y3lJc0ltRnlaM01pTENKZmFTSXNJbXh2WjFCeWIzaDVJaXdpWm5WdVkwNWhiV1VpTENKdVlXMWxjM0JoWTJVaUxDSnNiMmRuWlhJaUxDSkVhV0ZuVEc5blRHVjJaV3dpTENKamNtVmhkR1ZNYjJkTVpYWmxiRVJwWVdkTWIyZG5aWElpTENKdFlYaE1aWFpsYkNJc0lsOW1hV3gwWlhKR2RXNWpJaXdpZEdobFRHVjJaV3dpTENKMGFHVkdkVzVqSWl3aVFWQkpYMDVCVFVVaUxDSkVhV0ZuUVZCSklpd2lYMnh2WjFCeWIzaDVJaXdpYzJWc1ppSXNJbk5sZEV4dloyZGxjaUlzSW05d2RHbHZibk5QY2t4dloweGxkbVZzSWl3aVgyTWlMQ0p2YkdSTWIyZG5aWElpTENKdVpYZE1iMmRuWlhJaUxDSnpkR0ZqYXlJc0lrSmhaMmRoWjJWSmJYQnNJaXdpWlc1MGNtbGxjeUlzSW01bGQwSmhaMmRoWjJVaUxDSmxYekVpTENKclpYbHpYekVpTENKclpYbHpYekZmTVNJc0ltVmZNVjh4SWl3aVltRm5aMkZuWlVWdWRISjVUV1YwWVdSaGRHRlRlVzFpYjJ3aUxDSmpjbVZoZEdWQ1lXZG5ZV2RsSWl3aVltRm5aMkZuWlVWdWRISjVUV1YwWVdSaGRHRkdjbTl0VTNSeWFXNW5JaXdpYzNSeUlpd2lZM0psWVhSbFEyOXVkR1Y0ZEV0bGVTSXNJbVJsYzJOeWFYQjBhVzl1SWl3aVFtRnpaVU52Ym5SbGVIUWlMQ0p3WVhKbGJuUkRiMjUwWlhoMElpd2lVazlQVkY5RFQwNVVSVmhVSWl3aVkyOXVjMjlzWlUxaGNDSXNJa1JwWVdkRGIyNXpiMnhsVEc5bloyVnlJaXdpWDJOdmJuTnZiR1ZHZFc1aklpd2lUbTl2Y0UxbGRHVnlJaXdpWDI1aGJXVWlMQ0pmYjNCMGFXOXVjeUlzSWs1UFQxQmZTRWxUVkU5SFVrRk5YMDFGVkZKSlF5SXNJazVQVDFCZlEwOVZUbFJGVWw5TlJWUlNTVU1pTENKT1QwOVFYMVZRWDBSUFYwNWZRMDlWVGxSRlVsOU5SVlJTU1VNaUxDSk9UMDlRWDA5Q1UwVlNWa0ZDVEVWZlIwRlZSMFZmVFVWVVVrbERJaXdpVGs5UFVGOVBRbE5GVWxaQlFreEZYME5QVlU1VVJWSmZUVVZVVWtsRElpd2lUazlQVUY5UFFsTkZVbFpCUWt4RlgxVlFYMFJQVjA1ZlEwOVZUbFJGVWw5TlJWUlNTVU1pTENKZlkyRnNiR0poWTJzaUxDSmZiMkp6WlhKMllXSnNaWE1pTENKT2IyOXdUV1YwY21saklpd2lUbTl2Y0VOdmRXNTBaWEpOWlhSeWFXTWlMQ0pmYzNWd1pYSWlMQ0pmZG1Gc2RXVWlMQ0pmWVhSMGNtbGlkWFJsY3lJc0lrNXZiM0JWY0VSdmQyNURiM1Z1ZEdWeVRXVjBjbWxqSWl3aVRtOXZjRWhwYzNSdlozSmhiVTFsZEhKcFl5SXNJazV2YjNCUFluTmxjblpoWW14bFRXVjBjbWxqSWl3aVRtOXZjRTlpYzJWeWRtRmliR1ZEYjNWdWRHVnlUV1YwY21saklpd2lUbTl2Y0U5aWMyVnlkbUZpYkdWSFlYVm5aVTFsZEhKcFl5SXNJazV2YjNCUFluTmxjblpoWW14bFZYQkViM2R1UTI5MWJuUmxjazFsZEhKcFl5SXNJazVQVDFCZlRVVlVSVklpTENKamNtVmhkR1ZPYjI5d1RXVjBaWElpTENKV1lXeDFaVlI1Y0dVaUxDSmtaV1poZFd4MFZHVjRkRTFoY0VkbGRIUmxjaUlzSW1OaGNuSnBaWElpTENKa1pXWmhkV3gwVkdWNGRFMWhjRk5sZEhSbGNpSXNJazV2YjNCRGIyNTBaWGgwVFdGdVlXZGxjaUlzSWw5amIyNTBaWGgwSWl3aVptNGlMQ0pPVDA5UVgwTlBUbFJGV0ZSZlRVRk9RVWRGVWlJc0lrTnZiblJsZUhSQlVFa2lMQ0pqYjI1MFpYaDBUV0Z1WVdkbGNpSXNJbFJ5WVdObFJteGhaM01pTENKSlRsWkJURWxFWDFOUVFVNUpSQ0lzSWtsT1ZrRk1TVVJmVkZKQlEwVkpSQ0lzSWtsT1ZrRk1TVVJmVTFCQlRsOURUMDVVUlZoVUlpd2lUbTl1VW1WamIzSmthVzVuVTNCaGJpSXNJbDl6Y0dGdVEyOXVkR1Y0ZENJc0lsOXJaWGtpTENKZmMzUmhkSFZ6SWl3aVgyVnVaRlJwYldVaUxDSmZaWGhqWlhCMGFXOXVJaXdpWDNScGJXVWlMQ0pUVUVGT1gwdEZXU0lzSW1kbGRGTndZVzRpTENKblpYUkJZM1JwZG1WVGNHRnVJaXdpYzJWMFUzQmhiaUlzSW5Od1lXNGlMQ0prWld4bGRHVlRjR0Z1SWl3aWMyVjBVM0JoYmtOdmJuUmxlSFFpTENKemNHRnVRMjl1ZEdWNGRDSXNJbWRsZEZOd1lXNURiMjUwWlhoMElpd2lWa0ZNU1VSZlZGSkJRMFZKUkY5U1JVZEZXQ0lzSWxaQlRFbEVYMU5RUVU1SlJGOVNSVWRGV0NJc0ltbHpWbUZzYVdSVWNtRmpaVWxrSWl3aWRISmhZMlZKWkNJc0ltbHpWbUZzYVdSVGNHRnVTV1FpTENKemNHRnVTV1FpTENKcGMxTndZVzVEYjI1MFpYaDBWbUZzYVdRaUxDSjNjbUZ3VTNCaGJrTnZiblJsZUhRaUxDSmpiMjUwWlhoMFFYQnBJaXdpVG05dmNGUnlZV05sY2lJc0luQmhjbVZ1ZEVaeWIyMURiMjUwWlhoMElpd2lhWE5UY0dGdVEyOXVkR1Y0ZENJc0ltRnlaeklpTENKaGNtY3pJaXdpWVhKbk5DSXNJbTl3ZEhNaUxDSmpkSGdpTENKamIyNTBaWGgwVjJsMGFGTndZVzVUWlhRaUxDSk9UMDlRWDFSU1FVTkZVaUlzSWxCeWIzaDVWSEpoWTJWeUlpd2lYM0J5YjNacFpHVnlJaXdpZG1WeWMybHZiaUlzSWw5bWJpSXNJblJ5WVdObGNpSXNJazV2YjNCVWNtRmpaWEpRY205MmFXUmxjaUlzSWw5MlpYSnphVzl1SWl3aVRrOVBVRjlVVWtGRFJWSmZVRkpQVmtsRVJWSWlMQ0pRY205NGVWUnlZV05sY2xCeWIzWnBaR1Z5SWl3aVpHVnNaV2RoZEdVaUxDSlRZVzF3YkdsdVowUmxZMmx6YVc5dUlpd2lVM0JoYmt0cGJtUWlMQ0pUY0dGdVUzUmhkSFZ6UTI5a1pTSXNJbFpCVEVsRVgwdEZXVjlEU0VGU1gxSkJUa2RGSWl3aVZrRk1TVVJmUzBWWklpd2lWa0ZNU1VSZlZrVk9SRTlTWDB0RldTSXNJbFpCVEVsRVgwdEZXVjlTUlVkRldDSXNJbFpCVEVsRVgxWkJURlZGWDBKQlUwVmZVa1ZIUlZnaUxDSkpUbFpCVEVsRVgxWkJURlZGWDBOUFRVMUJYMFZSVlVGTVgxSkZSMFZZSWl3aWRtRnNhV1JoZEdWTFpYa2lMQ0oyWVd4cFpHRjBaVlpoYkhWbElpd2lUVUZZWDFSU1FVTkZYMU5VUVZSRlgwbFVSVTFUSWl3aVRVRllYMVJTUVVORlgxTlVRVlJGWDB4RlRpSXNJa3hKVTFSZlRVVk5Ra1ZTVTE5VFJWQkJVa0ZVVDFJaUxDSk1TVk5VWDAxRlRVSkZVbDlMUlZsZlZrRk1WVVZmVTFCTVNWUlVSVklpTENKVWNtRmpaVk4wWVhSbFNXMXdiQ0lzSW5KaGQxUnlZV05sVTNSaGRHVWlMQ0owY21GalpWTjBZWFJsSWl3aVgzUm9hWE1pTENKaFoyY2lMQ0p3WVhKMElpd2liR2x6ZEUxbGJXSmxjaUlzSW1OeVpXRjBaVlJ5WVdObFUzUmhkR1VpTENKT2IyOXdUV1YwWlhKUWNtOTJhV1JsY2lJc0lrNVBUMUJmVFVWVVJWSmZVRkpQVmtsRVJWSWlMQ0pOWlhSeWFXTnpRVkJKSWl3aWNISnZkbWxrWlhJaUxDSnRaWFJ5YVdOeklpd2lUbTl2Y0ZSbGVIUk5ZWEJRY205d1lXZGhkRzl5SWl3aVgyTmhjbkpwWlhJaUxDSkNRVWRIUVVkRlgwdEZXU0lzSW1kbGRFSmhaMmRoWjJVaUxDSm5aWFJCWTNScGRtVkNZV2RuWVdkbElpd2ljMlYwUW1GbloyRm5aU0lzSW1KaFoyZGhaMlVpTENKa1pXeGxkR1ZDWVdkbllXZGxJaXdpVGs5UFVGOVVSVmhVWDAxQlVGOVFVazlRUVVkQlZFOVNJaXdpVUhKdmNHRm5ZWFJwYjI1QlVFa2lMQ0p3Y205d1lXZGhkRzl5SWl3aWMyVjBkR1Z5SWl3aVoyVjBkR1Z5SWl3aWNISnZjR0ZuWVhScGIyNGlMQ0pVY21GalpVRlFTU0lzSW5OMVkyTmxjM01pTENKMGNtRmpaU0lzSW1sdVpHVjRJaXdpUkdGMFpVOXViSGtpTENKNVpXRnlJaXdpYlc5dWRHZ2lMQ0prWVhraUxDSmtZWFJsSWl3aVgyUWlMQ0pmWlNJc0lsOW1JaXdpWlhobFl5SXNJblJwWTJ0eklpd2labTl5YldGMFUyVm5iV1Z1ZENJc0luTmxaMjFsYm5RaUxDSmthV2RwZEhNaUxDSjFibWwwY3lJc0luVnVhWFFpTENKa2RYSmhkR2x2YmxKbFoyVjRJaXdpY0dGeWMyVk9kVzBpTENKd1lYSnpaU0lzSW1SMWNtRjBhVzl1VTNSeUlpd2liV0YwWTJnaUxDSmxiWEIwZVNJc0luWmhiSFZsY3lJc0ltUjFjbUYwYVc5dUlpd2liblZ0WW1WeUlpd2lZMjl0Y0c5dVpXNTBJaXdpYm5WdFltVnlRWE5UZEhKcGJtY2lMQ0psZUhCdmJtVnVkRWx1WkdWNElpd2liV0ZuYm1sMGRXUmxJaXdpYzJWeWFXRnNhWHBsSWl3aVJIVnlZWFJwYjI0aUxDSjVaV0Z5Y3lJc0ltMXZiblJvY3lJc0luZGxaV3R6SWl3aVpHRjVjeUlzSW1odmRYSnpJaXdpYldsdWRYUmxjeUlzSW5ObFkyOXVaSE1pTENKdVpXZGhkR2wyWlNJc0lsOW5JaXdpWDJnaUxDSndZWEp6WlVSMWNtRjBhVzl1SWl3aWMyVnlhV0ZzYVhwbFJIVnlZWFJwYjI0aUxDSlVhVzFsVDI1c2VTSXNJbkJwWTI5elpXTnZibVJ6SWl3aWJXbHNiR2x6WldOdmJtUnpJaXdpVW1WeGRXVnpkRWx1Wm05eWJXRjBhVzl1SWl3aWNtVnhkV1Z6ZEVGa1lYQjBaWElpTENKMllXeDFaVlI1Y0dVaUxDSnpaWEpwWVd4cGVtRjBhVzl1UzJWNUlpd2ljbUYzVlhKc0lpd2lkR1Z0Y0d4aGRHVWlMQ0oxY214VWNHd2lMQ0prWVhSaElpd2ljMjkxY21ObElpd2liM0IwYVc5dUlpd2laMlYwVUdGMGFGQmhjbUZ0WlhSbGNuTWlMQ0p3WVhKaGJXVjBaWEp6SWl3aVFtRnpaVkpsY1hWbGMzUkNkV2xzWkdWeUlpd2ljR0YwYUZCaGNtRnRaWFJsY25NaUxDSjFjbXhVWlcxd2JHRjBaU0lzSWtoMGRIQk5aWFJvYjJRaUxDSk9ZWFJwZG1WU1pYTndiMjV6WlVoaGJtUnNaWElpTENKeVpYTndiMjV6WlNJc0ltVnljbTl5VFdGd2NHbHVaM01pTENKT1lYUnBkbVZTWlhOd2IyNXpaVmR5WVhCd1pYSWlMQ0p2Y21sbmFXNWhiRU5oYkd3aUxDSm9JaXdpY21WemNHOXVjMlZJWVc1a2JHVnlJaXdpY21WeGRXVnpkRUp2WkhraUxDSjBiMFpwY25OMFEyaGhjbUZqZEdWeVZYQndaWElpTENKamRYTjBiMjFHWlhSamFFaGhibVJzWlhJaUxDSjBjMnhwWWw4eElpd2ljbVZ4ZFdseVpTUWtNQ0lzSWtOMWMzUnZiVVpsZEdOb1NHRnVaR3hsY2lJc0ltTjFjM1J2YlVabGRHTm9JaXdpY21WeGRXVnpkRWx1YVhRaUxDSlBZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVjMGx0Y0d3aUxDSnZjbWxuYVc1aGJFOXdkR2x2Ym5NaUxDSm5aWFJQWW5ObGNuWmhZbWxzYVhSNVQzQjBhVzl1YzBaeWIyMVNaWEYxWlhOMElpd2ljbVZ4ZFdWemRFOXdkR2x2Ym5NaUxDSnZZbk5sY25aaFltbHNhWFI1VDNCMGFXOXVjeUlzSWxCaGNtRnRaWFJsY25OT1lXMWxSR1ZqYjJScGJtZElZVzVrYkdWeVQzQjBhVzl1Y3lJc0ltVnVZV0pzWlNJc0ltTm9ZWEpoWTNSbGNuTlViMFJsWTI5a1pTSXNJbkJoY21GdFpYUmxjbk5PWVcxbFJHVmpiMlJwYm1kSVlXNWtiR1Z5SWl3aVlYQnBYekVpTENKdlluTmxjblpoWW1sc2FYUjVUM0IwYVc5dWMxOHhJaXdpY21WeGRXbHlaU1FrTVNJc0luQmhjbUZ0WlhSbGNuTk9ZVzFsUkdWamIyUnBibWRQY0hScGIyNXpYekVpTENKeVpYRjFhWEpsSkNReUlpd2lVR0Z5WVcxbGRHVnljMDVoYldWRVpXTnZaR2x1WjBoaGJtUnNaWElpTENKamRYSnlaVzUwVDNCMGFXOXVjeUlzSW05aWMwOXdkR2x2Ym5NaUxDSjFjR1JoZEdWa1ZYSnNJaXdpWTJoaGNtRmpkR1Z5SWl3aVVtVmthWEpsWTNSSVlXNWtiR1Z5VDNCMGFXOXVjeUlzSW0xaGVGSmxaR2x5WldOMGN5SXNJbk5vYjNWc1pGSmxaR2x5WldOMElpd2ljbVZrYVhKbFkzUklZVzVrYkdWeUlpd2lhMmx2ZEdGZllXSnpkSEpoWTNScGIyNXpYekVpTENKeVpYRjFhWEpsSkNReklpd2ljbVZrYVhKbFkzUklZVzVrYkdWeVQzQjBhVzl1YzE4eElpd2ljbVZ4ZFdseVpTUWtOQ0lzSWxKbFpHbHlaV04wU0dGdVpHeGxjaUlzSW5KbGNYVmxjM1JWY213aUxDSnlaV1JwY21WamRGVnliQ0lzSW5OamFHVnRaVWh2YzNSU1pXZGxlQ0lzSW5KbGNYVmxjM1JOWVhSamFHVnpJaXdpY21WeGRXVnpkRUYxZEdodmNtbDBlU0lzSW5KbFpHbHlaV04wUVhWMGFHOXlhWFI1SWl3aWNtVmthWEpsWTNSTllYUmphR1Z6SWl3aVptVjBZMmhTWlhGMVpYTjBTVzVwZENJc0luSmxaR2x5WldOMFEyOTFiblFpTENKMGNtRmpaWEpPWVcxbElpd2lhR1ZoWkdWeWMxVjBhV3dpTENKblpYUlNaWEYxWlhOMFNHVmhaR1Z5SWl3aWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2lJc0ltRndjR1Z1WkZKbGNYVmxjM1JJWldGa1pYSWlMQ0p6WlhCaGNtRjBiM0lpTENKU1pYUnllVWhoYm1Sc1pYSlBjSFJwYjI1eklpd2laR1ZzWVhraUxDSnRZWGhTWlhSeWFXVnpJaXdpYzJodmRXeGtVbVYwY25raUxDSnlaWFJ5ZVVoaGJtUnNaWElpTENKb1pXRmtaWEp6VlhScGJGOHhJaXdpY21WMGNubElZVzVrYkdWeVQzQjBhVzl1YzE4eElpd2ljbVZ4ZFdseVpTUWtOU0lzSWxKbGRISjVTR0Z1Wkd4bGNpSXNJbTFsZEdodlpDSXNJbkpsZEhKNVFYUjBaVzF3ZEhNaUxDSm5aWFJTWVc1a2IyMXVaWE56SWl3aWNtVjBjbmxCWm5SbGNpSXNJbTVsZDBSbGJHRjVJaXdpWVhSMFpXMXdkSE1pTENKa1pXeGhlVk5sWTI5dVpITWlMQ0prWld4aGVVMXBiR3hwYzJWamIyNWtjeUlzSW5abGNuTnBiMjVmTVNJc0lsVnpaWEpCWjJWdWRFaGhibVJzWlhKUGNIUnBiMjV6SWl3aWNISnZaSFZqZEU1aGJXVWlMQ0p3Y205a2RXTjBWbVZ5YzJsdmJpSXNJblZ6WlhKQloyVnVkRWhoYm1Sc1pYSWlMQ0oxYzJWeVFXZGxiblJJWVc1a2JHVnlUM0IwYVc5dWMxOHhJaXdpVlZORlVsOUJSMFZPVkY5SVJVRkVSVkpmUzBWWklpd2lWWE5sY2tGblpXNTBTR0Z1Wkd4bGNpSXNJbUZrWkdsMGFXOXVZV3hXWVd4MVpTSXNJbU4xY25KbGJuUldZV3gxWlNJc0ltMXBaR1JzWlhkaGNtVkdZV04wYjNKNUlpd2libTlrWlY5bVpYUmphRjh4SWl3aVkzVnpkRzl0Um1WMFkyaElZVzVrYkdWeVh6RWlMQ0p3WVhKaGJXVjBaWEp6VG1GdFpVUmxZMjlrYVc1blNHRnVaR3hsY2w4eElpd2ljbVZrYVhKbFkzUklZVzVrYkdWeVh6RWlMQ0p5WlhSeWVVaGhibVJzWlhKZk1TSXNJblZ6WlhKQloyVnVkRWhoYm1Sc1pYSmZNU0lzSWsxcFpHUnNaWGRoY21WR1lXTjBiM0o1SWl3aWFIUjBjRU5zYVdWdWRDSXNJbTFwWkdSc1pYZGhjbVZHWVdOMGIzSjVYekVpTENKSWRIUndRMnhwWlc1MElpd2liV2xrWkd4bGQyRnlaWE1pTENKdGFXUmtiR1YzWVhKbElpd2laV3hsYldWdWRDSXNJbVpsZEdOb1VtVnhkV1Z6ZEVGa1lYQjBaWElpTENKb2RIUndRMnhwWlc1MFh6RWlMQ0pHWlhSamFGSmxjWFZsYzNSQlpHRndkR1Z5SWl3aVlYVjBhR1Z1ZEdsallYUnBiMjVRY205MmFXUmxjaUlzSW5CaGNuTmxUbTlrWlVaaFkzUnZjbmtpTENKelpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVNJc0ltaGxZV1JsY2lJc0luTmxaMjFsYm5Seklpd2ljbVZ4ZFdWemRFbHVabThpTENKeVpYTndiMjV6WlZSNWNHVWlMQ0p5YjI5MFRtOWtaU0lzSW1SbGMyVnlhV0ZzYVhwbFUzQmhiaUlzSW0xbGRHaHZaRTVoYldVaUxDSjBaV3hsYldWMGNubFFZWFJvVm1Gc2RXVWlMQ0ppWVdOcmFXNW5VM1J2Y21WR1lXTjBiM0o1SWl3aWNHRjViRzloWkNJc0luSmxjM0J2Ym5ObFEyOXVkR1Z1ZEZSNWNHVWlMQ0p6Y0dGdVJtOXlRWFIwY21saWRYUmxjeUlzSW5OMFlYUjFjME52WkdVaUxDSnpkR0YwZFhORGIyUmxRWE5UZEhKcGJtY2lMQ0pqYkdGcGJYTWlMQ0poWkdScGRHbHZibUZzUTI5dWRHVjRkQ0lzSW5KbGMzQnZibk5sUTI5dWRHVnVkRXhsYm1kMGFDSXNJbkpsYzNCdmJuTmxRMnhoYVcxeklpd2ljbUYzUVhWMGFHVnVkR2xqWVhSbFNHVmhaR1Z5SWl3aWNtRjNVR0Z5WVcxbGRHVnljeUlzSW5KaGQxQmhjbUZ0WlhSbGNpSXNJblJ5YVcxdFpXUlFZWEpoYldWMFpYSWlMQ0oxY21raUxDSjFjbWxEYjI1MFlXbHVjMU5qYUdWdFpTSXNJbk5qYUdWdFpWTndiR0YwVlhKcElpd2lkWEpwVjJsMGFHOTFkRk5qYUdWdFpTSXNJbkpsY1hWbGMzUkRiMjUwWlc1MFRHVnVaM1JvSWl3aWNtVnhkV1Z6ZEVOdmJuUmxiblJVZVhCbElpd2lhR1ZoWkdWeWN5SXNJbUZqWXlJc0luWmhiQ0lzSWtOb1lXOXpTR0Z1Wkd4bGNrUmhkR0VpTENKRGFHRnZjMU4wY21GMFpXZDVJaXdpWTJoaGIzTklZVzVrYkdWeUlpd2lRMmhoYjNOSVlXNWtiR1Z5UkdGMFlWOHhJaXdpWTJoaGIzTlRkSEpoZEdWbmVWOHhJaXdpUTJoaGIzTklZVzVrYkdWeUlpd2liV0Z1ZFdGc1RXRndJaXdpWTJoaGIzTlBjSFJwYjI1eklpd2ljbVZ4ZFdWemRFMWxkR2h2WkNJc0luTjBZWFIxYzBOdlpHVkJjbkpoZVNJc0ltTm9ZVzl6U0dGdVpHeGxjazl3ZEdsdmJuTWlMQ0oxY214TlpYUm9iMlFpTENKaVlYTmxWWEpzSWl3aWNtVnhkV1Z6ZEZWU1RDSXNJbkpsYkdGMGFYWmxWVkpNSWl3aVpHVm1hVzVsWkZKbGMzQnZibk5sY3lJc0ltMWhjRU52WkdVaUxDSnlaWE53YjI1elpVTnZaR1VpTENKamIyUmxUV1Z6YzJGblpTSXNJbVZ5Y2sxbGMzTmhaMlVpTENKeVpYTndiMjV6WlVKdlpIa2lMQ0p6ZEhKcGJtZENiMlI1SWl3aWRHVnNaVzFsZEhKNVNHRnVaR3hsY2s5d2RHbHZibk1pTENKVVpXeGxiV1YwY25sSVlXNWtiR1Z5SWl3aVptVjBZMmhFWldacGJtbDBhVzl1Y3lJc0luSmxjWFZwY21Va0pEWWlMQ0p5WlhGMWFYSmxKQ1EzSWl3aWNtVnhkV2x5WlNRa09DSXNJbkpsY1hWcGNtVWtKRGtpTENKeVpYRjFhWEpsSkNReE1DSXNJbkpsY1hWcGNtVWtKREV4SWl3aWNtVnhkV2x5WlNRa01USWlMQ0p5WlhGMWFYSmxKQ1F4TXlJc0luSmxjWFZwY21Va0pERTBJaXdpY21WeGRXbHlaU1FrTVRVaUxDSnlaWEYxYVhKbEpDUXhOaUlzSW5KbGNYVnBjbVVrSkRFM0lpd2ljbVZ4ZFdseVpTUWtNVGdpTENKeVpYRjFhWEpsSkNReE9TSXNJbkpsY1hWcGNtVWtKREl3SWl3aVEyaGxZMnRTWlhGMVpYTjBRblZwYkdSbGNsQnZjM1JTWlhGMVpYTjBRMjl1Wm1sbmRYSmhkR2x2YmlJc0lreHBZMlZ1YzJWelgzTmxjblpwWTJWSlpGOWliMlI1SWl3aVZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxJaXdpVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaU0lzSW1OeVpXRjBaVll4WVd4d2FHRkhaWFJUWldGMGMxVnpaWEpTWlhCeVpYTmxiblJoZEdsdmJrWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VpTENKd1lYSnpaVTV2WkdVaUxDSldNV0ZzY0doaFIyVjBVMlZoZEhOVmMyVnlVbVZ3Y21WelpXNTBZWFJwYjI0aUxDSldNV0ZzY0doaFIyVjBVMlZoZEhOU1pYTndiMjV6WlNJc0lsWXhZV3h3YUdGTmIyUnBabmxUWldGMGMxSmxjM0J2Ym5ObElpd2lZM0psWVhSbFZqRmhiSEJvWVVOb1pXTnJVR1Z5YldsemMybHZibEpsYzNCdmJuTmxSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNJc0lsWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaVFF3TVVWeWNtOXlJaXdpVmpGaGJIQm9ZVU5vWldOclVHVnliV2x6YzJsdmJsSmxjM0J2Ym5ObE5EQXpSWEp5YjNJaUxDSldNV0ZzY0doaFEyaGxZMnRRWlhKdGFYTnphVzl1VW1WemNHOXVjMlUxTURCRmNuSnZjaUlzSW1OeVpXRjBaVll4WVd4d2FHRkRhR1ZqYTFCbGNtMXBjM05wYjI1U1pYTndiMjV6WlRRd01VVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTSXNJbU55WldGMFpWWXhZV3h3YUdGRGFHVmphMUJsY20xcGMzTnBiMjVTWlhOd2IyNXpaVFF3TTBWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNJc0ltTnlaV0YwWlZZeFlXeHdhR0ZEYUdWamExQmxjbTFwYzNOcGIyNVNaWE53YjI1elpUVXdNRVZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU0lzSWtOb1pXTnJVbVZ4ZFdWemRFSjFhV3hrWlhJaUxDSjFjbXhVY0d4UVlYSmhiWE1pTENKeVpYRjFaWE4wUTI5dVptbG5kWEpoZEdsdmJpSXNJbVZ5Y205eVRXRndjR2x1WnlJc0ltTnlaV0YwWlZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlZHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbElpd2lZM0psWVhSbFZqRmhiSEJvWVUxdlpHbG1lVk5sWVhSelVtVnpjRzl1YzJWR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxJaXdpVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFF3TVVWeWNtOXlJaXdpVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFF3TTBWeWNtOXlJaXdpVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFV3TUVWeWNtOXlJaXdpVmpGaGJIQm9ZVTF2WkdsbWVWTmxZWFJ6VW1WemNHOXVjMlUwTURGRmNuSnZjaUlzSWxZeFlXeHdhR0ZOYjJScFpubFRaV0YwYzFKbGMzQnZibk5sTkRBelJYSnliM0lpTENKV01XRnNjR2hoVFc5a2FXWjVVMlZoZEhOU1pYTndiMjV6WlRVd01FVnljbTl5SWl3aVkzSmxZWFJsVmpGaGJIQm9ZVWRsZEV4cFkyVnVjMlZTWlhOd2IyNXpaVFF3TVVWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNJc0ltTnlaV0YwWlZZeFlXeHdhR0ZIWlhSTWFXTmxibk5sVW1WemNHOXVjMlUwTURORmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVaUxDSmpjbVZoZEdWV01XRnNjR2hoUjJWMFRHbGpaVzV6WlZKbGMzQnZibk5sTlRBd1JYSnliM0pHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbElpd2lZM0psWVhSbFZqRmhiSEJvWVUxdlpHbG1lVk5sWVhSelVtVnpjRzl1YzJVME1ERkZjbkp2Y2taeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVWlMQ0pqY21WaGRHVldNV0ZzY0doaFRXOWthV1o1VTJWaGRITlNaWE53YjI1elpUUXdNMFZ5Y205eVJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU0lzSW1OeVpXRjBaVll4WVd4d2FHRk5iMlJwWm5sVFpXRjBjMUpsYzNCdmJuTmxOVEF3UlhKeWIzSkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsSWl3aVkzSmxZWFJsVmpGaGJIQm9ZVWRsZEZObFlYUnpVbVZ6Y0c5dWMyVkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsSWl3aVZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlUwTURGRmNuSnZjaUlzSWxZeFlXeHdhR0ZIWlhSVFpXRjBjMUpsYzNCdmJuTmxOREF6UlhKeWIzSWlMQ0pXTVdGc2NHaGhSMlYwVTJWaGRITlNaWE53YjI1elpUVXdNRVZ5Y205eUlpd2lZM0psWVhSbFZqRmhiSEJvWVVkbGRGTmxZWFJ6VW1WemNHOXVjMlUwTURGRmNuSnZja1p5YjIxRWFYTmpjbWx0YVc1aGRHOXlWbUZzZFdVaUxDSmpjbVZoZEdWV01XRnNjR2hoUjJWMFUyVmhkSE5TWlhOd2IyNXpaVFF3TTBWeWNtOXlSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNJc0ltTnlaV0YwWlZZeFlXeHdhR0ZIWlhSVFpXRjBjMUpsYzNCdmJuTmxOVEF3UlhKeWIzSkdjbTl0UkdselkzSnBiV2x1WVhSdmNsWmhiSFZsSWl3aVUyVmhkSE5TWlhGMVpYTjBRblZwYkdSbGNpUXhJaXdpVjJsMGFGTmxjblpwWTJWSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhJaUxDSlRaV0YwYzFKbGNYVmxjM1JDZFdsc1pHVnlJaXdpVEdsalpXNXpaWE5TWlhGMVpYTjBRblZwYkdSbGNpSXNJbGRwZEdoUGNtZEpkR1Z0VW1WeGRXVnpkRUoxYVd4a1pYSWlMQ0pQY21kelVtVnhkV1Z6ZEVKMWFXeGtaWElpTENKV01XRnNjR2hoVW1WeGRXVnpkRUoxYVd4a1pYSWlMQ0pLYzI5dVVHRnljMlZPYjJSbElpd2lYMnB6YjI1T2IyUmxJaXdpYVdSbGJuUnBabWxsY2lJc0ltTjFjbkpsYm5SUVlYSnpaVTV2WkdVaUxDSjBlWEJsVDJaWUlpd2ljbUYzVm1Gc2RXVnpJaXdpYVhSbGJTSXNJbVpwWld4a2N5SXNJbWwwWlcxQlpHUnBkR2x2Ym1Gc1JHRjBZU0lzSW1odmJHUmxjaUlzSWtwemIyNVRaWEpwWVd4cGVtRjBhVzl1VjNKcGRHVnlJaXdpYVhOV1lXeDFaVkJ5WlhObGJuUWlMQ0pwWkhnaUxDSmhjbkpoZVVKMVptWmxjaUlzSW5WcGJuUTRRWEp5WVhraUxDSktjMjl1VUdGeWMyVk9iMlJsUm1GamRHOXllU0lzSW1OdmJuUmxiblJCYzFOMGNpSXNJa3B6YjI1VFpYSnBZV3hwZW1GMGFXOXVWM0pwZEdWeVJtRmpkRzl5ZVNJc0lrRjFkR2g2SWl3aVEybGhiVUYxZEdoNklpd2lZV1JoY0hSbGNpSXNJbVJwYzNCc1lYbE9ZVzFsSWl3aVkzSmxZWFJsUTI5dGNHeHBZVzVqWlZOamNtVmxibWx1WjBWeWNtOXlVbVZ6Y0c5dWMyVmZaWEp5YjNKelJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU0lzSWtOdmJYQnNhV0Z1WTJWVFkzSmxaVzVwYm1kRmNuSnZjbEpsYzNCdmJuTmxYMlZ5Y205eWN5SXNJa052YlhCc2FXRnVZMlZUWTNKbFpXNXBibWRGY25KdmNsSmxjM0J2Ym5ObElpd2lRMjl0Y0d4cFlXNWpaVk5qY21WbGJtbHVaMUpsYzNCdmJuTmxYM0psYzNWc2RDSXNJa052YlhCc2FXRnVZMlZUWTNKbFpXNXBibWRTWlhOd2IyNXpaU0lzSW1OeVpXRjBaVVJsY0dWdVpHVnVZM2xGY25KdmNsSmxjM0J2Ym5ObFgyVnljbTl5Um5KdmJVUnBjMk55YVcxcGJtRjBiM0pXWVd4MVpTSXNJa1JsY0dWdVpHVnVZM2xGY25KdmNsSmxjM0J2Ym5ObFgyVnljbTl5SWl3aVJHVndaVzVrWlc1amVVVnljbTl5VW1WemNHOXVjMlVpTENKRmNuSnZja1Z6WTJGd1pXUWlMQ0pqY21WaGRHVlFZV2RwYm1GMGFXOXVUR2x1YTNOR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxJaXdpVUdGbmFXNWhkR2x2Ymt4cGJtdHpJaXdpWTNKbFlYUmxVR0ZuYVc1aGRHbHZiazFsZEdGR2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxJaXdpVUdGbmFXNWhkR2x2YmsxbGRHRWlMQ0pNYVhOMFVHRm5hVzVoZEdsdmJpSXNJbE5sWVhRaUxDSlRaV0YwVW1WeGRXVnpkQ0lzSWxObGNuWnBZMlVpTENKamNtVmhkR1ZUWldGMFJuSnZiVVJwYzJOeWFXMXBibUYwYjNKV1lXeDFaU0lzSWt4cGMzUlRaV0YwYzFKbGMzQnZibk5sVUdGbmFXNWhkR2x2YmlJc0ltTnlaV0YwWlVOdmJYQnNhV0Z1WTJWVFkzSmxaVzVwYm1kRmNuSnZjbEpsYzNCdmJuTmxSbkp2YlVScGMyTnlhVzFwYm1GMGIzSldZV3gxWlNJc0ltTnlaV0YwWlVOdmJYQnNhV0Z1WTJWVFkzSmxaVzVwYm1kU1pYTndiMjV6WlVaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVWlMQ0pqY21WaGRHVkVaWEJsYm1SbGJtTjVSWEp5YjNKU1pYTndiMjV6WlVaeWIyMUVhWE5qY21sdGFXNWhkRzl5Vm1Gc2RXVWlMQ0pEYjIxd2JHbGhibU5sVW1WeGRXVnpkRUoxYVd4a1pYSWlMQ0pqY21WaGRHVkZjbkp2Y2tWelkyRndaV1JHY205dFJHbHpZM0pwYldsdVlYUnZjbFpoYkhWbElpd2lVMlZoZEhOSmRHVnRVbVZ4ZFdWemRFSjFhV3hrWlhJaUxDSmpjbVZoZEdWTWFYTjBVMlZoZEhOU1pYTndiMjV6WlZCaFoybHVZWFJwYjI1R2NtOXRSR2x6WTNKcGJXbHVZWFJ2Y2xaaGJIVmxJaXdpWTNKbFlYUmxVMlZ5ZG1salpVWnliMjFFYVhOamNtbHRhVzVoZEc5eVZtRnNkV1VpTENKVFpYSjJhV05sYzFKbGNYVmxjM1JDZFdsc1pHVnlJaXdpUlc1MGFYUnNaVzFsYm5Seklpd2lSVzUwYVhSc1pXMWxiblJ6VTJWeWRtbGpaU0lzSWxSdmEyVnVVSEp2ZG1sa1pYSWlMQ0p6ZFdKelkzSnBjSFJwYjI1ZmFXUWlMQ0poWTJOdmRXNTBYM1Z6WlhKdVlXMWxJaXdpWjJWMFUyVnlkbWxqWlNJc0luTmxjblpwWTJWTFpYa2lYU3dpYldGd2NHbHVaM01pT2lJN1FVRmpUeXhOUVVGTlFTeEhRVUZ6UXp0QlFVRkJMRVZCUTJwRUxFMUJRVTBzU1VGQlNVTXNSMEZCWlVNc1IwRkJjVU03UVVGRGRFUXNWVUZCUVN4RlFVRkZMRmxCUVVGRExFZEJRVmtzWjBKQlFVRkRMRTFCUVdkRExFOUJRMnhFTEUxQlFVMHNUVUZCVFN4MVFrRkJkVUlzUjBGRGJrTTdRVUZEU3l4WFFVRkJPMEZCUVVFc1RVRkRUQ3hQUVVGUFJEdEJRVUZCTEUxQlExQXNWMEZCVjBNN1FVRkJRU3hKUVVGQk8wRkJRVUVzUlVGRlpqdEJRVUZCTEVWQlJVRXNUVUZCVFN4TlFVTktTQ3hIUVVOQlF5eEhRVU5CUnl4SFFVTnBRanRCUVVOcVFpeFpRVUZSTEU5QlFVOHNUVUZCVFN4TlFVRk5MR1ZCUVdVc1IwRkJSeXhMUVVGQkxFZEJRVkVzVFVGQlRUdEJRVUZCTEUxQlEzcEVMRU5CUVVNc1JVRkJSU3hWUVVGQlF5eEhRVUZWTEZkQlFVRkRMRWRCUVZjc1ZVRkJRVU1zVTBGQk1FSTdRVUZCUVN4UlFVTm9SQ3hKUVVGSlJqdEJRVUZCTEZGQlEwb3NUVUZCVFN4SFFVRkhReXhMUVVGaFF6dEJRVUZCTEUxQlFVRTdRVUZCUVN4SlFVTjRRanRCUVVGQkxFVkJSVW83UVVGQlFTeEZRVVZCTEU5QlFVOVFMRWRCUVdWRExFZEJRVzFDVHl4SFFVRnJRenRCUVVONlJTeFhRVUZQTEZGQlFWRTdSVUZEYWtJN1FVRkJRU3hGUVVWQkxGTkJRVk5TTEVkQlFXVkRMRWRCUVcxQ1R5eEhRVUZyUXp0QlFVTXpSU3hYUVVGUExGRkJRVkU3UlVGRGFrSTdRVUZEUmpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTTVRa0VzVFVGQlNVTXNSMEZEUVVNc1IwRkRRVU1zUjBGRFFVTXNSMEZEUVVNc1IwRkRRVU1zUjBGRFFVTXNSMEZEUVVNc1IwRkRRVU1zUjBGRFFVTXNSMEZEUVVNc1IwRkRRVU1zUjBGRFFVTXNSMEZEUVVNc1IwRkRRVU1zUjBGRFFVTXNSMEZEUVVNc1IwRkRRVU1zUjBGRFFVTXNSMEZEUVVNc1IwRkRRVU1zU1VGRFFVTXNSMEZEUVVNc1IwRkRRVU1zU1VGRFFVTXNTVUZEUVVNc1NVRkRRVU1zU1VGRFFVTXNTVUZEUVVNN1FVRkRTaXhIUVVGRExGTkJRVlZETEVkQlFWTTdRVUZEYUVJc1VVRkJTVU1zUzBGQlR5eFBRVUZQUXl4TlFVRlhMRmRCUVZkQkxFdEJRVk1zVDBGQlR5eFJRVUZUTEZkQlFWY3NUMEZCVHl4UFFVRlBMRkZCUVZNc1YwRkJWeXhQUVVGUExFTkJRVUU3UVVGTGFrZ3NTVUZCUVVZc1JVRkJVVWNzUjBGQlpVWXNTVUZCVFVVc1IwRkJaVU1zUlVGQlR5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVdG9SU3hoUVVGVFJDeEhRVUZsUlN4SFFVRlRReXhIUVVGVk8wRkJRM1pETEdGQlFVbEVMRTFCUVZsS0xFOUJRMUlzVDBGQlR5eFBRVUZQTEZWQlFWY3NZVUZEZWtJc1QwRkJUeXhsUVVGbFNTeEhRVUZUTEdOQlFXTXNSVUZCUlN4UFFVRlBMRWRCUVVrc1EwRkJSU3hKUVVjMVJFRXNSVUZCVVN4aFFVRmhMRXRCUjNSQ0xGTkJRVlZGTEVkQlFVbERMRWRCUVVjN1FVRkJSU3hsUVVGUFNDeEZRVUZSUlN4RFFVRkZMRWxCUVVsRUxFbEJRVmRCTEVWQlFWTkRMRWRCUVVsRExFTkJRVU1zU1VGQlNVRTdRVUZCUVN4TlFVRkZPMEZCUVVFc1NVRkRha1k3UVVGQlFTeEZRVU5LTEVkQlEwRXNVMEZCVlVNc1IwRkJWVHRCUVVOcVFpeFJRVUZKUXl4TFFVRm5RaXhQUVVGUExHdENRVU4wUWl4RlFVRkZMRmRCUVZjc1EwRkJRU3hsUVVGblFpeFRRVUZUTEZOQlFWVkRMRWRCUVVkRExFZEJRVWM3UVVGQlJTeE5RVUZCUkN4RlFVRkZMRmxCUVZsRE8wRkJRVUVzU1VGQlJTeExRVU42UlN4VFFVRlZSQ3hIUVVGSFF5eEhRVUZITzBGQlFVVXNaVUZCVXl4TFFVRkxRVHRCUVVGSExGRkJRVWtzVDBGQlR5eFZRVUZWTEdWQlFXVXNTMEZCUzBFc1IwRkJSeXhEUVVGRExFMUJRVWRFTEVWQlFVVXNRMEZCUXl4SlFVRkpReXhGUVVGRkxFTkJRVU03UVVGQlFUdEJRVVZxUnl4SlFVRkJla01zU1VGQldTeFRRVUZWZDBNc1IwRkJSME1zUjBGQlJ6dEJRVU40UWl4VlFVRkpMRTlCUVU5QkxFdEJRVTBzWTBGQlkwRXNUVUZCVFR0QlFVTnFReXhqUVVGTkxFbEJRVWtzVlVGQlZTeDVRa0ZCZVVJc1QwRkJUMEVzUTBGQlF5eEpRVUZKTEN0Q1FVRXJRanRCUVVNMVJpeE5RVUZCUml4SFFVRmpReXhIUVVGSFF5eERRVUZETzBGQlEyeENMR1ZCUVZORExFbEJRVXM3UVVGQlJTeGhRVUZMTEdOQlFXTkdPMEZCUVVFc1RVRkJTVHRCUVVOMlF5eE5RVUZCUVN4RlFVRkZMRmxCUVZsRExFMUJRVTBzVDBGQlR5eFBRVUZQTEU5QlFVOUJMRU5CUVVNc1MwRkJTME1zUlVGQlJ5eFpRVUZaUkN4RlFVRkZMRmRCUVZjc1NVRkJTVU1zUlVGQlNUdEJRVUZCTEVsQlF6TkdMRWRCUlVsNlF5eEpRVUZYTEU5QlFVOHNWVUZCVlN4VFFVRlZNRU1zUjBGQlJ6dEJRVU55UXl4bFFVRlRReXhIUVVGSFF5eEpRVUZKTEVkQlFVZERMRWxCUVVrc1ZVRkJWU3hSUVVGUlJDeEpRVUZKUXl4SFFVRkhSQ3hMUVVGTE8wRkJRMnBFTEZGQlFVRkVMRWxCUVVrc1ZVRkJWVU1zUTBGQlF6dEJRVU5tTEdsQ1FVRlRSU3hMUVVGTFNEdEJRVUZITEZWQlFVa3NUMEZCVHl4VlFVRlZMR1ZCUVdVc1MwRkJTMEVzUjBGQlIwY3NRMEZCUXl4TlFVRkhTaXhGUVVGRlNTeERRVUZETEVsQlFVbElMRVZCUVVWSExFTkJRVU03UVVGQlFUdEJRVVV2UlN4aFFVRlBTanRCUVVGQkxFbEJRMllzUjBGRlNYcERMRWxCUVZNc1UwRkJWVEJETEVkQlFVZEpMRWRCUVVjN1FVRkRja0lzVlVGQlNVd3NTVUZCU1N4RFFVRkJPMEZCUTFJc1pVRkJVMGtzUzBGQlMwZzdRVUZCUnl4UlFVRkpMRTlCUVU4c1ZVRkJWU3hsUVVGbExFdEJRVXRCTEVkQlFVZEhMRU5CUVVNc1MwRkJTME1zUlVGQlJTeFJRVUZSUkN4RFFVRkRMRWxCUVVrc1RVRkRPVVZLTEVWQlFVVkpMRU5CUVVNc1NVRkJTVWdzUlVGQlJVY3NRMEZCUXp0QlFVTmtMRlZCUVVsSUxFdEJRVXNzVVVGQlVTeFBRVUZQTEU5QlFVOHNlVUpCUVRCQ08wRkJRM0pFTEdsQ1FVRlRReXhKUVVGSkxFZEJRVWRGTEVsQlFVa3NUMEZCVHl4elFrRkJjMEpJTEVOQlFVTXNSMEZCUjBNc1NVRkJTVVVzUlVGQlJTeFJRVUZSUmp0QlFVTXZSQ3hWUVVGSlJ5eEZRVUZGTEZGQlFWRkVMRVZCUVVWR0xFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NUMEZCVHl4VlFVRlZMSEZDUVVGeFFpeExRVUZMUkN4SFFVRkhSeXhGUVVGRlJpeERRVUZETEVOQlFVTXNUVUZEZWtWR0xFVkJRVVZKTEVWQlFVVkdMRU5CUVVNc1EwRkJReXhKUVVGSlJDeEZRVUZGUnl4RlFVRkZSaXhEUVVGRExFTkJRVU03UVVGRk5VSXNZVUZCVDBZN1FVRkJRU3hKUVVObUxFZEJSVWw0UXl4SlFVRmhMRk5CUVZVNFF5eEhRVUZaUXl4SFFVRlJReXhIUVVGTFF5eEhRVUZOTzBGQlEyeEVMRlZCUVVsRExFbEJRVWtzVlVGQlZTeFJRVUZSUXl4SlFVRkpSQ3hKUVVGSkxFbEJRVWxJTEVsQlFWTkZMRTFCUVZNc1QwRkJUMEVzU1VGQlR5eFBRVUZQTEhsQ1FVRjVRa1lzUjBGQlVVTXNRMEZCUnl4SlFVRkpReXhIUVVGTldqdEJRVU16U0N4VlFVRkpMRTlCUVU4c1YwRkJXU3haUVVGWkxFOUJRVThzVVVGQlVTeFpRVUZoTzBGQlFWa3NVVUZCUVdNc1NVRkJTU3hSUVVGUkxGTkJRVk5NTEVkQlFWbERMRWRCUVZGRExFZEJRVXRETEVOQlFVazdRVUZCUVR0QlFVTjRTQ3hwUWtGQlUxQXNTVUZCU1Vrc1JVRkJWeXhUUVVGVExFZEJRVWRLTEV0QlFVc3NSMEZCUjBFN1FVRkJTeXhYUVVGSlRDeEpRVUZKVXl4RlFVRlhTaXhEUVVGRExFOUJRVWRUTEV0QlFVdEVMRWxCUVVrc1NVRkJTV0lzUlVGQlJXTXNRMEZCUXl4SlFVRkpSQ3hKUVVGSkxFbEJRVWxpTEVWQlFVVlZMRWRCUVZGRExFZEJRVXRITEVOQlFVTXNTVUZCU1dRc1JVRkJSVlVzUjBGQlVVTXNRMEZCUnl4TlFVRk5SenRCUVVOb1NpeGhRVUZQUkN4SlFVRkpMRXRCUVV0RExFdEJRVXNzVDBGQlR5eGxRVUZsU2l4SFFVRlJReXhIUVVGTFJ5eERRVUZETEVkQlFVZEJPMEZCUVVFc1NVRkRjRVVzUjBGRlNXeEVMRWxCUVZVc1UwRkJWVzFFTEVkQlFWbERMRWRCUVZjN1FVRkRka01zWVVGQlR5eFRRVUZWVGl4SFFVRlJReXhIUVVGTE8wRkJRVVVzVVVGQlFVc3NSVUZCVlU0c1IwRkJVVU1zUjBGQlMwa3NRMEZCVlR0QlFVRkJMRTFCUVVrN1FVRkJRU3hKUVVNM1JTeEhRVVZKYkVRc1NVRkJaU3hUUVVGVmIwUXNSMEZCVFVNc1IwRkJZMVFzUjBGQldWVXNSMEZCVjBNc1IwRkJZME1zUjBGQmJVSTdRVUZEYWtjc1pVRkJVME1zUlVGQlQwTXNTVUZCUnp0QlFVRkZMRmxCUVVsQkxFOUJRVTBzVlVGQlZTeFBRVUZQUVN4TlFVRk5PMEZCUVZrc1owSkJRVTBzU1VGQlNTeFZRVUZWTEcxQ1FVRnRRanRCUVVGSExHVkJRVTlCTzBGQlFVRXNUVUZCU1R0QlFVdDJTQ3hsUVVwSlF5eEpRVUZQVEN4RlFVRlZMRTFCUVUxU0xFbEJRVTFoTEUxQlFWTXNWMEZCVnl4UlFVRlJRU3hOUVVGVExGZEJRVmNzVVVGQlVTeFRRVU55Um1Rc1NVRkJVeXhEUVVGRFVTeExRVUZuUWtRc1NVRkJUMFVzUlVGQlZTeFRRVUZaUml4SlFVRlBRU3hGUVVGTExGbEJRVmtzVFVGREwwVlJMRWxCUVdGUUxFMUJRV2xDVWl4SlFVRlRMRTlCUVU4c2VVSkJRWGxDUVN4SFFVRlJVeXhGUVVGVkxFbEJRVWtzU1VGQlNTeERRVUZCTEVsQlEycEhUeXhIUVVGSFF5eEpRVUZQTEVsQlEweDBRaXhKUVVGSlNTeEZRVUZYTEZOQlFWTXNSMEZCUjBvc1MwRkJTeXhIUVVGSFFTeExRVUZMTzBGQlF6ZERMRmxCUVVsMVFpeEpRVUZWTEVOQlFVRTdRVUZEWkN4cFFrRkJVM0pDTEV0QlFVdFpPMEZCUVZjc1ZVRkJRVk1zUlVGQlVYSkNMRU5CUVVNc1NVRkJTVUVzVFVGQlRTeFhRVUZYTEVOQlFVRXNTVUZCUzFrc1JVRkJWVm9zUTBGQlF6dEJRVU4yUlN4cFFrRkJVMEVzUzBGQlMxa3NSVUZCVlR0QlFVRlJMRlZCUVVGVExFVkJRVkVzVDBGQlQzSkNMRU5CUVVNc1NVRkJTVmtzUlVGQlZTeFBRVUZQV2l4RFFVRkRPMEZCUTNSRkxGRkJRVUZ4UWl4RlFVRlJMR2xDUVVGcFFpeFRRVUZWVEN4SlFVRkhPMEZCUVVVc1kwRkJTVWs3UVVGQlRTeHJRa0ZCVFN4SlFVRkpMRlZCUVZVc2QwUkJRWGRFTzBGQlFVY3NWVUZCUVU0c1JVRkJhMElzUzBGQlMwTXNSVUZCVDBNc1RVRkJTeXhKUVVGSkxFTkJRVU03UVVGQlFUdEJRVU42U3l4WlFVRkpUU3hUUVVGaGNFSXNSVUZCVjBvc1EwRkJReXhIUVVGSGJVSXNUVUZCVXl4aFFVRmhMRVZCUVVVc1MwRkJTME1zUlVGQlZ5eExRVUZMTEV0QlFVdEJMRVZCUVZjc1NVRkJSeXhKUVVGTFFTeEZRVUZYWkN4RFFVRkhMRWRCUVVkcFFpeERRVUZQTzBGQlF6ZElMRmxCUVVsS0xFMUJRVk1zV1VGQldUdEJRVU55UWl4alFVRkpTeXhQUVVGWE8wRkJRVkU3UVVGRGRrSXNZMEZCU1VFc1QwRkJWeXhSUVVGUkxFOUJRVTlCTEUxQlFWYzdRVUZCVlN4clFrRkJUU3hKUVVGSkxGVkJRVlVzYVVKQlFXbENPMEZCUTNoR0xGZEJRVWxJTEVsQlFVbEtMRVZCUVU5UExFZEJRVThzUjBGQlJ5eFBRVUZIU2l4RlFVRlhMRTFCUVUxRExFdEJRM3BEUVN4SlFVRkpTaXhGUVVGUFR5eEhRVUZQTEVkQlFVY3NUMEZCUjBvc1JVRkJWeXhOUVVGTlF5eExRVU42UTBFc1NVRkJTVW9zUlVGQlQwOHNSMEZCVHl4SlFVRkpMRTFCUVVkVUxFVkJRV0VzUzBGQlMwMHNRMEZCUXp0QlFVRkJPMEZCUlM5RExGZEJRVWxCTEVsQlFVbEtMRVZCUVU5UExFVkJRVTBzVDBGRGJFSk1MRTFCUVZNc1ZVRkJVMG9zUlVGQllTeExRVUZMVFN4RFFVRkRMRWxCUTNCRFJDeEZRVUZYWkN4RFFVRkhMRWxCUVVsbE8wRkJRVUU3UVVGSEwwSXNUVUZCU1doQ0xFdEJRVkVzVDBGQlR5eGxRVUZsUVN4SFFVRlJVeXhGUVVGVkxFMUJRVTFOTEVOQlFWVXNSMEZEY0VWRkxFbEJRVTg3UVVGQlFTeEpRVU5tTEVkQlJVazNSQ3hKUVVGdlFpeFRRVUZWWjBVc1IwRkJVMVlzUjBGQlkxY3NSMEZCVHp0QlFVVjRSQ3hsUVVSSlF5eEpRVUZYTEZWQlFWVXNVMEZCVXl4SFFVTjZRak5DTEVsQlFVa3NSMEZCUjBFc1NVRkJTV1VzUlVGQllTeFJRVUZSWmp0QlFVTnlReXhSUVVGQk1FSXNTVUZCVVVNc1NVRkJWMW9zUlVGQllXWXNRMEZCUXl4RlFVRkZMRXRCUVV0NVFpeEhRVUZUUXl4RFFVRkxMRWxCUVVsWUxFVkJRV0ZtTEVOQlFVTXNSVUZCUlN4TFFVRkxlVUlzUTBGQlR6dEJRVVV4Uml4aFFVRlBSU3hKUVVGWFJDeEpRVUZSTzBGQlFVRXNTVUZEYkVNc1IwRkZTV2hGTEVsQlFWa3NVMEZCVld0RkxFZEJRVWM3UVVGRGNrSXNZVUZCVHl4UFFVRlBRU3hMUVVGTkxGZEJRVmRCTEVsQlFVa3NSMEZCUnl4UFFVRlBRU3hEUVVGRE8wRkJRVUVzU1VGRGRFUXNSMEZGU1dwRkxFbEJRVzlDTEZOQlFWVjFSQ3hIUVVGSFZ5eEhRVUZOUXl4SFFVRlJPMEZCUXpORExHRkJRVWtzVDBGQlQwUXNTMEZCVXl4aFFVRlZRU3hKUVVGUFFTeEZRVUZMTEdOQlFXTXNTVUZCU1N4UFFVRlBRU3hGUVVGTExHRkJRV0VzUjBGQlJ5eEpRVUZKTEV0QlEzSkdMRTlCUVU4c1pVRkJaVmdzUjBGQlJ5eFJRVUZSTEVWQlFVVXNZMEZCWXl4SlFVRk5MRTlCUVU5WkxFbEJRVk1zUjBGQlJ5eFBRVUZQUVN4SFFVRlJMRXRCUVV0RUxFTkJRVWtzU1VGQlNVRXNSVUZCU1N4RFFVRkZPMEZCUVVFc1NVRkRNMGdzUjBGRlNXcEZMRWxCUVdFc1UwRkJWVzFGTEVkQlFXRkRMRWRCUVdVN1FVRkRMME1zVlVGQlNTeFBRVUZQTEZkQlFWa3NXVUZCV1N4UFFVRlBMRkZCUVZFc1dVRkJZVHRCUVVGWkxHVkJRVThzVVVGQlVTeFRRVUZUUkN4SFFVRmhReXhEUVVGaE8wRkJRVUVzU1VGRGNra3NSMEZGU1c1RkxFbEJRVmtzVTBGQlZUUkVMRWRCUVZOUkxFZEJRVmxETEVkQlFVZERMRWRCUVZjN1FVRkRja1FzWlVGQlUwTXNSVUZCVFZZc1IwRkJUenRCUVVGRkxHVkJRVTlCTEdGQlFXbENVU3hKUVVGSlVpeEpRVUZSTEVsQlFVbFJMRVZCUVVVc1UwRkJWVWNzUjBGQlV6dEJRVUZGTEZWQlFVRkJMRVZCUVZGWUxFTkJRVXM3UVVGQlFTeFJRVUZGTEVOQlFVVTdRVUZCUVN4TlFVRkpPMEZCUXpWSExHRkJRVThzUzBGQlMxRXNUVUZCVFVFc1NVRkJTU3hWUVVGVkxGTkJRVlZITEVkQlFWTkRMRWRCUVZFN1FVRkRka1FzYVVKQlFWTkRMRVZCUVZWaUxFZEJRVTg3UVVGQlJTeGpRVUZKTzBGQlFVVXNXVUZCUVdNc1JVRkJTMHdzUlVGQlZTeExRVUZMVkN4RFFVRkxMRU5CUVVNN1FVRkJRU3hWUVVGRkxGTkJRVlYyUWl4SFFVRlFPMEZCUVZrc1dVRkJRVzFETEVWQlFVOXVReXhEUVVGRE8wRkJRVUU3VVVGQlRUdEJRVU16Uml4cFFrRkJVM05ETEVWQlFWTm1MRWRCUVU4N1FVRkJSU3hqUVVGSk8wRkJRVVVzV1VGQlFXTXNSVUZCUzB3c1JVRkJWU3hOUVVGVFZDeERRVUZMTEVOQlFVTTdRVUZCUVN4VlFVRkpMRk5CUVZGMlFpeEhRVUZRTzBGQlFWa3NXVUZCUVcxRExFVkJRVTl1UXl4RFFVRkRPMEZCUVVFN1VVRkJUVHRCUVVNNVJpeHBRa0ZCVTNGRExFVkJRVXRvUWl4SFFVRlJPMEZCUVVVc1ZVRkJRVUVzUlVGQlR5eFBRVUZQWVN4RlFVRlJZaXhGUVVGUExFdEJRVXNzU1VGQlNWa3NSVUZCVFZvc1JVRkJUeXhMUVVGTExFVkJRVVVzUzBGQlMyVXNSMEZCVjBVc1EwRkJVVHRCUVVGQkxGRkJRVWs3UVVGRE9VY3NVVUZCUVVRc1IwRkJUVXdzU1VGQldVRXNSVUZCVlN4TlFVRk5WaXhIUVVGVFVTeExRVUZqTEVOQlFVVXNRMEZCUVN4SFFVRkhMRXRCUVVrc1EwRkJSVHRCUVVGQkxFMUJRMmhHTEVOQlFWTTdRVUZCUVN4SlFVTlVMRWRCUlVsdVJTeEpRVUZqTEZOQlFWVXlSQ3hIUVVGVGFVSXNSMEZCVFR0QlFVTnVReXhWUVVGSmNrSXNTVUZCU1N4RlFVRkZMRTlCUVU4c1IwRkJSeXhOUVVGTkxGZEJRVmM3UVVGQlJTeFpRVUZKZGtJc1JVRkJSU3hEUVVGRExFbEJRVWs3UVVGQlJ5eG5Ra0ZCVFVFc1JVRkJSU3hEUVVGRE8wRkJRVWNzWlVGQlQwRXNSVUZCUlN4RFFVRkRPMEZCUVVFc1RVRkJTU3hIUVVGRkxFMUJRVTBzUTBGQlJTeEhRVUZGTEV0QlFVc3NRMEZCUVN4RlFVRkpMRWRCUVVWdlFpeEhRVUZIZVVJc1IwRkJSemRETEVkQlFVYzRRenRCUVVNdlJ5eGhRVUZQUVN4SlFVRkpMRVZCUVVVc1RVRkJUVU1zUlVGQlN5eERRVUZETEVkQlFVY3NUMEZCVTBFc1JVRkJTeXhEUVVGRExFZEJRVWNzVVVGQlZVRXNSVUZCU3l4RFFVRkRMRVZCUVVjc1IwRkJSU3hQUVVGUExGVkJRVmNzWlVGQlpVUXNSVUZCUlN4UFFVRlBMRkZCUVZFc1NVRkJTU3hYUVVGWE8wRkJRVVVzWlVGQlR6dEJRVUZCTEUxQlFVOHNTVUZCUjBFN1FVRkRka29zWlVGQlUwTXNSVUZCU3pWRExFZEJRVWM3UVVGQlJTeGxRVUZQTEZOQlFWVlVMRWRCUVVjN1FVRkJSU3hwUWtGQlQyZEVMRVZCUVVzc1EwRkJRM1pETEVkQlFVZFVMRU5CUVVNc1EwRkJRenRCUVVGQkxGRkJRVWs3UVVGQlFTeE5RVUZITzBGQlEyeEZMR1ZCUVZOblJDeEZRVUZMVFN4SFFVRkpPMEZCUTJRc1dVRkJTVFZDTzBGQlFVY3NaMEpCUVUwc1NVRkJTU3hWUVVGVkxHbERRVUZwUXp0QlFVTTFSQ3hsUVVGUE1FSXNUVUZCVFVFc1NVRkJTU3hIUVVGSFJTeEZRVUZITEVOQlFVTXNUVUZCVFhwQ0xFbEJRVWtzUzBGQlMwRTdRVUZCUnl4alFVRkpPMEZCUXpGRExHZENRVUZKU0N4SlFVRkpMRWRCUVVkNVFpeE5RVUZOTjBNc1NVRkJTV2RFTEVWQlFVY3NRMEZCUXl4SlFVRkpMRWxCUVVsSUxFVkJRVVVzVTBGQldVY3NSVUZCUnl4RFFVRkRMRWxCUVVsSUxFVkJRVVVzVjBGQll6ZERMRWxCUVVrMlF5eEZRVUZGTEZkQlFXTTNReXhGUVVGRkxFdEJRVXMyUXl4RFFVRkRMRWRCUVVjc1MwRkJTMEVzUlVGQlJTeFRRVUZUTEVWQlFVVTNReXhKUVVGSlFTeEZRVUZGTEV0QlFVczJReXhIUVVGSFJ5eEZRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhPMEZCUVUwc2NVSkJRVTlvUkR0QlFVVXpTaXh2UWtGRVNUWkRMRWxCUVVrc1IwRkJSemRETEUxQlFVZG5SQ3hKUVVGTExFTkJRVU5CTEVWQlFVY3NRMEZCUXl4SlFVRkpMRWRCUVVkb1JDeEZRVUZGTEV0QlFVc3NTVUZET1VKblJDeEZRVUZITEVOQlFVTXNSMEZCUXp0QlFVRkJMR05CUTFRc1MwRkJTenRCUVVGQkxHTkJRVWNzUzBGQlN6dEJRVUZITEdkQ1FVRkJhRVFzU1VGQlNXZEVPMEZCUVVrN1FVRkJRU3hqUVVONFFpeExRVUZMTzBGQlFVY3NkVUpCUVVGNlFpeEZRVUZGTEZOQlFXZENMRVZCUVVVc1QwRkJUM2xDTEVWQlFVY3NRMEZCUXl4SFFVRkhMRTFCUVUwc1IwRkJTenRCUVVGQkxHTkJRM0pFTEV0QlFVczdRVUZCUnl4blFrRkJRWHBDTEVWQlFVVXNVMEZCVTNOQ0xFbEJRVWxITEVWQlFVY3NRMEZCUXl4SFFVRkhRU3hKUVVGTExFTkJRVU1zUTBGQlF6dEJRVUZITzBGQlFVRXNZMEZEZUVNc1MwRkJTenRCUVVGSExHZENRVUZCUVN4SlFVRkxla0lzUlVGQlJTeEpRVUZKTEU5QlFVOUJMRVZCUVVVc1MwRkJTeXhKUVVGSE8wRkJRVWs3UVVGQlFTeGpRVU40UXp0QlFVTkpMRzlDUVVGTmRrSXNTVUZCU1hWQ0xFVkJRVVVzVFVGQlRTeEZRVUZCZGtJc1NVRkJTVUVzUlVGQlJTeFRRVUZUTEV0QlFVdEJMRVZCUVVWQkxFVkJRVVVzVTBGQlV5eERRVUZETEU5QlFVOW5SQ3hGUVVGSExFTkJRVU1zVFVGQlRTeExRVUZMUVN4RlFVRkhMRU5CUVVNc1RVRkJUU3hKUVVGSk8wRkJRVVVzYTBKQlFVRjZRaXhKUVVGSk8wRkJRVWM3UVVGQlFUdEJRVU5xUnl4dlFrRkJTWGxDTEVWQlFVY3NRMEZCUXl4TlFVRk5MRTFCUVUwc1EwRkJRMmhFTEV0QlFVMW5SQ3hGUVVGSExFTkJRVU1zU1VGQlNXaEVMRVZCUVVVc1EwRkJReXhMUVVGTFowUXNSVUZCUnl4RFFVRkRMRWxCUVVsb1JDeEZRVUZGTEVOQlFVTXNTVUZCU3p0QlFVRkZMR3RDUVVGQmRVSXNSVUZCUlN4UlFVRlJlVUlzUlVGQlJ5eERRVUZETzBGQlFVYzdRVUZCUVR0QlFVTTVSU3h2UWtGQlNVRXNSVUZCUnl4RFFVRkRMRTFCUVUwc1MwRkJTM3BDTEVWQlFVVXNVVUZCVVhaQ0xFVkJRVVVzUTBGQlF5eEhRVUZITzBGQlFVVXNhMEpCUVVGMVFpeEZRVUZGTEZGQlFWRjJRaXhGUVVGRkxFTkJRVU1zUjBGQlIwRXNTVUZCU1dkRU8wRkJRVWs3UVVGQlFUdEJRVU0zUkN4dlFrRkJTV2hFTEV0QlFVdDFRaXhGUVVGRkxGRkJRVkYyUWl4RlFVRkZMRU5CUVVNc1IwRkJSenRCUVVGRkxHdENRVUZCZFVJc1JVRkJSU3hSUVVGUmRrSXNSVUZCUlN4RFFVRkRMRWRCUVVkMVFpeEZRVUZGTEVsQlFVa3NTMEZCUzNsQ0xFTkJRVVU3UVVGQlJ6dEJRVUZCTzBGQlF6TkVMR2RDUVVGSmFFUXNSVUZCUlN4RFFVRkRMRXRCUVVkMVFpeEZRVUZGTEVsQlFVa3NTVUZCUnl4SFFVTnVRa0VzUlVGQlJTeExRVUZMTEVsQlFVczdRVUZCUlR0QlFVRkJMRmxCUTNKQ08wRkJRMFFzV1VGQlFYbENMRWxCUVV0S0xFVkJRVXNzUzBGQlMycENMRWRCUVZOS0xFTkJRVU03UVVGQlFTeFZRVU0xUWl4VFFVRlJiRUlzUjBGQlVEdEJRVUZaTEZsQlFVRXlReXhKUVVGTExFTkJRVU1zUjBGQlJ6TkRMRU5CUVVNc1IwRkJSM2RETEVsQlFVazdRVUZCUVN4VlFVRkZMRlZCUVZjN1FVRkJSU3haUVVGQmVrSXNTVUZCU1hCQ0xFbEJRVWs3UVVGQlFTeFZRVUZKTzBGQlF6RkVMRmxCUVVsblJDeEZRVUZITEVOQlFVTXNTVUZCU1R0QlFVRkhMR2RDUVVGTlFTeEZRVUZITEVOQlFVTTdRVUZCUnl4bFFVRlBMRVZCUVVVc1QwRkJUMEVzUlVGQlJ5eERRVUZETEVsQlFVbEJMRVZCUVVjc1EwRkJReXhKUVVGSkxGRkJRVkVzVFVGQlRUdE5RVU0zUlR0QlFVRkJMRWxCUTFRc1IwRkZTUzlGTEVsQlFXVXNVMEZCVTJkR0xFZEJRVWRETEVkQlFVYzdRVUZETVVJc1pVRkJVeXhMUVVGTFJEdEJRVUZITEZGQlFVa3NUVUZCVFN4aFFVRmhMRU5CUVVNc1QwRkJUeXhWUVVGVkxHVkJRV1VzUzBGQlMwTXNSMEZCUnl4RFFVRkRMRXRCUVVkcVJTeEhRVUZuUW1sRkxFZEJRVWRFTEVkQlFVY3NRMEZCUXp0QlFVRkJMRWxCUTNCSUxFZEJSVWxvUlN4TFFVRnJRaXhQUVVGUExGTkJRVlVzVTBGQlUybEZMRWRCUVVkRUxFZEJRVWRGTEVkQlFVZERMRWRCUVVrN1FVRkRja1FzVFVGQlNVRXNUVUZCVHl4WFFVRlhRU3hKUVVGTFJEdEJRVU16UWl4VlFVRkpNVU1zU1VGQlR5eFBRVUZQTEhsQ1FVRjVRbmRETEVkQlFVZEZMRU5CUVVNN1FVRkRMME1zVDBGQlNTeERRVUZETVVNc1RVRkJVeXhUUVVGVFFTeEpRVUZQTEVOQlFVTjNReXhGUVVGRkxHRkJRV0Y0UXl4RlFVRkxMRmxCUVZsQkxFVkJRVXNzYlVKQlEyaEZRU3hKUVVGUExFVkJRVVVzV1VGQldTeEpRVUZOTEV0QlFVc3NWMEZCVnp0QlFVRkZMR1ZCUVU5M1F5eEZRVUZGUlN4RFFVRkRPMEZCUVVFc1RVRkJSU3hOUVVVM1JDeFBRVUZQTEdWQlFXVkVMRWRCUVVkRkxFZEJRVWt6UXl4RFFVRkpPMEZCUVVFc1NVRkRjRU1zU1VGQlN5eFRRVUZUZVVNc1IwRkJSMFFzUjBGQlIwVXNSMEZCUjBNc1IwRkJTVHRCUVVONFFpeE5RVUZKUVN4TlFVRlBMRmRCUVZkQkxFbEJRVXRFTEVsQlF6TkNSQ3hGUVVGRlJTeERRVUZGTEVsQlFVbElMRVZCUVVWRkxFTkJRVU03UVVGQlFTeEpRVU51UWl4SFFVVkpha1lzU1VGQlZ5eFRRVUZWWjBZc1IwRkJSenRCUVVOd1FpeFZRVUZKYWtRc1NVRkJTU3hQUVVGUExGVkJRVmNzWTBGQll5eFBRVUZQTEZWQlFWVm5SQ3hKUVVGSmFFUXNTMEZCUzJsRUxFVkJRVVZxUkN4RFFVRkRMRWRCUVVkRExFbEJRVWs3UVVGRE5VVXNWVUZCU1N0RE8wRkJRVWNzWlVGQlQwRXNSVUZCUlN4TFFVRkxReXhEUVVGRE8wRkJRM1JDTEZWQlFVbEJMRXRCUVVzc1QwRkJUMEVzUlVGQlJTeFZRVUZYTzBGQlFWVXNaVUZCVHp0QlFVRkJMRlZCUXpGRExFMUJRVTBzVjBGQldUdEJRVU5rTEcxQ1FVRkpRU3hMUVVGTGFFUXNTMEZCUzJkRUxFVkJRVVVzVjBGQlVVRXNTVUZCU1N4VFFVTnlRaXhGUVVGRkxFOUJRVTlCTEV0QlFVdEJMRVZCUVVWb1JDeEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRaMFE3VlVGRGRrTTdRVUZCUVN4UlFVTmlPMEZCUTFFc1dVRkJUU3hKUVVGSkxGVkJRVlZxUkN4SlFVRkpMRFJDUVVFMFFpeHBRMEZCYVVNN1FVRkJRU3hKUVVNM1JpeEhRVVZKT1VJc1NVRkJVeXhUUVVGVkswVXNSMEZCUnk5RExFZEJRVWM3UVVGRGNrSXNWVUZCU1RoRExFbEJRVWtzVDBGQlR5eFZRVUZYTEdOQlFXTkRMRVZCUVVVc1QwRkJUeXhSUVVGUk8wRkJRM3BFTEZWQlFVa3NRMEZCUTBRN1FVRkJSeXhsUVVGUFF6dEJRVU5tTEZWQlFVbG9SQ3hKUVVGSkswTXNSVUZCUlN4TFFVRkxReXhEUVVGRExFZEJRVWQyUXl4SFFVRkhNRU1zU1VGQlN5eERRVUZGTEVkQlFVVm9SRHRCUVVNdlFpeFZRVUZKTzBGQlEwRXNaMEpCUVZGR0xFMUJRVTBzVlVGQlZVRXNUVUZCVFN4TlFVRk5MRVZCUVVWUkxFbEJRVWxVTEVWQlFVVXNTMEZCVFN4SFFVRkZPMEZCUVUwc1ZVRkJRVzFFTEVWQlFVY3NTMEZCU3pGRExFVkJRVVVzUzBGQlN6dEJRVUZCTEUxQlF6VkZMRk5CUTAweVF5eEhRVUZRTzBGQlFXZENMRkZCUVVGcVJDeEpRVUZKTEVWQlFVVXNUMEZCVDJsRUxFVkJRVTg3UVVGQlFTeE5RVUZITEZWQlF5OUNPMEZCUTBvc1dVRkJTVHRCUVVOQkxGVkJRVWt6UXl4TFFVRkxMRU5CUVVOQkxFVkJRVVVzVTBGQlUzTkRMRWxCUVVrdlF5eEZRVUZGTEZkQlFWa3JReXhGUVVGRkxFdEJRVXN2UXl4RFFVRkRPMEZCUVVFc1VVRkRiRVFzVlVGRFR6dEJRVUZGTEdOQlFVbEhPMEZCUVVjc2EwSkJRVTFCTEVWQlFVVTdRVUZCUVN4UlFVRlJPMEZCUVVFc1RVRkRjRU03UVVGRFJDeGhRVUZQWjBRN1FVRkJRU3hKUVVObUxFZEJSMGxxUml4SlFVRlhMRmRCUVZrN1FVRkRia0lzWlVGQlUybEdMRWxCUVVzc1EwRkJRU3hIUVVGSmJrUXNTVUZCU1N4SFFVRkhRU3hKUVVGSkxGVkJRVlVzVVVGQlVVRTdRVUZETTBNc1VVRkJRVzFFTEVsQlFVdEJMRVZCUVVjc1QwRkJUMnhHTEVWQlFVOHNWVUZCVlN0Q0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzWkRMR0ZCUVU5dFJEdEJRVUZCTEVsQlEyWXNSMEZIU1doR0xFbEJRV2xDTEZkQlFWazdRVUZEZWtJc1pVRkJVelJDTEVsQlFVa3NSMEZCUjBNc1NVRkJTU3hIUVVGSGNVUXNTVUZCU3l4VlFVRlZMRkZCUVZGeVJDeEpRVUZKY1VRc1IwRkJTWEpFTzBGQlFVc3NVVUZCUVVRc1MwRkJTeXhWUVVGVlF5eERRVUZETEVWQlFVVTdRVUZETjBVc1pVRkJVMU1zU1VGQlNTeE5RVUZOVml4RFFVRkRMRWRCUVVkclJDeEpRVUZKTEVkQlFVZHFSQ3hKUVVGSkxFZEJRVWRCTEVsQlFVbHhSQ3hIUVVGSmNrUTdRVUZEZWtNc2FVSkJRVk56UkN4SlFVRkpMRlZCUVZWMFJDeERRVUZETEVkQlFVZDFSQ3hKUVVGSkxFZEJRVWRETEVsQlFVdEdMRVZCUVVVc1VVRkJVVU1zU1VGQlNVTXNSMEZCU1VRc1MwRkJTMDQ3UVVGRE1VUXNWVUZCUVhoRExFVkJRVVYzUXl4RFFVRkRMRWxCUVVsTExFVkJRVVZETEVOQlFVTTdRVUZEYkVJc1lVRkJUemxETzBGQlFVRXNTVUZEWml4SFFVVkpja01zU1VGQlowSXNVMEZCVlhGR0xFZEJRVWxETEVkQlFVMURMRWRCUVUwN1FVRkRkRU1zVlVGQlNVRXNTMEZCVVN4VlFVRlZMRmRCUVZjN1FVRkJSeXhwUWtGQlV6TkVMRWxCUVVrc1IwRkJSelJFTEVsQlFVbEdMRVZCUVVzc1VVRkJVVkFzUjBGQlNXNUVMRWxCUVVrMFJDeEhRVUZITlVRN1FVRkROVVVzVjBGQlNXMUVMRXRCUVUwc1JVRkJSVzVFTEV0QlFVc3dSQ3hSUVVOU1VDeE5RVUZKUVN4SlFVRkxMRTFCUVUwc1ZVRkJWU3hOUVVGTkxFdEJRVXRQTEVkQlFVMHNSMEZCUnpGRUxFTkJRVU1zU1VGRGJrUnRSQ3hGUVVGSGJrUXNRMEZCUXl4SlFVRkpNRVFzUlVGQlN6RkVMRU5CUVVNN1FVRkhkRUlzWVVGQlQzbEVMRVZCUVVjc1QwRkJUMDRzUzBGQlRTeE5RVUZOTEZWQlFWVXNUVUZCVFN4TFFVRkxUeXhEUVVGSkxFTkJRVU03UVVGQlFTeEpRVU12UkN4SFFVVkpja1lzU1VGQlZTeFRRVUZWYlVJc1IwRkJSenRCUVVOdVFpeGhRVUZQTEdkQ1FVRm5RbTVDTEV0QlFWY3NTMEZCU3l4SlFVRkpiVUlzUjBGQlJ5eFJRVUZSTEVsQlFVbHVRaXhGUVVGUmJVSXNRMEZCUXp0QlFVRkJMRWxCUXpORkxFZEJSVWxzUWl4SlFVRnRRaXhUUVVGVmJVUXNSMEZCVTFFc1IwRkJXVVVzUjBGQlZ6dEJRVU42UkN4VlFVRkpMRU5CUVVNc1QwRkJUenRCUVVGbExHTkJRVTBzU1VGQlNTeFZRVUZWTEhORFFVRnpRenRCUVVOeVJpeFZRVUZKVXl4SlFVRkpWQ3hGUVVGVkxFMUJRVTFXTEVkQlFWTlJMRXRCUVdNc1EwRkJRU3hEUVVGRkxFZEJRVWRxUXl4SFFVRkhOa1FzU1VGQlNUdEJRVU16UkN4aFFVRlBOMFFzU1VGQlNTeERRVUZCTEVkQlFVazJReXhGUVVGTExFMUJRVTBzUjBGQlIwRXNSVUZCU3l4UFFVRlBMRWRCUVVkQkxFVkJRVXNzVVVGQlVTeEhRVUZITjBNc1JVRkJSU3hQUVVGUExHRkJRV0VzU1VGQlNTeFhRVUZaTzBGQlFVVXNaVUZCVHp0QlFVRkJMRTFCUVU4c1IwRkJSVUU3UVVGRGNFZ3NaVUZCVXpaRExFVkJRVXMxUXl4SFFVRkhPMEZCUVVVc1VVRkJTVEpETEVWQlFVVXpReXhEUVVGRExFMUJRVWRFTEVWQlFVVkRMRU5CUVVNc1NVRkJTU3hUUVVGVlZDeEhRVUZITzBGQlFVVXNhVUpCUVU4c1NVRkJTU3hSUVVGUkxGTkJRVlU0UkN4SFFVRkhNVVFzUjBGQlJ6dEJRVUZGTEZsQlFVRnBSU3hGUVVGRkxFdEJRVXNzUTBGQlF6VkVMRWRCUVVkVUxFZEJRVWM0UkN4SFFVRkhNVVFzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCUzJ0RkxFVkJRVTgzUkN4SFFVRkhWQ3hEUVVGRE8wRkJRVUVzVlVGQlJTeERRVUZGTzBGQlFVRXNVVUZCU1R0QlFVRkJMRTFCUVVjN1FVRkRNVWtzWlVGQlUzTkZMRVZCUVU4M1JDeEhRVUZIVkN4SFFVRkhPMEZCUVVVc1dVRkJTVHRCUVVGRkxGVkJRVUZuUkN4RlFVRkxTU3hGUVVGRk0wTXNRMEZCUXl4RlFVRkZWQ3hEUVVGRExFTkJRVU03UVVGQlFTeFJRVUZGTEZOQlFWVlhMRWRCUVZBN1FVRkJXU3hWUVVGQk5FUXNSVUZCVDBZc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITVVRc1EwRkJRenRCUVVGQk8wMUJRVTA3UVVGRGJFWXNaVUZCVTNGRExFVkJRVXN2UWl4SFFVRkhPMEZCUVVVc1VVRkJRVUVzUlVGQlJTeHBRa0ZCYVVKd1F5eEpRVUZWTEZGQlFWRXNVVUZCVVc5RExFVkJRVVVzVFVGQlRTeERRVUZETEVWQlFVVXNTMEZCUzNWRUxFZEJRVk14UWl4RFFVRk5MRWxCUVVsNVFpeEZRVUZQUml4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWR3UkN4RFFVRkRPMEZCUVVFc1RVRkJTenRCUVVONlNDeGxRVUZUZFVRc1JVRkJVWFJETEVkQlFVODdRVUZCUlN4UlFVRkJiME1zUlVGQlR5eFJRVUZSY0VNc1EwRkJTenRCUVVGQkxFMUJRVWs3UVVGRGJFUXNaVUZCVTFrc1JVRkJUMW9zUjBGQlR6dEJRVUZGTEZGQlFVRnZReXhGUVVGUExGTkJRVk53UXl4RFFVRkxPMEZCUVVFc1RVRkJTVHRCUVVOc1JDeGxRVUZUY1VNc1JVRkJUemRETEVkQlFVY3hRaXhIUVVGSE8wRkJRVVVzVVVGQlNUQkNMRVZCUVVVeFFpeERRVUZETEVkQlFVZHhSU3hGUVVGRkxFMUJRVXNzUjBGQlNVRXNSVUZCUlN4VlFVRlJReXhGUVVGUFJDeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVkQkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkJMRTFCUVVrN1FVRkJRU3hKUVVNeFJpeEhRVVZKZEVZc1MwRkJiVUlzVTBGQlZYbEZMRWRCUVVjN1FVRkROVUlzVlVGQlNXaEVMRWRCUVVjN1FVRkRVQ3hoUVVGUFFTeEpRVUZKTEVOQlFVRXNSMEZCU1RaRExFVkJRVXNzVFVGQlRTeEhRVUZIUVN4RlFVRkxMRk5CUVZNc1UwRkJWVEZETEVkQlFVYzdRVUZCUlN4alFVRk5RVHRCUVVGQkxFMUJRVVVzUTBGQlJTeEhRVUZITUVNc1JVRkJTeXhSUVVGUkxFZEJRVWMzUXl4RlFVRkZMRTlCUVU4c1VVRkJVU3hKUVVGSkxGZEJRVms3UVVGQlJTeGxRVUZQTzBGQlFVRXNUVUZCVHl4SFFVRkZRVHRCUVVNeFNTeGxRVUZUTmtNc1JVRkJTelZETEVkQlFVZHBRaXhIUVVGSE8wRkJRVVVzVVVGQlFXeENMRVZCUVVWRExFTkJRVU1zU1VGQlNTdERMRVZCUVVVdlF5eERRVUZETEVsQlFVa3NVMEZCVlZRc1IwRkJSenRCUVVGRkxHdENRVUZSTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1QwRkJUMjVDTEVWQlFWRXlSU3hGUVVGRkwwTXNRMEZCUXl4RlFVRkZWQ3hEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVkQlFVOHNTVUZCUnpCQ0xFbEJRVWxCTEVWQlFVVXhRaXhEUVVGRExFbEJRVWxCTzBGQlFVRXNVVUZCUlN4SlFVRkxNRUk3UVVGQlFTeE5RVUZKTzBGQlFVRXNTVUZET1Vrc1IwRkZTVEZETEVsQlFXZENMRk5CUVZWM1JTeEhRVUZITzBGQlEzcENMRlZCUVVrc1EwRkJReXhQUVVGUE8wRkJRV1VzWTBGQlRTeEpRVUZKTEZWQlFWVXNjME5CUVhORE8wRkJRM0pHTEZWQlFVbEVMRWxCUVVsRExFVkJRVVVzVDBGQlR5eGhRVUZoTEVkQlFVZG9SRHRCUVVOcVF5eGhRVUZQSzBNc1NVRkJTVUVzUlVGQlJTeExRVUZMUXl4RFFVRkRMRXRCUVV0QkxFbEJRVWtzVDBGQlQyaEdMRXRCUVdFc1lVRkJZVUVzUlVGQlUyZEdMRU5CUVVNc1NVRkJTVUVzUlVGQlJTeFBRVUZQTEZGQlFWRXNSVUZCUXl4SFFVRkphRVFzU1VGQlNTeERRVUZGTEVkQlFVVTJReXhGUVVGTExFMUJRVTBzUjBGQlIwRXNSVUZCU3l4UFFVRlBMRWRCUVVkQkxFVkJRVXNzVVVGQlVTeEhRVUZITjBNc1JVRkJSU3hQUVVGUExHRkJRV0VzU1VGQlNTeFhRVUZaTzBGQlFVVXNaVUZCVHp0QlFVRkJMRTFCUVVzc1IwRkJTVUU3UVVGRE9VMHNaVUZCVXpaRExFVkJRVXMxUXl4SFFVRkhPMEZCUVVVc1VVRkJRVVFzUlVGQlJVTXNRMEZCUXl4SlFVRkpLME1zUlVGQlJTOURMRU5CUVVNc1MwRkJTeXhUUVVGVlZDeEhRVUZITzBGQlFVVXNhVUpCUVU4c1NVRkJTU3hSUVVGUkxGTkJRVlUyUXl4SFFVRlRReXhIUVVGUk8wRkJRVVVzV1VGQlFUbERMRWxCUVVsM1JDeEZRVUZGTDBNc1EwRkJReXhGUVVGRlZDeERRVUZETEVkQlFVZDFSU3hGUVVGUE1VSXNSMEZCVTBNc1IwRkJVVGxETEVWQlFVVXNUVUZCVFVFc1JVRkJSU3hMUVVGTE8wRkJRVUVzVlVGQlJTeERRVUZGTzBGQlFVRXNVVUZCU1R0QlFVRkJMRTFCUVVjN1FVRkRhRXNzWlVGQlUzVkZMRVZCUVU4eFFpeEhRVUZUUXl4SFFVRlJNME1zUjBGQlIwZ3NSMEZCUnp0QlFVRkZMR2RDUVVGUkxGRkJRVkZCTEVOQlFVTXNSVUZCUlN4TFFVRkxMRk5CUVZOQkxFZEJRVWM3UVVGQlJTeFZRVUZCTmtNc1JVRkJVU3hGUVVGRkxFOUJRVTgzUXl4SFFVRkhMRTFCUVUxSExFVkJRVU1zUTBGQlJUdEJRVUZCTEZGQlFVVXNSMEZCU1RKRExFTkJRVTA3UVVGQlFTeE5RVUZKTzBGQlFVRXNTVUZEY0Vrc1IwRkZTVGRFTEVsQlFYVkNMRk5CUVZWM1JpeEhRVUZSUXl4SFFVRkxPMEZCUXpGRExHRkJRVWtzVDBGQlR5eHBRa0ZCYTBJc1QwRkJUeXhsUVVGbFJDeEhRVUZSTEU5QlFVOHNSVUZCUlN4UFFVRlBReXhGUVVGSExFTkJRVVVzU1VGQldVUXNSVUZCVHl4TlFVRk5ReXhIUVVOc1IwUTdRVUZCUVN4SlFVTm1PMEZCUlVrc1VVRkJTVVVzUzBGQmNVSXNUMEZCVHl4VFFVRlZMRk5CUVZOdVFpeEhRVUZIZUVRc1IwRkJSenRCUVVOeVJDeGhRVUZQTEdWQlFXVjNSQ3hIUVVGSExGZEJRVmNzUlVGQlJTeFpRVUZaTEVsQlFVMHNUMEZCVDNoRUxFVkJRVU1zUTBGQlJUdEJRVUZCTEVsQlF6RkZMRWxCUVZNc1UwRkJVM2RFTEVkQlFVZDRSQ3hIUVVGSE8wRkJRMmhDTEUxQlFVRjNSQ3hGUVVGRkxGVkJRV0Y0UkR0QlFVRkJMRWxCUTNaQ08wRkJSVWtzU1VGQlFXUXNTMEZCWlN4VFFVRlZNRVlzUjBGQlN6dEJRVU14UWl4VlFVRkpRU3hMUVVGUFFTeEZRVUZKTzBGQlFWa3NaVUZCVDBFN1FVRkRiRU1zVlVGQlNUVkRMRWxCUVZNc1EwRkJRVHRCUVVOaUxGVkJRVWswUXl4TFFVRlBPMEZCUVUwc2FVSkJRVk51UWl4TFFVRkxiVUk3UVVGQlN5eFZRVUZKYmtJc1RVRkJUU3hoUVVGaExFOUJRVThzVlVGQlZTeGxRVUZsTEV0QlFVdHRRaXhIUVVGTGJrSXNRMEZCUXl4TFFVRkhiRVVzUjBGQlowSjVReXhIUVVGUk5FTXNSMEZCUzI1Q0xFTkJRVU03UVVGRGRra3NZVUZCUVd0Q0xFZEJRVzFDTTBNc1IwRkJVVFJETEVOQlFVY3NSMEZEZGtJMVF6dEJRVUZCTEVsQlEyWXNSMEZGU1RkRExFdEJRV3RDTEZOQlFWVjVSaXhIUVVGTE8wRkJRemRDTEdGQlFWRkJMRXRCUVU5QkxFVkJRVWtzWVVGQlkwRXNTVUZCVFN4RlFVRkZMRk5CUVZkQk8wbEJRelZFTEVkQlJVbDRSaXhMUVVGNVFpeFRRVUZWZVVZc1IwRkJWVU1zUjBGQlQyNUVMRWRCUVUxRUxFZEJRVWM3UVVGRGVrUXNWVUZCU1VNc1RVRkJVeXhQUVVGUExFTkJRVU5FTzBGQlFVY3NZMEZCVFN4SlFVRkpMRlZCUVZVc0swTkJRU3RETzBGQlF6TkdMRlZCUVVrc1QwRkJUMjlFTEV0QlFWVXNZVUZCWVVRc1RVRkJZVU1zUzBGQlV5eERRVUZEY0VRc1NVRkJTU3hEUVVGRGIwUXNSVUZCVFN4SlFVRkpSQ3hEUVVGUk8wRkJRVWNzWTBGQlRTeEpRVUZKTEZWQlFWVXNNRVZCUVRCRk8wRkJRMnBNTEdGQlFVOXNSQ3hOUVVGVExFMUJRVTFFTEVsQlFVbERMRTFCUVZNc1RVRkJUVVFzUlVGQlJTeExRVUZMYlVRc1EwRkJVU3hKUVVGSmJrUXNTVUZCU1VFc1JVRkJSU3hSUVVGUmIwUXNSVUZCVFN4SlFVRkpSQ3hEUVVGUk8wRkJRVUVzU1VGRGNFY3NSMEZGU1hoR0xFdEJRWGxDTEZOQlFWVjNSaXhIUVVGVlF5eEhRVUZQTlVNc1IwRkJUMUFzUjBGQlRVUXNSMEZCUnp0QlFVTm9SU3hWUVVGSlF5eE5RVUZUTzBGQlFVc3NZMEZCVFN4SlFVRkpMRlZCUVZVc1owTkJRV2RETzBGQlEzUkZMRlZCUVVsQkxFMUJRVk1zVDBGQlR5eERRVUZEUkR0QlFVRkhMR05CUVUwc1NVRkJTU3hWUVVGVkxDdERRVUVyUXp0QlFVTXpSaXhWUVVGSkxFOUJRVTl2UkN4TFFVRlZMR0ZCUVdGRUxFMUJRV0ZETEV0QlFWTXNRMEZCUTNCRUxFbEJRVWtzUTBGQlEyOUVMRVZCUVUwc1NVRkJTVVFzUTBGQlVUdEJRVUZITEdOQlFVMHNTVUZCU1N4VlFVRlZMSGxGUVVGNVJUdEJRVU5vVEN4aFFVRlJiRVFzVFVGQlV5eE5RVUZOUkN4RlFVRkZMRXRCUVV0dFJDeEhRVUZWTTBNc1EwRkJTeXhKUVVGSlVpeEpRVUZKUVN4RlFVRkZMRkZCUVZGUkxFbEJRVkUwUXl4RlFVRk5MRWxCUVVsRUxFZEJRVlV6UXl4RFFVRkxMRWRCUVVsQk8wRkJRVUVzU1VGRE5VY3NSMEZGU1RWRExFdEJRWGRDTEZOQlFWVjNSaXhIUVVGUFJDeEhRVUZWTzBGQlF5OURMRlZCUVVsQkxFMUJRV0VzVVVGQlV5eFBRVUZQUVN4TFFVRmhMRmxCUVZrc1QwRkJUMEVzUzBGQllUdEJRVUZoTEdOQlFVMHNTVUZCU1N4VlFVRlZMSGREUVVGM1F6dEJRVU4yU2l4aFFVRlBMRTlCUVU5RExFdEJRVlVzWVVGQllVUXNUVUZCWVVNc1NVRkJVVUVzUlVGQlRTeEpRVUZKUkN4RFFVRlJPMEZCUVVFc1NVRkRjRVlzUjBGRlNUVkZMRVZCUVZNc1lVRkJZWFJETEVOQlFWTXNSMEZETDBKelF5eEZRVUZUTEZsQlFWbHlReXhEUVVGUkxFZEJRemRDY1VNc1JVRkJVeXhWUVVGVmNFTXNRMEZCVFN4SFFVTjZRbTlETEVWQlFWTXNZMEZCWTI1RExFTkJRVlVzUjBGRGFrTnRReXhGUVVGVExGZEJRVmRzUXl4RFFVRlBMRWRCUXpOQ2EwTXNSVUZCVXl4blFrRkJaMEpxUXl4RFFVRlpMRWRCUTNKRGFVTXNSVUZCVXl4eFFrRkJjVUpvUXl4RFFVRnBRaXhIUVVNdlEyZERMRVZCUVZNc1lVRkJZUzlDTEVOQlFWTXNSMEZETDBJclFpeEZRVUZUTEhGQ1FVRnhRamxDTEVOQlFXbENMRWRCUXk5RE9FSXNSVUZCVXl4alFVRmpOMElzUTBGQlZTeEhRVU5xUXpaQ0xFVkJRVk1zWVVGQllUVkNMRU5CUVZNc1IwRkRMMEkwUWl4RlFVRlRMR1ZCUVdVelFpeERRVUZYTEVkQlEyNURNa0lzUlVGQlV5eG5Ra0ZCWjBJeFFpeERRVUZaTEVkQlEzSkRNRUlzUlVGQlV5eHRRa0ZCYlVKV0xFVkJRV1VzUjBGRE0wTlZMRVZCUVZNc1dVRkJXWHBDTEVOQlFWRXNSMEZETjBKNVFpeEZRVUZUTEZWQlFWVjRRaXhEUVVGTkxFZEJRM3BDZDBJc1JVRkJVeXhaUVVGWmRrSXNRMEZCVVN4SFFVTTNRblZDTEVWQlFWTXNhMEpCUVd0Q2RFSXNRMEZCWXl4SFFVTjZRM05DTEVWQlFWTXNhVUpCUVdsQ2NrSXNRMEZCWVN4SFFVTjJRM0ZDTEVWQlFWTXNWMEZCVjNCQ0xFTkJRVThzUjBGRE0wSnZRaXhGUVVGVExHOUNRVUZ2UW01Q0xFTkJRV2RDTEVkQlF6ZERiVUlzUlVGQlV5eHZRa0ZCYjBKc1FpeEZRVUZuUWl4SFFVTTNRMnRDTEVWQlFWTXNhVUpCUVdsQ2FrSXNRMEZCWVN4SFFVTjJRMmxDTEVWQlFWTXNkMEpCUVhkQ2FFSXNRMEZCYjBJc1IwRkRja1JuUWl4RlFVRlRMR2RDUVVGblFtWXNSVUZCV1N4SFFVTnlRMlVzUlVGQlV5eHRRa0ZCYlVKa0xFVkJRV1VzUjBGRE0wTmpMRVZCUVZNc01FSkJRVEJDWWl4RlFVRnpRaXhIUVVONlJHRXNSVUZCVXl3d1FrRkJNRUphTEVWQlFYTkNMRWRCUTNwRVdTeEZRVUZUTEhsQ1FVRjVRbGdzUlVGQmNVSTdRVUZCUVN4RlFVTXpSQ3hEUVVGRE96czdRVU01VjAwc1RVRkJUWGxHTEVWQlFYbENPMEZCUVVFc1JVRkRiRU1zWTBGQll6dEJRVVZXTEZOQlFVc3NhVU5CUVdsRExHOUNRVUZKTzBWQlF6ZERPMEZCUVVFc1JVRkRSQ3h6UWtGQmMwSTdRVUZEYkVJc1ZVRkJUU3hKUVVGSkxFMUJRVTBzYlVaQlFXMUdPMEZCUVVFc1JVRkRkRWM3UVVGQlFTeEZRVU5FTEdsQ1FVRnBRa01zUjBGQllVTXNSMEZCVXp0QlFVTnVReXhSUVVGSkxFTkJRVU5FTzBGQlEwUXNXVUZCVFN4SlFVRkpMRTFCUVUwc01rTkJRVEpETzBGQlJTOUVMRkZCUVVrc1EwRkJRME03UVVGRFJDeFpRVUZOTEVsQlFVa3NUVUZCVFN4elEwRkJjME03UVVGRk1VUXNWVUZCVFVNc1NVRkJORUpHTEVWQlFWa3NUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVNeFJDeFJRVUZKZUVZc1NVRkJWU3hMUVVGTExDdENRVUVyUWl4SlFVRkpNRVlzUTBGQmVVSTdRVUZETDBVc1VVRkJTVEZHTzBGQlEwRXNZVUZCVDBFc1JVRkJVU3hwUWtGQmFVSXdSaXhIUVVFeVFrUXNRMEZCVHp0QlFVVjBSU3hWUVVGTlJTeEpRVUZ4UWtRc1JVRkJNRUlzVVVGQlVTeGhRVUZoTEVWQlFVVTdRVUZGTlVVc1VVRkVRVEZHTEVsQlFWVXNTMEZCU3l3clFrRkJLMElzU1VGQlNUSkdMRU5CUVd0Q0xFZEJRMmhGTTBZN1FVRkRRU3hoUVVGUFFTeEZRVUZSTEdsQ1FVRnBRakpHTEVkQlFXOUNSaXhEUVVGUE8wRkJSUzlFTEZWQlFVMHNTVUZCU1N4TlFVRk5MR2RDUVVGblFrVXNiVVJCUVc5Rk8wRkJRVUVzUlVGRGRrYzdRVUZEVER0QlFVVkJTaXhGUVVGNVFpeHJRa0ZCYTBJc1NVRkJTVUVzUlVGQk1FSTdRVU12UW14RkxFMUJRVTFMTEVkQlFYTkNPMEZCUVVFc1JVRkRMMElzYzBKQlFYTkNPMEZCUTJ4Q0xGZEJRVThzUzBGQlN5eFZRVUZWTzBWQlEzcENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZQUkN4WlFVRlpReXhIUVVGWFF5eEhRVUZYUXl4SFFVRlZPMEZCU1hoRExGRkJTRUVzUzBGQlN5eFpRVUZaUml4SFFVTnFRaXhMUVVGTExGbEJRVmxETEVkQlEycENMRXRCUVVzc1YwRkJWME1zUjBGRFdpeERRVUZEUmp0QlFVTkVMRmxCUVUwc1NVRkJTU3hOUVVGTkxDdENRVUVyUWp0QlFVRkJMRVZCUlhSRU8wRkJRVUVzUlVGRFJDeHBRa0ZCYVVKTUxFZEJRV0ZETEVkQlFWTTdRVUZEYmtNc1ZVRkJUVThzU1VGQlR5eExRVUZMTEZWQlFWVXNhVUpCUVdsQ1VpeEhRVUZoUXl4RFFVRlBMRWRCUXpORVVTeEpRVUZwUWtRc1JVRkJTeXd5UWtGRGRFSkZMRWxCUVdkQ1JpeEZRVUZMTzBGQlF6TkNMRmRCUVVGQkxFVkJRVXNzTkVKQlFUUkNMRU5CUVVOMFJDeE5RVUZWTzBGQlEzaERMRmRCUVVzc1lVRkJZU3hMUVVGTExGVkJRVlZCTEVOQlFVc3NSMEZEZEVOMVJDeExRVUZyUWtFc1JVRkJaWFpFTEVOQlFVczdRVUZCUVN4SlFVTnNSQ3hIUVVOUmMwUXNSVUZCU3l3eVFrRkJNa0lzUTBGQlEzUkVMRTFCUVZVN1FVRkRka01zVjBGQlN5eFpRVUZaTEV0QlFVc3NVMEZCVTBFc1EwRkJTeXhIUVVOd1EzZEVMRXRCUVdsQ1FTeEZRVUZqZUVRc1EwRkJTenRCUVVGQkxFbEJRMmhFTEVkQlEyVnpSRHRCUVVGQkxFVkJRMVk3UVVGRFREdEJRMmhEVHl4TlFVRk5SeXhIUVVGdFF6dEJRVUZCTEVWQlF6VkRMR05CUVdNN1FVRkZWaXhUUVVGTExHbERRVUZwUXl4dlFrRkJTVHRGUVVNM1F6dEJRVUZCTEVWQlEwUXNjMEpCUVhOQ08wRkJRMnhDTEZWQlFVMHNTVUZCU1N4TlFVRk5MRzFHUVVGdFJqdEJRVUZCTEVWQlEzUkhPMEZCUVVFc1JVRkRSQ3gxUWtGQmRVSllMRWRCUVdFN1FVRkRhRU1zVVVGQlNTeERRVUZEUVR0QlFVTkVMRmxCUVUwc1NVRkJTU3hOUVVGTkxESkRRVUV5UXp0QlFVVXZSQ3hWUVVGTlJTeEpRVUUwUWtZc1JVRkJXU3hOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlF6RkVMRkZCUVVsNFJpeEpRVUZWTEV0QlFVc3NLMEpCUVN0Q0xFbEJRVWt3Uml4RFFVRjVRanRCUVVNdlJTeFJRVUZKTVVZN1FVRkRRU3hoUVVGUFFTeEZRVUZSTEhWQ1FVRjFRakJHTEVOQlFYbENPMEZCUlc1RkxGVkJRVTFETEVsQlFYRkNSQ3hGUVVFd1FpeFJRVUZSTEdGQlFXRXNSVUZCUlR0QlFVVTFSU3hSUVVSQk1VWXNTVUZCVlN4TFFVRkxMQ3RDUVVFclFpeEpRVUZKTWtZc1EwRkJhMElzUjBGRGFFVXpSanRCUVVOQkxHRkJRVTlCTEVWQlFWRXNkVUpCUVhWQ01rWXNRMEZCYTBJN1FVRkZOVVFzVlVGQlRTeEpRVUZKTEUxQlFVMHNaMEpCUVdkQ1FTeDFSRUZCZDBVN1FVRkJRU3hGUVVNelJ6dEJRVU5NTzBGQlJVRlJMRWRCUVcxRExHdENRVUZyUWl4SlFVRkpRU3hIUVVGdlF6dEJRekZDZEVZc1RVRkJUVU1zUjBGQlowTTdRVUZCUVN4RlFVTjZReXh6UWtGQmMwSTdRVUZEYkVJc1YwRkJUeXhMUVVGTExGVkJRVlU3UlVGRGVrSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlVVUXNXVUZCV1ZBc1IwRkJWME1zUjBGQlYwTXNSMEZCVlUwc1IwRkJWVHRCUVV0c1JDeFJRVXBCTEV0QlFVc3NXVUZCV1ZJc1IwRkRha0lzUzBGQlN5eFpRVUZaUXl4SFFVTnFRaXhMUVVGTExGZEJRVmRETEVkQlEyaENMRXRCUVVzc1YwRkJWMDBzUjBGRFdpeERRVUZEVWp0QlFVTkVMRmxCUVUwc1NVRkJTU3hOUVVGTkxDdENRVUVyUWp0QlFVRkJMRVZCUlhSRU8wRkJRVUVzUlVGRFJDeDFRa0ZCZFVKTUxFZEJRV0U3UVVGRGFFTXNWVUZCVFdNc1NVRkJVeXhMUVVGTExGVkJRVlVzZFVKQlFYVkNaQ3hEUVVGWExFZEJRekZFVXl4SlFVRnBRa3NzUlVGQlR5dzJRa0ZEZUVKS0xFbEJRV2RDU1N4RlFVRlBMRFJDUVVOMlFrTXNTVUZCWjBKRUxFVkJRVTg3UVVGRE4wSXNWMEZCUVVFc1JVRkJUeXc0UWtGQk9FSXNRMEZCUXpWRUxFMUJRVlU3UVVGRE5VTXNWMEZCU3l4aFFVRmhMRXRCUVVzc1ZVRkJWVUVzUTBGQlN5eEhRVU4wUTNWRUxFdEJRV3RDUVN4RlFVRmxka1FzUTBGQlN6dEJRVUZCTEVsQlEyeEVMRWRCUTFFMFJDeEZRVUZQTERaQ1FVRTJRaXhEUVVGRE5VUXNUVUZCVlR0QlFVTXpReXhYUVVGTExGbEJRVmtzUzBGQlN5eFRRVUZUUVN4RFFVRkxMRWRCUTNCRGQwUXNTMEZCYVVKQkxFVkJRV040UkN4RFFVRkxPMEZCUVVFc1NVRkRhRVFzUjBGRFVUUkVMRVZCUVU4c05rSkJRVFpDTEVOQlFVTTFSQ3hIUVVGUE5FUXNUVUZCVnp0QlFVTnVSQ3hYUVVGTExGbEJRVmtzUzBGQlN5eFRRVUZUTlVRc1IwRkJUelJFTEVOQlFVMHNSMEZETlVORExFdEJRV2xDUVN4RlFVRmpOMFFzUjBGQlR6UkVMRU5CUVUwN1FVRkJRU3hKUVVONFJDeEhRVU5sUVR0QlFVRkJMRVZCUTFZN1FVRkRURHRCUTNKRFFTeEpRVUZKUlR0QlFVTktMRTFCUVUxRExFdEJRVkVzU1VGQlNTeFhRVUZYTEVWQlFVVTdRVUZEYUVJc1UwRkJVME1zUzBGQlRUdEJRVVUxUWl4TlFVRkpMRU5CUVVOR0xFOUJSVWhCTEV0QlFXdENMRTlCUVU4c1UwRkJWeXhQUVVGbExFOUJRVThzYlVKQlFXMUNMRTlCUVU4c1owSkJRV2RDTEV0QlFVc3NUVUZCVFN4SFFVVXpSeXhEUVVGRFFUdEJRVU5JTEZWQlFVMHNTVUZCU1N4TlFVRk5MREJIUVVFd1J6dEJRVWs1U0N4VFFVRlBRU3hIUVVGblFrTXNSVUZCU3p0QlFVTTVRanRCUTFoQkxFMUJRVTFGTEVsQlFWa3NRMEZCUVR0QlFVVnNRaXhUUVVGVE0wWXNTVUZCU1N4SFFVRkhRU3hKUVVGSkxFdEJRVXNzUlVGQlJVRTdRVUZEZWtJc1JVRkJRVEpHTEVWQlFWVXNUVUZCVFROR0xFbEJRVWtzUzBGQlR5eFRRVUZUTEVWQlFVVXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVjelF5eFRRVUZUTkVZc1IwRkJaMEpETEVkQlFVdERMRWxCUVZNc1IwRkJSenRCUVVjdlF5eFZRVUZSU0N4RlFVRlZSU3hGUVVGSlF5eEpRVUZUTEVOQlFVTXNRMEZCUXl4SlFVRkpTQ3hGUVVGVlJTeEZRVUZKUXl4SlFVRlRMRU5CUVVNc1EwRkJReXhKUVVGSlNDeEZRVUZWUlN4RlFVRkpReXhKUVVGVExFTkJRVU1zUTBGQlF5eEpRVUZKU0N4RlFVRlZSU3hGUVVGSlF5eEpRVUZUTEVOQlFVTXNRMEZCUXl4SlFVRkpMRTFCUVUxSUxFVkJRVlZGTEVWQlFVbERMRWxCUVZNc1EwRkJReXhEUVVGRExFbEJRVWxJTEVWQlFWVkZMRVZCUVVsRExFbEJRVk1zUTBGQlF5eERRVUZETEVsQlFVa3NUVUZCVFVnc1JVRkJWVVVzUlVGQlNVTXNTVUZCVXl4RFFVRkRMRU5CUVVNc1NVRkJTVWdzUlVGQlZVVXNSVUZCU1VNc1NVRkJVeXhEUVVGRExFTkJRVU1zU1VGQlNTeE5RVUZOU0N4RlFVRlZSU3hGUVVGSlF5eEpRVUZUTEVOQlFVTXNRMEZCUXl4SlFVRkpTQ3hGUVVGVlJTeEZRVUZKUXl4SlFVRlRMRU5CUVVNc1EwRkJReXhKUVVGSkxFMUJRVTFJTEVWQlFWVkZMRVZCUVVsRExFbEJRVk1zUlVGQlJTeERRVUZETEVsQlFVbElMRVZCUVZWRkxFVkJRVWxETEVsQlFWTXNSVUZCUlN4RFFVRkRMRWxCUVVsSUxFVkJRVlZGTEVWQlFVbERMRWxCUVZNc1JVRkJSU3hEUVVGRExFbEJRVWxJTEVWQlFWVkZMRVZCUVVsRExFbEJRVk1zUlVGQlJTeERRVUZETEVsQlFVbElMRVZCUVZWRkxFVkJRVWxETEVsQlFWTXNSVUZCUlN4RFFVRkRMRWxCUVVsSUxFVkJRVlZGTEVWQlFVbERMRWxCUVZNc1JVRkJSU3hEUVVGRExFZEJRVWM3UVVGRGRtWTdRVU5vUWtFc1RVRkJUVU1zUzBGQllTeFBRVUZQTEZOQlFWY3NUMEZCWlN4UFFVRlBMR05CUVdNc1QwRkJUeXhYUVVGWExFdEJRVXNzVFVGQlRTeEhRVU4yUmtNc1MwRkJRVHRCUVVGQkxFVkJRMklzV1VGQlFVUTdRVUZEUmp0QlEwTkJMRk5CUVZORkxFZEJRVWRETEVkQlFWTkRMRWRCUVV0TUxFZEJRVkU3UVVGRGFFTXNUVUZCU1VVc1IwRkJUeXhqUVVGakxFTkJRVU5ITEV0QlFVOHNRMEZCUTBRN1FVRkRhRU1zVjBGQlQwWXNSMEZCVHp0QlFVZG9RaXhGUVVGQlJTeEpRVUZWUVN4TFFVRlhPMEZCUTNKQ0xGRkJRVTFGTEVsQlFVOUdMRVZCUVZFc1YwRkJWMEVzUlVGQlVTeFBRVUZQVWp0QlFVc3ZReXhOUVVoQlZTeEZRVUZMTEVOQlFVTXNTVUZCU1VFc1JVRkJTeXhEUVVGRExFbEJRVWtzUzBGQlR5eEpRVU16UWtFc1JVRkJTeXhEUVVGRExFbEJRVWxCTEVWQlFVc3NRMEZCUXl4SlFVRkpMRXRCUVU4c1MwRkZka0pFTEVkQlFVczdRVUZEVUN4SlFVRkJUQ3hKUVVGVFFTeExRVUZWTzBGQlJXNUNMR0ZCUVZNNVJpeEpRVUZKTEVkQlFVZEJMRWxCUVVrc1NVRkJTU3hGUVVGRlFUdEJRVU40UWl4TlFVRkJiVWNzUlVGQlNVd3NTVUZCVXpsR0xFTkJRVU1zU1VGQlNXOUhMRVZCUVV0d1J5eERRVUZETzBGQlJ6RkNMRmRCUVU5dFJ6dEJRVUZCTzBGQlIxUXNVMEZCVDFBc1IwRkJaMEpSTEVOQlFVazdRVUZETjBJN1FVTjRRazhzVFVGQlRVTXNSMEZCY1VJN1FVRkJRU3hGUVVNNVFpeGpRVUZqTzBGQlExWXNVMEZCU3l4blFrRkJaMElzYjBKQlFVa3NUMEZEZWtJc1MwRkJTeXhSUVVGUkxHOUNRVUZKTEU5QlEycENMRXRCUVVzc01FSkJRVEJDTEVsQlF5OUNMRXRCUVVzc01rSkJRVEpDTzBGQlFVRXNSVUZEYmtNN1FVRkJRU3hGUVVORUxFbEJRVWt2Uml4SFFVRkxPMEZCUTB3c1ZVRkJUV2RITEVsQlFWVXNTMEZCU3l4TlFVRk5MRWxCUVVsb1J5eERRVUZITzBGQlEyeERMRkZCUVVsblJ5eE5RVU5GTEV0QlFVc3NNa0pCUVRKQ1FTeEZRVUZSTEZkQlEzUkRMRU5CUVVNc1MwRkJTenRCUVVOV0xHRkJRVTlCTEVWQlFWRTdRVUZCUVN4RlFVZDBRanRCUVVGQkxFVkJRMFFzU1VGQlNXaEhMRWRCUVV0dlFpeEhRVUZQTzBGQlExb3NWVUZCVFRaRkxFbEJRV3RDTEV0QlFVc3NUVUZCVFN4SlFVRkpha2NzUTBGQlJ5eEhRVU53UTJ0SExFbEJRVFpGUkN4SFFVRm5RanRCUVVOdVJ5eEpRVUZKUVN4TFFVTkJRU3hGUVVGblFpeFJRVUZSTjBVc1IwRkRlRUkyUlN4RlFVRm5RaXhWUVVGVkxFdEJRVXNzTWtKQlJ5OUNMRXRCUVVzc1RVRkJUU3hKUVVGSmFrY3NSMEZCU3p0QlFVRkJMRTFCUTJoQ0xGTkJRVk1zUzBGQlN6dEJRVUZCTEUxQlEyUXNUMEZCUVc5Q08wRkJRVUVzU1VGRGFFSXNRMEZCWVN4SFFVVk1MRXRCUVVzc1kwRkJZeXhSUVVGUkxFTkJRVU1yUlN4TlFVRlJPMEZCUTJoRExFMUJRVUZCTEVWQlFVbHVSeXhIUVVGTGEwY3NSMEZCVlRsRkxFTkJRVXM3UVVGQlFTeEpRVU53UXl4RFFVRlRPMEZCUVVFc1JVRkRTanRCUVVGQkxFVkJRMFFzV1VGQldUdEJRVU5TTEZGQlFVbG5SaXhKUVVGclFpeERRVUZETEVkQlFVY3NTMEZCU3l4TlFVRk5MRkZCUVZNc1EwRkJRVHRCUVVNNVF5eFhRVUZKTEV0QlFVc3NORUpCUTB4QkxFbEJRV3RDUVN4RlFVRm5RaXhQUVVGUExFTkJRVU1zUTBGQlEzSkdMRWRCUVVjM1FpeERRVUZETEUxQlFVMUJMRVZCUVVVc1QwRkJUeXhKUVVVelJHdElMRVZCUVdkQ0xFbEJRVWtzUTBGQlF5eERRVUZEY0Vjc1IwRkJTMjlDTEVOQlFVc3NUMEZETlVJc1JVRkJSU3hMUVVGQmNFSXNSMEZCU3l4UFFVRkJiMElzU1VGRGFrSTdRVUZCUVN4RlFVTktPMEZCUVVFc1JVRkRSQ3h6UTBGQmMwTTdRVUZEYkVNc1ZVRkJUV2xHTEVsQlFVOHNRMEZCUVR0QlFVTmlMR1ZCUVZjc1EwRkJRM0pITEVkQlFVdHpSeXhEUVVGTExFdEJRVXNzUzBGQlN6dEJRVU0xUWl4TlFVRkpRU3hGUVVGTkxGZEJRVmNzUTBGQlEwRXNSVUZCVFN4VFFVTjRRa1FzUlVGQlN5eExRVUZMY2tjc1EwRkJSenRCUVVkeVFpeFhRVUZQY1VjN1FVRkJRU3hGUVVOV08wRkJRVUVzUlVGRFJDeFZRVUZWUlN4SFFVRlZReXhIUVVGblFqdEJRVU5vUXl4UlFVRkpMRU5CUVVORU8wRkJRMFFzV1VGQlRTeEpRVUZKTEUxQlFVMHNPRUpCUVRoQ08wRkJSV3hFTEZkQlFVRkRMRWxCUVdsQ1FTeExRVUYzUlVNc1RVRkRla1lzUzBGQlN5eGpRVUZqTEVsQlFVbEVMRWRCUVdkQ1JDeERRVUZSTEVkQlEzaERRenRCUVVGQkxFVkJRMVk3UVVGQlFTeEZRVU5FTEZsQlFWbEJMRWRCUVdkQ08wRkJRM2hDTEZOQlFVc3NZMEZCWXl4UFFVRlBRU3hEUVVGak8wRkJRVUVzUlVGRE0wTTdRVUZCUVN4RlFVTkVMRkZCUVZFN1FVRkRTaXhUUVVGTExFMUJRVTA3UlVGRFpEdEJRVUZCTEVWQlEwUXNTVUZCU1N4M1FrRkJkMEp3Uml4SFFVRlBPMEZCUXk5Q0xGTkJRVXNzTWtKQlFUSkNRU3hIUVVOb1F5eExRVUZMTEUxQlFVMHNVVUZCVVN4RFFVRkRiRU1zVFVGQlRUdEJRVU4wUWl4TlFVRkJRU3hGUVVGRkxGVkJRVlVzUTBGQlEydERPMEZCUVVFc1NVRkRla0lzUTBGQlV6dEJRVUZCTEVWQlEwbzdRVUZCUVN4RlFVTkVMRWxCUVVrc01FSkJRVEJDTzBGQlF6RkNMRmRCUVU4c1MwRkJTenRCUVVGQkxFVkJRMlk3UVVGRFREdEJRekZGVHl4TlFVRk5jMFlzUjBGQk5FSTdRVUZCUVN4RlFVTnlReXh4UWtGQmNVSTdRVUZEYWtJc1YwRkJUeXhKUVVGSldDeEhRVUZ2UWp0QlFVRkJMRVZCUTJ4RE8wRkJRMHc3UVVOTVR5eE5RVUZOV1N4SFFVRTJRanRCUVVNeFF6dEJRVU5CUVN4SFFVRTJRaXhYUVVGWExFbEJRVWxFTEVkQlFUWkNPMEZEUkd4RkxFMUJRVTFGTEZkQlFYRkRkRU1zUjBGQmMwSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTM0JGTEZsQlFWbDFReXhIUVVGVk8wRkJRMnhDTEZWQlFVMUJMRWRCUVZVc1EwRkJRM3BHTEUxQlFWVTdRVUZEZGtJc1dVRkJUVEJHTEVsQlFXTXhSanRCUVVOd1FpeE5RVUZKTUVZc1MwRkJaVUVzUlVGQldTeHBRa0ZETTBKQkxFVkJRVmtzWVVGQllTd3dRa0ZCTUVJN1FVRkJRU3hKUVVVeFJDeEhRVUZGTEVOQlFVTXhSaXhOUVVGVk8wRkJRMVlzV1VGQlRUQkdMRWxCUVdNeFJqdEJRVU53UWl4TlFVRkpNRVlzUzBGQlpVRXNSVUZCV1N4cFFrRkRNMEpCTEVWQlFWa3NZVUZCWVN3d1FrRkJNRUk3UVVGQlFTeEpRVVZ1UlN4RFFVRlRPMEZCUVVFc1JVRkRTanRCUVVOTU8wRkRiRUpQTEUxQlFVMURMRmRCUVc5RWFrTXNSMEZCWjBNN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlN6ZEdMRmxCUVZrclFpeEhRVUZWTzBGQlEyeENMRlZCUVUxQkxFZEJRVlVzUTBGQlEzcEdMRTFCUVZVN1FVRkRka0lzV1VGQlRUQkdMRWxCUVdNeFJqdEJRVU53UWl4TlFVRkpNRVlzUzBGQlpVRXNSVUZCV1N4cFFrRkRNMEpCTEVWQlFWa3NZVUZCWVN3d1FrRkJNRUk3UVVGQlFTeEpRVVV4UkN4SFFVRkZMRU5CUVVNeFJpeE5RVUZWTzBGQlExWXNXVUZCVFRCR0xFbEJRV014Ump0QlFVTndRaXhOUVVGSk1FWXNTMEZCWlVFc1JVRkJXU3hwUWtGRE0wSkJMRVZCUVZrc1lVRkJZU3d3UWtGQk1FSXNTVUZEYmtSQkxFVkJRVmtzWVVGQllTd3dRa0ZCTUVJN1FVRkJRU3hKUVVWdVJTeEhRVUZYTEVOQlFVTXhSaXhIUVVGUE5FUXNUVUZCVnp0QlFVTnNRaXhaUVVGTk9FSXNTVUZCWXpGR08wRkJRM0JDTEZWQlFVa3dSaXhMUVVGbFFTeEZRVUZaTEdOQlFXTTdRVUZEZWtNc1kwRkJUVlFzU1VGQlQxTXNSVUZCV1N4aFFVRmhMRzlEUVVGdFF6dEJRVU42UlN4dFFrRkJWemxITEV0QlFVOXhSenRCUVVOa0xGVkJRVUZ5UWl4RlFVRlBMR1ZCUVdWb1JpeERRVUZITzBGQlFVRTdRVUZCUVN4SlFVYzNReXhEUVVGVE8wRkJRVUVzUlVGRFNqdEJRVU5NTzBGRGRrSlBMRk5CUVZOblNDeEhRVUV3UWtNc1IwRkJUVHRCUVVNMVF5eE5RVUZKTEVOQlFVTkJPMEZCUTBRc1ZVRkJUU3hKUVVGSkxFMUJRVTBzYTBKQlFXdENPMEZCUTNSRExGRkJRVTFETEVsQlFXRXNTVUZCU1VRN1FVRkRka0lzUlVGQlFYQkRMRWRCUVcxRExHZENRVUZuUWl3clFrRkJLMElzU1VGQlNYRkRMRVZCUVZjc2IwSkJRVzFDTEVkQlFVbEJMRU5CUVZVN1FVRkRkRWs3UVVGTFR5eFRRVUZUUXl4SFFVRTBRa1lzUjBGQlRUdEJRVU01UXl4TlFVRkpMRU5CUVVOQk8wRkJRMFFzVlVGQlRTeEpRVUZKTEUxQlFVMHNhMEpCUVd0Q08wRkJRM1JETEZGQlFVMUhMRWxCUVdVc1NVRkJTVWc3UVVGRGVrSXNSVUZCUVdoRUxFVkJRWGxDTEdkQ1FVRm5RaXdyUWtGQkswSXNTVUZCU1cxRUxFVkJRV0VzYjBKQlFXMUNMRWRCUVVsQkxFTkJRVms3UVVGRGFFazdRVUZOVHl4VFFVRlRReXhIUVVGblJFTXNSMEZCVlR0QlFVTjBSU3hOUVVGSkxFTkJRVU5CTzBGQlEwUXNWVUZCVFN4SlFVRkpMRTFCUVUwc05FSkJRVFJDTzBGQlEyaEVMRTFCUVVsd1J5eEpRVUZUYjBjN1FVRkRZaXhUUVVGSlFTeGhRVUZ2UW5wRExFdEJRM0JDTUVNc1IwRkJNa05FTEVOQlFWRXNTVUZIYmtSd1J5eEpRVUZUTEVsQlFVazJSaXhIUVVFMFEwOHNRMEZCVVN4SFFVVnlSVU1zUjBGQk1rTXhReXhIUVVGdFF5eGxRVUZsTEVkQlF6ZEdNa01zUjBGQmRVTjJSQ3hGUVVGNVFpeGxRVUZsTEVkQlEzaEZMME03UVVGRFdEdEJRVTFQTEZOQlFWTjFSeXhIUVVGelEwZ3NSMEZCVlR0QlFVTTFSQ3hOUVVGSkxFTkJRVU5CTzBGQlEwUXNWVUZCVFN4SlFVRkpMRTFCUVUwc05FSkJRVFJDTzBGQlEyaEVMRTFCUVVsd1J5eEpRVUZUYjBjN1FVRkRZaXhUUVVGSlFTeGhRVUZ2UW5KRUxFbEJRM0JDZFVRc1IwRkJkVU5HTEVOQlFWRXNTVUZITDBOd1J5eEpRVUZUTEVsQlFVa3dSaXhIUVVFMlFsVXNRMEZCVVN4SFFVVjBSRVVzUjBGQmRVTjJSQ3hGUVVGNVFpeGxRVUZsTEVkQlEzaEZMME03UVVGRFdEdEJRVU5CTEZOQlFWTnpSeXhIUVVGMVEwVXNSMEZCVlR0QlFVTjBSQ3hoUVVGWExFTkJRVU12UlN4SFFVRkhla1FzUTBGQlF5eExRVUZMZDBrc1JVRkJVenRCUVVNeFFpeEpRVUZOZUVrc1lVRkJZVEJJTEUxQlEyWXhTQ3hoUVVGaEswVXNTMEZEWW5sRUxFVkJRVk1zSzBKQlFTdENMRWxCUVVrdlJTeEhRVUZITEVsQlFVbHBSU3hIUVVFMlFqRklMRU5CUVVNc1EwRkJRenRCUVVjNVJqdEJRVU5CTEZOQlFWTnhTU3hIUVVFeVEwY3NSMEZCVlR0QlFVTXhSQ3hoUVVGWExFTkJRVU12UlN4SFFVRkhla1FzUTBGQlF5eExRVUZMZDBrc1JVRkJVenRCUVVNeFFpeEpRVUZOZUVrc1lVRkJZVFpJTEUxQlEyWTNTQ3hoUVVGaE1rWXNUVUZEWWpaRExFVkJRVk1zSzBKQlFTdENMRWxCUVVrdlJTeEhRVUZITEVsQlFVbHZSU3hIUVVFMFF6ZElMRU5CUVVNc1EwRkJRenRCUVVjM1J6dEJRM3BGVHl4TlFVRk5lVWtzVlVGQmFVSXNUVUZCVFR0QlFVRkJMRVZCUTJoRExGbEJRVmxETEVkQlFWTTdRVUZEYWtJc1ZVRkJUVUVzUTBGQlR6dEJRVUZCTEVWQlEyaENPMEZCUTB3N1FVTktUeXhOUVVGTlF5eEhRVUZ6UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTEwwSXNXVUZCV1VNc1NVRkJaU3h2UWtGQlNTeFBRVUZQTzBGQlEyeERMRk5CUVVzc1pVRkJaVUVzUzBGQmEwVXNiMEpCUVVrN1JVRkROMFk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBRc2EwSkJRV3RDTzBGQlEyUXNWMEZCVHl4TlFVRk5MRXRCUVVzc1MwRkJTeXhaUVVGWk8wRkJRVUVzUlVGRGRFTTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMFFzWjBKQlFXZENRU3hIUVVGak8wRkJRekZDTEZOQlFVc3NaVUZCWlVFN1FVRkJRU3hGUVVOMlFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxSQ3hsUVVGbFF5eEhRVUZMTzBGQlEyaENMRkZCUVVsRE8wRkJRMG9zVVVGQlNTeERRVUZEUkR0QlFVTkVMR0ZCUVU4N1FVRkRXQ3hSUVVGSkxFdEJRVXNzWVVGQllTeFRRVUZUTzBGQlF6TkNMR0ZCUVU4N1FVRkRXQ3hWUVVGTlJTeEpRVUZuUWtZc1JVRkJTU3hOUVVGTkxFdEJRVXM3UVVGRGNrTXNVVUZCU1VVc1JVRkJZeXhWUVVGVkxFZEJRVWM3UVVGRE0wSXNXVUZCVFVNc1NVRkJUMFFzUlVGQll5eERRVUZETzBGQlF6VkNMRlZCUVVsRE8wRkJRMEVzWlVGQlR5eExRVUZMTEcxQ1FVRnRRa0VzUTBGQlNUdEJRVUZCTEdWQlIyeERMRU5CUVVOSUxFVkJRVWtzVjBGQlZ5eE5RVUZOTzBGQlJUTkNMR0ZCUVU4c1MwRkJTeXh0UWtGQmJVSkJMRU5CUVVjN1FVRkhkRU1zVjBGQlNTeFZRVUZWTEU5QlFVOHNXVUZCV1N4UFFVRlBMRk5CUVZNc1QwRkhkRU1zUzBGQlN5eGhRVUZoTEV0QlFVdERMRWxCUVVzc1QwRkJUeXhUUVVGVExGVkJRVlVzVVVGQlVVRXNUVUZCVHl4VFFVRlRMRk5CUVZOQkxFVkJRVWNzV1VGQlZ5eERRVUZGTEVsQlJUTkhPMEZCUVVFc1JVRkRWanRCUVVGQkxFVkJRMFFzYlVKQlFXMUNSU3hIUVVGTk8wRkJRM0pDTEZWQlFVMURMRWxCUVdORUxFVkJRVXNzVFVGQlRTeEhRVUZITzBGQlEyeERMRkZCUVVsRExFVkJRVmtzVlVGQlZTeEhRVUZITzBGQlEzcENMRmxCUVUxRExFbEJRVTlFTEVWQlFWa3NRMEZCUXp0QlFVTXhRaXhWUVVGSlF6dEJRVU5CTEdWQlFVOHNTMEZCU3l4aFFVRmhMRWxCUVVsQkxFVkJRVXNzV1VGQllTeERRVUZCTzBGQlFVRTdRVUZIZGtRc1YwRkJUenRCUVVGQkxFVkJRMVk3UVVGRFREdEJRemxFVHl4VFFVRlRReXhIUVVGcFFrNHNSMEZCU3p0QlFVTnNReXhOUVVGSkxFTkJRVU5CTEVWQlFVa3NhMEpCUVcxQ0xFVkJRVU1zVjBGQlZ5eFZRVUZWTEV0QlFVc3NRMEZCUTA4N1FVRkRjRVFzVlVGQlRTeEpRVUZKTEUxQlFVMHNORVJCUVRSRU8wRkJSWEJHTzBGQlEwRXNVMEZCVTBFc1MwRkJNa0k3UVVGRmFFTXNVMEZCVHl4VlFVRlZMRTlCUVU4c1dVRkJXU3hQUVVGUExGTkJRVk1zVTBGQlV5eFpRVUZoTEUxQlFVczdRVUZEYmtZN1FVTk1UeXhOUVVGTlF5eEhRVUUyUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZSZEVNc1dVRkJXVU1zUjBGQlVVTXNSMEZCWlVNc1IwRkJWVU1zUjBGQldUdEJRVWx5UkN4UlFVaEJMRXRCUVVzc1UwRkJVMGdzUjBGRFpDeExRVUZMTEdkQ1FVRm5Ra01zUjBGRGNrSXNTMEZCU3l4WFFVRlhReXhIUVVOYVJpeE5RVUZYTEZWQlFXRkJMRTFCUVZjN1FVRkRia01zV1VGQlRTeEpRVUZKTEUxQlFVMHNaME5CUVdkRE8wRkJSWEJFTEZGQlFVbERMRTFCUVd0Q0xGVkJRV0ZCTEUxQlFXdENPMEZCUTJwRUxGbEJRVTBzU1VGQlNTeE5RVUZOTEhWRFFVRjFRenRCUVVVelJDeFJRVUZKUXl4TlFVRmhSU3hIUVVGbExHdENRVU0xUWtZc1RVRkJZVVVzUjBGQlpUdEJRVU0xUWl4WlFVRk5MRWxCUVVrc1RVRkJUU3hyUkVGQmEwUTdRVUZGZEVVc1UwRkJTeXhaUVVGWkxFbEJRVWxtTEVkQlFYTkNZeXhEUVVGVk8wRkJRVUVzUlVGRGVFUTdRVUZCUVN4RlFVTkVMRzlDUVVGdlFrVXNSMEZGY0VKRExFZEJRV2xETzBGQlF6ZENMRlZCUVUxbUxFbEJRVTFqTEVWQlFWRTdRVUZEY0VJc1VVRkJTU3hEUVVGRFpDeExRVUZQTEVOQlFVTXNTMEZCU3l4VlFVRlZMR1ZCUVdWQkxFTkJRVWM3UVVGRE1VTXNZVUZCVHl4UlFVRlJPMEZCUjI1Q0xGbEJSRUZOTEVkQlFXbENUaXhEUVVGSExFZEJRMW9zUzBGQlN5eFZRVUZSTzBGQlFVRXNUVUZEYWtJc1MwRkJTMkVzUjBGQlpUdEJRVU5vUWl4UlFVRkJReXhGUVVGUkxGRkJRMGhrTEVWQlFVa3NVVUZCVVN4SFFVRkhMRTFCUVUwc1MwRkJTeXhOUVVGTkxFOUJRemRDTEV0QlFVc3NaMEpCUTB3c1RVRkRRU3hMUVVGTE8wRkJRMkk3UVVGQlFTeE5RVU5LTEV0QlFVdGhMRWRCUVdVN1FVRkRhRUlzVVVGQlNVTXNSVUZCVVN4UlFVRlJMRXRCUVVzc1lVRkJZU3hKUVVOc1EwRXNSVUZCVVN4UlFVRlJMRXRCUVVzc1lVRkJZU3hGUVVGRkxFdEJRVXNzUzBGQlN5eE5RVUZOTEVsQlIzQkVRU3hGUVVGUkxGRkJRVkVzUzBGQlN5eGhRVUZoTEVsQlFVa3NRMEZCUXl4TFFVRkxMRTFCUVUwN1FVRkZkRVE3UVVGQlFTeEpRVU5RTzBGQlEwUXNWMEZCVHl4UlFVRlJPMFZCUTJ4Q08wRkJRMHc3UVVGRlR5eEpRVUZKUkR0QlFVRkJMRU5CUTFZc1UwRkJWVUVzUjBGQlowSTdRVUZGZGtJc1JVRkJRVUVzUlVGQlpVRXNSVUZCWlN4cFFrRkJiMElzUTBGQlF5eEpRVUZKTEd0Q1FVVjJSRUVzUlVGQlpVRXNSVUZCWlN4VFFVRlpMRU5CUVVNc1NVRkJTVHRCUVVOdVJDeEhRVUZIUVN4UFFVRnRRa0VzUzBGQmFVSXNRMEZCUVN4RlFVRkhPMEZETjBSdVF5eE5RVUZOUnl4SFFVRm5RenRCUVVGQkxFVkJRM3BETEdOQlFXTTdRVUZEVml4VFFVRkxMSE5DUVVGelFpeERRVVV6UW1oSkxFZEJSVUZwU1N4TlFVTlhMRkZCUVZFN1JVRkZkRUk3UVVGRFREdEJRMVpQTEUxQlFVMURMRVZCUVhORE8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVc3ZReXhaUVVGWlF5eEhRVUZ4UWp0QlFVTTNRaXhUUVVGTExITkNRVUZ6UWtFc1IwRkRNMElzUzBGQlN5eHpRa0ZCYzBJc1QwRkJUMHdzUjBGQlUwTXNUVUZCYjBNN1FVRkRNMFVzVlVGQlNTeERRVUZEUkR0QlFVTkVMR05CUVUwc1NVRkJTU3hOUVVGTkxEWkNRVUUyUWp0QlFVOXFSQ3hWUVV4SlF5eExRVU5CUVN4RlFVRm5ReXhWUVVOb1EwUXNSVUZCVVN4UlFVRlJTU3hGUVVGelF5eHpRa0ZCYzBJc1MwRkROVVVzVDBGQlQwb3NSVUZCVVN4UlFVRlJTU3hGUVVGelF5eHpRa0ZCYzBJc1IwRkZia1lzUTBGQlEwb3NSVUZCVVN4WFFVTlVMRU5CUVVOQkxFVkJRVkVzVVVGQlVVa3NSVUZCYzBNc2MwSkJRWE5DTEVkQlFVYzdRVUZEYUVZc1kwRkJUVVVzU1VGQlVTeE5RVUZOTEV0QlFVc3NiMEpCUVc5Q0xITkNRVUZ6UWs0c1JVRkJVU3hMUVVGTFF5eERRVUVyUWp0QlFVTXZSeXhSUVVGTFJDeEZRVUZSTEZsQlExUkJMRVZCUVZFc1ZVRkJWU3hMUVVWc1FrMHNUVUZEUVU0c1JVRkJVU3hSUVVGUlNTeEZRVUZ6UXl4elFrRkJjMElzU1VGQlNTeERRVUZETEZWQlFWVkZMRWRCUVU4N1FVRkJRVHRCUVVGQkxFbEJSM1JJTzBGQlFVRXNSVUZEU3p0QlFVTk1PMEZCUTBGR0xFVkJRWE5ETEhsQ1FVRjVRanRCUTB4NFJDeEpRVUZKUnl4TFFVRmpMRTlCUVU4c1kwRkJaU3hYUVVONlF5eGhRVU5CTEU5QlFVOHNVVUZCVXl4WFFVTmFMRTlCUTBFc1QwRkJUeXhWUVVGWExGZEJRMlFzVTBGRFFTeFBRVUZQTEZWQlFWY3NWMEZEWkN4VFFVTkJMRU5CUVVVc1IwTnFRbFJETEV0QlFWVXNVME5CYWtKRExFdEJRVXM3UVVGcFFrWXNVMEZCVTBNc1IwRkJkMEpETEVkQlFWazdRVUZEYUVRc1RVRkJTVU1zU1VGQmJVSXNiMEpCUVVrc1NVRkJTU3hEUVVGRFJDeERRVUZWTEVOQlFVTXNSMEZEZGtORkxFbEJRVzFDTEc5Q1FVRkpMRTlCUTNaQ1F5eEpRVUZwUWtnc1JVRkJWeXhOUVVGTlJpeEZRVUZGTzBGQlEzaERMRTFCUVVrc1EwRkJRMHM3UVVGRlJDeFhRVUZQTEZkQlFWazdRVUZCUlN4aFFVRlBPMEZCUVVFN1FVRkZhRU1zVFVGQlNVTXNTVUZCYlVJN1FVRkJRU3hKUVVOdVFpeFBRVUZQTEVOQlFVTkVMRVZCUVdVc1EwRkJRenRCUVVGQkxFbEJRM2hDTEU5QlFVOHNRMEZCUTBFc1JVRkJaU3hEUVVGRE8wRkJRVUVzU1VGRGVFSXNUMEZCVHl4RFFVRkRRU3hGUVVGbExFTkJRVU03UVVGQlFTeEpRVU40UWl4WlFVRlpRU3hGUVVGbExFTkJRVU03UVVGQlFTeEZRVU53UXp0QlFVVkpMRTFCUVVsRExFVkJRV2xDTEdOQlFXTTdRVUZETDBJc1YwRkJUeXhUUVVGelFrTXNSMEZCWlR0QlFVTjRReXhoUVVGUFFTeE5RVUZyUWt3N1FVRkJRU3hKUVVOeVF6dEJRVVZKTEZkQlFWTk5MRVZCUVZFMVN5eEhRVUZITzBGQlEyaENMRmRCUVVGM1N5eEZRVUZwUWl4SlFVRkplRXNzUTBGQlF5eEhRVU5tTzBGQlFVRXNSVUZEVmp0QlFVTkVMRmRCUVZNMlN5eEZRVUZSTjBzc1IwRkJSenRCUVVOb1FpeFhRVUZCZFVzc1JVRkJhVUlzU1VGQlNYWkxMRU5CUVVNc1IwRkRaanRCUVVGQkxFVkJRMVk3UVVGRFJDeFRRVUZQTEZOQlFYTkNNa3NzUjBGQlpUdEJRVU40UXl4UlFVRkpTaXhGUVVGcFFpeEpRVUZKU1N4RFFVRmhPMEZCUTJ4RExHRkJRVTg3UVVGRldDeFJRVUZKU0N4RlFVRnBRaXhKUVVGSlJ5eERRVUZoTzBGQlEyeERMR0ZCUVU4N1FVRkZXQ3hSUVVGSlJ5eEpRVUZ4UWtnc1JVRkJZeXhOUVVGTlVDeEZRVUZGTzBGQlF5OURMRkZCUVVrc1EwRkJRMVU3UVVGSFJDeGhRVUZQUml4RlFVRlJSQ3hEUVVGaE8wRkJSV2hETEZGQlFVbEpMRWxCUVhOQ08wRkJRVUVzVFVGRGRFSXNUMEZCVHl4RFFVRkRSQ3hGUVVGdFFpeERRVUZETzBGQlFVRXNUVUZETlVJc1QwRkJUeXhEUVVGRFFTeEZRVUZ0UWl4RFFVRkRPMEZCUVVFc1RVRkROVUlzVDBGQlR5eERRVUZEUVN4RlFVRnRRaXhEUVVGRE8wRkJRVUVzVFVGRE5VSXNXVUZCV1VFc1JVRkJiVUlzUTBGQlF6dEJRVUZCTEVsQlF6VkRPMEZCVFZFc1YwRktTVU1zUlVGQmIwSXNZMEZCWXl4UlFVbHNRMHdzUlVGQmFVSXNWVUZCVlVzc1JVRkJiMElzVVVGRGVFTklMRVZCUVZGRUxFTkJRV0VzU1VGRk5VSkVMRVZCUVdsQ0xGVkJRVlVzU1VGRGRrSkJMRVZCUVdsQ0xGVkJRVlZMTEVWQlFXOUNMRk5CUXk5RFRDeEZRVUZwUWl4VFFVRlRTeXhGUVVGdlFpeFJRVU4yUTBZc1JVRkJVVVlzUTBGQllTeEpRVVY2UWtNc1JVRkJVVVFzUTBGQllTeEpRVVUxUWtRc1JVRkJhVUlzVTBGQlUwc3NSVUZCYjBJc1VVRkRka05HTEVWQlFWRkdMRU5CUVdFc1NVRkZla0pETEVWQlFWRkVMRU5CUVdFN1FVRkJRU3hGUVVOd1F6dEJRVU5CTzBGQlowSlBMRWxCUVVsTExFdEJRV1ZZTEVkQlFYZENSaXhGUVVGUExFZERiRWR5UkdNc1MwRkJVV1FzUjBGQlVTeE5RVUZOTEVkQlFVY3NSVUZCUlN4RFFVRkRMRWRCUXpWQ1pTeExRVUVyUWl4UFFVRlBMRWxCUVVrc01FSkJRVEJDUkN4RlFVRkxMRWRCUTNwRlJTeExRVUZWYWtJN1FVRkRVQ3hUUVVGVGEwSXNSMEZCWlhKRUxFZEJRVTF6UkN4SFFVRlZReXhIUVVGTlF5eEhRVUZsTzBGQlEyaEZMRTFCUVVsNlF6dEJRVU5LTEVWQlFVbDVReXhOUVVGclFpeFhRVUZWUVN4SlFVRm5RanRCUVVOb1JDeE5RVUZKUXl4SlFVRlBUQ3hIUVVGUlJDeEZRVUUwUWl4TFFVRkxjRU1zU1VGQlMzRkRMRWRCUVZGRUxFVkJRVFJDTEU5QlFVOHNVVUZCVVhCRExFMUJRVThzVTBGQlUwRXNTVUZCU3p0QlFVRkJMRWxCUXpkSUxGTkJRVk54UWp0QlFVRkJMRVZCUTJwQ08wRkJRMGtzVFVGQlNTeERRVUZEYjBJc1MwRkJhVUpETEVWQlFVbDZSQ3hEUVVGSkxFZEJRVWM3UVVGRk4wSXNVVUZCU1RCRUxFbEJRVTBzU1VGQlNTeE5RVUZOTEd0RlFVRnJSVEZFTEVOQlFVazdRVUZETVVZc1YwRkJRWFZFTEVWQlFVc3NUVUZCVFVjc1JVRkJTU3hUUVVGVFFTeEZRVUZKTEU5QlFVOHNSMEZETlVJN1FVRkJRVHRCUVVWWUxFMUJRVWxFTEVWQlFVa3NXVUZCV1hKQ0xFbEJRVk03UVVGRmVrSXNVVUZCU1hOQ0xFbEJRVTBzU1VGQlNTeE5RVUZOTEd0RVFVRnJSRVFzUlVGQlNTeFZRVUZWTEZWQlFWVjZSQ3hKUVVGUExHZEVRVUZuUkc5RExFVkJRVTg3UVVGRE5Vb3NWMEZCUVcxQ0xFVkJRVXNzVFVGQlRVY3NSVUZCU1N4VFFVRlRRU3hGUVVGSkxFOUJRVThzUjBGRE5VSTdRVUZCUVR0QlFVVllMRk5CUVVGRUxFVkJRVWw2UkN4RFFVRkpMRWxCUVVselJDeEhRVU5hUXl4RlFVRkxMRTFCUVUwc2FVUkJRV2xFZGtRc1NVRkJUeXhQUVVGUGIwTXNTMEZCVlN4SFFVRkhMRWRCUTJoR08wRkJRMWc3UVVGRFR5eFRRVUZUZFVJc1IwRkJWVE5FTEVkQlFVMDdRVUZETlVJc1RVRkJTV1VzUjBGQlNUWkRMRWRCUTBwb1FpeExRVUZwUWpkQ0xFbEJRVXR4UXl4SFFVRlJSQ3hGUVVFMFFpeFBRVUZQTEZGQlFWRndReXhOUVVGUExGTkJRVk1zVTBGQlUwRXNSVUZCUnp0QlFVTjZSeXhOUVVGSkxFZEJRVU0yUWl4TFFVRnBRaXhEUVVGRFN5eEhRVUZoVEN4RFFVRmhPMEZCUjJwRUxGbEJRVkZuUWl4SlFVRkxVaXhIUVVGUlJDeEZRVUUwUWl4UFFVRlBMRkZCUVZGVExFMUJRVThzVTBGQlV5eFRRVUZUUVN4RlFVRkhOVVFzUTBGQlNUdEJRVU53Unp0QlFVTlBMRk5CUVZNMlJDeEhRVUZwUWpkRUxFZEJRVTExUkN4SFFVRk5PMEZCUTNwRExFVkJRVUZCTEVWQlFVc3NUVUZCVFN4dlJFRkJiMFIyUkN4SlFVRlBMRTlCUVU5dlF5eExRVUZWTEVkQlFVYzdRVUZETVVZc1RVRkJTWEZDTEVsQlFVMU1MRWRCUVZGRUxFVkJRVFJDTzBGQlF6bERMRVZCUVVsTkxFdEJRMEVzVDBGQlQwRXNSVUZCU1hwRUxFTkJRVWs3UVVGRmRrSTdRVU14UTBFc1NVRkJTWFJLTEV0QlFWVnZUaXhqUVVGUlFTeFhRVUZMTEZWQlFWY3NVMEZCVlhKSkxFZEJRVWN2UXl4SFFVRkhPMEZCUTJ4RUxFMUJRVWs0UXl4SlFVRkpMRTlCUVU4c1ZVRkJWeXhqUVVGalF5eEZRVUZGTEU5QlFVOHNVVUZCVVR0QlFVTjZSQ3hOUVVGSkxFTkJRVU5FTzBGQlFVY3NWMEZCVDBNN1FVRkRaaXhOUVVGSmFFUXNTVUZCU1N0RExFVkJRVVVzUzBGQlMwTXNRMEZCUXl4SFFVRkhka01zUjBGQlJ6QkRMRWxCUVVzc1EwRkJSU3hIUVVGRmFFUTdRVUZETDBJc1RVRkJTVHRCUVVOQkxGbEJRVkZHTEUxQlFVMHNWVUZCVlVFc1RVRkJUU3hOUVVGTkxFVkJRVVZSTEVsQlFVbFVMRVZCUVVVc1MwRkJUU3hIUVVGRk8wRkJRVTBzVFVGQlFXMUVMRVZCUVVjc1MwRkJTekZETEVWQlFVVXNTMEZCU3p0QlFVRkJMRVZCUXpWRkxGTkJRMDB5UXl4SFFVRlFPMEZCUVdkQ0xFbEJRVUZxUkN4SlFVRkpMRVZCUVVVc1QwRkJUMmxFTEVWQlFVODdRVUZCUVN4RlFVRkhMRlZCUXk5Q08wRkJRMG9zVVVGQlNUdEJRVU5CTEUxQlFVa3pReXhMUVVGTExFTkJRVU5CTEVWQlFVVXNVMEZCVTNORExFbEJRVWt2UXl4RlFVRkZMRmRCUVZrclF5eEZRVUZGTEV0QlFVc3ZReXhEUVVGRE8wRkJRVUVzU1VGRGJFUXNWVUZEVHp0QlFVRkZMRlZCUVVsSE8wRkJRVWNzWTBGQlRVRXNSVUZCUlR0QlFVRkJMRWxCUVZFN1FVRkJRU3hGUVVOd1F6dEJRVU5FTEZOQlFVOW5SRHRCUVVOWUxFZEJRMGt2UlN4TFFVRnBRbWxPTEdOQlFWRkJMRmRCUVVzc2FVSkJRV3RDTEZOQlFWVTFTQ3hIUVVGSlF5eEhRVUZOUXl4SFFVRk5PMEZCUXpGRkxFMUJRVWxCTEV0QlFWRXNWVUZCVlN4WFFVRlhPMEZCUVVjc1lVRkJVek5FTEVsQlFVa3NSMEZCUnpSRUxFbEJRVWxHTEVWQlFVc3NVVUZCVVZBc1IwRkJTVzVFTEVsQlFVazBSQ3hIUVVGSE5VUTdRVUZETlVVc1QwRkJTVzFFTEV0QlFVMHNSVUZCUlc1RUxFdEJRVXN3UkN4UlFVTlNVQ3hOUVVGSlFTeEpRVUZMTEUxQlFVMHNWVUZCVlN4TlFVRk5MRXRCUVV0UExFZEJRVTBzUjBGQlJ6RkVMRU5CUVVNc1NVRkRia1J0UkN4RlFVRkhia1FzUTBGQlF5eEpRVUZKTUVRc1JVRkJTekZFTEVOQlFVTTdRVUZIZEVJc1UwRkJUM2xFTEVWQlFVY3NUMEZCVDA0c1MwRkJUU3hOUVVGTkxGVkJRVlVzVFVGQlRTeExRVUZMVHl4RFFVRkpMRU5CUVVNN1FVRkRNMFFzUjBGWFNUUklPMEZCUVVFN1FVRkJRU3hGUVVGeFF5eFhRVUZaTzBGQlEycEVMR0ZCUVZOQkxFVkJRVzlDUXl4SFFVRlBPMEZCUTJoRExGZEJRVXNzWVVGQllVRXNSVUZCVFN4aFFVRmhPMEZCUVVFc1NVRkRlRU03UVVGRFJDeFhRVUZCUkN4RlFVRnZRaXhWUVVGVkxGRkJRVkVzVjBGQldUdEJRVVU1UXl4bFFVUkpSU3hKUVVGUExFTkJRVUVzUjBGRFJrTXNTVUZCU3l4SFFVRkhRU3hKUVVGTExGVkJRVlVzVVVGQlVVRTdRVUZEY0VNc1VVRkJRVVFzUlVGQlMwTXNRMEZCUlN4SlFVRkpMRlZCUVZWQkxFTkJRVVU3UVVGRk0wSXNZVUZCVDBNc1IwRkJVeXhUUVVGVExFdEJRVXNzV1VGQldVWXNRMEZCU1R0QlFVRkJMRWxCUTNSRUxFZEJRMGxHTEVWQlFXOUNMRlZCUVZVc1VVRkJVU3hYUVVGWk8wRkJSVGxETEdWQlJFbEZMRWxCUVU4c1EwRkJRU3hIUVVOR1F5eEpRVUZMTEVkQlFVZEJMRWxCUVVzc1ZVRkJWU3hSUVVGUlFUdEJRVU53UXl4UlFVRkJSQ3hGUVVGTFF5eERRVUZGTEVsQlFVa3NWVUZCVlVFc1EwRkJSVHRCUVVVelFpeGhRVUZQUXl4SFFVRlRMRk5CUVZNc1MwRkJTeXhaUVVGWlJpeERRVUZKTzBGQlFVRXNTVUZEZEVRc1IwRkRTVVlzUlVGQmIwSXNWVUZCVlN4UFFVRlBMRmRCUVZrN1FVRkZOME1zWlVGRVNVVXNTVUZCVHl4RFFVRkJMRWRCUTBaRExFbEJRVXNzUjBGQlIwRXNTVUZCU3l4VlFVRlZMRkZCUVZGQk8wRkJRM0JETEZGQlFVRkVMRVZCUVV0RExFTkJRVVVzU1VGQlNTeFZRVUZWUVN4RFFVRkZPMEZCUlROQ0xHRkJRVTlETEVkQlFWTXNVVUZCVVN4TFFVRkxMRmxCUVZsR0xFTkJRVWs3UVVGQlFTeEpRVU55UkN4SFFVTkpSaXhGUVVGdlFpeFZRVUZWTEU5QlFVOHNWMEZCV1R0QlFVVTNReXhsUVVSSlJTeEpRVUZQTEVOQlFVRXNSMEZEUmtNc1NVRkJTeXhIUVVGSFFTeEpRVUZMTEZWQlFWVXNVVUZCVVVFN1FVRkRjRU1zVVVGQlFVUXNSVUZCUzBNc1EwRkJSU3hKUVVGSkxGVkJRVlZCTEVOQlFVVTdRVUZGTTBJc1lVRkJUME1zUjBGQlV5eFJRVUZSTEV0QlFVc3NXVUZCV1VZc1EwRkJTVHRCUVVGQkxFbEJRM0pFTEVkQlEwbEdMRVZCUVc5Q0xGVkJRVlVzVlVGQlZTeFhRVUZaTzBGQlJXaEVMR1ZCUkVsRkxFbEJRVThzUTBGQlFTeEhRVU5HUXl4SlFVRkxMRWRCUVVkQkxFbEJRVXNzVlVGQlZTeFJRVUZSUVR0QlFVTndReXhSUVVGQlJDeEZRVUZMUXl4RFFVRkZMRWxCUVVrc1ZVRkJWVUVzUTBGQlJUdEJRVVV6UWl4aFFVRlBReXhIUVVGVExGZEJRVmNzUzBGQlN5eFpRVUZaUml4RFFVRkpPMEZCUVVFc1NVRkRlRVFzUjBGRFYwWTdRVUZCUVN4RlFVTllMRVZCUVVNN1FVRkJRVHRCUVVWRUxGTkJRVk5KTEVkQlFWTkRMRWRCUVZWRExFZEJRVmRLTEVkQlFVMDdRVUZEZWtNc1RVRkJTVXNzU1VGQlUxZ3NSMEZCVlN4TlFVRk5PMEZCUlRkQ0xFMUJRVXRYTzBGQlIwd3NWMEZCUVV3c1JVRkJTeXhSUVVGUlNTeERRVUZUTEVkQlEyWkRMRVZCUVU5R0xFTkJRVkVzUlVGQlJTeE5RVUZOUlN4SFFVRlJlazRzUjBGQll5eERRVUZGTEVkQlFVVklMRWRCUVU5MVRpeERRVUZKTEVkQlFVY3NSVUZCU3l4RFFVRkRPMEZCUTJoR08wRkRhRVpQTEVsQlFVbE5PMEZCUVVFc1EwRkRWaXhUUVVGVlFTeEhRVUZqTzBGQlJYSkNMRVZCUVVGQkxFVkJRV0ZCTEVWQlFXRXNUMEZCVlN4RFFVRkRMRWxCUVVrc1VVRkZla05CTEVWQlFXRkJMRVZCUVdFc1VVRkJWeXhGUVVGRkxFbEJRVWtzVTBGRk0wTkJMRVZCUVdGQkxFVkJRV0VzVDBGQlZTeEZRVUZGTEVsQlFVa3NVVUZGTVVOQkxFVkJRV0ZCTEVWQlFXRXNUMEZCVlN4RlFVRkZMRWxCUVVrc1VVRkZNVU5CTEVWQlFXRkJMRVZCUVdFc1VVRkJWeXhGUVVGRkxFbEJRVWtzVTBGTE0wTkJMRVZCUVdGQkxFVkJRV0VzVlVGQllTeEZRVUZGTEVsQlFVa3NWMEZGTjBOQkxFVkJRV0ZCTEVWQlFXRXNUVUZCVXl4SlFVRkpMRWxCUVVrN1FVRkRMME1zUjBGQlIwRXNUVUZCYVVKQkxFbEJRV1VzUTBGQlFTeEZRVUZITzBGRGRrSXZRaXhUUVVGVFF5eEhRVUY1UWtNc1IwRkJWVWdzUjBGQlVUdEJRVU4yUkN4RlFVRkpSeXhKUVVGWFJpeEZRVUZoTEU5QlEzaENSU3hKUVVGWFJpeEZRVUZoTEU5QlJXNUNSU3hKUVVGWFJpeEZRVUZoTEZGQlF6ZENSU3hKUVVGWFJpeEZRVUZoTEUxQlJ6VkNSQ3hKUVVGVFFTeExRVUZWTzBGQlEyNUNMRmRCUVZOSkxFVkJRVmxPTEVkQlFWVlBMRWRCUVZVN1FVRkRja01zVVVGQlNVTXNTVUZCVlU0c1JVRkJUMFlzUTBGQlVUdEJRVU0zUWl4WFFVRkpMRTlCUVU5UkxFdEJRVmtzWTBGQlkwZ3NTMEZCV1VVc1NVRkRkRU5ETEVWQlFWRXNTMEZCUzA0c1EwRkJUU3hKUVVWMlFpeFhRVUZaTzBGQlFVRXNTVUZCUVR0QlFVRkJMRVZCUTNSQ08wRkJRMFFzVTBGQlR6dEJRVUZCTEVsQlEwZ3NUMEZCVDBrc1JVRkJXU3hUUVVGVFNDeEZRVUZoTEV0QlFVczdRVUZCUVN4SlFVTTVReXhOUVVGTlJ5eEZRVUZaTEZGQlFWRklMRVZCUVdFc1NVRkJTVHRCUVVGQkxFbEJRek5ETEUxQlFVMUhMRVZCUVZrc1VVRkJVVWdzUlVGQllTeEpRVUZKTzBGQlFVRXNTVUZETTBNc1QwRkJUMGNzUlVGQldTeFRRVUZUU0N4RlFVRmhMRXRCUVVzN1FVRkJRU3hKUVVNNVF5eFRRVUZUUnl4RlFVRlpMRmRCUVZkSUxFVkJRV0VzVDBGQlR6dEJRVUZCTEVWQlF6VkVPMEZCUTBFN1FVTjRRa0VzU1VGQlNUZE9MRXRCUVZWdlRpeGpRVUZSUVN4WFFVRkxMRlZCUVZjc1UwRkJWWEpKTEVkQlFVY3ZReXhIUVVGSE8wRkJRMnhFTEUxQlFVazRReXhKUVVGSkxFOUJRVThzVlVGQlZ5eGpRVUZqUXl4RlFVRkZMRTlCUVU4c1VVRkJVVHRCUVVONlJDeE5RVUZKTEVOQlFVTkVPMEZCUVVjc1YwRkJUME03UVVGRFppeE5RVUZKYUVRc1NVRkJTU3RETEVWQlFVVXNTMEZCUzBNc1EwRkJReXhIUVVGSGRrTXNSMEZCUnpCRExFbEJRVXNzUTBGQlJTeEhRVUZGYUVRN1FVRkRMMElzVFVGQlNUdEJRVU5CTEZsQlFWRkdMRTFCUVUwc1ZVRkJWVUVzVFVGQlRTeE5RVUZOTEVWQlFVVlJMRWxCUVVsVUxFVkJRVVVzUzBGQlRTeEhRVUZGTzBGQlFVMHNUVUZCUVcxRUxFVkJRVWNzUzBGQlN6RkRMRVZCUVVVc1MwRkJTenRCUVVGQkxFVkJRelZGTEZOQlEwMHlReXhIUVVGUU8wRkJRV2RDTEVsQlFVRnFSQ3hKUVVGSkxFVkJRVVVzVDBGQlQybEVMRVZCUVU4N1FVRkJRU3hGUVVGSExGVkJReTlDTzBGQlEwb3NVVUZCU1R0QlFVTkJMRTFCUVVrelF5eExRVUZMTEVOQlFVTkJMRVZCUVVVc1UwRkJVM05ETEVsQlFVa3ZReXhGUVVGRkxGZEJRVmtyUXl4RlFVRkZMRXRCUVVzdlF5eERRVUZETzBGQlFVRXNTVUZEYkVRc1ZVRkRUenRCUVVGRkxGVkJRVWxITzBGQlFVY3NZMEZCVFVFc1JVRkJSVHRCUVVGQkxFbEJRVkU3UVVGQlFTeEZRVU53UXp0QlFVTkVMRk5CUVU5blJEdEJRVU5ZTEVkQlEwa3ZSU3hMUVVGcFFtbE9MR05CUVZGQkxGZEJRVXNzYVVKQlFXdENMRk5CUVZVMVNDeEhRVUZKUXl4SFFVRk5ReXhIUVVGTk8wRkJRekZGTEUxQlFVbEJMRXRCUVZFc1ZVRkJWU3hYUVVGWE8wRkJRVWNzWVVGQlV6TkVMRWxCUVVrc1IwRkJSelJFTEVsQlFVbEdMRVZCUVVzc1VVRkJVVkFzUjBGQlNXNUVMRWxCUVVrMFJDeEhRVUZITlVRN1FVRkROVVVzVDBGQlNXMUVMRXRCUVUwc1JVRkJSVzVFTEV0QlFVc3dSQ3hSUVVOU1VDeE5RVUZKUVN4SlFVRkxMRTFCUVUwc1ZVRkJWU3hOUVVGTkxFdEJRVXRQTEVkQlFVMHNSMEZCUnpGRUxFTkJRVU1zU1VGRGJrUnRSQ3hGUVVGSGJrUXNRMEZCUXl4SlFVRkpNRVFzUlVGQlN6RkVMRU5CUVVNN1FVRkhkRUlzVTBGQlQzbEVMRVZCUVVjc1QwRkJUMDRzUzBGQlRTeE5RVUZOTEZWQlFWVXNUVUZCVFN4TFFVRkxUeXhEUVVGSkxFTkJRVU03UVVGRE0wUXNSMEZMU1RCSkxFdEJRVmNzVVVGTFdFTTdRVUZCUVR0QlFVRkJMRVZCUVhsQ0xGZEJRVms3UVVGTGNrTXNZVUZCVTBFc1NVRkJWVHRCUVVObUxHVkJRVk5ETEVWQlFWVllMRWRCUVZVN1FVRkRla0lzWlVGQlR5eFhRVUZaTzBGQlJXWXNiVUpCUkVsSUxFbEJRVThzUTBGQlFTeEhRVU5HUXl4SlFVRkxMRWRCUVVkQkxFbEJRVXNzVlVGQlZTeFJRVUZSUVR0QlFVTndReXhaUVVGQlJDeEZRVUZMUXl4RFFVRkZMRWxCUVVrc1ZVRkJWVUVzUTBGQlJUdEJRVVV6UWl4alFVRkpTU3hKUVVGVFdDeEhRVUZWTEUxQlFVMDdRVUZGTjBJc1kwRkJTMWM3UVVGRlRDeHRRa0ZCVDBFc1JVRkJUMFlzUTBGQlVTeEZRVUZGTEUxQlFVMUZMRWRCUVZGNlRpeEhRVUZqTEVOQlFVVXNSMEZCUlVnc1IwRkJUM1ZPTEVOQlFVa3NSMEZCUnl4RlFVRkxMRU5CUVVNN1FVRkJRU3hSUVVNMVJqdEJRVUZCTEUxQlExTTdRVUZGUkN4VlFVRkpaU3hKUVVGUExFMUJSVkJETEVsQlFWa3NVMEZCVlZnc1IwRkJVVmtzUjBGQmJVSTdRVUZEYWtRc1dVRkJTVzVGTEVkQlFVazJReXhIUVVGSmRVSTdRVUZGV2l4WlFVUkpSQ3hOUVVGelFpeFhRVUZWUVN4SlFVRnZRaXhGUVVGRkxGVkJRVlZZTEVWQlFXRXNTMEZCU1N4SlFVTnFSa1FzVFVGQlYxVXNSMEZCVFR0QlFVbHFRaXhqUVVGSmRFSXNTVUZCVFN4SlFVRkpMRTFCUVUwc2IwbEJRVzlKTzBGQlEzaEtMR2xDUVVGQmMwSXNSVUZCU3l4UFFVRlBha1VzU1VGQlN6SkRMRVZCUVVrc1YwRkJWeXhSUVVGUk0wTXNUVUZCVHl4VFFVRlRRU3hKUVVGTE1rTXNSVUZCU1N4UFFVRlBMRWRCUTJwRk8wRkJRVUU3UVVGRldDeFJRVUZKTEU5QlFVOTNRaXhMUVVGelFpeGhRVU0zUWtFc1NVRkJiMEk3UVVGQlFTeFZRVU5vUWl4VlFVRlZRVHRCUVVGQkxGRkJRemxDTzBGQlJWa3NXVUZCU1VVc1NVRkJXWHBDTEVkQlFWVXNUVUZCVFN4SFFVTTFRakJDTEVsQlFWbGlMRWxCUVRCQ1dpeEpRVUZMYzBJc1JVRkJhMElzWTBGQll5eFJRVUZSZEVJc1RVRkJUeXhUUVVGVFFTeEpRVUZMVnl4RlFVRmhMRTFCUVUxRUxFTkJRVTA3UVVGRmNra3NXVUZCU1dNc1MwRkJZU3hEUVVGRFJpeEZRVUZyUWl4NVFrRkJlVUk3UVVGRGVrUXNZMEZCU1Vrc1MwRkJVMGdzU1VGQlN5eEpRVUZKTEUxQlFVc3NSVUZCUnl4WFFVRlhMRkZCUVZGQkxFMUJRVThzVTBGQlUwRXNTVUZCU3p0QlFVTjBSU3hWUVVGQlF5eEZRVUZWTEV0QlFVc3NOa05CUVRaRFJTeERRVUZMTEVkQlEycEZSQ3hGUVVGVkxFdEJRVXNzSzBSQlFTdEVReXhEUVVGTE8wRkJRVUU3UVVGRmRrWXNaVUZCVDJwRExFZEJRV1VzVVVGQlVXZERMRWRCUVZkTUxFZEJRVTBzUlVGQlNUdEJRVUZCTEUxQlF5OUVPMEZCUTFFc1RVRkJRVUVzUlVGQlN5eFpRVUZaUXl4SFFVTnFRa1FzUlVGQlN5eFZRVUZWTEZkQlFWazdRVUZEZGtJc1VVRkJRVzVDTEVkQlFXbENaMElzU1VGQlZVY3NRMEZCU1R0QlFVRkJMRTFCUXpORExFZEJRMUZCTEVWQlFVc3NkMEpCUVhkQ0xGTkJRVlZ5Unl4SFFVRlRPMEZCUXpWRExHVkJRVThzU1VGQlNXOUdMRWRCUVc5Q2NFWXNRMEZCVHp0QlFVRkJMRTFCUTJ4RUxFZEJRMUZ4Unl4RlFVRkxMRlZCUVZWRUxFVkJRVlVzVTBGQlV5eEhRVU5zUTBNc1JVRkJTeXhSUVVGUlJDeEZRVUZWTEU5QlFVOHNSMEZET1VKRExFVkJRVXNzVDBGQlQwUXNSVUZCVlN4TlFVRk5MRWRCUXpWQ1F5eEZRVUZMTEU5QlFVOUVMRVZCUVZVc1RVRkJUU3hIUVVNMVFrTXNSVUZCU3l4UlFVRlJSQ3hGUVVGVkxFOUJRVTg3UVVGQlFTeEpRVU5xUXp0QlFVVkVMRmRCUVVGRUxFVkJRVkVzVjBGQlZ5eFhRVUZaTzBGQlF6TkNMR0ZCUVVzc1MwRkJTeXhqUVVOT0xFdEJRVXNzV1VGQldTeEpRVUZKUVN4TlFVVnNRaXhMUVVGTE8wRkJRVUVzU1VGRGNFSXNSMEZEVjBFN1FVRkJRU3hGUVVOWU8wZERka2RKY0U4c1MwRkJWVzlPTEdOQlFWRkJMRmRCUVVzc1ZVRkJWeXhUUVVGVmNra3NSMEZCUnk5RExFZEJRVWM3UVVGRGJFUXNUVUZCU1RoRExFbEJRVWtzVDBGQlR5eFZRVUZYTEdOQlFXTkRMRVZCUVVVc1QwRkJUeXhSUVVGUk8wRkJRM3BFTEUxQlFVa3NRMEZCUTBRN1FVRkJSeXhYUVVGUFF6dEJRVU5tTEUxQlFVbG9SQ3hKUVVGSkswTXNSVUZCUlN4TFFVRkxReXhEUVVGRExFZEJRVWQyUXl4SFFVRkhNRU1zU1VGQlN5eERRVUZGTEVkQlFVVm9SRHRCUVVNdlFpeE5RVUZKTzBGQlEwRXNXVUZCVVVZc1RVRkJUU3hWUVVGVlFTeE5RVUZOTEUxQlFVMHNSVUZCUlZFc1NVRkJTVlFzUlVGQlJTeExRVUZOTEVkQlFVVTdRVUZCVFN4TlFVRkJiVVFzUlVGQlJ5eExRVUZMTVVNc1JVRkJSU3hMUVVGTE8wRkJRVUVzUlVGRE5VVXNVMEZEVFRKRExFZEJRVkE3UVVGQlowSXNTVUZCUVdwRUxFbEJRVWtzUlVGQlJTeFBRVUZQYVVRc1JVRkJUenRCUVVGQkxFVkJRVWNzVlVGREwwSTdRVUZEU2l4UlFVRkpPMEZCUTBFc1RVRkJTVE5ETEV0QlFVc3NRMEZCUTBFc1JVRkJSU3hUUVVGVGMwTXNTVUZCU1M5RExFVkJRVVVzVjBGQldTdERMRVZCUVVVc1MwRkJTeTlETEVOQlFVTTdRVUZCUVN4SlFVTnNSQ3hWUVVOUE8wRkJRVVVzVlVGQlNVYzdRVUZCUnl4alFVRk5RU3hGUVVGRk8wRkJRVUVzU1VGQlVUdEJRVUZCTEVWQlEzQkRPMEZCUTBRc1UwRkJUMmRFTzBGQlExZ3NSMEZEU1c1R0xFdEJRVmx4VGl4alFVRlJRU3hYUVVGTExGbEJRV0VzVTBGQlUzSkpMRWRCUVVjN1FVRkRiRVFzVFVGQlNXcEVMRWxCUVVrc1QwRkJUeXhWUVVGWExHTkJRV01zVDBGQlR5eFZRVUZWWjBRc1NVRkJTV2hFTEV0QlFVdHBSQ3hGUVVGRmFrUXNRMEZCUXl4SFFVRkhReXhKUVVGSk8wRkJRelZGTEUxQlFVa3JRenRCUVVGSExGZEJRVTlCTEVWQlFVVXNTMEZCUzBNc1EwRkJRenRCUVVOMFFpeE5RVUZKUVN4TFFVRkxMRTlCUVU5QkxFVkJRVVVzVlVGQlZ6dEJRVUZWTEZkQlFVODdRVUZCUVN4TlFVTXhReXhOUVVGTkxGZEJRVms3UVVGRFpDeGxRVUZKUVN4TFFVRkxhRVFzUzBGQlMyZEVMRVZCUVVVc1YwRkJVVUVzU1VGQlNTeFRRVU55UWl4RlFVRkZMRTlCUVU5QkxFdEJRVXRCTEVWQlFVVm9SQ3hIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZEWjBRN1RVRkRka003UVVGQlFTeEpRVU5VTzBGQlEwa3NVVUZCVFN4SlFVRkpMRlZCUVZWcVJDeEpRVUZKTERSQ1FVRTBRaXhwUTBGQmFVTTdRVUZEZWtZc1IwRkRTU3ROTzBGQlFVRTdRVUZCUVN4RlFVRTJRaXhYUVVGWk8wRkJRM3BETEdGQlFWTkJMRVZCUVZsRExFZEJRVk03UVVGRE1VSXNWMEZCU3l4WFFVRlhRU3hKUVVGVkxFbEJRVWtzU1VGQlNVRXNRMEZCVHl4SlFVRkpMRzlDUVVGSk8wbEJRM0JFTzBGQlEwUXNWMEZCUVVRc1JVRkJXU3hWUVVGVkxGZEJRVmNzVTBGQlZYaE5MRWRCUVVzN1FVRkROVU1zVlVGQlNYTkhMRWxCUVZFc1MwRkJTeXhUUVVGVExFbEJRVWwwUnl4RFFVRkhPMEZCUTJwRExGVkJRVXR6Unp0QlFVZE1MR1ZCUVU4c1QwRkJUeXhQUVVGUExFTkJRVVVzUjBGQlJVRXNRMEZCU3p0QlFVRkJMRWxCUTNSRExFZEJRMGxyUnl4RlFVRlpMRlZCUVZVc1owSkJRV2RDTEZkQlFWazdRVUZET1VNc1lVRkJUeXhOUVVGTkxFdEJRVXNzUzBGQlN5eFRRVUZUTEZOQlFWTXNSVUZCUlN4SlFVRkpMRk5CUVZWNFJTeEhRVUZKTzBGQlEzcEVMRmxCUVVrMlF5eEpRVUZMYkU0c1IwRkJUM0ZMTEVkQlFVa3NRMEZCUXl4SFFVRkhja1lzU1VGQlNXdEpMRVZCUVVjc1EwRkJReXhIUVVGSE0wd3NTVUZCU1RKTUxFVkJRVWNzUTBGQlF6dEJRVU16UXl4bFFVRlBMRU5CUVVOc1NTeEhRVUZIZWtRc1EwRkJRenRCUVVGQkxFMUJRM2hDTEVOQlFWTTdRVUZCUVN4SlFVTlVMRWRCUTBselRpeEZRVUZaTEZWQlFWVXNWMEZCVnl4VFFVRlZlRTBzUjBGQlMzTkhMRWRCUVU4N1FVRkRia1FzVlVGQlNXOUhMRWxCUVdFc1NVRkJTVVlzUlVGQldTeExRVUZMTEZGQlFWRTdRVUZET1VNc1lVRkJRVVVzUlVGQlZ5eFRRVUZUTEVsQlFVa3hUU3hIUVVGTGMwY3NRMEZCU3l4SFFVTXpRbTlITzBGQlFVRXNTVUZEWml4SFFVTkpSaXhGUVVGWkxGVkJRVlVzWTBGQll5eFRRVUZWZUUwc1IwRkJTenRCUVVNdlF5eFZRVUZKTUUwc1NVRkJZU3hKUVVGSlJpeEZRVUZaTEV0QlFVc3NVVUZCVVR0QlFVTTVReXhoUVVGQlJTeEZRVUZYTEZOQlFWTXNUMEZCVHpGTkxFTkJRVWNzUjBGRGRrSXdUVHRCUVVGQkxFbEJRMllzUjBGRFNVWXNSVUZCV1N4VlFVRlZMR2RDUVVGblFpeFhRVUZaTzBGQlJ6bERMR1ZCUmtsSExFZEJRVXN6UlN4SFFVTk1NMElzU1VGQlR5eERRVUZCTEVkQlEwWTRSU3hKUVVGTExFZEJRVWRCTEVsQlFVc3NWVUZCVlN4UlFVRlJRVHRCUVVOd1F5eFJRVUZCT1VVc1JVRkJTemhGTEVOQlFVVXNTVUZCU1N4VlFVRlZRU3hEUVVGRk8wRkJSVE5DTEZWQlFVbDFRaXhKUVVGaExFbEJRVWxHTEVWQlFWa3NTMEZCU3l4UlFVRlJPMEZCUXpsRExGVkJRVWs3UVVGRFFTeHBRa0ZCVTBrc1NVRkJVMnhRTEVkQlFWTXlTU3hEUVVGSkxFZEJRVWQzUnl4SlFVRlhSQ3hGUVVGUExFdEJRVWtzUjBGQlNTeERRVUZEUXl4RlFVRlRMRTFCUVUxQkxFbEJRVmRFTEVWQlFVOHNTMEZCU1N4SFFVRkpPMEZCUTJ4SExHTkJRVWsxVFN4SlFVRk5OazBzUlVGQlV6dEJRVU51UWl4VlFVRkJTQ3hGUVVGWExGTkJRVk1zVDBGQlR6Rk5MRU5CUVVjN1FVRkJRVHRCUVVGQkxFMUJSWEpETEZOQlEwMDRUU3hIUVVGUU8wRkJRV2RDTEZGQlFVRklMRWxCUVUwc1JVRkJSU3hQUVVGUFJ5eEZRVUZQTzBGQlFVRXNUVUZCUnl4VlFVTnFRenRCUVVOS0xGbEJRVWs3UVVGRFFTeFZRVUZKUkN4TFFVRlpMRU5CUVVOQkxFVkJRVk1zVTBGQlV6ZEZMRWxCUVVzMFJTeEZRVUZQTEZkQlFWTTFSU3hGUVVGSExFdEJRVXMwUlN4RFFVRk5PMEZCUVVFc1VVRkRla1VzVlVGRFR6dEJRVUZGTEdOQlFVbEVPMEZCUVVzc2EwSkJRVTFCTEVWQlFVazdRVUZCUVN4UlFVRlJPMEZCUVVFc1RVRkRlRU03UVVGRFJDeGhRVUZQUkR0QlFVRkJMRWxCUTJZc1IwRkRTVVlzUlVGQldTeFZRVUZWTEZGQlFWRXNWMEZCV1R0QlFVTjBReXhoUVVGUExFbEJRVWxCTEVWQlFWYzdRVUZCUVN4SlFVTTVRaXhIUVVOWFFUdEJRVUZCTEVWQlExZzdSME0zUlZkUExFdEJRVFpDTEU5QlFVOHNjMEpCUVhOQ0xFZERRV3BGZGtNc1MwRkJUM1ZDTEVWQlFWRTdRVUZOV2l4VFFVRlRhVUlzUjBGQlkxQXNSMEZCVXp0QlFVTnVReXhUUVVGSlFTeE5RVUZaTEZkQlFWVkJMRWxCUVZVc1EwRkJSU3hKUVVNdlFpeEpRVUZKUkN4SFFVRlpMRWxCUVVrc1NVRkJTU3hQUVVGUExGRkJRVkZETEVOQlFVOHNRMEZCUXl4RFFVRkRPMEZCUXpORU8wRkJUMDhzVTBGQlUxRXNSMEZCSzBKRExFZEJRVXM3UVVGRGFFUXNVMEZCU1N4UFFVRlBRU3hMUVVGUkxHRkJRMll4UXl4SFFVRkxMRTFCUVUwc2RVUkJRWFZFTEU5QlFVOHdReXhEUVVGSExFZEJRelZGUVN4SlFVRk5MRXRCUlVnN1FVRkJRU3hKUVVOSUxGVkJRVlZJTzBGQlFVRXNTVUZEVml4VlFVRlZMRmRCUVZrN1FVRkRiRUlzWVVGQlQwYzdRVUZCUVN4SlFVTldPMEZCUVVFc1JVRkRWRHRCUVVOQk8wRkROMEpQTEZOQlFWTkRMRWRCUVdsQ1F5eEhRVUZoTzBGQlR6RkRMRk5CUVU4c1QwRkJUeXhKUVVGSlFTeERRVUZYTzBGQlEycERPMEZCUTBFc1NVRkJTVU03UVVGQlFUdEJRVUZCTEVWQlFUWkNMRmRCUVZrN1FVRk5la01zWVVGQlUwRXNSVUZCV1VNc1IwRkJaVHRCUVVWb1F5eFZRVUZKY2tJc1NVRkJUenRCUVVOWUxFMUJRVUZCTEVWQlFVc3NhMEpCUVd0Q2NVSXNTVUZCWjBJc1NVRkJTU3hKUVVGSlFTeERRVUZoTEVsQlFVa3NiMEpCUVVrc1QwRkRjRVZ5UWl4RlFVRkxMRmRCUVZjc1UwRkJWV3BOTEVkQlFVczdRVUZCUlN4bFFVRlBhVTBzUlVGQlN5eG5Ra0ZCWjBJc1NVRkJTV3BOTEVOQlFVYzdRVUZCUVN4VFFVTndSV2xOTEVWQlFVc3NWMEZCVnl4VFFVRlZhazBzUjBGQlMyOUNMRWRCUVU4N1FVRkRiRU1zV1VGQlNVZ3NTVUZCVlN4SlFVRkpiMDBzUlVGQldYQkNMRVZCUVVzc1pVRkJaVHRCUVVOc1JDeGxRVUZCYUV3c1JVRkJVU3huUWtGQlowSXNTVUZCU1dwQ0xFZEJRVXR2UWl4RFFVRkxMRWRCUXk5Q1NEdEJRVUZCTEUxQlEyNUNMRWRCUTFGblRDeEZRVUZMTEdOQlFXTXNVMEZCVldwTkxFZEJRVXM3UVVGRE9VSXNXVUZCU1dsQ0xFbEJRVlVzU1VGQlNXOU5MRVZCUVZsd1FpeEZRVUZMTEdWQlFXVTdRVUZEYkVRc1pVRkJRV2hNTEVWQlFWRXNaMEpCUVdkQ0xFOUJRVTlxUWl4RFFVRkhMRWRCUXpOQ2FVSTdRVUZCUVN4TlFVTnVRanRCUVVGQkxFbEJRMHM3UVVGRFJDeFhRVUZQYjAwN1FVRkJRU3hGUVVOWUxFVkJRVU03UVVGQlFTeEhRVVZWUlN4TFFVRmxMRWxCUVVsR0xFZEJRV0VzUjBOdVEzWkRSeXhMUVVGaE8wRkJRVUVzUlVGRFlpeEZRVUZGTEVkQlFVY3NVMEZCVXl4SFFVRkhMRkZCUVZNN1FVRkJRU3hGUVVNeFFpeEZRVUZGTEVkQlFVY3NVVUZCVVN4SFFVRkhMRTlCUVZFN1FVRkJRU3hGUVVONFFpeEZRVUZGTEVkQlFVY3NVVUZCVVN4SFFVRkhMRTlCUVZFN1FVRkJRU3hGUVVONFFpeEZRVUZGTEVkQlFVY3NVMEZCVXl4SFFVRkhMRkZCUVZNN1FVRkJRU3hGUVVNeFFpeEZRVUZGTEVkQlFVY3NWMEZCVnl4SFFVRkhMRkZCUVZNN1FVRkRhRU1zUjBGTlNVTTdRVUZCUVR0QlFVRkJMRVZCUVcxRExGZEJRVms3UVVGREwwTXNZVUZCVTBFc1NVRkJiMEk3UVVGRGVrSXNaVUZCVTBNc1JVRkJZWEpETEVkQlFWVTdRVUZETlVJc1pVRkJUeXhYUVVGWk8wRkJSV1lzYlVKQlJFbElMRWxCUVU4c1EwRkJRU3hIUVVOR1F5eEpRVUZMTEVkQlFVZEJMRWxCUVVzc1ZVRkJWU3hSUVVGUlFUdEJRVU53UXl4WlFVRkJSQ3hGUVVGTFF5eERRVUZGTEVsQlFVa3NWVUZCVlVFc1EwRkJSVHRCUVVVelFpeGpRVUZKTEZOQlFWTTdRVUZIVkN4blFrRkJTVlVzU1VGQlZTeFJRVUZSVWl4RFFVRlJPMEZCVHpsQ0xHZENRVTVKTEU5QlFVOVJMRXRCUVZrc1pVRkhia0pCTEVsQlFWVXNVVUZCVVN4TlFVZHNRaXhQUVVGUFFTeExRVUZaTzBGQlEyNUNMSEZDUVVGUFFTeEZRVUZSTEUxQlFVMHNVMEZCVTFnc1EwRkJTVHRCUVVGQk8wRkJRVUVzVVVGSE1VUTdRVUZCUVN4TlFVTlRPMEZCUTBRc1pVRkJVM2hNTEVsQlFVa3NSMEZCUjBFc1NVRkJTVGhPTEVkQlFWY3NVVUZCVVRsT08wRkJRMjVETEdGQlFVczRUaXhIUVVGWE9VNHNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTV2RQTEVWQlFXRkdMRWRCUVZjNVRpeERRVUZETEVWQlFVVXNRMEZCUXp0QlFVRkJMRWxCUlRORU8wRkJRMFFzVjBGQlR5dE9PMEZCUVVFc1JVRkRXRHRIUTNwRFNUVlJMRXRCUVdGclR5eGpRVUZSUVN4WFFVRkxMR0ZCUVdVc1YwRkJXVHRCUVVOeVJDeE5RVUZKTTB3c1NVRkJaMElzVTBGQlZVTXNSMEZCUjBNc1IwRkJSenRCUVVOb1F5eFhRVUZCUml4SlFVRm5RaXhQUVVGUExHdENRVU5zUWl4RlFVRkZMRmRCUVZjc1EwRkJRU3hsUVVGblFpeFRRVUZUTEZOQlFWVkRMRWRCUVVkRExFZEJRVWM3UVVGQlJTeE5RVUZCUkN4RlFVRkZMRmxCUVZsRE8wRkJRVUVzU1VGQlJTeExRVU42UlN4VFFVRlZSQ3hIUVVGSFF5eEhRVUZITzBGQlFVVXNaVUZCVTAwc1MwRkJTMDQ3UVVGQlJ5eFJRVUZKTEU5QlFVOHNWVUZCVlN4bFFVRmxMRXRCUVV0QkxFZEJRVWROTEVOQlFVTXNUVUZCUjFBc1JVRkJSVThzUTBGQlF5eEpRVUZKVGl4RlFVRkZUU3hEUVVGRE8wRkJRVUVzVDBGRE1VWlNMRVZCUVdORExFZEJRVWRETEVOQlFVTTdRVUZCUVN4RlFVTnFRenRCUVVOSkxGTkJRVThzVTBGQlZVUXNSMEZCUjBNc1IwRkJSenRCUVVOdVFpeFJRVUZKTEU5QlFVOUJMRXRCUVUwc1kwRkJZMEVzVFVGQlRUdEJRVU5xUXl4WlFVRk5MRWxCUVVrc1ZVRkJWU3g1UWtGQmVVSXNUMEZCVDBFc1EwRkJReXhKUVVGSkxDdENRVUVyUWp0QlFVTTFSaXhKUVVGQlJpeEZRVUZqUXl4SFFVRkhReXhEUVVGRE8wRkJRMnhDTEdGQlFWTkRMRWxCUVVzN1FVRkJSU3hYUVVGTExHTkJRV05HTzBGQlFVRXNTVUZCU1R0QlFVTjJReXhKUVVGQlFTeEZRVUZGTEZsQlFWbERMRTFCUVUwc1QwRkJUeXhQUVVGUExFOUJRVTlCTEVOQlFVTXNTMEZCUzBNc1JVRkJSeXhaUVVGWlJDeEZRVUZGTEZkQlFWY3NTVUZCU1VNc1JVRkJTVHRCUVVGQkxFVkJRek5HTzBGQlEwRXNTMEZMU1c5UE8wRkJRVUU3UVVGQlFTeEZRVUV5UWl4WFFVRlpPMEZCUTNaRExHRkJRVk5CTEVsQlFWazdRVUZCUVN4SlFVTndRanRCUVVsRUxGZEJRVUZCTEVWQlFWVXNWVUZCVlN4clFrRkJhMElzVTBGQlZVTXNSMEZCVDBNc1IwRkJWVHRCUVVNM1JDeGhRVUZQUXp0QlFVRkJMRWxCUTJZc1IwRkpTVWdzUlVGQlZTeFZRVUZWTEdkQ1FVRm5RaXhUUVVGVlF5eEhRVUZQUXl4SFFVRlZPMEZCUXpORUxHRkJRVTlGTzBGQlFVRXNTVUZEWml4SFFVbEpTaXhGUVVGVkxGVkJRVlVzYzBKQlFYTkNMRk5CUVZWRExFZEJRVTlETEVkQlFWVTdRVUZEYWtVc1lVRkJUMGM3UVVGQlFTeEpRVU5tTEVkQlNVbE1MRVZCUVZVc1ZVRkJWU3gzUWtGQmQwSXNVMEZCVlVNc1IwRkJUME1zUjBGQlZUdEJRVU51UlN4aFFVRlBTVHRCUVVGQkxFbEJRMllzUjBGSlNVNHNSVUZCVlN4VlFVRlZMREJDUVVFd1FpeFRRVUZWUXl4SFFVRlBReXhIUVVGVk8wRkJRM0pGTEdGQlFVOUxPMEZCUVVFc1NVRkRaaXhIUVVsSlVDeEZRVUZWTEZWQlFWVXNaME5CUVdkRExGTkJRVlZETEVkQlFVOURMRWRCUVZVN1FVRkRNMFVzWVVGQlQwMDdRVUZCUVN4SlFVTm1MRWRCU1VsU0xFVkJRVlVzVlVGQlZTdzJRa0ZCTmtJc1UwRkJWVk1zUjBGQlYwTXNSMEZCWXp0QlFVRkJMRWxCUVVFc1IwRkpjRVpXTEVWQlFWVXNWVUZCVlN4blEwRkJaME1zVTBGQlZWTXNSMEZCVnp0QlFVRkJMRWxCUVVFc1IwRkRiRVZVTzBGQlFVRXNSVUZEV0N4RlFVRkRPMEZCUVVFc1IwRkZSMWM3UVVGQlFUdEJRVUZCTEVWQlFUUkNMRmRCUVZrN1FVRkRlRU1zWVVGQlUwRXNTVUZCWVR0QlFVRkJMRWxCUTNKQ08wRkJRMFFzVjBGQlQwRTdRVUZCUVN4RlFVTllMRVZCUVVNN1FVRkJRU3hIUVVWSFF6dEJRVUZCTzBGQlFVRXNSVUZCYlVNc1UwRkJWVU1zUjBGQlVUdEJRVU55UkN4SlFVRkJNMUlzUjBGQlZUQlNMRWRCUVcxQ1F5eERRVUZOTzBGQlEyNURMR0ZCUVZORUxFbEJRVzlDTzBGQlEzcENMR0ZCUVU5RExFMUJRVmNzVVVGQlVVRXNSVUZCVHl4TlFVRk5MRTFCUVUwc1UwRkJVeXhMUVVGTE8wRkJRVUVzU1VGRE9VUTdRVUZEUkN4WFFVRkJSQ3hGUVVGclFpeFZRVUZWTEUxQlFVMHNVMEZCVlVVc1IwRkJVVU1zUjBGQllUdEJRVUZCTEVsQlFVRXNSMEZETVVSSU8wRkJRVUVzUlVGRFdDeEZRVUZGUkN4RlFVRlZPMEZCUVVFc1IwRkZVa3M3UVVGQlFUdEJRVUZCTEVWQlFYbERMRk5CUVZWSUxFZEJRVkU3UVVGRE0wUXNTVUZCUVROU0xFZEJRVlU0VWl4SFFVRjVRa2dzUTBGQlRUdEJRVU42UXl4aFFVRlRSeXhKUVVFd1FqdEJRVU12UWl4aFFVRlBTQ3hOUVVGWExGRkJRVkZCTEVWQlFVOHNUVUZCVFN4TlFVRk5MRk5CUVZNc1MwRkJTenRCUVVGQkxFbEJRemxFTzBGQlEwUXNWMEZCUVVjc1JVRkJkMElzVlVGQlZTeE5RVUZOTEZOQlFWVkdMRWRCUVZGRExFZEJRV0U3UVVGQlFTeEpRVUZCTEVkQlEyaEZRenRCUVVGQkxFVkJRMWdzUlVGQlJVd3NSVUZCVlR0QlFVRkJMRWRCUlZKTk8wRkJRVUU3UVVGQlFTeEZRVUZ4UXl4VFFVRlZTaXhIUVVGUk8wRkJRM1pFTEVsQlFVRXpVaXhIUVVGVksxSXNSMEZCY1VKS0xFTkJRVTA3UVVGRGNrTXNZVUZCVTBrc1NVRkJjMEk3UVVGRE0wSXNZVUZCVDBvc1RVRkJWeXhSUVVGUlFTeEZRVUZQTEUxQlFVMHNUVUZCVFN4VFFVRlRMRXRCUVVzN1FVRkJRU3hKUVVNNVJEdEJRVU5FTEZkQlFVRkpMRVZCUVc5Q0xGVkJRVlVzVTBGQlV5eFRRVUZWU0N4SFFVRlJReXhIUVVGaE8wRkJRVUVzU1VGQlFTeEhRVU12UkVVN1FVRkJRU3hGUVVOWUxFVkJRVVZPTEVWQlFWVTdRVUZCUVN4SFFVVlNUenRCUVVGQk8wRkJRVUVzUlVGQmMwTXNWMEZCV1R0QlFVTnNSQ3hoUVVGVFFTeEpRVUYxUWp0QlFVRkJMRWxCUXk5Q08wRkJRMFFzVjBGQlFVRXNSVUZCY1VJc1ZVRkJWU3hqUVVGakxGTkJRVlZVTEVkQlFWYzdRVUZCUVN4SlFVRkJMRWRCUTJ4RlV5eEZRVUZ4UWl4VlFVRlZMR2xDUVVGcFFpeFRRVUZWVkN4SFFVRlhPMEZCUVVFc1NVRkJRU3hIUVVNNVJGTTdRVUZCUVN4RlFVTllMRVZCUVVNN1FVRkJRU3hIUVVWSFF6dEJRVUZCTzBGQlFVRXNSVUZCTmtNc1UwRkJWVTRzUjBGQlVUdEJRVU12UkN4SlFVRkJNMUlzUjBGQlZXbFRMRWRCUVRaQ1RpeERRVUZOTzBGQlF6ZERMR0ZCUVZOTkxFbEJRVGhDTzBGQlEyNURMR0ZCUVU5T0xFMUJRVmNzVVVGQlVVRXNSVUZCVHl4TlFVRk5MRTFCUVUwc1UwRkJVeXhMUVVGTE8wRkJRVUVzU1VGRE9VUTdRVUZEUkN4WFFVRlBUVHRCUVVGQkxFVkJRMWdzUlVGQlJVUXNSVUZCYjBJN1FVRkJRU3hIUVVWc1FrVTdRVUZCUVR0QlFVRkJMRVZCUVRKRExGTkJRVlZRTEVkQlFWRTdRVUZETjBRc1NVRkJRVE5TTEVkQlFWVnJVeXhIUVVFeVFsQXNRMEZCVFR0QlFVTXpReXhoUVVGVFR5eEpRVUUwUWp0QlFVTnFReXhoUVVGUFVDeE5RVUZYTEZGQlFWRkJMRVZCUVU4c1RVRkJUU3hOUVVGTkxGTkJRVk1zUzBGQlN6dEJRVUZCTEVsQlF6bEVPMEZCUTBRc1YwRkJUMDg3UVVGQlFTeEZRVU5ZTEVWQlFVVkdMRVZCUVc5Q08wRkJRVUVzUjBGRmJFSkhPMEZCUVVFN1FVRkJRU3hGUVVGdFJDeFRRVUZWVWl4SFFVRlJPMEZCUTNKRkxFbEJRVUV6VWl4SFFVRlZiVk1zUjBGQmJVTlNMRU5CUVUwN1FVRkRia1FzWVVGQlUxRXNTVUZCYjBNN1FVRkRla01zWVVGQlQxSXNUVUZCVnl4UlFVRlJRU3hGUVVGUExFMUJRVTBzVFVGQlRTeFRRVUZUTEV0QlFVczdRVUZCUVN4SlFVTTVSRHRCUVVORUxGZEJRVTlSTzBGQlFVRXNSVUZEV0N4RlFVRkZTQ3hGUVVGdlFqdEJRVUZCTEVkQlJWaEpMRXRCUVdFc1NVRkJTWFJDTEUxQlJXcENTU3hMUVVGelFpeEpRVUZKVVN4TlFVTXhRbFFzUzBGQmQwSXNTVUZCU1dNc1RVRkROVUphTEV0QlFUaENMRWxCUVVsWExFMUJSV3hEVkN4TFFVRnBReXhKUVVGSldTeE5RVU55UTJJc1MwRkJLMElzU1VGQlNXTXNUVUZEYmtOYUxFdEJRWGxETEVsQlFVbGhPMEZCU1dwRUxGTkJRVk5GTEV0QlFXdENPMEZCUXpsQ0xGTkJRVTlFTzBGQlExZzdRVU51U2s4c1NVRkJTVVU3UVVGQlFTeERRVU5XTEZOQlFWVkJMRWRCUVZjN1FVRkRiRUlzUlVGQlFVRXNSVUZCVlVFc1JVRkJWU3hOUVVGVExFTkJRVU1zU1VGQlNTeFBRVU5zUTBFc1JVRkJWVUVzUlVGQlZTeFRRVUZaTEVOQlFVTXNTVUZCU1R0QlFVTjZReXhIUVVGSFFTeFBRVUZqUVN4TFFVRlpMRU5CUVVFc1JVRkJSenRCUTB4NlFpeEpRVUZKUXl4TFFVRjFRanRCUVVGQkxFVkJRemxDTEV0QlFVc3NVMEZCVlVNc1IwRkJVM0pRTEVkQlFVczdRVUZEZWtJc1VVRkJTWEZRTEV0QlFWYzdRVUZIWml4aFFVRlBRU3hGUVVGUmNsQXNRMEZCUnp0QlFVRkJMRVZCUTNKQ08wRkJRVUVzUlVGRFJDeE5RVUZOTEZOQlFWVnhVQ3hIUVVGVE8wRkJRM0pDTEZkQlFVbEJMRXRCUVZjc1QwRkRTaXhMUVVWS0xFOUJRVThzUzBGQlMwRXNRMEZCVHp0QlFVRkJMRVZCUXpkQ08wRkJRMHdzUjBGRFYwTXNTMEZCZFVJN1FVRkJRU3hGUVVNNVFpeExRVUZMTEZOQlFWVkVMRWRCUVZOeVVDeEhRVUZMYjBJc1IwRkJUenRCUVVOb1F5eEpRVUZKYVU4c1MwRkJWeXhUUVVkbVFTeEZRVUZSY2xBc1EwRkJSeXhKUVVGSmIwSTdRVUZCUVN4RlFVTnNRanRCUVVOTUxFZERja0pKZWtRc1MwRkJWVzlPTEdOQlFWRkJMRmRCUVVzc1ZVRkJWeXhUUVVGVmNra3NSMEZCUnk5RExFZEJRVWM3UVVGRGJFUXNUVUZCU1RoRExFbEJRVWtzVDBGQlR5eFZRVUZYTEdOQlFXTkRMRVZCUVVVc1QwRkJUeXhSUVVGUk8wRkJRM3BFTEUxQlFVa3NRMEZCUTBRN1FVRkJSeXhYUVVGUFF6dEJRVU5tTEUxQlFVbG9SQ3hKUVVGSkswTXNSVUZCUlN4TFFVRkxReXhEUVVGRExFZEJRVWQyUXl4SFFVRkhNRU1zU1VGQlN5eERRVUZGTEVkQlFVVm9SRHRCUVVNdlFpeE5RVUZKTzBGQlEwRXNXVUZCVVVZc1RVRkJUU3hWUVVGVlFTeE5RVUZOTEUxQlFVMHNSVUZCUlZFc1NVRkJTVlFzUlVGQlJTeExRVUZOTEVkQlFVVTdRVUZCVFN4TlFVRkJiVVFzUlVGQlJ5eExRVUZMTVVNc1JVRkJSU3hMUVVGTE8wRkJRVUVzUlVGRE5VVXNVMEZEVFRKRExFZEJRVkE3UVVGQlowSXNTVUZCUVdwRUxFbEJRVWtzUlVGQlJTeFBRVUZQYVVRc1JVRkJUenRCUVVGQkxFVkJRVWNzVlVGREwwSTdRVUZEU2l4UlFVRkpPMEZCUTBFc1RVRkJTVE5ETEV0QlFVc3NRMEZCUTBFc1JVRkJSU3hUUVVGVGMwTXNTVUZCU1M5RExFVkJRVVVzVjBGQldTdERMRVZCUVVVc1MwRkJTeTlETEVOQlFVTTdRVUZCUVN4SlFVTnNSQ3hWUVVOUE8wRkJRVVVzVlVGQlNVYzdRVUZCUnl4alFVRk5RU3hGUVVGRk8wRkJRVUVzU1VGQlVUdEJRVUZCTEVWQlEzQkRPMEZCUTBRc1UwRkJUMmRFTzBGQlExZ3NSMEZEU1M5RkxFdEJRV2xDYVU0c1kwRkJVVUVzVjBGQlN5eHBRa0ZCYTBJc1UwRkJWVFZJTEVkQlFVbERMRWRCUVUxRExFZEJRVTA3UVVGRE1VVXNUVUZCU1VFc1MwRkJVU3hWUVVGVkxGZEJRVmM3UVVGQlJ5eGhRVUZUTTBRc1NVRkJTU3hIUVVGSE5FUXNTVUZCU1VZc1JVRkJTeXhSUVVGUlVDeEhRVUZKYmtRc1NVRkJTVFJFTEVkQlFVYzFSRHRCUVVNMVJTeFBRVUZKYlVRc1MwRkJUU3hGUVVGRmJrUXNTMEZCU3pCRUxGRkJRMUpRTEUxQlFVbEJMRWxCUVVzc1RVRkJUU3hWUVVGVkxFMUJRVTBzUzBGQlMwOHNSMEZCVFN4SFFVRkhNVVFzUTBGQlF5eEpRVU51UkcxRUxFVkJRVWR1UkN4RFFVRkRMRWxCUVVrd1JDeEZRVUZMTVVRc1EwRkJRenRCUVVkMFFpeFRRVUZQZVVRc1JVRkJSeXhQUVVGUFRpeExRVUZOTEUxQlFVMHNWVUZCVlN4TlFVRk5MRXRCUVV0UExFTkJRVWtzUTBGQlF6dEJRVU16UkN4SFFVVkpiVTA3UVVGQlFUdEJRVUZCTEVWQlFXOURMRmRCUVZrN1FVRkRhRVFzWVVGQlUwRXNTVUZCY1VJN1FVRkJRU3hKUVVNM1FqdEJRVU5FTEZkQlFVRkJMRVZCUVcxQ0xGVkJRVlVzVTBGQlV5eFhRVUZaTzBGQlF6bERMR0ZCUVU5b1F6dEJRVUZCTEVsQlEyWXNSMEZEU1dkRExFVkJRVzFDTEZWQlFWVXNUMEZCVHl4VFFVRlZReXhIUVVGVlF5eEhRVUZKZEU4c1IwRkJVenRCUVVWcVJTeGxRVVJKSzBvc1NVRkJUeXhEUVVGQkxFZEJRMFpETEVsQlFVc3NSMEZCUjBFc1NVRkJTeXhWUVVGVkxGRkJRVkZCTzBGQlEzQkRMRkZCUVVGRUxFVkJRVXRETEVsQlFVc3NRMEZCUXl4SlFVRkpMRlZCUVZWQkxFTkJRVVU3UVVGRkwwSXNZVUZCVDNORkxFVkJRVWNzUzBGQlN5eE5RVUZOUVN4SFFVRkpNMUlzUjBGQll5eERRVUZEY1VRc1EwRkJUeXhIUVVGSGVFUXNSMEZCVDNWT0xFTkJRVWtzUjBGQlJ5eEZRVUZMTEVOQlFVTTdRVUZCUVN4SlFVTTVSU3hIUVVOSmNVVXNSVUZCYlVJc1ZVRkJWU3hQUVVGUExGTkJRVlZETEVkQlFWVjZVQ3hIUVVGUk8wRkJRelZFTEdGQlFVOUJPMEZCUVVFc1NVRkRaaXhIUVVOSmQxQXNSVUZCYlVJc1ZVRkJWU3hUUVVGVExGZEJRVms3UVVGRE9VTXNZVUZCVHp0QlFVRkJMRWxCUTJZc1IwRkRTVUVzUlVGQmJVSXNWVUZCVlN4VlFVRlZMRmRCUVZrN1FVRkRMME1zWVVGQlR6dEJRVUZCTEVsQlEyWXNSMEZEVjBFN1FVRkJRU3hGUVVOWU8wZERha1JKTlZJc1MwRkJWVzlPTEdOQlFWRkJMRmRCUVVzc1ZVRkJWeXhUUVVGVmNra3NSMEZCUnk5RExFZEJRVWM3UVVGRGJFUXNUVUZCU1RoRExFbEJRVWtzVDBGQlR5eFZRVUZYTEdOQlFXTkRMRVZCUVVVc1QwRkJUeXhSUVVGUk8wRkJRM3BFTEUxQlFVa3NRMEZCUTBRN1FVRkJSeXhYUVVGUFF6dEJRVU5tTEUxQlFVbG9SQ3hKUVVGSkswTXNSVUZCUlN4TFFVRkxReXhEUVVGRExFZEJRVWQyUXl4SFFVRkhNRU1zU1VGQlN5eERRVUZGTEVkQlFVVm9SRHRCUVVNdlFpeE5RVUZKTzBGQlEwRXNXVUZCVVVZc1RVRkJUU3hWUVVGVlFTeE5RVUZOTEUxQlFVMHNSVUZCUlZFc1NVRkJTVlFzUlVGQlJTeExRVUZOTEVkQlFVVTdRVUZCVFN4TlFVRkJiVVFzUlVGQlJ5eExRVUZMTVVNc1JVRkJSU3hMUVVGTE8wRkJRVUVzUlVGRE5VVXNVMEZEVFRKRExFZEJRVkE3UVVGQlowSXNTVUZCUVdwRUxFbEJRVWtzUlVGQlJTeFBRVUZQYVVRc1JVRkJUenRCUVVGQkxFVkJRVWNzVlVGREwwSTdRVUZEU2l4UlFVRkpPMEZCUTBFc1RVRkJTVE5ETEV0QlFVc3NRMEZCUTBFc1JVRkJSU3hUUVVGVGMwTXNTVUZCU1M5RExFVkJRVVVzVjBGQldTdERMRVZCUVVVc1MwRkJTeTlETEVOQlFVTTdRVUZCUVN4SlFVTnNSQ3hWUVVOUE8wRkJRVVVzVlVGQlNVYzdRVUZCUnl4alFVRk5RU3hGUVVGRk8wRkJRVUVzU1VGQlVUdEJRVUZCTEVWQlEzQkRPMEZCUTBRc1UwRkJUMmRFTzBGQlExZ3NSMEZEU1M5RkxFdEJRV2xDYVU0c1kwRkJVVUVzVjBGQlN5eHBRa0ZCYTBJc1UwRkJWVFZJTEVkQlFVbERMRWRCUVUxRExFZEJRVTA3UVVGRE1VVXNUVUZCU1VFc1MwRkJVU3hWUVVGVkxGZEJRVmM3UVVGQlJ5eGhRVUZUTTBRc1NVRkJTU3hIUVVGSE5FUXNTVUZCU1VZc1JVRkJTeXhSUVVGUlVDeEhRVUZKYmtRc1NVRkJTVFJFTEVkQlFVYzFSRHRCUVVNMVJTeFBRVUZKYlVRc1MwRkJUU3hGUVVGRmJrUXNTMEZCU3pCRUxGRkJRMUpRTEUxQlFVbEJMRWxCUVVzc1RVRkJUU3hWUVVGVkxFMUJRVTBzUzBGQlMwOHNSMEZCVFN4SFFVRkhNVVFzUTBGQlF5eEpRVU51UkcxRUxFVkJRVWR1UkN4RFFVRkRMRWxCUVVrd1JDeEZRVUZMTVVRc1EwRkJRenRCUVVkMFFpeFRRVUZQZVVRc1JVRkJSeXhQUVVGUFRpeExRVUZOTEUxQlFVMHNWVUZCVlN4TlFVRk5MRXRCUVV0UExFTkJRVWtzUTBGQlF6dEJRVU16UkN4SFFVbEpNRWtzUzBGQlZ5eFhRVU5ZTkVRc1MwRkJkVUlzU1VGQlNVZ3NUVUZKTTBKSk8wRkJRVUU3UVVGQlFTeEZRVUUwUWl4WFFVRlpPMEZCUlhoRExHRkJRVk5CTEVsQlFXRTdRVUZCUVN4SlFVTnlRanRCUVVWRUxGZEJRVUZCTEVWQlFWY3NZMEZCWXl4WFFVRlpPMEZCUTJwRExHRkJRVXNzUzBGQlN5eGpRVU5PTEV0QlFVc3NXVUZCV1N4SlFVRkpRU3hOUVVWc1FpeExRVUZMTzBGQlFVRXNTVUZEY0VJc1IwRk5TVUVzUlVGQlZ5eFZRVUZWTERCQ1FVRXdRaXhUUVVGVlF5eEhRVUZuUWp0QlFVTnlSU3hoUVVGUGRFWXNSMEZCWlhkQ0xFbEJRVlU0UkN4SFFVRm5RamRFTEVWQlFWRXNVMEZCVlN4RFFVRkJPMEZCUVVFc1NVRkRNVVVzUjBGSlNUUkVMRVZCUVZjc1ZVRkJWU3hUUVVGVExGZEJRVms3UVVGRGRFTXNZVUZCVHl4TFFVRkxMSEZDUVVGeFFqdEpRVU42UXl4SFFWTkpRU3hGUVVGWExGVkJRVlVzVDBGQlR5eFRRVUZWTVU4c1IwRkJVM2RQTEVkQlFVbDBUeXhIUVVGVE8wRkJSM2hFTEdWQlJrazJSeXhIUVVOQmEwUXNTVUZCVHl4RFFVRkJMRWRCUTBaRExFbEJRVXNzUjBGQlIwRXNTVUZCU3l4VlFVRlZMRkZCUVZGQk8wRkJRM0JETEZGQlFVRkVMRVZCUVV0RExFbEJRVXNzUTBGQlF5eEpRVUZKTEZWQlFWVkJMRU5CUVVVN1FVRkZMMElzWTBGQlVXNUVMRWxCUVVzc1MwRkJTeXh0UWtGQmIwSXNSMEZCUlN4TFFVRkxMRTFCUVUxQkxFZEJRVWxzU3l4SFFVRmpMRU5CUVVOdFJDeEhRVUZUZDA4c1IwRkJTWFJQTEVOQlFVOHNSMEZCUjNoRUxFZEJRVTkxVGl4RFFVRkpMRWRCUVVjc1JVRkJTeXhEUVVGRE8wRkJRVUVzU1VGRGVrZ3NSMEZQU1hsRkxFVkJRVmNzVlVGQlZTeFBRVUZQTEZOQlFWVXhUeXhIUVVGVGJFSXNSMEZCVVR0QlFVTnVSQ3hoUVVGUExFdEJRVXNzYlVKQlFXOUNMRVZCUVVNc1MwRkJTMnRDTEVkQlFWTnNRaXhEUVVGTk8wRkJRVUVzU1VGRE4wUXNSMEZEU1RSUUxFVkJRVmNzVlVGQlZTeHhRa0ZCY1VJc1YwRkJXVHRCUVVOc1JDeGhRVUZQTDBVc1IwRkJWV3RDTEVWQlFWRXNTMEZCU3pSRU8wRkJRVUVzU1VGRGRFTXNSMEZGU1VNc1JVRkJWeXhWUVVGVkxGVkJRVlVzVjBGQldUdEJRVU4yUXl4WFFVRkxMSEZDUVVGeFFpeFhRVU14UWpkRkxFZEJRV2xDWjBJc1NVRkJWVU1zUlVGQlVTeFRRVUZWTEVOQlFVRTdRVUZCUVN4SlFVTnlSQ3hIUVVOWE5FUTdRVUZCUVN4RlFVTllPMGRETlVaWFJUdEJRVUZCTEVOQlExWXNVMEZCVlVFc1IwRkJXVHRCUVVWdVFpeEZRVUZCUVN4RlFVRlhRU3hGUVVGWExFOUJRVlVzUTBGQlF5eEpRVUZKTEZGQlJYSkRRU3hGUVVGWFFTeEZRVUZYTEZWQlFXRXNRMEZCUXl4SlFVRkpPMEZCUXpWRExFZEJRVWRCTEU5QlFXVkJMRXRCUVdFc1EwRkJRU3hGUVVGSE8wRkRURE5DTEVsQlFVbERMRXRCUVdsQ0xHOUNRVU5xUWtNc1MwRkJhMElzYjBOQlEyeENReXhMUVVGMVFqdEJRVUZCTEVWQlF6bENMRk5CUVZORU8wRkJRVUVzUlVGRFZDeFJRVUZSUkR0QlFVRkJMRVZCUTFJc1dVRkJXVVFzUjBGQlZ6dEJRVU16UWl4SFEwUkpTVHRCUVVGQk8wRkJRVUVzUlVGQmEwTXNWMEZCV1R0QlFVTTVReXhoUVVGVFFTeEZRVUZwUWtNc1IwRkJZenRCUVVOd1F5eE5RVUZKUVN4TlFVRnBRaXhYUVVGVlFTeEpRVUZsUml4TFFVTTVReXhMUVVGTExHVkJRV1ZGTzBGQlFVRXNTVUZEZGtJN1FVRkZSQ3hYUVVGQlJDeEZRVUZwUWl4VlFVRlZMR05CUVdNc1YwRkJXVHRCUVVOcVJDeGhRVUZQTEV0QlFVczdRVUZCUVN4SlFVTndRaXhIUVVWSlFTeEZRVUZwUWl4VlFVRlZMR1ZCUVdVc1UwRkJWVVVzUjBGQlRURkNMRWRCUVZFN1FVRkRPVVFzWVVGQlR6dEJRVUZCTEVsQlEyWXNSMEZGU1hkQ0xFVkJRV2xDTEZWQlFWVXNaMEpCUVdkQ0xGTkJRVlYyUWl4SFFVRmhPMEZCUXpsRUxHRkJRVTg3UVVGQlFTeEpRVU5tTEVkQlJVbDFRaXhGUVVGcFFpeFZRVUZWTEZkQlFWY3NVMEZCVlhKRExFZEJRVTlqTEVkQlFXRTdRVUZEYUVVc1lVRkJUenRCUVVGQkxFbEJRMllzUjBGRlNYVkNMRVZCUVdsQ0xGVkJRVlVzV1VGQldTeFRRVUZWUnl4SFFVRlRPMEZCUTNSRUxHRkJRVTg3UVVGQlFTeEpRVU5tTEVkQlJVbElMRVZCUVdsQ0xGVkJRVlVzWVVGQllTeFRRVUZWY2tNc1IwRkJUenRCUVVOeVJDeGhRVUZQTzBGQlFVRXNTVUZEWml4SFFVVkpjVU1zUlVGQmFVSXNWVUZCVlN4TlFVRk5MRk5CUVZWSkxFZEJRVlU3UVVGQlFTeEpRVUZCTEVkQlJYSkVTaXhGUVVGcFFpeFZRVUZWTEdOQlFXTXNWMEZCV1R0QlFVTnFSQ3hoUVVGUE8wRkJRVUVzU1VGRFppeEhRVVZKUVN4RlFVRnBRaXhWUVVGVkxHdENRVUZyUWl4VFFVRlZTeXhIUVVGWlF5eEhRVUZQTzBGQlFVRXNTVUZCUVN4SFFVTnVSVTQ3UVVGQlFTeEZRVU5ZTzBkRGRFTkpUeXhMUVVGWGNrUXNSMEZCYVVJc1owTkJRV2RETzBGQlRYcEVMRk5CUVZOelJDeEhRVUZSZUZBc1IwRkJVenRCUVVNM1FpeFRRVUZQUVN4RlFVRlJMRk5CUVZOMVVDeEZRVUZSTEV0QlFVczdRVUZEZWtNN1FVRkpUeXhUUVVGVFJTeExRVUZuUWp0QlFVTTFRaXhUUVVGUFJDeEhRVUZSWkN4SFFVRlhMRmxCUVZjc1JVRkJSeXhQUVVGUkxFTkJRVUU3UVVGRGNFUTdRVUZQVHl4VFFVRlRaMElzUjBGQlVURlFMRWRCUVZNeVVDeEhRVUZOTzBGQlEyNURMRk5CUVU4elVDeEZRVUZSTEZOQlFWTjFVQ3hKUVVGVlNTeERRVUZKTzBGQlF6RkRPMEZCVFU4c1UwRkJVME1zUjBGQlZ6VlFMRWRCUVZNN1FVRkRhRU1zVTBGQlQwRXNSVUZCVVN4WlFVRlpkVkFzUlVGQlVUdEJRVU4yUXp0QlFWRlBMRk5CUVZOTkxFZEJRV1UzVUN4SFFVRlRPRkFzUjBGQllUdEJRVU5xUkN4VFFVRlBTaXhIUVVGUk1WQXNSMEZCVXl4SlFVRkpaMUFzUjBGQmFVSmpMRU5CUVZjc1EwRkJRenRCUVVNM1JEdEJRVTFQTEZOQlFWTkRMRWRCUVdVdlVDeEhRVUZUTzBGQlEzQkRMRTFCUVVrclJ6dEJRVU5LTEZWQlFWRkJMRWxCUVV0NVNTeEhRVUZSZUZBc1EwRkJUeXhQUVVGUExGRkJRVkVyUnl4TlFVRlBMRk5CUVZNc1UwRkJVMEVzUlVGQlJ5eFpRVUZYTzBGQlEzUkdPMEZEZEVSQkxFbEJRVWxwU2l4TFFVRnpRaXh4UWtGRGRFSkRMRXRCUVhGQ08wRkJRMnhDTEZOQlFWTkRMRWRCUVdWRExFZEJRVk03UVVGRGNFTXNVMEZCVDBnc1IwRkJiMElzUzBGQlMwY3NRMEZCVHl4TFFVRkxRU3hOUVVGWmNrSTdRVUZETlVRN1FVRkRUeXhUUVVGVGMwSXNSMEZCWTBNc1IwRkJVVHRCUVVOc1F5eFRRVUZQU2l4SFFVRnRRaXhMUVVGTFNTeERRVUZOTEV0QlFVdEJMRTFCUVZkNFFqdEJRVU42UkR0QlFVdFBMRk5CUVZONVFpeEhRVUZ0UWxJc1IwRkJZVHRCUVVNMVF5eFRRVUZSU1N4SFFVRmxTaXhGUVVGWkxFOUJRVThzUzBGQlMwMHNSMEZCWTA0c1JVRkJXU3hOUVVGTk8wRkJRMjVHTzBGQlQwOHNVMEZCVTFNc1IwRkJaMEpVTEVkQlFXRTdRVUZEZWtNc1UwRkJUeXhKUVVGSlpDeEhRVUZwUW1Nc1EwRkJWenRCUVVNelF6dEJRM0pDUVN4SlFVRkpWU3hMUVVGaE9VSXNSMEZCVnl4bFFVbDRRaXRDTzBGQlFVRTdRVUZCUVN4RlFVRTBRaXhYUVVGWk8wRkJRM2hETEdGQlFWTkJMRWxCUVdFN1FVRkJRU3hKUVVOeVFqdEJRVVZFTEZkQlFVRkJMRVZCUVZjc1ZVRkJWU3haUVVGWkxGTkJRVlZ1VVN4SFFVRk5jVVVzUjBGQlV6TkZMRWRCUVZNN1FVRkRMMFFzVFVGQlNVRXNUVUZCV1N4WFFVRlZRU3hKUVVGVmQxRXNSMEZCVnl4UFFVRk5PMEZCUTNKRUxGVkJRVWs1VXl4SlFVRlBMRVZCUVRCRWFVZ3NSMEZCVVR0QlFVTTNSU3hWUVVGSmFrZzdRVUZEUVN4bFFVRlBMRWxCUVVselVpeEhRVUZuUWp0QlFVVXZRaXhWUVVGSk1FSXNTVUZCYjBJeFVTeExRVUZYSzFBc1IwRkJaUzlRTEVOQlFVODdRVUZEZWtRc1lVRkJTVEpSTEVkQlFXTkVMRU5CUVdsQ0xFdEJReTlDU2l4SFFVRnRRa2tzUTBGQmFVSXNTVUZETjBJc1NVRkJTVEZDTEVkQlFXbENNRUlzUTBGQmFVSXNTVUZIZEVNc1NVRkJTVEZDTEVkQlFXZENPMEZCUVVFc1NVRkZka01zUjBGRFNYbENMRVZCUVZjc1ZVRkJWU3hyUWtGQmEwSXNVMEZCVlc1UkxFZEJRVTF6VVN4SFFVRk5ReXhIUVVGTlF5eEhRVUZOTzBGQlEzSkZMRlZCUVVsRExFZEJRMEZETEVkQlEwRjRRenRCUVVOS0xGVkJRVWtzV1VGQlZTeFRRVUZUTEVsQlIyeENPMEZCUVVFc1VVRkJTU3hWUVVGVkxGZEJRVmNzU1VGRE1VSkJMRWxCUVV0dlF5eEpRVVZCTEZWQlFWVXNWMEZCVnl4TFFVTXhRa2NzU1VGQlQwZ3NSMEZEVUhCRExFbEJRVXR4UXl4TlFVZE1SU3hKUVVGUFNDeEhRVU5RU1N4SlFVRk5TQ3hIUVVOT2NrTXNTVUZCUzNORE8wRkJSVlFzV1VGQlNYcEZMRWxCUVdkQ01rVXNTMEZCZFVOU0xFZEJRVmNzVlVGRGJFVmlMRWxCUVU4c1MwRkJTeXhWUVVGVmNsQXNSMEZCVFhsUkxFZEJRVTB4UlN4RFFVRmhMRWRCUXk5RE5FVXNTVUZCY1VKMlFpeEhRVUZSY2tRc1IwRkJaWE5FTEVOQlFVazdRVUZEY0VRc1pVRkJUMkVzUjBGQlZ5eExRVUZMVXl4SFFVRnZRbnBETEVkQlFVa3NVVUZCVjIxQ0xFTkJRVWs3UVVGQlFUdEJRVUZCTEVsQlEzUkZMRWRCUTFkak8wRkJRVUVzUlVGRFdDeEZRVUZETzBGQlFVRTdRVUZGUkN4VFFVRlRSU3hIUVVGallpeEhRVUZoTzBGQlEyaERMRk5CUVZFc1QwRkJUMEVzUzBGQlowSXNXVUZETTBJc1QwRkJUMEVzUlVGQldTeFZRVUZqTEZsQlEycERMRTlCUVU5QkxFVkJRVmtzVjBGQlpTeFpRVU5zUXl4UFFVRlBRU3hGUVVGWkxHTkJRV3RDTzBGQlF6ZERPMEZETVVSQkxFbEJRVWx2UWl4TFFVRmpMRWxCUVVsVUxFMUJTV3hDVlR0QlFVRkJPMEZCUVVFc1JVRkJOa0lzVjBGQldUdEJRVU42UXl4aFFVRlRRU3hGUVVGWlF5eEhRVUZYT1ZFc1IwRkJUU3RSTEVkQlFWTXhUU3hIUVVGVE8wRkJRM0JFTEZkQlFVc3NXVUZCV1hsTkxFZEJRMnBDTEV0QlFVc3NUMEZCVHpsUkxFZEJRMW9zUzBGQlN5eFZRVUZWSzFFc1IwRkRaaXhMUVVGTExGVkJRVlV4VFR0QlFVRkJMRWxCUTJ4Q08wRkJRMFFzVjBGQlFYZE5MRVZCUVZrc1ZVRkJWU3haUVVGWkxGTkJRVlUzVVN4SFFVRk5jVVVzUjBGQlV6TkZMRWRCUVZNN1FVRkRhRVVzWVVGQlR5eExRVUZMTEdGQlFXRXNWVUZCVlUwc1IwRkJUWEZGTEVkQlFWTXpSU3hEUVVGUE8wRkJRVUVzU1VGRGFrVXNSMEZEU1cxU0xFVkJRVmtzVlVGQlZTeHJRa0ZCYTBJc1UwRkJWWGhGTEVkQlFVOURMRWRCUVZVeVFpeEhRVUZWSzBNc1IwRkJTenRCUVVNNVJTeFZRVUZKUXl4SlFVRlRMRXRCUVVzN1FVRkRiRUlzWVVGQlR5eFJRVUZSTEUxQlFVMUJMRVZCUVU4c2FVSkJRV2xDUVN4SFFVRlJMRk5CUVZNN1FVRkJRU3hKUVVOMFJTeEhRVXRKU2l4RlFVRlpMRlZCUVZVc1lVRkJZU3hYUVVGWk8wRkJRek5ETEZWQlFVa3NTMEZCU3p0QlFVTk1MR1ZCUVU4c1MwRkJTenRCUVVWb1FpeFZRVUZKU1N4SlFVRlRMRXRCUVVzc1ZVRkJWU3hyUWtGQmEwSXNTMEZCU3l4TlFVRk5MRXRCUVVzc1UwRkJVeXhMUVVGTExFOUJRVTg3UVVGRGJrWXNZVUZCUzBFc1MwRkhUQ3hMUVVGTExGbEJRVmxCTEVkQlExWXNTMEZCU3l4aFFVaEVURHRCUVVGQkxFbEJTVzVDTEVkQlExZERPMEZCUVVFc1JVRkRXRHRIUXpWQ1NVczdRVUZCUVR0QlFVRkJMRVZCUVc5RExGZEJRVms3UVVGRGFFUXNZVUZCVTBFc1NVRkJjVUk3UVVGQlFTeEpRVU0zUWp0QlFVTkVMRmRCUVVGQkxFVkJRVzFDTEZWQlFWVXNXVUZCV1N4VFFVRlZOMFVzUjBGQlR6aEZMRWRCUVZVM1JTeEhRVUZWTzBGQlF6RkZMR0ZCUVU4c1NVRkJTVFpFTEVkQlFWVTdRVUZCUVN4SlFVTTNRaXhIUVVOWFpUdEJRVUZCTEVWQlExZzdSME5hU1VVc1MwRkJkVUlzU1VGQlNVWXNUVUZUTTBKSE8wRkJRVUU3UVVGQlFTeEZRVUZ4UXl4WFFVRlpPMEZCUTJwRUxHRkJRVk5CTEVsQlFYTkNPMEZCUVVFc1NVRkRPVUk3UVVGSlJDeFhRVUZCUVN4RlFVRnZRaXhWUVVGVkxGbEJRVmtzVTBGQlZYSlNMRWRCUVUwclVTeEhRVUZUTVUwc1IwRkJVenRCUVVONFJTeFZRVUZKYjBNN1FVRkRTaXhqUVVGVFFTeEpRVUZMTEV0QlFVc3NhMEpCUVd0Q2VrY3NSMEZCVFN0UkxFZEJRVk14VFN4RFFVRlBMRTlCUVU4c1VVRkJVVzlETEUxQlFVOHNVMEZCVTBFc1NVRkJTeXhKUVVGSmIwc3NSMEZCV1N4TlFVRk5OMUVzUjBGQlRTdFJMRWRCUVZNeFRTeERRVUZQTzBGQlFVRXNTVUZEYmtvc1IwRkRTV2RPTEVWQlFXOUNMRlZCUVZVc1kwRkJZeXhYUVVGWk8wRkJRM0JFTEZWQlFVazFTenRCUVVOS0xHTkJRVkZCTEVsQlFVc3NTMEZCU3l4bFFVRmxMRkZCUVZGQkxFMUJRVThzVTBGQlUwRXNTVUZCU3pKTE8wRkJRVUVzU1VGRGRFVXNSMEZKU1VNc1JVRkJiMElzVlVGQlZTeGpRVUZqTEZOQlFWVkRMRWRCUVZVN1FVRkROVVFzVjBGQlN5eFpRVUZaUVR0QlFVRkJMRWxCUTNwQ0xFZEJRMGxFTEVWQlFXOUNMRlZCUVZVc2IwSkJRVzlDTEZOQlFWVnlVaXhIUVVGTksxRXNSMEZCVXpGTkxFZEJRVk03UVVGRGFFWXNWVUZCU1c5RE8wRkJRMG9zWTBGQlVVRXNTVUZCU3l4TFFVRkxMR1ZCUVdVc1VVRkJVVUVzVFVGQlR5eFRRVUZUTEZOQlFWTkJMRVZCUVVjc1ZVRkJWWHBITEVkQlFVMHJVU3hIUVVGVE1VMHNRMEZCVHp0QlFVRkJMRWxCUXpkSExFZEJRMWRuVGp0QlFVRkJMRVZCUTFnN1IwTXZRbGRGTzBGQlFVRXNRMEZEVml4VFFVRlZRU3hIUVVGclFqdEJRVXQ2UWl4RlFVRkJRU3hGUVVGcFFrRXNSVUZCYVVJc1lVRkJaMElzUTBGQlF5eEpRVUZKTEdOQlMzWkVRU3hGUVVGcFFrRXNSVUZCYVVJc1UwRkJXU3hEUVVGRExFbEJRVWtzVlVGTGJrUkJMRVZCUVdsQ1FTeEZRVUZwUWl4eFFrRkJkMElzUTBGQlF5eEpRVUZKTzBGQlEyNUZMRWRCUVVkQkxFOUJRWEZDUVN4TFFVRnRRaXhEUVVGQkxFVkJRVWM3UVVOMFFuWkRMRWxCUVVsRE8wRkJRVUVzUTBGRFZpeFRRVUZWUVN4SFFVRlZPMEZCUldwQ0xFVkJRVUZCTEVWQlFWTkJMRVZCUVZNc1YwRkJZeXhEUVVGRExFbEJRVWtzV1VGTGNrTkJMRVZCUVZOQkxFVkJRVk1zVTBGQldTeERRVUZETEVsQlFVa3NWVUZMYmtOQkxFVkJRVk5CTEVWQlFWTXNVMEZCV1N4RFFVRkRMRWxCUVVrc1ZVRk5ia05CTEVWQlFWTkJMRVZCUVZNc1YwRkJZeXhEUVVGRExFbEJRVWtzV1VGTmNrTkJMRVZCUVZOQkxFVkJRVk1zVjBGQll5eERRVUZETEVsQlFVazdRVUZEZWtNc1IwRkJSMEVzVDBGQllVRXNTMEZCVnl4RFFVRkJMRVZCUVVjN1FVTjBRM1pDTEVsQlFVbERPMEZCUVVFc1EwRkRWaXhUUVVGVlFTeEhRVUZuUWp0QlFVbDJRaXhGUVVGQlFTeEZRVUZsUVN4RlFVRmxMRkZCUVZjc1EwRkJReXhKUVVGSkxGTkJTemxEUVN4RlFVRmxRU3hGUVVGbExFdEJRVkVzUTBGQlF5eEpRVUZKTEUxQlNUTkRRU3hGUVVGbFFTeEZRVUZsTEZGQlFWY3NRMEZCUXl4SlFVRkpPMEZCUTJ4RUxFZEJRVWRCTEU5QlFXMUNRU3hMUVVGcFFpeERRVUZCTEVWQlFVYzdRVU5JTVVNc1NVRkJTVU1zUzBGQmRVSXNaMEpCUTNaQ1F5eExRVUZaTEZWQlFWVkVMRXRCUVhWQ0xGZEJRemREUlN4TFFVRnRRaXhoUVVGaFJpeExRVUYxUWl4clFrRkJhMEpCTEV0QlFYVkNMRlZCUTJoSFJ5eExRVUZyUWl4SlFVRkpMRTlCUVU4c1UwRkJVMFlzUzBGQldTeE5RVUZOUXl4TFFVRnRRaXhKUVVGSkxFZEJReTlGUlN4TFFVRjVRaXgxUWtGRGVrSkRMRXRCUVd0RE8wRkJVeTlDTEZOQlFWTkRMRWRCUVZsMlZDeEhRVUZMTzBGQlF6ZENMRk5CUVU5dlZDeEhRVUZuUWl4TFFVRkxjRlFzUTBGQlJ6dEJRVU51UXp0QlFVdFBMRk5CUVZOM1ZDeEhRVUZqY0ZNc1IwRkJUenRCUVVOcVF5eFRRVUZSYVZNc1IwRkJkVUlzUzBGQlMycFRMRU5CUVVzc1MwRkRja01zUTBGQlEydFRMRWRCUVdkRExFdEJRVXRzVXl4RFFVRkxPMEZCUTI1RU8wRkRka0pCTEVsQlFVbHhVeXhMUVVGM1FpeEpRVU40UWtNc1MwRkJjMElzUzBGRGRFSkRMRXRCUVhsQ0xFdEJRM3BDUXl4TFFVRnBReXhMUVZWcVEwTTdRVUZCUVR0QlFVRkJMRVZCUVdkRExGZEJRVms3UVVGRE5VTXNZVUZCVTBFc1JVRkJaVU1zUjBGQlpUdEJRVU51UXl4WFFVRkxMR2xDUVVGcFFpeHZRa0ZCU1N4UFFVTjBRa0VzUzBGRFFTeExRVUZMTEU5QlFVOUJMRU5CUVdFN1FVRkJRU3hKUVVOb1F6dEJRVU5FTEZkQlFVRkVMRVZCUVdVc1ZVRkJWU3hOUVVGTkxGTkJRVlUzVkN4SFFVRkxiMElzUjBGQlR6dEJRVWRxUkN4VlFVRkpNbE1zU1VGQllTeExRVUZMTzBGQlEzUkNMR0ZCUVVsQkxFVkJRVmNzWlVGQlpTeEpRVUZKTDFRc1EwRkJSeXhMUVVOcVF5dFVMRVZCUVZjc1pVRkJaU3hQUVVGUEwxUXNRMEZCUnl4SFFVVjRReXRVTEVWQlFWY3NaVUZCWlN4SlFVRkpMMVFzUjBGQlMyOUNMRU5CUVVzc1IwRkRha015VXp0QlFVRkJMRWxCUTJZc1IwRkRTVVlzUlVGQlpTeFZRVUZWTEZGQlFWRXNVMEZCVlRkVUxFZEJRVXM3UVVGRE5VTXNWVUZCU1N0VUxFbEJRV0VzUzBGQlN6dEJRVU4wUWl4aFFVRkJRU3hGUVVGWExHVkJRV1VzVDBGQlR5OVVMRU5CUVVjc1IwRkROMElyVkR0QlFVRkJMRWxCUTJZc1IwRkRTVVlzUlVGQlpTeFZRVUZWTEUxQlFVMHNVMEZCVlRkVUxFZEJRVXM3UVVGRE1VTXNZVUZCVHl4TFFVRkxMR1ZCUVdVc1NVRkJTVUVzUTBGQlJ6dEJRVUZCTEVsQlF6RkRMRWRCUTBrMlZDeEZRVUZsTEZWQlFWVXNXVUZCV1N4WFFVRlpPMEZCUXpkRExGVkJRVWxITEVsQlFWRTdRVUZEV2l4aFFVRlBMRXRCUVVzc1RVRkJUeXhGUVVOa0xFOUJRVThzVTBGQlZVTXNSMEZCUzJwVkxFZEJRVXM3UVVGRE5VSXNaVUZCUVdsVkxFVkJRVWtzUzBGQlMycFZMRWxCUVUwMFZDeExRVUZwUTBrc1JVRkJUU3hKUVVGSmFGVXNRMEZCUnl4RFFVRkRMRWRCUTNaRWFWVTdRVUZCUVN4TlFVTldMRWRCUVVVc1JVRkJSU3hGUVVOQkxFdEJRVXRPTEVWQlFYTkNPMEZCUVVFc1NVRkRlRU1zUjBGRFNVVXNSVUZCWlN4VlFVRlZMRk5CUVZNc1UwRkJWVU1zUjBGQlpUdEJRVU4yUkN4TlFVRkpRU3hGUVVGakxGTkJRVk5LTEU5QlJUTkNMRXRCUVVzc2FVSkJRV2xDU1N4RlFVTnFRaXhOUVVGTlNDeEZRVUZ6UWl4RlFVTTFRaXhSUVVGVExFVkJRMVFzVDBGQlR5eFRRVUZWVFN4SFFVRkxReXhIUVVGTk8wRkJRemRDTEZsQlFVbERMRWxCUVdGRUxFVkJRVXNzVVVGRGJFSXNTVUZCU1VNc1JVRkJWeXhSUVVGUlVDeEZRVUU0UWp0QlFVTjZSQ3haUVVGSkxFMUJRVTBzU1VGQlNUdEJRVU5XTEdOQlFVazFWQ3hKUVVGTmJWVXNSVUZCVnl4TlFVRk5MRWRCUVVjc1EwRkJReXhIUVVNelFpOVRMRWxCUVZFclV5eEZRVUZYTEUxQlFVMHNTVUZCU1N4SFFVRkhSQ3hGUVVGTExFMUJRVTA3UVVGREwwTXNWVUZCU1Znc1IwRkJXWFpVTEVOQlFVY3NTMEZCUzNkVUxFZEJRV053VXl4RFFVRkxMRXRCUTNaRE5sTXNSVUZCU1N4SlFVRkphbFVzUjBGQlMyOUNMRU5CUVVzN1FVRkJRVHRCUVUweFFpeGxRVUZQTmxNN1FVRkJRU3hOUVVOdVFpeEhRVUZYTEc5Q1FVRkpMRWxCUVVjc1EwRkJSU3hIUVVWU0xFdEJRVXNzWlVGQlpTeFBRVUZQVWl4UFFVTXpRaXhMUVVGTExHbENRVUZwUWl4SlFVRkpMRWxCUVVrc1RVRkJUU3hMUVVGTExFdEJRVXNzWlVGQlpTeFRRVUZUTEVWQlEycEZMRkZCUVZNc1JVRkRWQ3hOUVVGTkxFZEJRVWRCTEVWQlFYRkNMRU5CUVVNN1FVRkJRU3hKUVVWb1JDeEhRVU5KU1N4RlFVRmxMRlZCUVZVc1VVRkJVU3hYUVVGWk8wRkJRM3BETEdGQlFVOHNUVUZCVFN4TFFVRkxMRXRCUVVzc1pVRkJaU3hMUVVGTkxFTkJRVUVzUlVGQlJUdEpRVU4wUkN4SFFVTkpRU3hGUVVGbExGVkJRVlVzVTBGQlV5eFhRVUZaTzBGQlF6RkRMRlZCUVVsRkxFbEJRV0VzU1VGQlNVWTdRVUZEY2tJc1lVRkJRVVVzUlVGQlZ5eHBRa0ZCYVVJc1NVRkJTU3hKUVVGSkxFdEJRVXNzWTBGQll5eEhRVU5vUkVFN1FVRkJRU3hKUVVObUxFZEJRMWRHTzBGQlFVRXNSVUZEV0RzN1FVTnVSazhzVTBGQlUwOHNSMEZCYVVKT0xFZEJRV1U3UVVGRE5VTXNVMEZCVHl4SlFVRkpSQ3hIUVVGbFF5eERRVUZoTzBGQlF6TkRPMEZEUTA4c1NVRkJTVGRUTEV0QlFWVXdUeXhIUVVGWExGbEJRV0VzUjBOTGJFTnVSaXhMUVVGUGRVSXNSVUZCVVN4VFFVRlZMRWREU21oRGMwazdRVUZCUVR0QlFVRkJMRVZCUVcxRExGZEJRVms3UVVGREwwTXNZVUZCVTBFc1NVRkJiMEk3UVVGQlFTeEpRVU0xUWp0QlFVTkVMRmRCUVVGQkxFVkJRV3RDTEZWQlFWVXNWMEZCVnl4VFFVRlZla2NzUjBGQlR6aEZMRWRCUVZVM1JTeEhRVUZWTzBGQlEzaEZMR0ZCUVU5dlFqdEJRVUZCTEVsQlEyWXNSMEZEVjI5R08wRkJRVUVzUlVGRFdDeEZRVUZETzBGQlFVRXNSMEZGVlVNc1MwRkJjMElzU1VGQlNVUXNSMEZCYlVJc1IwTlljRVIyU1N4TFFVRlhMRmRCU1ZoNVNUdEJRVUZCTzBGQlFVRXNSVUZCTkVJc1YwRkJXVHRCUVVWNFF5eGhRVUZUUVN4SlFVRmhPMEZCUVVFc1NVRkRja0k3UVVGRlJDeFhRVUZCUVN4RlFVRlhMR05CUVdNc1YwRkJXVHRCUVVOcVF5eGhRVUZMTEV0QlFVc3NZMEZEVGl4TFFVRkxMRmxCUVZrc1NVRkJTVUVzVFVGRmJFSXNTMEZCU3p0QlFVRkJMRWxCUTNCQ0xFZEJTMGxCTEVWQlFWY3NWVUZCVlN4NVFrRkJlVUlzVTBGQlZVTXNSMEZCVlR0QlFVTTVSQ3hoUVVGUGJFc3NSMEZCWlhkQ0xFbEJRVlV3U1N4SFFVRlZla2tzUlVGQlVTeFRRVUZWTEVOQlFVRTdRVUZCUVN4SlFVTndSU3hIUVVsSmQwa3NSVUZCVnl4VlFVRlZMRzFDUVVGdFFpeFhRVUZaTzBGQlEyaEVMR0ZCUVU4elNpeEhRVUZWYTBJc1JVRkJVU3hMUVVGTGQwazdRVUZCUVN4SlFVTjBReXhIUVVsSlF5eEZRVUZYTEZWQlFWVXNWMEZCVnl4VFFVRlZhRlFzUjBGQlRTdFJMRWRCUVZNeFRTeEhRVUZUTzBGQlF6bEVMR0ZCUVU4c1MwRkJTeXh0UWtGQmJVSXNVMEZCVTNKRkxFZEJRVTByVVN4SFFVRlRNVTBzUTBGQlR6dEJRVUZCTEVsQlEzUkZMRWRCUlVreVR5eEZRVUZYTEZWQlFWVXNWVUZCVlN4WFFVRlpPMEZCUTNaRExFMUJRVUY2U2l4SFFVRnBRbWRDTEVsQlFWVkRMRVZCUVZFc1UwRkJWU3hEUVVGQk8wRkJRVUVzU1VGRGNrUXNSMEZEVjNkSk8wRkJRVUVzUlVGRFdEdEhRM1JEVjBVc1MwRkJWVVlzUjBGQlZ5eFpRVUZoTEVkRFJIcERSenRCUVVGQk8wRkJRVUVzUlVGQmRVTXNWMEZCV1R0QlFVTnVSQ3hoUVVGVFFTeEpRVUYzUWp0QlFVRkJMRWxCUTJoRE8wRkJSVVFzVjBGQlFVRXNSVUZCYzBJc1ZVRkJWU3hUUVVGVExGTkJRVlZzUml4SFFVRlZiVVlzUjBGQlZUdEJRVUZCTEVsQlFVRXNSMEZGZGtWRUxFVkJRWE5DTEZWQlFWVXNWVUZCVlN4VFFVRlZlbFFzUjBGQlV6QlVMRWRCUVZVN1FVRkRia1VzWVVGQlR6RlVPMEZCUVVFc1NVRkRaaXhIUVVOSmVWUXNSVUZCYzBJc1ZVRkJWU3hUUVVGVExGZEJRVms3UVVGRGFrUXNZVUZCVHp0SlFVTm1MRWRCUTFkQk8wRkJRVUVzUlVGRFdEdEhRMWhKUlN4TFFVRmpla2dzUjBGQmFVSXNNa0pCUVRKQ08wRkJUM1pFTEZOQlFWTXdTQ3hIUVVGWE5WUXNSMEZCVXp0QlFVTm9ReXhUUVVGUFFTeEZRVUZSTEZOQlFWTXlWQ3hGUVVGWExFdEJRVXM3UVVGRE5VTTdRVUZOVHl4VFFVRlRSU3hMUVVGdFFqdEJRVU12UWl4VFFVRlBSQ3hIUVVGWGJFWXNSMEZCVnl4WlFVRlhMRVZCUVVjc1QwRkJVU3hEUVVGQk8wRkJRM1pFTzBGQlQwOHNVMEZCVTI5R0xFZEJRVmM1VkN4SFFVRlRLMVFzUjBGQlV6dEJRVU42UXl4VFFVRlBMMVFzUlVGQlVTeFRRVUZUTWxRc1NVRkJZVWtzUTBGQlR6dEJRVU5vUkR0QlFVMVBMRk5CUVZORExFZEJRV05vVlN4SFFVRlRPMEZCUTI1RExGTkJRVTlCTEVWQlFWRXNXVUZCV1RKVUxFVkJRVmM3UVVGRE1VTTdRVU5xUTBFc1NVRkJTVGxKTEV0QlFWY3NaVUZEV0c5S0xFdEJRVEpDTEVsQlFVbFNMRTFCU1M5Q1V6dEJRVUZCTzBGQlFVRXNSVUZCWjBNc1YwRkJXVHRCUVVVMVF5eGhRVUZUUVN4SlFVRnBRanRCUVVOMFFpeFhRVUZMTEdkQ1FVRm5RbTVKTEVsQlEzSkNMRXRCUVVzc1lVRkJZVFpJTEVsQlEyeENMRXRCUVVzc2JVSkJRVzFDUXl4SlFVTjRRaXhMUVVGTExHRkJRV0ZETEVsQlEyeENMRXRCUVVzc1owSkJRV2RDUlR0QlFVRkJMRWxCUTNoQ08wRkJSVVFzVjBGQlFVVXNSVUZCWlN4alFVRmpMRmRCUVZrN1FVRkRja01zWVVGQlN5eExRVUZMTEdOQlEwNHNTMEZCU3l4WlFVRlpMRWxCUVVsQkxFMUJSV3hDTEV0QlFVczdRVUZCUVN4SlFVTndRaXhIUVUxSlFTeEZRVUZsTEZWQlFWVXNjMEpCUVhOQ0xGTkJRVlZETEVkQlFWazdRVUZEYWtVc1lVRkJUemxMTEVkQlFXVjNRaXhKUVVGVmMwb3NSMEZCV1hKS0xFVkJRVkVzVTBGQlZTeERRVUZCTzBGQlFVRXNTVUZEZEVVc1IwRlJTVzlLTEVWQlFXVXNWVUZCVlN4VFFVRlRMRk5CUVZWc1ZTeEhRVUZUYjA4c1IwRkJVMmRITEVkQlFWRTdRVUZEYkVVc1lVRkJTVUVzVFVGQlZ5eFhRVUZWUVN4SlFVRlRMMFlzUzBGRE0wSXNTMEZCU3l4MVFrRkJkVUlzVDBGQlQzSlBMRWRCUVZOdlR5eEhRVUZUWjBjc1EwRkJUVHRCUVVGQkxFbEJRekZGTEVkQlVVbEdMRVZCUVdVc1ZVRkJWU3hWUVVGVkxGTkJRVlZzVlN4SFFVRlRiMDhzUjBGQlUybEhMRWRCUVZFN1FVRkRia1VzWVVGQlNVRXNUVUZCVnl4WFFVRlZRU3hKUVVGVGJFY3NTMEZETTBJc1MwRkJTeXgxUWtGQmRVSXNVVUZCVVc1UExFZEJRVk52VHl4SFFVRlRhVWNzUTBGQlRUdEJRVUZCTEVsQlF6TkZMRWRCU1VsSUxFVkJRV1VzVlVGQlZTeFRRVUZUTEZkQlFWazdRVUZETVVNc1lVRkJUeXhMUVVGTExIVkNRVUYxUWp0SlFVTXpReXhIUVVWSlFTeEZRVUZsTEZWQlFWVXNWVUZCVlN4WFFVRlpPMEZCUXpORExFMUJRVUZ5U3l4SFFVRnBRbWRDTEVsQlFWVkRMRVZCUVZFc1UwRkJWU3hEUVVGQk8wRkJRVUVzU1VGRGNrUXNSMEZEU1c5S0xFVkJRV1VzVlVGQlZTeDFRa0ZCZFVJc1YwRkJXVHRCUVVONFJDeGhRVUZQZGtzc1IwRkJWV3RDTEVWQlFWRXNTMEZCUzI5S08wRkJRVUVzU1VGRGRFTXNSMEZEVjBNN1FVRkJRU3hGUVVOWU8wZERia1ZYU1N4TFFVRmpTaXhIUVVGbExGbEJRV0VzUjBORGFrUnlTaXhMUVVGWExGTkJTVmd3U2p0QlFVRkJPMEZCUVVFc1JVRkJNRUlzVjBGQldUdEJRVVYwUXl4aFFVRlRRU3hKUVVGWE8wRkJRMmhDTEZkQlFVc3NkVUpCUVhWQ0xFbEJRVWsxUXl4TlFVTm9ReXhMUVVGTExHdENRVUZyUW5CQ0xFbEJRM1pDTEV0QlFVc3NjVUpCUVhGQ1JDeEpRVU14UWl4TFFVRkxMR0ZCUVdGV0xFbEJRMnhDTEV0QlFVc3NWVUZCVlVvc1NVRkRaaXhMUVVGTExHZENRVUZuUWtNc1NVRkRja0lzUzBGQlN5eHBRa0ZCYVVKTkxFbEJRM1JDTEV0QlFVc3NWVUZCVlV3c1NVRkRaaXhMUVVGTExHbENRVUZwUWtjN1FVRkJRU3hKUVVONlFqdEJRVVZFTEZkQlFVRXdSU3hGUVVGVExHTkJRV01zVjBGQldUdEJRVU12UWl4aFFVRkxMRXRCUVVzc1kwRkRUaXhMUVVGTExGbEJRVmtzU1VGQlNVRXNUVUZGYkVJc1MwRkJTenRCUVVGQkxFbEJRM0JDTEVkQlRVbEJMRVZCUVZNc1ZVRkJWU3d3UWtGQk1FSXNVMEZCVldoQ0xFZEJRVlU3UVVGRE4wUXNWVUZCU1dsQ0xFbEJRVlZ1VEN4SFFVRmxkMElzU1VGQlZTeExRVUZMTEhOQ1FVRnpRa01zUlVGQlVTeFRRVUZSTEVOQlFVVTdRVUZEY0VZc1lVRkJTVEJLTEV0QlEwRXNTMEZCU3l4eFFrRkJjVUlzV1VGQldXcENMRU5CUVZFc1IwRkZNME5wUWp0QlFVRkJMRWxCUTJZc1IwRkpTVVFzUlVGQlV5eFZRVUZWTEc5Q1FVRnZRaXhYUVVGWk8wRkJReTlETEdGQlFVODFTeXhIUVVGVmEwSXNSVUZCVVN4TFFVRkxMRXRCUVVzN1FVRkJRU3hKUVVNelF5eEhRVWxKTUVvc1JVRkJVeXhWUVVGVkxGbEJRVmtzVTBGQlZXcFZMRWRCUVUwclVTeEhRVUZUTzBGQlEzQkVMR0ZCUVU4c1MwRkJTeXhyUWtGQmJVSXNSVUZCUXl4VlFVRlZMMUVzUjBGQlRTdFJMRU5CUVU4N1FVRkJRU3hKUVVNdlJDeEhRVVZKYTBRc1JVRkJVeXhWUVVGVkxGVkJRVlVzVjBGQldUdEJRVU55UXl4TlFVRkJNVXNzUjBGQmFVSm5RaXhKUVVGVlF5eEZRVUZSTEZOQlFWVXNRMEZCUVN4SFFVTTNReXhMUVVGTExIVkNRVUYxUWl4SlFVRkpOa2M3U1VGRGVFTXNSMEZEVnpSRE8wRkJRVUVzUlVGRFdEdEhRM1pFVjBVc1MwRkJVVVlzUjBGQlV5eFpRVUZoTzBGRE1FSjZReXhOUVVGbFJ5eExRVUZCTzBGQlFVRXNSVUZEV0N4VFFVRlRNVlU3UVVGQlFTeEZRVU5VTEUxQlFVMTFTanRCUVVGQkxFVkJRMDRzVTBGQlUybExPMEZCUVVFc1JVRkRWQ3hoUVVGaFl6dEJRVUZCTEVWQlEySXNUMEZCVDBjN1FVRkRXRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMmhFVHl4TlFVRk5SU3hGUVVGVE8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVZGc1FpeFpRVUZaTEVWQlFVVXNUVUZCUVVNc1NVRkJUeXhIUVVGSExFOUJRVUZETEVsQlFWRXNSMEZCUnl4TFFVRkJReXhKUVVGTkxFdEJRVTA3UVVGRE0wTXNVMEZCU3l4TlFVRk5RU3hIUVVOWUxFdEJRVXNzVVVGQlVVUXNSMEZEWWl4TFFVRkxMRTlCUVU5RU8wRkJRVUVzUlVGRFpqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJUMFFzVDBGQlR5eFRRVUZUUnl4SFFVRk5PMEZCUTJ4Q0xGRkJRVWtzUTBGQlEwRTdRVUZEUkN4WlFVRk5MRWxCUVVrc1RVRkJUU3d3UWtGQk1FSTdRVUZQT1VNc1YwRk1aU3hKUVVGSlNpeEZRVUZUTzBGQlFVRXNUVUZEZUVJc1RVRkJUVWtzUlVGQlN5eFpRVUZoTzBGQlFVRXNUVUZEZUVJc1QwRkJUMEVzUlVGQlN5eFRRVUZSTEVsQlFVczdRVUZCUVN4TlFVTjZRaXhMUVVGTFFTeEZRVUZMTEZGQlFWTTdRVUZCUVN4SlFVTXZRaXhEUVVGVE8wRkJRVUVzUlVGRlNqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJUMFFzVDBGQlR5eE5RVUZOTlZVc1IwRkJUenRCUVVOb1FpeFJRVUZKTkVjc1IwRkJTVFpETEVkQlFVbDFRaXhIUVVGSk5rb3NSMEZCU1VNc1IwRkJTVU03UVVGRGVFSXNVVUZCU1N4RFFVRkRMMVVzUzBGQlUwRXNSVUZCVFN4WFFVRlhPMEZCUXpOQ08wRkJSVW9zVlVGQlRXZFdMRWxCUVU4c01FVkJRVEJGTEV0QlFVdG9WaXhEUVVGTE8wRkJRMnBITEZGQlFVbG5WaXhIUVVGTk8wRkJRMDRzV1VGQlRWQXNTVUZCVHl4VlFVRlZhRXdzUzBGQlRUZERMRWxCUVV0dlR5eEZRVUZMTEZsQlFWa3NVVUZCVVhCUExFMUJRVThzVTBGQlV5eFRRVUZUUVN4RlFVRkhMRlZCUVZVc1VVRkJVVFpETEUxQlFVOHNVMEZCVTBFc1NVRkJTeXhKUVVGSkxFVkJRVVVzUjBGRE9VaHBUQ3hKUVVGUkxGVkJRVlZITEV0QlFVMDNTaXhKUVVGTFowc3NSVUZCU3l4WlFVRlpMRkZCUVZGb1N5eE5RVUZQTEZOQlFWTXNVMEZCVTBFc1JVRkJSeXhYUVVGWExGRkJRVkUyU2l4TlFVRlBMRk5CUVZOQkxFbEJRVXNzU1VGQlNTeEZRVUZGTEVkQlEyaEpSaXhKUVVGTkxGVkJRVlZKTEV0QlFVMUVMRWxCUVV0RkxFVkJRVXNzV1VGQldTeFJRVUZSUml4TlFVRlBMRk5CUVZNc1UwRkJVMEVzUlVGQlJ5eFRRVUZUTEZGQlFWRkRMRTFCUVU4c1UwRkJVMEVzU1VGQlN5eEpRVUZKTEVWQlFVVTdRVUZEYkVrc1lVRkJUeXhKUVVGSlVDeEZRVUZUTEVWQlFVVXNUVUZCUVVNc1IwRkJUU3hQUVVGQlF5eEhRVUZQTEV0QlFVRkRMRVZCUVVzc1EwRkJRVHRCUVVGQk8wRkJSVFZETEZWQlFVMU5MRWxCUVZFc1MwRkJTeXhOUVVGTmFsWXNRMEZCU3p0QlFVTTVRaXhSUVVGSkxFTkJRVU1zVFVGQlRXbFdMRU5CUVVzc1IwRkJSenRCUVVObUxGbEJRVTFNTEVsQlFVOHNTVUZCU1N4TFFVRkxTeXhEUVVGTE8wRkJRek5DTEdGQlFVOHNTMEZCU3l4VFFVRlRUQ3hEUVVGSk8wRkJRVUU3UVVGRk4wSXNWVUZCVFN4SlFVRkpMRTFCUVUwc2EwUkJRV3RFTlZVc1IwRkJUenRCUVVGQkxFVkJRelZGTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0RUxGZEJRVmM3UVVGRFVDeFhRVUZQTEVkQlFVZHJWaXhGUVVGakxFdEJRVXNzVFVGQlRTeERRVUZETEV0QlFVdEJMRVZCUVdNc1MwRkJTeXhMUVVGTExFdEJRVXRCTEVWQlFXTXNTMEZCU3l4SFFVRkhPMEZCUVVFc1JVRkRMMFk3UVVGRFREdEJRVU5QTEZOQlFWTkJMRVZCUVdORExFZEJRVk5ETEVsQlFWTXNSMEZCUnp0QlFVTXZReXhUUVVGUFJDeEZRVUZSTEZOQlFWVXNSVUZCUXl4VFFVRlRReXhIUVVGUkxFZEJRVWM3UVVGRGJFUTdPenRCUTI1RlFTeFRRVUZQTEdWQlFXTjZXQ3hIUVVGVkxHTkJRV01zUlVGQlJTeFBRVUZQTEVkQlFVa3NRMEZCUlN4SFFVTTFSRUVzUlVGQlFTeFpRVUZ2UWtFc1JVRkJaMElzVVVGQlFVRXNSVUZCUVN4MVFrRkJLMEk3UVVGRGJrVXNVVUZCVFRCWUxFbEJRVkU3UVVGQlFTeEpRVU5XTEVWQlFVVXNUVUZCVFN4VFFVRlRMRkZCUVZFc1NVRkJTenRCUVVGQkxFbEJRemxDTEVWQlFVVXNUVUZCVFN4VlFVRlZMRkZCUVZFc1NVRkJTenRCUVVGQkxFbEJReTlDTEVWQlFVVXNUVUZCVFN4VFFVRlRMRkZCUVZFc1NVRkJTenRCUVVGQkxFbEJRemxDTEVWQlFVVXNUVUZCVFN4UlFVRlJMRkZCUVZFc1NVRkJTenRCUVVGQkxFbEJRemRDTEVWQlFVVXNUVUZCVFN4VFFVRlRMRkZCUVZFc1NVRkJTenRCUVVGQkxFbEJRemxDTEVWQlFVVXNUVUZCVFN4WFFVRlhMRkZCUVZFc1NVRkJTenRCUVVGQkxFbEJRMmhETEVWQlFVVXNUVUZCVFN4WFFVRlhMRkZCUVZFc1NVRkJTenRCUVVGQkxFVkJRM0JETEVkQlJVMHNTVUZCU1N4RFFVRkRiRllzUjBGQlRXMVdMRTFCUVZNc1QwRkJUMjVXTEhWQ1FVRXdRbTFXTEU5QlEzSkVReXhKUVVGblFpeEpRVUZKTEU5QlFVODdRVUZCUVN4SlFVTTNRanRCUVVGQkxFbEJRMEVzUlVGQlJTeFRRVUZUTEVkQlFVYzdRVUZCUVN4SlFVTmtMRVZCUVVVc1ZVRkJWU3hIUVVGSE8wRkJRVUVzU1VGRFppeEZRVUZGTEZOQlFWTXNSMEZCUnp0QlFVRkJMRWxCUTJRc1JVRkJSU3hSUVVGUkxFZEJRVWM3UVVGQlFTeEpRVU5pTzBGQlFVRXNTVUZEUVN4RlFVRkZMRk5CUVZNc1IwRkJSenRCUVVGQkxFbEJRMlFzUlVGQlJTeFhRVUZYTEVkQlFVYzdRVUZCUVN4SlFVTm9RaXhGUVVGRkxGZEJRVmNzUjBGQlJ6dEJRVUZCTEVsQlEyaENPMEZCUVVFN1FVRkJRU3hGUVVOS0xFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTTdRVUZEVml4WFFVRlRReXhGUVVGVExFZEJRVWM3UVVGRGFrSXNVVUZCU1N4UlFVRk5MRTFCUVUwc1RVRkJUU3hWUVVGaExFMUJRVTA3UVVGSGVrTXNZVUZCVHl4WFFVRlhMRVZCUVVVc1VVRkJVU3hMUVVGTExFZEJRVWNzUTBGQlF6dEJRVUZCTEVWQlEzaERPMEZCUTBRc1JVRkJRVGRZTEVWQlFVRXNkVUpCUVN0Q0xFbEJRVWtzVFVGQlRTeHJRa0ZCYTBJN1FVRkRNMFFzVjBGQlV6aFlMRVZCUVUxRExFZEJRV0U3UVVGRGVFSXNWVUZCVFVNc1NVRkJVVW9zUlVGQll5eExRVUZMUnl4RFFVRlhPMEZCUXpWRExGRkJRVWtzUTBGQlEwTXNTMEZCVXl4RFFVRkRRU3hGUVVGTk8wRkJRMnBDTEZsQlFVMW9XU3hGUVVGUk8wRkJSV3hDTEZGQlFVbHBXU3hKUVVGUk8wRkJRMW9zVlVGQlRVTXNTVUZCVXl4RFFVRkJPMEZCUTJZc1pVRkJWeXhGUVVGRkxFMUJRVUZRTEVWQlFVMHNTMEZCU1VRN1FVRkRia0lzVFVGQlNVMHNSVUZCVFN4UFFVRlBUQ3hEUVVGSkxFMUJRMnBDVFN4SlFVRlJMRWxCUTFKRExFVkJRVTlRTEVOQlFVa3NTVUZCU1VVc1JVRkJVMGNzUlVGQlRTeFBRVUZQVEN4RFFVRkpMRU5CUVVNN1FVRkhiRVFzVVVGQlNVMDdRVUZEUVN4WlFVRk5hbGtzUlVGQlVUdEJRVVZzUWl4VlFVRk5iVmtzU1VGQlYwUTdRVUZEYWtJc1YwRkJTVVlzUlVGQlRTeFBRVUZQTEdGQlEySkhMRVZCUVZNc1YwRkJWeXhMUVVWcVFrRTdRVUZCUVN4RlFVTldPMEZCUTBRc1JVRkJRVzVaTEVWQlFVRXNVVUZCWjBJNFdEdEJRVU5vUWl4UlFVRk5jRmdzU1VGQlNTeERRVUZETUZnc1IwRkJVVU1zVFVGQll6dEJRVU0zUWl4UlFVRkpMRU5CUVVORU8wRkJRMFE3UVVGRlNpeFJRVUZKUlN4SlFVRnBRa1lzUlVGQlR6dEJRVU0xUWl4VlFVRk5SeXhKUVVGblFrUXNSVUZCWlN4UlFVRlJMRWRCUVVjN1FVRkRhRVFzVVVGQlNVTXNTVUZCWjBJc1NVRkJTVHRCUVVOd1FpeFpRVUZOUXl4SlFVRlpMRk5CUVZOR0xFVkJRV1VzVFVGQlRVTXNTVUZCWjBJc1EwRkJReXhIUVVGSExFVkJRVVU3UVVGRGRFVXNUVUZCUVVRc1NVRkJhVUpHTEVWQlFVOHNVVUZCVVVrc1NVRkJXVVFzU1VGQlowSXNRMEZCUXp0QlFVRkJPMEZCUldwRkxGZEJRVTlFTEVsQlFXbENSRHRCUVVGQkxFVkJRelZDTzBGQlEwRXNWMEZCVTBrc1JVRkJWVTRzUjBGQlZUdEJRVU42UWl4WFFVRkpMRU5CUVVOQkxFVkJRVk1zVTBGRFZpeERRVUZEUVN4RlFVRlRMRlZCUTFZc1EwRkJRMEVzUlVGQlV5eFRRVU5XTEVOQlFVTkJMRVZCUVZNc1VVRkRWaXhEUVVGRFFTeEZRVUZUTEZOQlExWXNRMEZCUTBFc1JVRkJVeXhYUVVOV0xFTkJRVU5CTEVWQlFWTXNWVUZEU0N4VFFVVktPMEZCUVVFc1RVRkRTRUVzUlVGQlV5eFpRVUZaTzBGQlFVRXNUVUZEY2tJN1FVRkJRU3hOUVVOQmVsZ3NSVUZCUlhsWUxFVkJRVk1zVDBGQlR5eEhRVUZITzBGQlFVRXNUVUZEY2tKNldDeEZRVUZGZVZnc1JVRkJVeXhSUVVGUkxFZEJRVWM3UVVGQlFTeE5RVU4wUW5wWUxFVkJRVVY1V0N4RlFVRlRMRTlCUVU4c1IwRkJSenRCUVVGQkxFMUJRM0pDZWxnc1JVRkJSWGxZTEVWQlFWTXNUVUZCVFN4SFFVRkhPMEZCUVVFc1QwRkRia0pCTEVWQlFWTXNVMEZCVTBFc1JVRkJVeXhYUVVGWFFTeEZRVUZUTEZsQlFWazdRVUZCUVN4TlFVTTFSSHBZTEVWQlFVVjVXQ3hGUVVGVExFOUJRVThzUjBGQlJ6dEJRVUZCTEUxQlEzSkNlbGdzUlVGQlJYbFlMRVZCUVZNc1UwRkJVeXhIUVVGSE8wRkJRVUVzVFVGRGRrSjZXQ3hGUVVGRmVWZ3NSVUZCVXl4VFFVRlRMRWRCUVVjN1FVRkJRU3hKUVVNeFFpeEZRVU5KTEU5QlFVOHNUMEZCVHl4RlFVTmtMRXRCUVVzc1JVRkJSVHRCUVVGQkxFVkJRMlk3UVVGRFJDeEZRVUZCYmxrc1JVRkJRU3haUVVGdlFubFpPenRCUTNwR1lpeE5RVUZOUXl4SFFVRlRPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGaGJFSXNXVUZCV1N4RlFVRkZMRTlCUVVGRExFbEJRVkVzUjBGQlJ5eFJRVUZCUXl4SlFVRlRMRWRCUVVjc1QwRkJRVU1zU1VGQlVTeEhRVUZITEUxQlFVRkRMRWxCUVU4c1IwRkJSeXhQUVVGQlF5eEpRVUZSTEVkQlFVY3NVMEZCUVVNc1NVRkJWU3hIUVVGSExGTkJRVUZETEVsQlFWVXNSMEZCUnl4VlFVRkJReXhKUVVGWExFMUJRVlU3UVVGRGFFZ3NVVUZCU1ZBc1NVRkJVU3hMUVVGTFFTeEpRVUZSTzBGQlEzSkNMRmxCUVUwc1NVRkJTU3hOUVVGTkxHbERRVUZwUXp0QlFVVnlSQ3hSUVVGSlF5eEpRVUZUTEV0QlFVdEJMRWxCUVZNN1FVRkRka0lzV1VGQlRTeEpRVUZKTEUxQlFVMHNaME5CUVdkRE8wRkJSWEJFTEZGQlFVbERMRWxCUVZFc1MwRkJTMEVzU1VGQlVUdEJRVU55UWl4WlFVRk5MRWxCUVVrc1RVRkJUU3dyUWtGQkswSTdRVUZGYmtRc1VVRkJTVU1zU1VGQlR5eExRVUZMUVN4SlFVRlBPMEZCUTI1Q0xGbEJRVTBzU1VGQlNTeE5RVUZOTERaQ1FVRTJRanRCUVVWcVJDeFJRVUZKUXl4SlFVRlJMRXRCUVV0QkxFbEJRVkU3UVVGRGNrSXNXVUZCVFN4SlFVRkpMRTFCUVUwc0swSkJRU3RDTzBGQlJXNUVMRkZCUVVsRExFbEJRVlVzUzBGQlMwRXNTVUZCVlR0QlFVTjZRaXhaUVVGTkxFbEJRVWtzVFVGQlRTeHBRMEZCYVVNN1FVRkZja1FzVVVGQlNVTXNTVUZCVlN4TFFVRkxRU3hKUVVGVk8wRkJRM3BDTEZsQlFVMHNTVUZCU1N4TlFVRk5MR2xEUVVGcFF6dEJRVVZ5UkN4VFFVRkxUaXhKUVVGUkxFdEJRVXRETEVsQlFWTXNUVUZCVFVNc1NVRkJVVHRCUVVOeVF5eFpRVUZOTEVsQlFVa3NUVUZCVFN4cFJFRkJhVVE3UVVGRmNrVXNVMEZCU3l4UlFVRlJSaXhIUVVOaUxFdEJRVXNzVTBGQlUwTXNSMEZEWkN4TFFVRkxMRkZCUVZGRExFZEJRMklzUzBGQlN5eFBRVUZQUXl4SFFVTmFMRXRCUVVzc1VVRkJVVU1zUjBGRFlpeExRVUZMTEZWQlFWVkRMRWRCUTJZc1MwRkJTeXhWUVVGVlF5eEhRVU5tTEV0QlFVc3NWMEZCVjBNN1FVRkJRU3hGUVVOdVFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJUMFFzVDBGQlR5eE5RVUZOTjFjc1IwRkJUenRCUVVOb1FpeFJRVUZKTkVjc1IwRkJTVFpETEVkQlFVbDFRaXhIUVVGSk5rb3NSMEZCU1VNc1IwRkJTVU1zUjBGQlNTdENMRWRCUVVsRE8wRkJRMmhETEZGQlFVa3NRMEZCUXk5WExFdEJRVk5CTEVWQlFVMHNWMEZCVnp0QlFVTXpRanRCUVVWS0xGVkJRVTA0Vml4SlFVRlhhMElzVTBGQlkyaFlMRU5CUVVzN1FVRkRjRU1zVjBGQlR5eEpRVUZKY1Zjc1IwRkJVenRCUVVGQkxFMUJRMmhDTEZGQlFWRjZVQ3hKUVVGTGExQXNSVUZCVXl4WFFVRlhMRkZCUVZGc1VDeE5RVUZQTEZOQlFWTkJMRWxCUVVzN1FVRkJRU3hOUVVNNVJDeFRRVUZUTmtNc1NVRkJTM0ZOTEVWQlFWTXNXVUZCV1N4UlFVRlJjazBzVFVGQlR5eFRRVUZUUVN4SlFVRkxPMEZCUVVFc1RVRkRhRVVzVVVGQlVYVkNMRWxCUVVzNFN5eEZRVUZUTEZkQlFWY3NVVUZCVVRsTExFMUJRVThzVTBGQlUwRXNTVUZCU3p0QlFVRkJMRTFCUXpsRUxFOUJRVTgyU2l4SlFVRkxhVUlzUlVGQlV5eFZRVUZWTEZGQlFWRnFRaXhOUVVGUExGTkJRVk5CTEVsQlFVczdRVUZCUVN4TlFVTTFSQ3hSUVVGUlF5eEpRVUZMWjBJc1JVRkJVeXhYUVVGWExGRkJRVkZvUWl4TlFVRlBMRk5CUVZOQkxFbEJRVXM3UVVGQlFTeE5RVU01UkN4VlFVRlZReXhKUVVGTFpTeEZRVUZUTEdGQlFXRXNVVUZCVVdZc1RVRkJUeXhUUVVGVFFTeEpRVUZMTzBGQlFVRXNUVUZEYkVVc1ZVRkJWU3RDTEVsQlFVdG9RaXhGUVVGVExHRkJRV0VzVVVGQlVXZENMRTFCUVU4c1UwRkJVMEVzU1VGQlN6dEJRVUZCTEUxQlEyeEZMRmRCUVZkRExFbEJRVXRxUWl4RlFVRlRMR05CUVdNc1VVRkJVV2xDTEUxQlFVOHNVMEZCVTBFc1NVRkJTenRCUVVGQkxFbEJRMmhHTEVOQlFWTTdRVUZCUVN4RlFVTktPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRFTEZkQlFWYzdRVUZEVUN4WFFVRlBSU3hIUVVGQlFTeFZRVUZyUWl4SlFVRkpPMEZCUVVFc1JVRkRhRU03UVVGRFREdEJRemRGVHl4TlFVRk5ReXhIUVVGVE8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGVmJFSXNXVUZCV1N4RlFVRkZMRTlCUVVGU0xFbEJRVkVzUjBGQlJ5eFRRVUZCUXl4SlFVRlZMRWRCUVVjc1UwRkJRVU1zU1VGQlZTeEhRVUZITEdGQlFVRlBMRWxCUVdNc1MwRkJUVHRCUVVOdVJTeFJRVUZKVkN4SlFVRlJMRXRCUVV0QkxFbEJRVkU3UVVGRGNrSXNXVUZCVFN4SlFVRkpMRTFCUVUwc0swSkJRU3RDTzBGQlJXNUVMRkZCUVVsRExFbEJRVlVzUzBGQlMwRXNTVUZCVlR0QlFVTjZRaXhaUVVGTkxFbEJRVWtzVFVGQlRTeHBRMEZCYVVNN1FVRkZja1FzVVVGQlNVTXNTVUZCVlN4TFFVRkxRU3hKUVVGVk8wRkJRM3BDTEZsQlFVMHNTVUZCU1N4TlFVRk5MR2xEUVVGcFF6dEJRVVZ5UkN4UlFVRkpUeXhKUVVGakxFdEJRVXRCTEVsQlFXTTdRVUZEYWtNc1dVRkJUU3hKUVVGSkxFMUJRVTBzWjBSQlFXZEVPMEZCUlhCRkxGTkJRVXNzVVVGQlVWUXNSMEZEWWl4TFFVRkxMRlZCUVZWRExFZEJRMllzUzBGQlN5eFZRVUZWUXl4SFFVTm1MRXRCUVVzc1kwRkJZMDg3UVVGQlFTeEZRVU4wUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlQwUXNUMEZCVHl4VFFVRlRka01zUjBGQlRUdEJRVU5zUWl4UlFVRkpMRU5CUVVOQk8wRkJRMFFzV1VGQlRTeEpRVUZKTEUxQlFVMHNNRUpCUVRCQ08wRkJSVGxETEZkQlFVOHNTVUZCU1hORExFZEJRVk03UVVGQlFTeE5RVU5vUWl4UFFVRlBkRU1zUlVGQlN5eFRRVUZWTzBGQlFVRXNUVUZEZEVJc1UwRkJVMEVzUlVGQlN5eFhRVUZaTzBGQlFVRXNUVUZETVVJc1UwRkJVMEVzUlVGQlN5eFhRVUZaTzBGQlFVRXNUVUZETVVJc1lVRkJZVUVzUlVGQlN5eG5Ra0ZCWlN4SlFVRkxPMEZCUVVFc1NVRkRiRVFzUTBGQlV6dEJRVUZCTEVWQlEwbzdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVTlFTEU5QlFVOHNUVUZCVFRWVkxFZEJRVTg3UVVGRGFFSXNVVUZCU1RSSExFZEJRVWsyUXl4SFFVRkpkVUlzUjBGQlNUWktMRWRCUVVsRExFZEJRVWxETEVkQlFVa3JRaXhIUVVGSlF6dEJRVU5vUXl4UlFVRkpMRU5CUVVNdlZ5eExRVUZUUVN4RlFVRk5MRmRCUVZjN1FVRkRNMEk3UVVGRlNpeFZRVUZOYVZZc1NVRkJVU3hMUVVGTExFMUJRVTFxVml4RFFVRkxPMEZCUXpsQ0xGRkJRVWtzVFVGQlRXbFdMRU5CUVVzc1IwRkJSenRCUVVOa0xGbEJRVTFFTEVsQlFVOHNkVWRCUVhWSExFdEJRVXRvVml4RFFVRkxPMEZCUXpsSUxGVkJRVWxuVml4SFFVRk5PMEZCUTA0c1kwRkJUVEJDTEVsQlFWRXNWVUZCVldwT0xFdEJRVTAzUXl4SlFVRkxiMDhzUlVGQlN5eFpRVUZaTEZGQlFWRndUeXhOUVVGUExGTkJRVk1zVTBGQlUwRXNSVUZCUnl4WFFVRlhMRkZCUVZFMlF5eE5RVUZQTEZOQlFWTkJMRWxCUVVzc1JVRkJSU3hIUVVNMVNHdE9MRWxCUVZVc1ZVRkJWVGxDTEV0QlFVMDNTaXhKUVVGTFowc3NSVUZCU3l4WlFVRlpMRkZCUVZGb1N5eE5RVUZQTEZOQlFWTXNVMEZCVTBFc1JVRkJSeXhoUVVGaExGRkJRVkUyU2l4TlFVRlBMRk5CUVZOQkxFbEJRVXNzUlVGQlJTeEhRVU5vU1N0Q0xFbEJRVlVzVlVGQlZUZENMRXRCUVUxRUxFbEJRVXRGTEVWQlFVc3NXVUZCV1N4UlFVRlJSaXhOUVVGUExGTkJRVk1zVTBGQlUwRXNSVUZCUnl4aFFVRmhMRkZCUVZGRExFMUJRVThzVTBGQlUwRXNTVUZCU3l4RlFVRkZMRWRCUTJoSmNVTXNTVUZCWlN4VlFVRlZUQ3hMUVVGTlJDeEpRVUZMT1VJc1JVRkJTeXhaUVVGWkxGRkJRVkU0UWl4TlFVRlBMRk5CUVZNc1UwRkJVMEVzUlVGQlJ5eHJRa0ZCYTBJc1VVRkJVVU1zVFVGQlR5eFRRVUZUUVN4SlFVRkxMRWRCUVVjN1FVRkRha29zWlVGQlR5eEpRVUZKUnl4SFFVRlRPMEZCUVVFc1ZVRkRhRUlzVDBGQlFWSTdRVUZCUVN4VlFVTkJMRk5CUVVGRE8wRkJRVUVzVlVGRFFTeFRRVUZCUXp0QlFVRkJMRlZCUTBFc1lVRkJZVkU3UVVGQlFTeFJRVU5xUXl4RFFVRnBRanRCUVVGQk8wRkJSMFFzWTBGQlRTeEpRVUZKTEUxQlFVMHNLME5CUVN0RE8wRkJRVUVzVjBGSGJFVTdRVUZEUkN4WlFVRk5lRU1zU1VGQlR5eEpRVUZKTEV0QlFVdExMRU5CUVVzN1FVRkRNMElzWVVGQlR5eExRVUZMTEZOQlFWTk1MRU5CUVVrN1FVRkJRVHRCUVVGQkxFVkJSV2hETzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJUVVFzVjBGQlZ6dEJRVU5RTEZkQlFVOHNSMEZCUjAwc1JVRkJZeXhMUVVGTExFOUJRVThzUTBGQlF5eExRVUZMUVN4RlFVRmpMRXRCUVVzc1UwRkJVeXhEUVVGRExFdEJRVXRCTEVWQlFXTXNTMEZCU3l4VFFVRlRMRU5CUVVNc1MwRkJTMEVzUlVGQll5eExRVUZMTEdGQlFXRXNSVUZCUlR0QlFVRkJMRVZCUTI1S08wRkJRMHc3UVVOMFJrOHNUVUZCVFcxRExFVkJRVzFDTzBGQlFVRXNSVUZETlVJc1kwRkJZenRCUVVWV0xGTkJRVXNzYVVKQlFXbENMRWxCUlhSQ0xFdEJRVXNzYTBKQlFXdENMRWxCUlhaQ0xFdEJRVXNzVlVGQlZTeEpRVU5tTEV0QlFVc3NhMEpCUVd0Q0xFbEJVWFpDTEV0QlFVc3NlVUpCUVhsQ0xFTkJRVU5ETEVkQlFXZENlRlVzUjBGQllUbERMRTFCUVZVN1FVRkRiRVVzVFVGQlFYTlZMRWRCUTBzc1ZVRkJWU3RETEVWQlFXMUNMRk5CUVZNc1JVRkRkRU1zWjBKQlFXZENMREJDUVVFd1FpeERRVUZETjBnc1RVRkJVenRCUVVOeVJDeFpRVUZKTzBGQlEwRXNaMEpCUVUwMVRDeEpRVUZUTEV0QlFVc3NkVUpCUVhWQ01GUXNSMEZCWjBKNFZTeEhRVUZoT1VNc1EwRkJTenRCUVVNM1JTeFZRVUZMTEV0QlFVc3NXVUZEVGl4TFFVRkxMRlZCUVZVc1MwRkZaaXhOUVVGTkxGRkJRVkZCTEVOQlFVc3NTMEZEYmtKM1VDeEZRVUZMTEdGQlFXRTJTQ3hGUVVGdFFpeG5Ra0ZCWjBJc1ZVRkJWU3hIUVVNdlJIcFVMRVZCUVU4c09FSkJRVGhDTEZGQlFWYzFSQ3hEUVVGTExFMUJSM0pFZDFBc1JVRkJTeXhoUVVGaE5rZ3NSVUZCYlVJc1owSkJRV2RDTEZGQlFWRXNSMEZETjBSNlZDeEZRVUZQTEdsQ1FVRnBRaXhSUVVGWE5VUXNRMEZCU3l4SlFVVTFReXhMUVVGTExIbENRVUY1UWpSRUxFZEJRVkZrTEVOQlFWYzdRVUZCUVN4UlFVTndSQ3hWUVVOUE8wRkJRMG9zVlVGQlFUQk5MRVZCUVVzc1NVRkJSenRCUVVGQkxGRkJRMWc3UVVGQlFTeE5RVU5xUWl4RFFVRmhPMEZCUVVFc1NVRkRZaXhIUVVOUkxFdEJRVXNzTWtKQlFUSkNMRU5CUVVNMVRDeEhRVUZSWkN4TlFVRm5RanRCUVVOeVJDeE5RVUZKUVN4TlFVTkJMRXRCUVVzc1VVRkJVWFZWTEVWQlFXMUNMR2xDUVVGcFFpeEpRVUZKTEVOQlFVTjJWU3hEUVVGWExFbEJSWEpGTEV0QlFVc3NWVUZCVldNc1JVRkJUenRKUVVOc1F5eEhRVU5STEV0QlFVc3NlVUpCUVhsQ0xFTkJRVU13VkN4SFFVRm5RbmhWTEUxQlFXZENLMU1zVFVGQlZ6dEJRVU4wUlN4VlFVRkpMRU5CUVVONVFqdEJRVU5FTEdOQlFVMHNTVUZCU1N4TlFVRk5MRGhDUVVFNFFqdEJRVU5zUkN4VlFVRkpMRU5CUVVONFZUdEJRVU5FTEdOQlFVMHNTVUZCU1N4TlFVRk5MR2xEUVVGcFF6dEJRVU55UkN4VlFVRkpMRU5CUVVNclV5eExRVUZWUVN4RlFVRlBMRmRCUVZjN1FVRkROMElzWTBGQlRTeEpRVUZKTEUxQlFVMHNjVU5CUVhGRE8wRkJSWHBFTEdGQlFVOTVRaXhGUVVOR0xEaENRVUVyUWl4RlFVTXZRaXgxUWtGQmRVSjRWU3hEUVVGWE8wRkJRVUVzU1VGRGJrUXNSMEZSVVN4TFFVRkxMSFZDUVVGMVFpeERRVUZEZDFVc1IwRkJaMEo0VlN4SFFVRmhPVU1zVFVGQlZUdEJRVU5vUlN4TlFVRkJjMVVzUjBGRFN5eFZRVUZWSzBNc1JVRkJiVUlzVTBGQlV5eEZRVU4wUXl4blFrRkJaMElzZDBKQlFYZENMRU5CUVVNM1NDeE5RVUZUTzBGQlEyNUVMRmxCUVVrN1FVRkRRU3huUWtGQlRUVk1MRWxCUVZNc1MwRkJTeXgxUWtGQmRVSXdWQ3hIUVVGblFuaFZMRWRCUVdFNVF5eERRVUZMTzBGQlNUZEZMR05CU0Vzc1MwRkJTeXhaUVVOT0xFdEJRVXNzVlVGQlZTeExRVVZtTEUxQlFVMHNVVUZCVVVFc1EwRkJTenRCUVVOdVFpeFpRVUZCZDFBc1JVRkJTeXhoUVVGaE5rZ3NSVUZCYlVJc1owSkJRV2RDTEVsQlFVa3NSMEZEZWtSNlZDeEZRVUZQTEdsRFFVRnBReXhSUVVGWE5VUXNRMEZCU3p0QlFVRkJMR1ZCUlhaRU8wRkJRMFFzYTBKQlFVMTFXQ3hKUVVGWkxFOUJRVTkyV0R0QlFVVjZRaXhuUWtGRVFYZFFMRVZCUVVzc1lVRkJZVFpJTEVWQlFXMUNMR2RDUVVGblFrVXNRMEZCVXl4SFFVTXhSQ3hEUVVGRGRsZzdRVUZEUkN4alFVRkJORVFzUlVGQlR5eGxRVUZsTEUxQlFWTTdRVUZCUVN4eFFrRkZNVUl5VkN4TlFVRmpPMEZCUTI1Q0xHTkJRVUV6VkN4RlFVRlBMR3RDUVVGclFpeFJRVUZYTlVRc1EwRkJTenRCUVVGQkxIRkNRVVZ3UTNWWUxFMUJRV003UVVGRGJrSXNZMEZCUVROVUxFVkJRVThzYVVKQlFXbENMRkZCUVZjMVJDeERRVUZMTzBGQlFVRXNjVUpCUlc1RFFTeGhRVUZwUWp0QlFVTjBRaXhqUVVGQk5FUXNSVUZCVHl4bFFVRmxMRkZCUVZjMVJDeERRVUZMTzBGQlFVRXNjVUpCUldwRFFTeGhRVUZwUW5kVk8wRkJRM1JDTEdOQlFVRTFVU3hGUVVGUExHMUNRVUZ0UWl4UlFVRlhOVVFzUTBGQlN6dEJRVUZCTEhGQ1FVVnlRMEVzWVVGQmFVSnJXRHRCUVVOMFFpeGpRVUZCZEZRc1JVRkJUeXh0UWtGQmJVSXNVVUZCVnpWRUxFTkJRVXM3UVVGQlFTeHhRa0ZGY2tOQkxHRkJRV2xDY1ZjN1FVRkRkRUlzWTBGQlFYcFRMRVZCUVU4c2JVSkJRVzFDTEZGQlFWYzFSQ3hEUVVGTE8wRkJRVUVzY1VKQlJYSkRkVmdzVFVGQll6dEJRVU51UWl4alFVRkJNMVFzUlVGQlR5eHBRa0ZCYVVJc1VVRkJWelZFTEVOQlFVczdRVUZCUVN4eFFrRkZia01zVFVGQlRTeFJRVUZSUVN4RFFVRkxPMEZCUTNoQ0xHTkJRVUUwUkN4RlFVRlBMR2xEUVVGcFF5eFJRVUZYTlVRc1EwRkJTenRCUVVGQk8wRkJSM2hFTEc5Q1FVRk5MRWxCUVVrc1RVRkJUU3gxUkVGQmRVUjFXQ3hIUVVGWE8wRkJRVUU3UVVGSE1VWXNaVUZCU3l4NVFrRkJlVUl6VkN4SFFVRlJaQ3hEUVVGWE8wRkJRVUVzVVVGRGNFUXNWVUZEVHp0QlFVTktMRlZCUVVFd1RTeEZRVUZMTEVsQlFVYzdRVUZCUVN4UlFVTllPMEZCUVVFc1RVRkRha0lzUTBGQllUdEJRVUZCTEVsQlEySXNSMEZMVVN4TFFVRkxMRzFDUVVGdFFpeERRVUZEZUZBc1RVRkJWVHRCUVVNdlFpeFhRVUZMTEZGQlFWRnhXQ3hGUVVGdFFpeHBRa0ZCYVVJc1NVRkJTVHRCUVVGQkxGRkJRMnBFUVN4RlFVRnRRanRCUVVGQkxFMUJRMjVETEVkQlExa3NTMEZCU3l4VlFVRlZjbGc3UVVGQlFTeEpRVU16UWl4SFFVdFJMRXRCUVVzc2QwTkJRWGRETEVOQlFVTnRReXhOUVVGTk8wRkJRMmhFTEUxQlFVdEJMRXRCUlV3c1QwRkJUeXhSUVVGUlFTeERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVOYUxFZEJRVWQ2UkN4RFFVRkRMRTFCUVUwN1FVRkRiRU1zV1VGQlNXTXNTVUZCVFRKRE8wRkJRMVlzV1VGQlNWa3NSVUZCUlN4dFFrRkJiVUk3UVVGRGNrSXNaMEpCUVUxeFZpeEpRVUZ0UW5KV0xFVkJRVVVzYTBKQlFXdENka1FzUTBGQlJ6dEJRVU5vUkN4VlFVRkpORmtzVFVGRFFUVlpMRWxCUVUwMFdUdEJRVUZCTzBGQlIyUXNZVUZCU3l4blFrRkJaMEkxV1N4RFFVRkhMRWxCUVVsa08wRkJRVUVzVFVGRE5VTXNRMEZCWVR0QlFVRkJMRWxCUTJJN1FVRkJRU3hGUVVOTE8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlIwUXNTVUZCU1N4TlFVRk5PMEZCUTA0c1ZVRkJUVEphTEVsQlFWTXNTMEZCU3l4bFFVRmxTaXhGUVVGdFFpeFhRVUZYTzBGQlEycEZMRkZCUVVrc1MwRkJTenRCUVVOTUxHRkJRVThzUzBGQlN6dEJRVVZZTEZGQlFVbEpPMEZCUTB3c2EwSkJRVXNzVFVGQlRVRXNSMEZEU2tFN1FVRkZUaXhSUVVGTExFdEJRVXM3UVVGSFZpeFZRVUZMTEV0QlFVczdRVUZIVml4WlFVRkxMRXRCUVVzc1lVRkhWanRCUVVORUxHZENRVUZOUXl4SlFVRlhMRWxCUVVsRExFZEJRVThzU1VGQlNTeFRRVUZUTEV0QlFVc3NWMEZCVnl4SFFVTnVSRU1zU1VGQlR5eERRVUZCTzBGQlEySXNjVUpCUVZkb1dpeExRVUZQTEV0QlFVczdRVUZEYmtJc1dVRkJTU3hMUVVGTExHZENRVUZuUWtFc1EwRkJSeXhOUVVONFFtZGFMRVZCUVV0b1dpeERRVUZITEVsQlFVa3NTMEZCU3l4blFrRkJaMEpCTEVOQlFVYzdRVUZITlVNc2NVSkJRVmRCTEV0QlFVOHNTMEZCU3p0QlFVTnVRaXhaUVVGSkxFdEJRVXNzWlVGQlpVRXNRMEZCUnl4TlFVTjJRbWRhTEVWQlFVdG9XaXhEUVVGSExFbEJRVWtzUzBGQlN5eGxRVUZsUVN4RFFVRkhPMEZCUnpORExHbENRVUZQT0Zrc1JVRkJVeXhQUVVGUFJTeERRVUZKTzBGQlFVRTdRVUZtTTBJc1owSkJRVTBzU1VGQlNTeE5RVUZOTEdsRFFVRnBRenRCUVVGQk8wRkJTR3BFTEdOQlFVMHNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVUZCTzBGQlNIQkVMRmxCUVUwc1NVRkJTU3hOUVVGTkxIRkRRVUZ4UXp0QlFVRkJMRVZCZFVJMVJEdEJRVUZCTzBGQlFVRXNSVUZGUkN4SlFVRkpMRWxCUVVscVVpeEhRVUZMTzBGQlExUXNVVUZCU1N4RFFVRkRRVHRCUVVORUxGbEJRVTBzU1VGQlNTeE5RVUZOTEhsQ1FVRjVRanRCUVVNM1F5eFRRVUZMTEUxQlFVMUJMRWRCUTFnc1MwRkJTeXhyUWtGQmEwSXNTVUZEZGtJc1MwRkJTeXhwUWtGQmFVSTdSVUZEZWtJN1FVRkJRVHRCUVVGQkxFVkJSVVFzYjBKQlFXOUNPMEZCUTJoQ0xGZEJRVThzUzBGQlN6dEJRVUZCTEVWQlEyWTdRVUZCUVR0QlFVRkJMRVZCUlVRc2EwSkJRV3RDYTFJc1IwRkJVVHRCUVVOMFFpeFJRVUZMUVR0QlFVVk1MR2xDUVVGWGFsb3NTMEZCVDJsYU8wRkJRMlFzWVVGQlN5eFJRVUZSYWxvc1EwRkJSeXhKUVVGSmFWb3NSVUZCVDJwYUxFTkJRVWM3UVVGQlFTeEZRVVZ5UXp0QlFVRkJPMEZCUVVFc1JVRkZSQ3hyUWtGQmEwSTBSaXhIUVVGVE8wRkJRM1pDTEVsQlFVa3NRMEZCUTBFc1MwRkJWMEVzUlVGQlVTeFhRVUZYTEV0QlJXNURRU3hGUVVGUkxGRkJRVkVzUTBGQlEzTlVMRTFCUVZjN1FVRkRlRUlzVjBGQlN5eG5Ra0ZCWjBKQkxFVkJRVThzVDBGQlVTeERRVUZCTEVsQlFVbEJPMEZCUVVFc1NVRkRjRVFzUTBGQlV6dEJRVUZCTEVWQlEwbzdRVUZCUVR0QlFVRkJMRVZCUlVRc2QwSkJRWGRDZEZRc1IwRkJVenRCUVVNM1FpeEpRVUZKTEVOQlFVTkJMRXRCUVZkQkxFVkJRVkVzVjBGQlZ5eExRVVZ1UTBFc1JVRkJVU3hSUVVGUkxFTkJRVU56VkN4TlFVRlhPMEZCUTNoQ0xHRkJRVThzUzBGQlN5eG5Ra0ZCWjBKQkxFVkJRVThzVDBGQlVTeERRVUZCTzBGQlFVRXNTVUZEZGtRc1EwRkJVenRCUVVGQkxFVkJRMG83UVVGRFREdEJRVU5CVkN4RlFVRnRRaXhqUVVGak8wRkJRMnBEUVN4RlFVRnRRaXh2UWtGQmIwSTdRVUZEZGtOQkxFVkJRVzFDTEc5Q1FVRnZRanRCUVVOMlEwRXNSVUZCYlVJc1dVRkJXVHRCUVVNdlFrRXNSVUZCYlVJc2FVSkJRV2xDTzBGRGRFODNRaXhUUVVGVFZTeEZRVUZyUWtNc1IwRkJXVHRCUVVNeFF5eFJRVUZOYkZrc1NVRkJVeXhEUVVGQk8wRkJRMllzVFVGQlNTeFBRVUZQYTFrc1MwRkJaVHRCUVVOMFFpeEpRVUZCYkZrc1JVRkJUM1ZZTEVWQlFXMUNMRmRCUVZjc1NVRkJTVmM3UVVGQlFTeFhRVVZ3UTBFN1FVRkRUQ3hsUVVGWGNGb3NTMEZCVDI5YU8wRkJRMlFzVFVGQlFXeFpMRVZCUVU5c1FpeERRVUZITEVsQlFVbHZXaXhGUVVGWGNGb3NRMEZCUnp0QlFVZHdReXhUUVVGUGEwSTdRVUZEV0R0QlExaFBMRTFCUVUxdFdTeEhRVUZ0UWp0QlFVRkJMRVZCUXpWQ0xGbEJRVmxETEVkQlFXZENXaXhIUVVGblFtRXNSMEZCWVR0QlFVTnlSQ3hSUVVGSkxFTkJRVU5pTzBGQlEwUXNXVUZCVFN4SlFVRkpMRTFCUVUwc2IwTkJRVzlETzBGQlEzaEVMRkZCUVVsaExFMUJRV2RDTzBGQlJXaENMRmxCUVUwc1NVRkJTU3hOUVVGTkxHbERRVUZwUXp0QlFVVnlSQ3hUUVVGTExHbENRVUZwUWtvc1JVRkJhMEpITEVOQlFXTXNSMEZEZEVRc1MwRkJTeXhwUWtGQmFVSmFMRWRCUTNSQ0xFdEJRVXNzWTBGQlkyRTdRVUZCUVN4RlFVTjBRanRCUVVOTU8wRkRWazhzU1VGQlNVTTdRVUZCUVN4RFFVTldMRk5CUVZWQkxFZEJRVms3UVVGRmJrSXNSVUZCUVVFc1JVRkJWeXhOUVVGVExFOUJSWEJDUVN4RlFVRlhMRTlCUVZVc1VVRkZja0pCTEVWQlFWY3NVVUZCVnl4VFFVVjBRa0VzUlVGQlZ5eFRRVUZaTEZWQlJYWkNRU3hGUVVGWExGVkJRV0VzVjBGRmVFSkJMRVZCUVZjc1ZVRkJZU3hYUVVWNFFrRXNSVUZCVnl4UlFVRlhMRk5CUlhSQ1FTeEZRVUZYTEU5QlFWVXNVVUZGY2tKQkxFVkJRVmNzVFVGQlV6dEJRVU40UWl4SFFVRkhRU3hOUVVGbFFTeEpRVUZoTEVOQlFVRXNSVUZCUnp0QlEzUkNNMElzVFVGQlRVTXNSMEZCYzBJN1FVRkJRU3hGUVVNdlFpeHZRa0ZCYjBKRExFZEJRVlZETEVkQlFXVTdRVUZEZWtNc1owSkJRVXNzVVVGQlVVUXNSMEZEWWl4TFFVRkxMR2RDUVVGblFrTXNSMEZEWkN4UlFVRlJMRkZCUVZFc1RVRkJVenRCUVVGQkxFVkJRMjVETzBGQlEwdzdRVU5LVHl4TlFVRk5ReXhIUVVGelFqdEJRVU51UXp0QlFVVkJRU3hIUVVGelFpeHRRa0ZCYlVJc1QwRkJUME1zUjBGQlkzUlhMRWRCUVVkMVZ5eEhRVUZIY0Znc1RVRkJUVHRCUVVOMFJTeFJRVUZOY1Znc1NVRkJhMElzU1VGQlNVNDdRVUZETlVJc1pVRkJUVWtzUlVGQllYUlhMRWRCUVVkMVZ5eEhRVUZIY0Znc1IwRkJSM0ZZTEVOQlFXVXNSMEZEY0VOQkxFVkJRV2RDTzBGQlF6TkNPMEZCUTBGSUxFZEJRWE5DTERKQ1FVRXlRaXhQUVVGUFF5eEhRVUZqUnl4SFFVRmhlbGNzUjBGQlIzVlhMRWRCUVVkd1dDeE5RVUZOTzBGQlF6TkdMRkZCUVUxeFdDeEpRVUZyUWl4SlFVRkpUanRCUVVNMVFpeGxRVUZOU1N4RlFVRmhSeXhIUVVGaGVsY3NSMEZCUjNWWExFZEJRVWR3V0N4SFFVRkhjVmdzUTBGQlpTeEhRVU5xUkVFc1JVRkJaMEk3UVVGRE0wSTdRVU5tVHl4VFFVRlRSU3hIUVVGelFtaENMRWRCUVZFN1FVRkRNVU1zVTBGQlNVRXNTMEZCVlVFc1JVRkJUeXhUUVVGVExFbEJRMjVDUVN4RlFVRlBMRlZCUVZVc1IwRkJSeXhEUVVGRExFVkJRVVVzYTBKQlFXbENMRWxCUVV0QkxFVkJRVThzVlVGQlZTeERRVUZETEVsQlJ5OUVPMEZCUldZN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3VlVOQlFTeFBRVUZQTEdWQlFXVnBRaXhKUVVGVExHTkJRV01zUlVGQlJTeFBRVUZQTEVkQlFVa3NRMEZCUlN4SFFVTnNRMEVzUjBGQlFTeHhRa0ZCUnp0QlFVTTNRaXhSUVVGTlF5eEpRVUZWUXp0QlFVMW9RaXhSUVVGTlF5eEZRVUZ0UWp0QlFVRkJMRWxCUTNKQ0xGbEJRVmxETEVkQlFXRTdRVUZEY2tJc1YwRkJTeXhqUVVGalFUdEJRVUZCTEVsQlEzUkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4SlFWRkVMRkZCUVZGMlV5eEhRVUZMZDFNc1IwRkJZVHRCUVVOMFFpeGhRVUZQU2l4RlFVRlJMRlZCUVZVc1RVRkJUU3hSUVVGUkxGRkJRVkVzWVVGQllUdEJRVU40UkN4bFFVRlBMRTFCUVUwc1MwRkJTeXhaUVVGWmNGTXNSMEZCUzNkVExFTkJRVmM3UVVGQlFTeE5RVU14UkN4RFFVRlRPMEZCUVVFc1NVRkRTanRCUVVGQkxFVkJRMG83UVVGRFJDeFRRVUZCVEN4SFFVRkJMSEZDUVVFMlFrYzdPenM3T3pzN096czdPenRCUXpkQ04wSXNVVUZCU1hwUUxFbEJRVmtzVjBGQldUdEJRVWt6UWl4VlFVRkpMRTlCUVU4c1QwRkJVenRCUVVGbExHVkJRVTg3UVVGRE1VTXNWVUZCU1N4UFFVRlBMRk5CUVZjN1FVRkJaU3hsUVVGUE8wRkJRelZETEZWQlFVa3NUMEZCVDJoTkxFbEJRVmM3UVVGQlpTeGxRVUZQUVR0QlFVTTFReXhaUVVGTkxFbEJRVWtzVFVGQlRTeG5RMEZCWjBNN1FVRkJRU3hKUVVOb1JDeEhRVVZIUVN4SlFVRlRaMDA3UVVGRllpeEpRVUZCT1V3c1JVRkJRU3hWUVVGcFFrTXNTVUZCVlVnc1JVRkJUeXhQUVVjNVFrRXNSVUZCVHl4VlFVTldSeXhGUVVGQkxGVkJRV3RDU0N4RlFVRlBMRTFCUVUwc1MwRkJTMEVzUTBGQlRTeEpRVWN6UTBjc1JVRkJhMElzVlVGQlFVZ3NSVUZCVHl4VFFVTjZRa2NzUlVGQmEwSXNWVUZCUVVnc1JVRkJUeXhUUVVONlFrY3NSVUZCYlVJc1YwRkJRVWdzUlVGQlR6dEJRVUZCT3pzN096dEJRM1pDTVVJc1YwRkJUeXhsUVVGalJ5eEhRVUZWTEdOQlFXTXNSVUZCUlN4UFFVRlBMRWRCUVVrc1EwRkJSU3hIUVVNMVJFRXNSVUZCUVN4eFEwRkJOa05CTEVWQlFXMURMREpDUVVGQlFTeEZRVUZCTEhsQ1FVRnBReXhSUVVOcVNFRXNSVUZCUVN4NVFrRkJhVU03UVVGRGFrTXNWVUZCVFhsaUxFVkJRWGxDTzBGQlFVRXNUVUZETTBJc1dVRkJXVU1zUjBGQmFVSTdRVUZEZWtJc1lVRkJTeXh0UWtGQmJVSkJMRXRCUVRKRk8wMUJRM1JITzBGQlFVRXNUVUZEUkN4VFFVRlRPMEZCUTB3c1pVRkJUekZpTEVWQlFWRTdRVUZCUVN4TlFVTnNRanRCUVVGQkxFMUJRMFFzU1VGQlNTeDNRa0ZCZDBJN1FVRkRlRUlzWlVGQlR5eExRVUZMTEdsQ1FVRnBRanRCUVVGQkxFMUJRMmhETzBGQlFVRXNUVUZEUkN4SlFVRkpMSE5DUVVGelFuRkRMRWRCUVU4N1FVRkROMElzWVVGQlN5eHBRa0ZCYVVJc2QwSkJRWGRDUVR0QlFVRkJMRTFCUTJwRU8wRkJRVUVzVFVGRFJDd3JRa0ZCSzBJN1FVRkRNMElzWlVGQlR6dEJRVUZCTEUxQlExWTdRVUZCUVN4SlFVTktPMEZCUTBRc1NVRkJRWEpETEVWQlFVRXNNa0pCUVcxRGVXSTdRVUZEYmtNc1lVRkJVMFVzUlVGQmJVTkRMRWRCUVdkQ08wRkJRM2hFTEZWQlFVbEJMRWRCUVdkQ08wRkJRMmhDTEdOQlFVMURMRWxCUVhWQ1JDeEZRVUZsTldJc1JVRkJVU3h6UWtGQmMwSTdRVUZETVVVc1dVRkJTVFppTEdGQlFXZERTanRCUVVOb1F5eHBRa0ZCVDBrN1FVRkJRVHRCUVVGQkxFbEJTV3hDTzBGQlEwUXNTVUZCUVRkaUxFVkJRVUVzY1VOQlFUWkRNbUk3UVVGQlFUczdPenM3UVVONFFqZERMRmRCUVU4c1pVRkJZek5pTEVkQlFWVXNZMEZCWXl4RlFVRkZMRTlCUVU4c1IwRkJTU3hEUVVGRkxFZEJRelZFUVN4RlFVRXJReXgxUTBGQlFVRXNSVUZCUVN3d1EwRkJhMFFzVVVGRGFrZEJMRVZCUVVFc01FTkJRV3RFTzBGQlJXeEVMRlZCUVUwNFlpeEZRVUZ4UXp0QlFVRkJMRTFCUTNaRExGTkJRVk03UVVGRFRDeGxRVUZQT1dJc1JVRkJVVHRCUVVGQkxFMUJRMnhDTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeE5RVkZFTEZsQlFWa3JZaXhKUVVGVExFbEJRVTFETEVsQlFYRkNMRU5CUVVNc1MwRkJTeXhMUVVGTExFdEJRVXNzUjBGQlJ5eEhRVUZITzBGQlEyeEZMR0ZCUVVzc1UwRkJVMFFzUjBGRFpDeExRVUZMTEhGQ1FVRnhRa003UVVGQlFTeE5RVU0zUWp0QlFVRkJMRWxCUTBvN1FVRkRSQ3hKUVVGQmFHTXNSVUZCUVN4MVEwRkJLME00WWp0QlFVRkJPenM3T3pzN1ZVTndRaTlETEU5QlFVOHNaVUZCWlVjc1NVRkJVeXhqUVVGakxFVkJRVVVzVDBGQlR5eEhRVUZKTEVOQlFVVXNSMEZEZGtKQkxFZEJRVUVzWjBOQlFVYzdRVUZEZUVNc1VVRkJUVU1zU1VGQlVXSXNTVUZEVW1Nc1NVRkJlVUpETEUxQlEzcENReXhKUVVGclEwTTdRVUZKZUVNc1VVRkJUVU1zUlVGQk9FSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEpRVTlvUXl4WlFVRlpNVllzU1VGQlZTeEpRVUZKZDFZc1JVRkJaME1zY1VOQlFXOURMRWRCUVVrN1FVRkZPVVlzVlVGRVFTeExRVUZMTEZWQlFWVjRWaXhIUVVOWUxFTkJRVU5CTzBGQlEwUXNZMEZCVFN4SlFVRkpMRTFCUVUwc2IwTkJRVzlETzBGQlFVRXNTVUZGTTBRN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hKUVZWRUxGRkJRVkZ0UXl4SFFVRkxkMU1zUjBGQllVa3NSMEZCWjBJN1FVRkRkRU1zVlVGQlNWa3NTVUZCYVVJc1MwRkJTenRCUVVNeFFpeE5RVUZKV2l4TFFVRnJRa0VzUlVGQlpWTXNSVUZCWjBNc2RVTkJRWFZETEUxQlEzaEhSeXhKUVVGcFFsb3NSVUZCWlZNc1JVRkJaME1zZFVOQlFYVkRPMEZCUlROSExGbEJRVTFKTEZGQlFXbENUaXhGUVVGMVFpeHZRMEZCYjBOUUxFTkJRV003UVVGRGFFY3NZVUZCU1dFc1NVRkRUMUFzUlVGQlRTeE5RVUZOTEZWQlFWVlBMRVZCUVZjc05rSkJRVGhDTEVOQlFVRXNSVUZCUlN4blFrRkJaMElzTWtOQlFUSkRMRU5CUVVNMVN5eE5RVUZUTzBGQlEzcEpMRmxCUVVrN1FVRkRRU3hwUWtGQlFVRXNSVUZCU3l4aFFVRmhMQ3RFUVVFclJESkxMRVZCUVdVc1RVRkJUU3hIUVVNdlJpeExRVUZMTEdsQ1FVRnBRbmhVTEVkQlFVdDNVeXhIUVVGaFowSXNSMEZCWjBKYUxFTkJRV003UVVGQlFTeFJRVU5vUml4VlFVTlBPMEZCUTBvc1ZVRkJRUzlLTEVWQlFVc3NTVUZCUnp0QlFVRkJMRkZCUTFnN1FVRkJRU3hOUVVOcVFpeERRVUZoTEVsQlJVVXNTMEZCU3l4cFFrRkJhVUkzU1N4SFFVRkxkMU1zUjBGQllXZENMRWRCUVdkQ1dpeERRVUZqTzBGQlFVRXNTVUZEYUVZN1FVRkJRU3hKUVVORUxHbENRVUZwUWpWVExFZEJRVXQzVXl4SFFVRmhaMElzUjBGQlowSmFMRWRCUVdkQ08wRkJReTlFTEZWQlFVa3pVeXhIUVVGSk5rTTdRVUZEVWl4VlFVRkpORkVzU1VGQllURlVPMEZCUTJwQ0xHRkJRVWwzVkN4TFFVRnJRa0VzUlVGQlpTeFZRVUZWZUZRc1JVRkJTU3hSUVVGUkxFZEJRVWNzU1VGQlNTeE5RVUZOZDFRc1JVRkJaU3h6UWtGQmMwSkJMRVZCUVdVc2JVSkJRVzFDTEZOQlFWTXNTMEZEY0VwQkxFVkJRV1VzYlVKQlFXMUNMRkZCUVZFc1EwRkJRMGNzVFVGQll6dEJRVU55UkN4UlFVRkJSQ3hKUVVGaFFTeEZRVUZYTEZGQlFWRXNTVUZCU1N4UFFVRlBMRWxCUVVsRExFVkJRVlVzVjBGQlZ5eERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVVzc1NVRkJTU3hIUVVGSFFTeERRVUZUTzBGQlFVRXNUVUZEZGtnc1EwRkJZU3hKUVVWSE4xRXNTMEZCVFRkRExFbEJRVXNzUzBGQlN5eFZRVUZWTEZGQlFWRkJMRTFCUVU4c1UwRkJVeXhUUVVGVFFTeEZRVUZITEZGQlFWRjVWQ3hIUVVGWmJFSXNSMEZCWVVrc1EwRkJZeXhQUVVGUExGRkJRVkU1VUN4TlFVRlBMRk5CUVZOQkxFbEJRVXNzVVVGQlVTeFBRVUZQTEVsQlFVa3NUVUZCVFN4cFEwRkJhVU1zUTBGQlF6dEJRVUZCTEVsQlEzWk9PMEZCUVVFc1JVRkRTanRCUVVORUxGTkJRVUZ0VVN4SFFVRkJMR2REUVVGM1EwMDdPenM3TzBGRE5VUjRReXhYUVVGUExHVkJRV04yWXl4SFFVRlZMR05CUVdNc1JVRkJSU3hQUVVGUExFZEJRVWtzUTBGQlJTeEhRVU0xUkVFc1JVRkJhVU1zZVVKQlFVRkJMRVZCUVVFc01rSkJRVzFETEZGQlEzQkZRU3hGUVVGQkxESkNRVUZ0UXp0QlFVMXVReXhWUVVGTk5HTXNSVUZCZFVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1RVRlRla0lzV1VGQldVTXNTVUZCWlVRc1JVRkJkVUlzZFVKQlFYVkNSU3hKUVVGcFFrWXNSVUZCZFVJc2IwSkJRVzlDTzBGQlIycEpMRmxCUmtFc1MwRkJTeXhsUVVGbFF5eEhRVU53UWl4TFFVRkxMR2xDUVVGcFFrTXNSMEZEYkVKRUxFbEJRV1ZFTEVWQlFYVkNMRzFDUVVGdFFqdEJRVU42UkN4blFrRkJUVGRaTEVsQlFWRXNTVUZCU1N4TlFVRk5MSGREUVVGM1F6WlpMRVZCUVhWQ0xHMUNRVUZ0UWp0QlFVTXhSeXhuUWtGQlFUZFpMRVZCUVUwc1QwRkJUeXh2UWtGRFVFRTdRVUZCUVR0QlFVVldMRmxCUVVrNFdTeEpRVUZsTEVkQlFVYzdRVUZEYkVJc1owSkJRVTA1V1N4SlFVRlJMRWxCUVVrc1RVRkJUU3h4UTBGQmNVTTdRVUZETjBRc1owSkJRVUZCTEVWQlFVMHNUMEZCVHl4M1FrRkRVRUU3UVVGQlFUdEJRVVZXTEdGQlFVc3NaVUZCWlRoWkxFZEJRM0JDTEV0QlFVc3NhVUpCUVdsQ1F6dEJRVUZCTEUxQlEzcENPMEZCUVVFc1RVRkRSQ3hUUVVGVE8wRkJRMHdzWlVGQlR6bGpMRVZCUVZFN1FVRkJRU3hOUVVOc1FqdEJRVUZCTEVsQlEwbzdRVUZEUkN4SlFVRkJRU3hGUVVGQkxIbENRVUZwUXpSakxFZEJUV3BEUVN4RlFVRjFRaXgzUWtGQmQwSXNSMEZOTDBOQkxFVkJRWFZDTEc5Q1FVRnZRaXhKUVVzelEwRXNSVUZCZFVJc2NVSkJRWEZDTEUxQlFVMDdRVUZCUVRzN096czdPMVZEZEVSc1JDeFBRVUZQTEdWQlFXVkhMRWxCUVZNc1kwRkJZeXhGUVVGRkxFOUJRVThzUjBGQlNTeERRVUZGTEVkQlEzSkRRU3hIUVVGQkxHdENRVUZITzBGQlF6RkNMRkZCUVUwelFpeEpRVUZWUXl4SFFVbFdNa0lzU1VGQmRVSmFMRWxCUTNaQ1JpeEpRVUZSU1N4SlFVTlNTQ3hKUVVGNVFtTXNUVUZEZWtKRExFbEJRVEpDUXp0QlFVOXFReXhSUVVGTlF5eEZRVUZuUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4SlFWTnNRaXhaUVVGWmRsY3NTVUZCVlN4SlFVRkpjVmNzUlVGQmVVSXNkVUpCUVhOQ0xFZEJRVWs3UVVGRmVrVXNWVUZFUVN4TFFVRkxMRlZCUVZWeVZ5eEhRVU5ZTEVOQlFVTkJPMEZCUTBRc1kwRkJUU3hKUVVGSkxFMUJRVTBzYjBOQlFXOURPMEZCUVVFc1NVRkZNMFE3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hKUVU5RUxGZEJRVmM0VkN4SFFVRlZPMEZCUTJwQ0xHRkJRVTk1UXl4RlFVRm5RaXh6UWtGQmMwSXNTVUZCU1hwRExFVkJRVk1zVFVGQlRUdEJRVUZCTEVsQlEyNUZPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNTVUZQUkN4clFrRkJhMEpCTEVkQlFWVTdRVUZEZUVJc1lVRkJUMEVzUlVGQlV5eFJRVUZSTEVsQlFVbDVReXhGUVVGblFpeGxRVUZsTzBGQlFVRXNTVUZET1VRN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4SlFVOUVMR3RDUVVGclFucERMRWRCUVZVN1FVRkRlRUlzWVVGQlQwRXNSVUZCVXl4UlFVRlJMRWxCUVVsNVF5eEZRVUZuUWl4bFFVRmxPMEZCUVVFc1NVRkRPVVE3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hKUVU5RUxHTkJRV053VlN4SFFVRkxPMEZCUTJZc1lVRkJUMEVzUlVGQlNTeFJRVUZSTEV0QlFVc3NUVUZCVFR0QlFVRkJMRWxCUTJwRE8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hKUVZGRUxEaENRVUU0UW5GVkxFZEJRVmxETEVkQlFXRTdRVUZEYmtRc1dVRkJUVU1zU1VGQmEwSXNaME5CUTJ4Q1F5eEpRVUZwUWtRc1JVRkJaMElzUzBGQlMwWXNRMEZCVlR0QlFVTjBSQ3hWUVVGSlNTeEhRVU5CUXp0QlFVTktMRTFCUVVsR0xFMUJRVzFDTEZOQlEyNUNReXhKUVVGdFFrUXNSVUZCWlN4RFFVRkRPMEZCUlhaRExGbEJRVTFITEVsQlFXdENTaXhGUVVGblFpeExRVUZMUkN4RFFVRlhPMEZCUTNoRUxHRkJRVWxMTEUxQlFXOUNMRk5CUTNCQ1JDeEpRVUZ2UWtNc1JVRkJaMElzUTBGQlF5eEpRVVZzUXl4UFFVRlBSaXhKUVVGeFFpeFBRVUZsTEU5QlFVOURMRWxCUVhOQ0xFOUJRV1ZFTEUxQlFYRkNRenRCUVVGQkxFbEJRM1JJTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRWxCV1VRc2IwSkJRVzlDTVZVc1IwRkJTelJWTEVkQlFXdENReXhIUVVGbGNrSXNSMEZCWjBKYUxFZEJRV2RDYTBNc1IwRkJXVHRCUVVOc1J5eFZRVUZKTjFVN1FVRkRTaXhoUVVGUGJWTXNSVUZCVVN4VlFVRlZMRTFCUVUwc1VVRkJVU3hSUVVGUkxHRkJRV0U3UVVGRGVFUXNZMEZCVFZRc1NVRkJWeXhQUVVGUk1WSXNTVUZCU3l4TFFVRkxMRlZCUVZVc1VVRkJVVUVzVFVGQlR5eFRRVUZUTEZOQlFWTkJMRVZCUVVjc1VVRkJVVVFzUjBGQlN6UlZMRWRCUVd0Q2FFTXNRMEZCWXp0QlFVTTVTQ3haUVVGSkxFTkJRVU5xUWp0QlFVTkVMR2RDUVVGTkxFbEJRVWtzVFVGQlRTeDFRa0ZCZFVJN1FVRkZNME1zV1VGQlNXdEVMRWxCUVdkQ2NrSXNSVUZCWlN4blFrRkJaMElzUzBGQlN5eFhRVUZYTjBJc1EwRkJVU3hMUVVGTExFdEJRVXNzYTBKQlFXdENRU3hEUVVGUkxFdEJRVXMyUWl4RlFVRmxMR1ZCUVdVM1FpeERRVUZSTEVkQlFVYzdRVUZGZWtvc1kwRkVRU3hGUVVGRmEwUXNSMEZEUld4RUxFVkJRVk1zVjBGQlYzbERMRVZCUVdkQ08wRkJRM0JETEZsQlFVRlJMRVZCUVdsQ0xGTkJRVmxhTEVWQlFYRkNMRmRCUVZjc1MwRkROMFFzVDBGQlQxa3NSVUZCYVVJN1FVRkJRU3hsUVVWMlFqdEJRVU5FTEd0Q1FVRk5UaXhKUVVGakxFdEJRVXNzYTBKQlFXdENNME1zUTBGQlVUdEJRVU51UkN4WlFVRkpNa01zVFVGRFNVMHNSVUZCYVVJc1YwRkJWeXhEUVVGRExFdEJRVXNzWTBGQlkwNHNRMEZCVnl4TFFVRkxMRXRCUVVzc09FSkJRVGhDZEZVc1IwRkJTM05WTEVOQlFWY3NTMEZEYmtnc1QwRkJUMDBzUlVGQmFVSXNVVUZCVVZJc1JVRkJaMElzYjBKQlFXOUNMRWRCUlhoRmNGVXNTVUZCVFhOVk8wRkJRVUU3UVVGSFpDeHBRa0ZCU1ZFc1NVRkRUelZDTEVWQlFVMHNUVUZCVFN4VlFVRlZORUlzUTBGQlZTeEZRVUZGTEdkQ1FVRm5RaXc0UWtGQk9FSkVMRXRCUVdsQ0xFTkJRVU5vVFN4TlFVRlRPMEZCUXpsSExHZENRVUZKTzBGQlEwRXNjVUpCUVVGQkxFVkJRVXNzWVVGQllTdzRRMEZCT0VOblRTeERRVUZoTEVkQlF6ZEZhRTBzUlVGQlN5eGhRVUZoTEc5Q1FVRnZRamhKTEVWQlFWTXNUVUZCVFN4SFFVTTVReXhMUVVGTExHOUNRVUZ2UWpOU0xFZEJRVXMwVlN4SFFVRnJRa01zUjBGQlpYSkNMRWRCUVdkQ1dpeERRVUZqTzBGQlFVRXNXVUZEZGtjc1ZVRkRUenRCUVVOS0xHTkJRVUV2U2l4RlFVRkxMRWxCUVVjN1FVRkJRU3haUVVOWU8wRkJRVUVzVlVGRGVrSXNRMEZCY1VJc1NVRkZSU3hOUVVGTkxFdEJRVXNzYjBKQlFXOUNOMGtzUjBGQlN6UlZMRWRCUVd0Q1F5eEhRVUZsY2tJc1IwRkJaMEphTEVOQlFXTTdRVUZCUVR0QlFVY3hSeXhwUWtGQlQycENPMEZCUVVFc1RVRkZka0lzUTBGQlV6dEJRVUZCTEVsQlEwbzdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVsQlVVUXNVVUZCVVROU0xFZEJRVXQzVXl4SFFVRmhTU3hIUVVGblFqdEJRVVYwUXl4VlFVRkpXU3hKUVVGcFFpeExRVUZMTzBGQlF6RkNMRTFCUVVsYUxFdEJRV3RDUVN4RlFVRmxjMElzUlVGQmVVSXNkMEpCUVhkQ0xFMUJRMnhHVml4SlFVRnBRbG9zUlVGQlpYTkNMRVZCUVhsQ0xIZENRVUYzUWl4SlFVVnlSakZDTEVWQlFWa3NWMEZCVnpSQ0xFVkJRV2RDTzBGQlEzWkRMRmxCUVUxWUxGRkJRV2xDVGl4RlFVRjFRaXh2UTBGQmIwTlFMRU5CUVdNN1FVRkRhRWNzWVVGQlNXRXNTVUZEVDFBc1JVRkJUU3hOUVVGTkxGVkJRVlZQTEVWQlFWY3NOa0pCUVRoQ0xFTkJRVUVzUlVGQlJTeG5Ra0ZCWjBJc05rSkJRVFpDTEVOQlFVTTFTeXhOUVVGVE8wRkJRek5JTEZsQlFVazdRVUZEUVN4cFFrRkJRVUVzUlVGQlN5eGhRVUZoTEN0RFFVRXJReXhGUVVGSkxFZEJRemxFTEV0QlFVc3NiMEpCUVc5Q04wa3NSMEZCUzNkVExFZEJRV0VzUjBGQlpXZENMRWRCUVdkQ1dpeEhRVUZuUW1Fc1JVRkJWeXcyUWtGQk5FSXNRMEZCUlR0QlFVRkJMRkZCUXpkSkxGVkJRMDg3UVVGRFNpeFZRVUZCTlVzc1JVRkJTeXhKUVVGSE8wRkJRVUVzVVVGRFdEdEJRVUZCTEUxQlEycENMRU5CUVdFc1NVRkZSU3hMUVVGTExHOUNRVUZ2UWpkSkxFZEJRVXQzVXl4SFFVRmhMRWRCUVdWblFpeEhRVUZuUWxvc1EwRkJZenRCUVVGQkxFbEJRMnhITzBGQlFVRXNSVUZEU2p0QlFVTnpRaXhUUVVGQmJVSXNSMEZCUVN4clFrRkJSMHNzUjBGTk1VSkJMRVZCUVdkQ0xIZENRVUYzUWl4dlFrRkJTU3hKUVVGSk8wRkJRVUVzU1VGRE5VTTdRVUZCUVN4SlFVTkJPMEZCUVVFc1NVRkRRVHRCUVVGQkxFbEJRMEU3UVVGQlFTeEpRVU5CTzBGQlFVRTdRVUZCUVN4RlFVTktMRU5CUVVNc1IwRk5SRUVzUlVGQlowSXNkMEpCUVhkQ0xFdEJUWGhEUVN4RlFVRm5RaXhyUWtGQmEwSXNXVUZOYkVOQkxFVkJRV2RDTEhWQ1FVRjFRaXhwUWtGTmRrTkJMRVZCUVdkQ0xHdENRVUZyUWpzN096czdPMVZETjAxc1F5eFBRVUZQTEdWQlFXVlhMRWRCUVZNc1kwRkJZeXhGUVVGRkxFOUJRVThzUjBGQlNTeERRVUZGTEVkQlF6VkVRU3hGUVVGQkxITkNRVUU0UWtFc1JVRkJkMElzYlVKQlFVZEJMSEZDUVVFeVFqdEJRVmR3Uml4UlFVRk5ReXhKUVVGdFFpeERRVUZEYmxnc1IwRkJVelZHTEUxQlFWRTdRVUZEZGtNc1VVRkJTVFJHTEV0QlFWZEJMRVZCUVZFN1FVRkRia0lzWVVGQlQwRXNSVUZCVVN4UlFVRlJOVVlzUTBGQlJ6dEJRVUZCTEVWQlIyeERPMEZCUTNkQ0xFVkJRVUU0WXl4RlFVRkJMRzFDUVVGSFF6dEJRVk16UWl4UlFVRk5ReXhKUVVGdFFpeERRVUZEY0Znc1IwRkJVelZHTEVkQlFVdHZRaXhOUVVGVk8wRkJRemxETEVsQlFVbDNSU3hOUVVOTFFTeEZRVUZSTEZsQlExUkJMRVZCUVZFc1ZVRkJWU3hMUVVWMFFrRXNSVUZCVVN4UlFVRlJOVVlzUTBGQlJ5eEpRVUZKYjBJN1FVRkJRU3hGUVVVdlFqdEJRVU4zUWl4RlFVRkJNR0lzUlVGQlFTeHRRa0ZCUjBVN1FVRlZNMElzVVVGQlRVTXNTVUZCYzBJc1EwRkJRM0pZTEVkQlFWTTFSaXhIUVVGTGIwSXNSMEZCVHpoaUxFbEJRVmtzVTBGQlV6dEJRVU51UlN4SlFVRkpkRmdzVFVGRFMwRXNSVUZCVVN4WlFVTlVRU3hGUVVGUkxGVkJRVlVzUzBGRmFrSkJMRVZCUVZFc1VVRkJVVFZHTEVOQlFVY3NTVUZKY0VJMFJpeEZRVUZSTEZGQlFWRTFSaXhEUVVGSExFdEJRVXNzUjBGQlIydGtMRWxCUVZrNVlpeE5RVWgyUTNkRkxFVkJRVkVzVVVGQlVUVkdMRU5CUVVjc1NVRkJTVzlDTzBGQlFVRXNSVUZOYmtNN1FVRkRRU3hUUVVGQk1HSXNSVUZCUVN4elFrRkJPRUpIT3pzN096dEJRekZFT1VJc1YwRkJUeXhsUVVGamJHVXNSMEZCVlN4alFVRmpMRVZCUVVVc1QwRkJUeXhIUVVGSkxFTkJRVVVzUjBGRE5VUkJMRVZCUVRoQ0xITkNRVUZCUVN4RlFVRkJMSGRDUVVGblF5eFJRVU01UkVFc1JVRkJRU3gzUWtGQlowTTdRVUZQYUVNc1ZVRkJUVzlsTEVWQlFXOUNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1RVRlZkRUlzV1VGQldVTXNTVUZCVVVRc1JVRkJiMElzWlVGQlpVVXNTVUZCWVVZc1JVRkJiMElzY1VKQlFYRkNSeXhKUVVGalNDeEZRVUZ2UWl4dlFrRkJiMEk3UVVGSkwwb3NXVUZJUVN4TFFVRkxMRkZCUVZGRExFZEJRMklzUzBGQlN5eGhRVUZoUXl4SFFVTnNRaXhMUVVGTExHTkJRV05ETEVkQlEyWkdMRWxCUVZGRUxFVkJRVzlDTEdGQlFXRkZMRWxCUVdGR0xFVkJRVzlDTEdsQ1FVRnBRanRCUVVNelJpeG5Ra0ZCVFhKaExFbEJRVkVzU1VGQlNTeE5RVUZOTEdkRVFVRm5SSEZoTEVWQlFXOUNMR2xDUVVGcFFrRXNSVUZCYjBJc2FVSkJRV2xDTzBGQlEyeEtMR2RDUVVGQmNtRXNSVUZCVFN4UFFVRlBMRzlDUVVOUVFUdEJRVUZCTEcxQ1FVVkVjMkVzU1VGQlVVUXNSVUZCYjBJc1YwRkJWenRCUVVNMVF5eG5Ra0ZCVFhKaExFbEJRVkVzU1VGQlNTeE5RVUZOTEdsRFFVRnBRM0ZoTEVWQlFXOUNMRmRCUVZjN1FVRkRlRVlzWjBKQlFVRnlZU3hGUVVGTkxFOUJRVThzYjBKQlExQkJPMEZCUVVFc2JVSkJSVVIxWVN4SlFVRmhSaXhGUVVGdlFpeHBRa0ZCYVVJN1FVRkRka1FzWjBKQlFVMXlZU3hKUVVGUkxFbEJRVWtzVFVGQlRTeHpRMEZCYzBOeFlTeEZRVUZ2UWl4cFFrRkJhVUk3UVVGRGJrY3NaMEpCUVVGeVlTeEZRVUZOTEU5QlFVOHNiMEpCUTFCQk8wRkJRVUVzYlVKQlJVUnpZU3hKUVVGUkxFdEJRVXRETEVsQlFXRXNSMEZCUnp0QlFVTnNReXhuUWtGQlRYWmhMRWxCUVZFc1NVRkJTU3hOUVVGTkxEWkRRVUUyUXp0QlFVTnlSU3huUWtGQlFVRXNSVUZCVFN4UFFVRlBMSGRDUVVOUVFUdEJRVUZCTEcxQ1FVVkVjMkVzU1VGQlVTeEhRVUZITzBGQlEyaENMR2RDUVVGTmRHRXNTVUZCVVN4SlFVRkpMRTFCUVUwc09FSkJRVGhDTzBGQlEzUkVMR2RDUVVGQlFTeEZRVUZOTEU5QlFVOHNkMEpCUTFCQk8wRkJRVUVzYlVKQlJVUjFZU3hKUVVGaExFZEJRVWM3UVVGRGNrSXNaMEpCUVUxMllTeEpRVUZSTEVsQlFVa3NUVUZCVFN4dFEwRkJiVU03UVVGRE0wUXNaMEpCUVVGQkxFVkJRVTBzVDBGQlR5eDNRa0ZEVUVFN1FVRkJRVHRCUVVWV0xHRkJRVXNzVVVGQlVTeExRVUZMTEVsQlFVbHpZU3hIUVVGUFJDeEZRVUZ2UWl4VFFVRlRMRWRCUXpGRUxFdEJRVXNzWVVGQllTeExRVUZMTEVsQlFVbEZMRWRCUVZsR0xFVkJRVzlDTEdWQlFXVXNSMEZETVVVc1MwRkJTeXhqUVVGalJ6dEJRVUZCTEUxQlEzUkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEUxQlRVUXNZMEZCWXp0QlFVTldMR1ZCUVU5SUxFVkJRVzlDTzBGQlFVRXNUVUZET1VJN1FVRkJRU3hOUVVORUxGTkJRVk03UVVGRFRDeGxRVUZQY0dVc1JVRkJVVHRCUVVGQkxFMUJRMnhDTzBGQlFVRXNTVUZEU2p0QlFVTkVMRWxCUVVGQkxFVkJRVUVzYzBKQlFUaENiMlVzUjBGTk9VSkJMRVZCUVc5Q0xHZENRVUZuUWl4SFFVMXdRMEVzUlVGQmIwSXNjMEpCUVhOQ0xFZEJUVEZEUVN4RlFVRnZRaXhaUVVGWkxFdEJUV2hEUVN4RlFVRnZRaXhyUWtGQmEwSXNTVUZMZEVOQkxFVkJRVzlDTEhGQ1FVRnhRaXhOUVVGTk8wRkJRVUU3T3pzN096dFZRMnhITDBNc1QwRkJUeXhsUVVGbFNTeEpRVUZUTEdOQlFXTXNSVUZCUlN4UFFVRlBMRWRCUVVrc1EwRkJSU3hIUVVONFEwRXNSMEZCUVN4bFFVRkhPMEZCUTNaQ0xGRkJRVTF3UkN4SlFVRlZReXhIUVVsV01rSXNTVUZCZFVKYUxFbEJRM1pDUml4SlFVRlJTU3hKUVVOU1NDeEpRVUY1UW1Nc1RVRkRla0ozUWl4SlFVRm5RblJDTEUxQlEyaENkVUlzU1VGQmQwSkRPMEZCVFRsQ0xGRkJRVTFETEVWQlFXRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVsQlVXWXNXVUZCV1M5WUxFbEJRVlVzU1VGQlNUWllMRVZCUVhOQ0xHOUNRVUZ0UWl4SFFVRkpPMEZCUlc1RkxGVkJSRUVzUzBGQlN5eFZRVUZWTjFnc1IwRkRXQ3hEUVVGRFFUdEJRVU5FTEdOQlFVMHNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVUZCTEVsQlJUTkVPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4SlFWRkVMRkZCUVZFNFZDeEhRVUZWTzBGQlEyUXNZVUZCVDJsRkxFVkJRV0VzYlVKQlFXMUNMRWxCUVVscVJTeEZRVUZUTEUxQlFVMDdRVUZCUVN4SlFVTTNSRHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRWxCVDBRc1YwRkJWemxVTEVkQlFWTTdRVUZEYUVJc1ZVRkJTVzlETzBGQlEwb3NXVUZCVFRSV0xFbEJRVk5vV1N4RlFVRlJPMEZCUlhaQ0xHRkJRVWtzUjBGRWNVSm5XU3hOUVVGWE4wSXNSVUZCY1VJc1YwRkJWeXhQUVVGUE5rSXNUVUZCVnpkQ0xFVkJRWEZDTEZkQlFWY3NVMEZCVXpaQ0xFMUJRVmMzUWl4RlFVRnhRaXhYUVVGWExGZEJSVzVLTDFRc1VVRkJVM2RXTEVWQlFXTXNhMEpCUVd0Q05WZ3NSMEZCVXl4alFVRmpMRTlCUVU4c1VVRkJVVzlETEUxQlFVOHNVMEZCVXl4VFFVRlRRU3hGUVVGSExGbEJRV0VzVDBGQlRUdEJRVUZCTEVsQlRYaEtPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRWxCVTBRc1UwRkJVekJTTEVkQlFWVnRSU3hIUVVGbFZDeEhRVUZQTzBGQlEzSkRMRmxCUVUxVkxFbEJRV2RDTEUxQlFVMHNUMEZCVHl4TFFVRkxMRTlCUVUwc1JVRkJSeXhSUVVGUkxFTkJRVU1zUTBGQlF5eEhRVU55UkVNc1NVRkJZWEpGTEVWQlFWTXNXVUZCV1N4VFFVRlpRU3hGUVVGVExGRkJRVkVzU1VGQlNXbEZMRVZCUVdFc2EwSkJRV3RDTEVsQlFVazdRVUZETlVjc1ZVRkJTVXM3UVVGRFNpeGhRVUZKUkN4TlFVRmxMRTlCUlZnc1QwRkJUeXhOUVVGTkxFOUJRVTlCTEVOQlFWVXNRMEZCUXl4SlFVTXZRa01zU1VGQlZ5eExRVUZMTEU5QlFVOHNTVUZCU1N4TFFVRkxSQ3hEUVVGVkxFVkJRVVVzVVVGQlV5eEpRVUZITEV0QlFVc3NTVUZCU3l4TFFVRkpMRWRCUVVrc1NVRkpNVVZETEVsQlFWY3NUMEZCVDBRc1EwRkJWU3hKUVV0b1EwTXNTVUZCVjBnc1MwRkJhVUlzU1VGQlNTeExRVUZMTERCQ1FVRXdRa0VzUTBGQllTeEpRVUZKVkN4SlFVRlJWU3hGUVVGaExFbEJRVXRXTEVsQlFWRlZMRVZCUVdFc1IwRkZOVWdzUzBGQlN5eEpRVUZKUlN4SFFVRlZMRXRCUVVzc1VVRkJVU3haUVVGWExFbEJRVXRHTEVWQlFXRXNRMEZCUlR0QlFVRkJMRWxCUTNwRk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1NVRlBSQ3d3UWtGQk1FSkhMRWRCUVZVN1FVRkRhRU1zWVVGQlR5eExRVUZMTEUxQlFVOHNTVUZCU1N4TFFVRk5MRXRCUVVzc1NVRkJTU3hIUVVGSFFTeERRVUZSTEVsQlFVa3NSVUZCUlR0QlFVRkJMRWxCUXpGRU8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hKUVZGRUxFMUJRVTFETEVkQlFXTTdRVUZEYUVJc1lVRkJUeTlFTEVWQlFWRXNWVUZCVlN4TlFVRk5MRkZCUVZFc1VVRkJVU3hoUVVGaE8wRkJRM2hFTEdOQlFVMW5SU3hKUVVGdlFrUXNTVUZCWlR0QlFVTjZReXhsUVVGUExFbEJRVWtzVVVGQlVTeERRVUZEYm1Nc1RVRkJXU3hYUVVGWFFTeEhRVUZUYjJNc1EwRkJhVUlzUTBGQlF6dEJRVUZCTEUxQlEyeEdMRU5CUVZNN1FVRkJRU3hKUVVOS08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVsQldVUXNhVUpCUVdsQ2NGY3NSMEZCU3pSVkxFZEJRV3RDYTBJc1IwRkJaWFJETEVkQlFXZENXaXhIUVVGblFtdERMRWRCUVZrN1FVRkRMMFlzVlVGQlNUZFZPMEZCUTBvc1lVRkJUMjFUTEVWQlFWRXNWVUZCVlN4TlFVRk5MRkZCUVZFc1VVRkJVU3hoUVVGaE8wRkJRM2hFTEdOQlFVMVVMRWxCUVZjc1QwRkJVVEZTTEVsQlFVc3NTMEZCU3l4VlFVRlZMRkZCUVZGQkxFMUJRVThzVTBGQlV5eFRRVUZUUVN4RlFVRkhMRkZCUVZGRUxFZEJRVXMwVlN4SFFVRnJRbWhETEVOQlFXTTdRVUZET1Vnc1dVRkJTU3hEUVVGRGFrSTdRVUZEUkN4blFrRkJUU3hKUVVGSkxFMUJRVTBzZFVKQlFYVkNPMEZCUlRORExGbEJRVWx0UlN4SlFVRm5RblJETEVWQlFXVXNZMEZCWXl4TFFVRkxMRkZCUVZFM1FpeERRVUZSTEV0QlFVc3NTMEZCU3l4WFFVRlhhVVFzUTBGQlowSXNTMEZCUzNCQ0xFVkJRV1VzV1VGQldVRXNSVUZCWlN4UFFVRlBjME1zUjBGQlpUbFdMRWRCUVVzMFZTeEhRVUZyUW1wRUxFTkJRVkVzUjBGQlJ6dEJRVWM1VFN4alFVWkJMRVZCUVVWdFJTeFBRVU5GVEN4RlFVRmpMR3RDUVVGclFtSXNSMEZCYTBKblFpeEZRVUZoTEhOQ1FVRnpRa1VzUlVGQll5eFRRVUZSTEVOQlFVVXNSMEZETjBkdVJTeEhRVUZWTzBGQlExWXNhMEpCUVUwd1JDeEpRVUZSTEV0QlFVc3NVMEZCVXpGRUxFZEJRVlZ0UlN4SFFVRmxkRU1zUlVGQlpTeExRVUZMTzBGQlEzcEZMR3RDUVVGTkxFdEJRVXNzVFVGQlRUWkNMRU5CUVVzN1FVRkJRVHRCUVVVeFFpeHBRa0ZCU1ZBc1NVRkRUeXhOUVVGTk5VSXNSVUZCVFN4TlFVRk5MRlZCUVZVMFFpeERRVUZWTEVWQlFVVXNaMEpCUVdkQ0xEQkNRVUV3UW1kQ0xFdEJRV2xDTEVOQlFVTnFUaXhOUVVGVE8wRkJRMmhJTEdkQ1FVRkpPMEZCUTBFc2NVSkJRVUZCTEVWQlFVc3NZVUZCWVN4dlFrRkJiMEpwVGl4RFFVRmhMRWRCUTI1RWFrNHNSVUZCU3l4aFFVRmhMRzlDUVVGdlFqaEpMRVZCUVZNc1RVRkJUU3hIUVVNNVF5eExRVUZMTEdsQ1FVRnBRak5TTEVkQlFVczBWU3hIUVVGclFtdENMRWRCUVdWMFF5eEhRVUZuUWxvc1EwRkJZenRCUVVGQkxGbEJRM0JITEZWQlEwODdRVUZEU2l4alFVRkJMMG9zUlVGQlN5eEpRVUZITzBGQlFVRXNXVUZEV0R0QlFVRkJMRlZCUTNwQ0xFTkJRWEZDTEVsQlJVVXNUVUZCVFN4TFFVRkxMR2xDUVVGcFFqZEpMRWRCUVVzMFZTeEhRVUZyUW10Q0xFZEJRV1YwUXl4SFFVRm5RbG9zUTBGQll6dEJRVUZCTzBGQlIzWkhMR2xDUVVGUGFrSTdRVUZCUVN4TlFVVjJRaXhEUVVGVE8wRkJRVUVzU1VGRFNqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzU1VGUlJDeFJRVUZSTTFJc1IwRkJTM2RUTEVkQlFXRkpMRWRCUVdkQ08wRkJSWFJETEZWQlFVbFpMRWxCUVdsQ0xFdEJRVXM3UVVGRE1VSXNUVUZCU1Zvc1MwRkJhMEpCTEVWQlFXVTRReXhGUVVGelFpeHhRa0ZCY1VJc1RVRkROVVZzUXl4SlFVRnBRbG9zUlVGQlpUaERMRVZCUVhOQ0xIRkNRVUZ4UWp0QlFVVXZSU3haUVVGTmFrTXNVVUZCYVVKT0xFVkJRWFZDTEc5RFFVRnZRMUFzUTBGQll6dEJRVU5vUnl4aFFVRkpZU3hKUVVOUFVDeEZRVUZOTEUxQlFVMHNWVUZCVlU4c1JVRkJWeXcyUWtGQk9FSXNRMEZCUVN4RlFVRkZMR2RDUVVGblFpd3dRa0ZCTUVJc1EwRkJRelZMTEUxQlFWTTdRVUZEZUVnc1dVRkJTVHRCUVVOQkxHbENRVUZCUVN4RlFVRkxMR0ZCUVdFc05FTkJRVFJETEVWQlFVa3NSMEZETTBRc1MwRkJTeXhwUWtGQmFVSTNTU3hIUVVGTGQxTXNSMEZCWVN4SFFVRmxaMElzUjBGQlowSmFMRWRCUVdkQ1lTeEZRVUZYTERaQ1FVRTBRaXhEUVVGRk8wRkJRVUVzVVVGRE1Va3NWVUZEVHp0QlFVTktMRlZCUVVFMVN5eEZRVUZMTEVsQlFVYzdRVUZCUVN4UlFVTllPMEZCUVVFc1RVRkRha0lzUTBGQllTeEpRVVZGTEV0QlFVc3NhVUpCUVdsQ04wa3NSMEZCUzNkVExFZEJRV0VzUjBGQlpXZENMRWRCUVdkQ1dpeERRVUZqTzBGQlFVRXNTVUZETDBZN1FVRkJRU3hGUVVOS08wRkJRMjFDTEZOQlFVRTBReXhIUVVGQkxHVkJRVWRKTEVkQlRYWkNRU3hGUVVGaExIRkNRVUZ4UWl4dlFrRkJTU3hKUVVGSk8wRkJRVUVzU1VGRGRFTTdRVUZCUVN4SlFVTkJPMEZCUVVFc1NVRkRRVHRCUVVGQk8wRkJRVUVzUlVGRFNpeERRVUZETEVkQlRVUkJMRVZCUVdFc2RVSkJRWFZDTEdsQ1FVMXdRMEVzUlVGQllTeHhRa0ZCY1VJN096czdkMEpEYUU1c1F5eFBRVUZQTEdWQlFXVnlUQ3hKUVVGVExHTkJRV01zUlVGQlJTeFBRVUZQTEVkQlFVa3NRMEZCUlN4SFFVTjBRMEVzUjBGQlFTeHBRa0ZCUnl4UlFVTjZRa0VzUjBGQlFTeHBRa0ZCZVVJN096czdPMEZEU1hwQ0xGZEJRVThzWlVGQlkzWlVMRWRCUVZVc1kwRkJZeXhGUVVGRkxFOUJRVThzUjBGQlNTeERRVUZGTEVkQlF6VkVRU3hGUVVGclF5d3dRa0ZCUVVFc1JVRkJRU3cyUWtGQmNVTTdRVUZEZGtVc1ZVRkJUWEZtTEVsQlFWbG9SVHRCUVVOc1FpeEpRVUZCY21Jc1JVRkJRU3cyUWtGQmNVTTdRVUZEY2tNc1ZVRkJUWE5tTEVWQlFYZENPMEZCUVVFc1RVRkRNVUlzVTBGQlV6dEJRVU5NTEdWQlFVOTBaaXhGUVVGUk8wRkJRVUVzVFVGRGJFSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNUVUZUUkN4WlFVRlpLMklzU1VGQlV5eEpRVUZOZDBRc1NVRkJZeXh2UWtGQmIwSkRMRWxCUVdsQ1NDeEZRVUZWTEdkQ1FVRm5RanRCUVVOd1J5eGhRVUZMTEZOQlFWTjBSQ3hIUVVOa0xFdEJRVXNzWTBGQlkzZEVMRWRCUTI1Q0xFdEJRVXNzYVVKQlFXbENRenRCUVVGQkxFMUJRM3BDTzBGQlFVRXNTVUZEU2p0QlFVTkVMRWxCUVVGNFppeEZRVUZCTERCQ1FVRnJRM05tTzBGQlFVRTdPenM3T3p0VlEzUkNiRU1zVDBGQlR5eGxRVUZsUnl4SlFVRlRMR05CUVdNc1JVRkJSU3hQUVVGUExFZEJRVWtzUTBGQlJTeEhRVU53UTBFc1IwRkJRU3h0UWtGQlJ6dEJRVU16UWl4UlFVRk5ja1VzU1VGQlZVTXNSMEZEVm1Fc1NVRkJVVVVzU1VGRFVrUXNTVUZCZVVKSExFMUJRM3BDYlVNc1NVRkJaMEo0UWl4TlFVTm9RbmxETEVsQlFUUkNka01zVFVGRE5VSjNReXhKUVVGM1FqdEJRVU01UWl4UlFVRk5ReXhGUVVGcFFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFbEJUMjVDTEZsQlFWazVVU3hKUVVGWExFbEJRVWswVVN4RlFVRXdRaXgzUWtGQmRVSXNSMEZCU1R0QlFVTTFSU3hYUVVGTExGZEJRVmMxVVR0QlFVRkJMRWxCUTI1Q08wRkJRVUU3UVVGQlFTeEpRVVZFTEZGQlFWRTVSaXhIUVVGTGQxTXNSMEZCWVVrc1IwRkJaMEk3UVVGRGRFTXNXVUZCVFdFc1VVRkJhVUpPTEVWQlFYVkNMRzlEUVVGdlExQXNRMEZCWXp0QlFVTm9SeXhoUVVGSllTeEpRVU5QVUN4RlFVRk5MRTFCUVUwc1ZVRkJWVThzUlVGQlZ5dzJRa0ZCT0VJc1EwRkJRU3hGUVVGRkxHZENRVUZuUWl3NFFrRkJPRUlzUTBGQlF6VkxMRTFCUVZNN1FVRkROVWdzV1VGQlNUdEJRVU5CTEdsQ1FVRkJRU3hGUVVGTExHRkJRV0VzWjBSQlFXZEVMRVZCUVVrc1IwRkRMMFFzUzBGQlN5eFRRVUZUTjBrc1IwRkJTM2RUTEVkQlFXRkpMRU5CUVdNN1FVRkJRU3hSUVVONFJDeFZRVU5QTzBGQlEwb3NWVUZCUVM5S0xFVkJRVXNzU1VGQlJ6dEJRVUZCTEZGQlExZzdRVUZCUVN4TlFVTnFRaXhEUVVGaExFbEJSMDBzUzBGQlN5eFRRVUZUTjBrc1IwRkJTM2RUTEVkQlFXRkpMRU5CUVdNN1FVRkJRU3hKUVVVMVJEdEJRVUZCTEVsQlEwUXNVMEZCVXpWVExFZEJRVXQzVXl4SFFVRmhTU3hIUVVGblFqdEJRVU4yUXl4VlFVRkpNMU03UVVGRFNpeGhRVUZQYlZNc1JVRkJVU3hWUVVGVkxFMUJRVTBzVVVGQlVTeFJRVUZSTEdGQlFXRTdRVUZEZUVRc1dVRkJTVzlDTEVsQlFXbENMRXRCUVVzN1FVRkpNVUlzV1VGSVNWb3NTMEZCYTBKQkxFVkJRV1U0UkN4RlFVRXdRaXd3UWtGQk1FSXNUVUZEY2tac1JDeEpRVUZwUWxvc1JVRkJaVGhFTEVWQlFUQkNMREJDUVVFd1FpeEpRVVZ3Um14RUxFVkJRV1VzVVVGQlVUdEJRVU4yUWl4blFrRkJUWEZFTEVsQlFXdENMRWRCUVVkeVJDeEZRVUZsTEdWQlFXVkJMRVZCUVdVc2EwSkJRMnhGYzBRc1VVRkJiVUp5UWl4RlFVRmpMR3RDUVVGclFtcEVMRWRCUVdGdFJTeERRVUZ4UWp0QlFVTXpSaXhYUVVGSkxFTkJRVU5ITEV0QlFXZENRU3hGUVVGaExGRkJRVkZFTEVOQlFXVXNUVUZCVFN4WFFVTjJSSEJDTEVWQlFXTXNjVUpCUVhGQ2FrUXNSMEZCWVcxRkxFZEJRWFZDUlN4SFFVRnBRaXhIUVVGSE8wRkJRVUU3UVVGSGRrY3NZMEZCVFd4R0xFbEJRVmNzVDBGQlVURlNMRWxCUVVzc1MwRkJTeXhWUVVGVkxGRkJRVkZCTEUxQlFVOHNVMEZCVXl4VFFVRlRRU3hGUVVGSExGRkJRVkZFTEVkQlFVdDNVeXhIUVVGaFNTeERRVUZqTzBGQlEzcElMRmxCUVVrc1EwRkJRMnBDTzBGQlEwUXNaMEpCUVUwc1NVRkJTU3hOUVVGTkxEWkRRVUUyUXp0QlFVTnFSU3hsUVVGUFFUdEJRVUZCTEUxQlEyNUNMRU5CUVZNN1FVRkJRU3hKUVVOS08wRkJRVUVzUlVGRFNqdEJRVU5FTEZOQlFVRTRSU3hIUVVGQkxHMUNRVUV5UWtjN096czdPenRWUTNwRU0wSXNUMEZCVHl4bFFVRmxSeXhKUVVGVExHTkJRV01zUlVGQlJTeFBRVUZQTEVkQlFVa3NRMEZCUlN4SFFVTnVRMEVzUjBGQlFTeHZRa0ZCUnp0QlFVazFRaXhSUVVGTlF5eEpRVUZsTTBVc1RVRkRaalJGTEVsQlFYVkNOMFFzVFVGRGRrSTRSQ3hKUVVGclF6VkVMRTFCUTJ4RE5rUXNTVUZCYjBKc1JDeE5RVU53UW0xRUxFbEJRV2xDYWtRc1RVRkRha0pyUkN4SlFVRnhRakZDTzBGQlN6TkNMRkZCUVUweVFpeEZRVUZyUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNTVUZSY0VJc1QwRkJUeXd3UWtGQk1FSXZSU3hKUVVGamVVVXNSVUZCWVN4VFFVRlRPMEZCUldwRkxHRkJSSGRDTEVOQlFVTXNTVUZCU1Vrc1JVRkJaU3hoUVVGakxFZEJRVVVzU1VGQlNVUXNSVUZCYTBJc1owSkJRV1VzUjBGQlNTeEpRVUZKUkN4RlFVRm5ReXhwUTBGQmFVTXNTVUZCU1Vjc1JVRkJiVUlzYVVKQlFXdENMRWRCUVVVc1NVRkJTVW9zUlVGQmNVSXNiVUpCUVcxQ01VVXNRMEZCVnl4RFFVRkRPMEZCUVVFc1NVRkZhRkk3UVVGQlFTeEZRVU5LTzBGQlEwUXNVMEZCUVhkRkxFZEJRVUVzYjBKQlFUUkNUenM3T3pzN08xVkROVUkxUWl4UFFVRlBMR1ZCUVdWRExFbEJRVk1zWTBGQll5eEZRVUZGTEU5QlFVOHNSMEZCU1N4RFFVRkZMRWRCUXpGRFFTeEhRVUZCTEdGQlFVYzdRVUZEY2tJc1VVRkJUVzVHTEVsQlFWVkRMRWRCUTFZMFJTeEpRVUYxUWpkRUxFMUJRM1pDYjBVc1NVRkJjMEpzUlR0QlFVTTFRaXhSUVVGTmJVVXNSVUZCVnp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hKUVZsaUxGbEJRVmxzUml4TlFVRm5RbTFHTEVkQlFXRTdRVUZEY2tNc1YwRkJTeXhqUVVGamJrWXNSMEZGWml4RFFVRkRiVVlzUlVGQldTeFZRVUZWTEVOQlFVTkJMRVZCUVZrc1EwRkJReXhKUVVOeVF5eExRVUZMTEdOQlFXTXNSMEZCUjBZc1JVRkJiMElzYTBKQlFXdENMREJDUVVFd1FtcEdMRU5CUVZjc1EwRkJReXhKUVVjNVJpeExRVUZMTEdOQlEwd3NTMEZCU3l4alFVRmpMRWRCUVVkdFJpeEhRVUZoTEVsQlFVbFVMRVZCUVhGQ0xHMUNRVUZ0UWpGRkxFTkJRVmNzUTBGQlF5eEpRVWN6Uml4TFFVRkxMR05CUVdNc1IwRkJSMjFHTEVOQlFWYzdRVUZCUVN4SlFVYzFRenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1NVRlJSQ3hwUWtGQmFVSkRMRWRCUVZrN1FVRkRla0lzVFVGQlFVRXNSVUZCVnl4UlFVRlJMRU5CUVVORExFZEJRVk5vU3l4TlFVRlZPMEZCUTI1RExGRkJRVWxCTEVsQlFWRXJTaXhGUVVGWExGTkJRVk1zVFVGRE5VSkRMRVZCUVZFc1QwRkJUMFFzUlVGQlZ5OUtMRWxCUVZFc1EwRkJRenRCUVVGQkxFMUJSVzVFTEVOQlFWTXNSMEZEUkN4TFFVRkxMR0ZCUVdFclNpeEZRVUZYTEVOQlFVTTdRVUZCUVN4SlFVTnFRenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRWxCVDBRc1lVRkJZVE5ZTEVkQlFVdDNVeXhIUVVGaFNTeEhRVUZuUWp0QlFVTXpReXhoUVVGUFVpeEZRVUZSTEZWQlFWVXNUVUZCVFN4UlFVRlJMRkZCUVZFc1lVRkJZVHRCUVVONFJDeFpRVUZKTEV0QlFVc3NaVUZCWlN4RFFVRkRMRXRCUVVzN1FVRkRNVUlzYVVKQlFVOHNTMEZCU3l4WlFVRlpjRk1zUjBGQlMzZFRMRU5CUVZjN1FVRkZOVU1zV1VGQlNTeExRVUZMTzBGQlEwd3NhVUpCUVU4c1RVRkJUU3hMUVVGTExGZEJRVmNzVVVGQlVYaFRMRWRCUVV0M1V5eEhRVUZoU1N4RFFVRmpPMEZCUjNKRkxHTkJRVTBzU1VGQlNTeE5RVUZOTERoRlFVRTRSVHRCUVVGQkxFMUJSVGxITEVOQlFWTTdRVUZCUVN4SlFVTktPMEZCUVVFc1JVRkRTanRCUVVORUxGTkJRVUV5UlN4SFFVRkJMR0ZCUVhGQ1JUczdPenM3TzFWRGVrVnlRaXhQUVVGUExHVkJRV1ZKTEVsQlFWTXNZMEZCWXl4RlFVRkZMRTlCUVU4c1IwRkJTU3hEUVVGRkxFZEJRMnBEUVN4SFFVRkJMSE5DUVVGSE8wRkJRemxDTEZGQlFVMTZSaXhKUVVGVlF5eEhRVU5XTWtJc1NVRkJkVUphTEVsQlEzWkNSaXhKUVVGUlNTeEpRVU5TZDBVc1NVRkJaVGRFTEUxQlEyWmtMRWxCUVhsQ1owSTdRVUZETDBJc1VVRkJUVFJFTEVWQlFXOUNPMEZCUVVFc1NVRkRkRUlzWjBOQlFXZERPMEZCUXpWQ0xHRkJRVThzUzBGQlN6dEJRVUZCTEVsQlEyWTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNTVUZUUkN4WlFVRlpReXhIUVVGM1FrTXNTVUZCYlVKcVJTeEZRVUZ4UWl4NVFrRkJlVUlzYVVKQlFXbENhMFVzU1VGQk5rSnNSU3hGUVVGeFFpeHRRMEZCYlVNc2FVSkJRV2xDZFVRc1NVRkJZU3hKUVVGSlR5eEZRVUZoTEZkQlFWVXNSMEZCU1dwR0xFbEJRWFZDTEVsQlFVbE5MRVZCUVhWQ0xEUkNRVUUwUWp0QlFTdGtiRllzVlVFNVpFRXNTMEZCU3l4NVFrRkJlVUkyUlN4SFFVTTVRaXhMUVVGTExHMUNRVUZ0UWtNc1IwRkRlRUlzUzBGQlN5dzJRa0ZCTmtKRExFZEJRMnhETEV0QlFVc3NZVUZCWVZnc1IwRkZiRUlzUzBGQlN5eFZRVUZWTEVsQlEyWXNTMEZCU3l4NVFrRkJlVUlzUTBGQlF6VkdMRTFCUVdFN1FVRkRlRU1zV1VGQlNURlNPMEZCUTBvc1kwRkJUV3RaTEV0QlFWVnNXU3hKUVVGTE1GSXNSVUZCVXl4UlFVRlJMRWxCUVVrc1kwRkJZeXhQUVVGUExGRkJRVkV4VWl4TlFVRlBMRk5CUVZNc1UwRkJVMEVzUlVGQlJ6dEJRVU51Unl4WlFVRkpMRU5CUVVOcldUdEJRVU5FTzBGQlEwb3NZMEZCVFVNc1NVRkJWMFFzUlVGQlR5eE5RVUZOTEVkQlFVYzdRVUZEYWtNc1dVRkJTVU1zUlVGQlV5eFhRVUZYTzBGQlIzQkNMR2xDUVVGUFFTeEZRVUZUTEVOQlFVTTdRVUZCUVN4TlFVTnFReXhIUVVOUkxFdEJRVXNzYVVOQlFXbERMRU5CUVVORExFZEJRV0ZETEVkQlFXTjBSeXhIUVVGcFFrb3NUVUZCYTBJN1FVRkRha2NzV1VGQlNTeERRVUZEZVVjN1FVRkRSQ3huUWtGQlRTeEpRVUZKTEUxQlFVMHNORUpCUVRSQ08wRkJSV2hFTEdWQlFVOHNTMEZCU3l4cFFrRkJhVUpCTEVkQlFXRXNhME5CUVd0RExFTkJRVU40VUN4TlFVRlRkVW9zUlVGQlVTeFZRVUZWTEUxQlFVMHNVVUZCVVN4UlFVRlJMR0ZCUVdFN1FVRkRka2tzWTBGQlNUdEJRVU5CTEd0Q1FVRk5WQ3hKUVVGWExFMUJRVTBzUzBGQlN5eDFRa0ZCZFVJd1J5eEhRVUZoZUZBc1EwRkJTVHRCUVVOd1JTeG5Ra0ZCU1cxS08wRkJRMEVzY1VKQlFVRnVTaXhGUVVGTExGTkJRVk5yVUN4RlFVRnZRaXc0UWtGQk9FSXNSMEZEZWtRc1RVRkJUUzlHTEVWQlFXZENMRzlDUVVGdlFrd3NSMEZCVlVNc1EwRkJZVHRCUVVkNFJTeG5Ra0ZCU1R0QlFVVkJMR3RDUVVSQkxFMUJRVTBzUzBGQlN5eHpRa0ZCYzBKRUxFZEJRVlZETEVkQlFXVXZTU3hEUVVGSkxFZEJRekZFTEV0QlFVc3NjMEpCUVhOQ09Fa3NRMEZCVVR0QlFVTnVRenRCUVVOS0xITkNRVUZSTWtjc1IwRkJXVHRCUVVGQkxHZENRVU5vUWl4TFFVRkxPMEZCUVVFc1owSkJRMHdzUzBGQlN6dEJRVUZCTEdkQ1FVTk1MRXRCUVVzN1FVRkJRU3huUWtGRFRDeExRVUZMTzBGQlJVUXNkMEpCUVUxRExFbEJRVmNzVFVGQlRTeExRVUZMTEdsQ1FVRnBRalZITEVOQlFWRTdRVUZEY2tRc2VVSkJRVTkxUWl4RlFVRk5MRTFCUVUwc1ZVRkJWU3hMUVVGTExIRkNRVUZ4UWl3MlFrRkJORUlzUTBGQlJTeEZRVUZGTEdkQ1FVRm5RaXhyUWtGQmEwSnZSaXhWUVVGeFFpeERRVUZEUlN4TlFVRnZRanRCUVVNdlNpeDNRa0ZCU1R0QlFVVkJMREJDUVVSQk0xQXNSVUZCU3l4aFFVRmhhMUFzUlVGQmIwSXNNRUpCUVRCQ1R5eERRVUZaTEVkQlEzaEZRU3hOUVVGcFFqdEJRVU5xUWl3clFrRkJUME1zUlVGQlV6dEJRVVZtTERCQ1FVRkpSQ3hOUVVGcFFqdEJRVU4wUWl3clFrRkJUME1zUlVGQlV6dEJRVVZtTERCQ1FVRkpSQ3hOUVVGcFFqdEJRVU4wUWl3clFrRkJUME1zUlVGQlV6dEJRVVZtTERCQ1FVRkpSQ3hOUVVGcFFqdEJRVU4wUWl3clFrRkJUME1zUlVGQlV6dEJRVVZtTERCQ1FVRkpSQ3hOUVVGcFFqdEJRVU4wUWl3clFrRkJUME1zUlVGQlV6dEJRVVZtTERCQ1FVRkpSQ3hOUVVGcFFqdEJRVU4wUWl3clFrRkJUME1zUlVGQlV6dEJRVVZtTERCQ1FVRkpSQ3hOUVVGcFFqdEJRVU4wUWl3clFrRkJUME1zUlVGQlV6dEJRVWRvUWl3MFFrRkJUU3hKUVVGSkxFMUJRVTBzWjBOQlFXZERPMEZCUVVFc2IwSkJSWFpFTEZWQlEwODdRVUZEU2l4elFrRkJRVU1zUlVGQlowSXNTVUZCUnp0QlFVRkJMRzlDUVVOMFFqdEJRVUZCTEd0Q1FVTjZReXhEUVVGeFF6dEJRVUZCTEdOQlExSTdRVUZCUVN4WlFVTktMRlZCUTA4N1FVRkRTaXh2UWtGQlRTeExRVUZMTEd0Q1FVRnJRamRITEVOQlFWRTdRVUZCUVN4WlFVTjRRenRCUVVGQkxGVkJSVklzVlVGRFR6dEJRVU5LTEZsQlFVRTVTU3hGUVVGTExFbEJRVWM3UVVGQlFTeFZRVU5ZTzBGQlFVRXNVVUZEU2l4RFFVRkJMRU5CUVVNN1FVRkJRU3hOUVVOa0xFZEJRMUVzUzBGQlN5eHpRa0ZCYzBJc1EwRkJRM2RRTEVkQlFXRnVXaXhIUVVGTk9GTXNSMEZCYVVKS0xFMUJRV3RDTzBGQlF6bEZMRmxCUVVrc1EwRkJRM2xITzBGQlEwUXNaMEpCUVUwc1NVRkJTU3hOUVVGTkxEUkNRVUUwUWp0QlFVVm9SQ3hsUVVGUExFdEJRVXNzYVVKQlFXbENRU3hIUVVGaExIVkNRVUYxUWl4RFFVRkRlRkFzVFVGQlUzVktMRVZCUVZFc1ZVRkJWU3hOUVVGTkxGRkJRVkVzVVVGQlVTeGhRVUZoTzBGQlF6VklMR05CUVVrN1FVRkRRU3hyUWtGQlRWUXNTVUZCVnl4TlFVRk5MRXRCUVVzc2RVSkJRWFZDTUVjc1IwRkJZWGhRTEVOQlFVazdRVUZEY0VVc1owSkJRVWx0U2p0QlFVTkJMSEZDUVVGQmJrb3NSVUZCU3l4VFFVRlRhMUFzUlVGQmIwSXNPRUpCUVRoQ0xFZEJRM3BFTEUxQlFVMHZSaXhGUVVGblFpeHZRa0ZCYjBKTUxFZEJRVlZETEVOQlFXRTdRVUZIZUVVc1owSkJRVWs3UVVGRlFTeHJRa0ZFUVN4TlFVRk5MRXRCUVVzc2MwSkJRWE5DUkN4SFFVRlZReXhIUVVGbEwwa3NRMEZCU1N4SFFVTXhSQ3hMUVVGTExITkNRVUZ6UWpoSkxFTkJRVkU3UVVGRGJrTTdRVUZEU2l4dlFrRkJUVFJITEVsQlFWY3NUVUZCVFN4TFFVRkxMR2xDUVVGcFFqVkhMRU5CUVZFN1FVRkRja1FzY1VKQlFVOTFRaXhGUVVGTkxFMUJRVTBzVlVGQlZTeExRVUZMTEhGQ1FVRnhRaXcyUWtGQk5FSXNRMEZCUlN4RlFVRkZMR2RDUVVGblFpd3JRa0ZCSzBJc1EwRkJRM05HTEUxQlFXOUNPMEZCUTNaS0xHOUNRVUZKTzBGQlEwRXNkMEpCUVUxeVppeEpRVUZUYjJZc1JVRkJVeXcwUWtGQk5FSnlXaXhEUVVGSk8wRkJRM2hFTEhsQ1FVRkJNa29zUlVGQlN5eGhRVUZoYTFBc1JVRkJiMElzTUVKQlFUQkNMRlZCUVZVc1IwRkRia1UxWlR0QlFVRkJMR2RDUVVOV0xGVkJRMDg3UVVGRFNpeHJRa0ZCUVhGbUxFVkJRV2RDTEVsQlFVYzdRVUZCUVN4blFrRkRkRUk3UVVGQlFTeGpRVU5xUXl4RFFVRTJRanRCUVVGQkxGbEJRMG9zVlVGRFR6dEJRVU5LTEc5Q1FVRk5MRXRCUVVzc2EwSkJRV3RDTjBjc1EwRkJVVHRCUVVGQkxGbEJRM2hETzBGQlFVRXNWVUZGVWl4VlFVTlBPMEZCUTBvc1dVRkJRVGxKTEVWQlFVc3NTVUZCUnp0QlFVRkJMRlZCUTFnN1FVRkJRU3hSUVVOS0xFTkJRVUVzUTBGQlF6dEJRVUZCTEUxQlEyUXNSMEZEVVN4TFFVRkxMRzFDUVVGdFFpeERRVUZEZDFBc1IwRkJZVWtzUjBGQldXcGhMRTFCUVdFN1FVRkRNMFFzV1VGQlNYbENPMEZCUTBvc1kwRkJUWFZTTEVsQlFXTXNiMEpCUVc5Q2RsSXNTVUZCUzI5WkxFVkJRVmtzYVVKQlFXbENMRkZCUVZGd1dTeE5RVUZQTEZOQlFWTkJMRWxCUVVzc1JVRkJSU3hIUVVOdVIzbFpMRWxCUVhGQ2JFZ3NSVUZCV1N4UlFVRlJMR2xDUVVGcFFpeEZRVUZGTzBGQlEyeEZMR1ZCUVU4d1FpeEZRVUZOTEUxQlFVMHNWVUZCVlN4TFFVRkxMSEZDUVVGeFFpdzRRa0ZCT0VJc1JVRkJSU3huUWtGQlowSXNSMEZCUjNWR0xFOUJRV2RDUXl4TFFVRnpRaXhEUVVGRE4xQXNUVUZCVTNWS0xFVkJRVkVzVlVGQlZTeE5RVUZOTEZGQlFWRXNVVUZCVVN4aFFVRmhPMEZCUXpOTkxHTkJRVWs3UVVGRFFTeHRRa0ZCUVhaS0xFVkJRVXNzWVVGQllTeHhRa0ZCY1VJeVNTeERRVUZYTEVkQlF6TkRMRTFCUVUxb1ZDeEZRVUZUY1Vzc1EwRkJTVHRCUVVGQkxGVkJRemRDTEZWQlEwODdRVUZEU2l4WlFVRkJRU3hGUVVGTExFbEJRVWM3UVVGQlFTeFZRVU5ZTzBGQlFVRXNVVUZEU2l4RFFVRkJMRU5CUVVNN1FVRkJRU3hOUVVOa0xFZEJRMUVzUzBGQlN5eFpRVUZaTEVOQlFVTjNVQ3hIUVVGaGJsb3NSMEZCVFRoVExFZEJRV2xDU2l4TlFVRnJRanRCUVVOd1JTeFpRVUZKTEVOQlFVTjVSenRCUVVORUxHZENRVUZOTEVsQlFVa3NUVUZCVFN3MFFrRkJORUk3UVVGRmFFUXNaVUZCVHl4TFFVRkxMR2xDUVVGcFFrRXNSMEZCWVN4aFFVRmhMRU5CUVVONFVDeE5RVUZUZFVvc1JVRkJVU3hWUVVGVkxFMUJRVTBzVVVGQlVTeFJRVUZSTEdGQlFXRTdRVUZEYkVnc1kwRkJTVHRCUVVOQkxHdENRVUZOVkN4SlFVRlhMRTFCUVUwc1MwRkJTeXgxUWtGQmRVSXdSeXhIUVVGaGVGQXNRMEZCU1R0QlFVTndSU3huUWtGQlNXMUtPMEZCUTBFc2NVSkJRVUZ1U2l4RlFVRkxMRk5CUVZOclVDeEZRVUZ2UWl3NFFrRkJPRUlzUjBGRGVrUXNUVUZCVFM5R0xFVkJRV2RDTEc5Q1FVRnZRa3dzUjBGQlZVTXNRMEZCWVR0QlFVZDRSU3huUWtGQlNUdEJRVVZCTEd0Q1FVUkJMRTFCUVUwc1MwRkJTeXh6UWtGQmMwSkVMRWRCUVZWRExFZEJRV1V2U1N4RFFVRkpMRWRCUXpGRUxFdEJRVXNzYzBKQlFYTkNPRWtzUTBGQlVUdEJRVU51UXp0QlFVTktMRzlDUVVGTk5FY3NTVUZCVnl4TlFVRk5MRXRCUVVzc2FVSkJRV2xDTlVjc1EwRkJVVHRCUVVOeVJDeHhRa0ZCVDNWQ0xFVkJRVTBzVFVGQlRTeFZRVUZWTEV0QlFVc3NjVUpCUVhGQ0xEWkNRVUUwUWl4RFFVRkZMRVZCUVVVc1owSkJRV2RDTEd0Q1FVRnJRaXhEUVVGRGMwWXNUVUZCYjBJN1FVRkRNVWtzYjBKQlFVazdRVUZEUVN4NVFrRkJRVE5RTEVWQlFVc3NZVUZCWVd0UUxFVkJRVzlDTERCQ1FVRXdRaXhSUVVGUkxFZEJRM3BFVVN4RlFVRlRMR1ZCUVdWeVdpeERRVUZKTzBGQlFVRXNaMEpCUlRsRExGVkJRMDg3UVVGRFNpeHJRa0ZCUVhOYUxFVkJRV2RDTEVsQlFVYzdRVUZCUVN4blFrRkRkRUk3UVVGQlFTeGpRVU5xUXl4RFFVRTJRanRCUVVGQkxGbEJRMG9zVlVGRFR6dEJRVU5LTEc5Q1FVRk5MRXRCUVVzc2EwSkJRV3RDTjBjc1EwRkJVVHRCUVVGQkxGbEJRM2hETzBGQlFVRXNWVUZGVWl4VlFVTlBPMEZCUTBvc1dVRkJRVGxKTEVWQlFVc3NTVUZCUnp0QlFVRkJMRlZCUTFnN1FVRkJRU3hSUVVOS0xFTkJRVUVzUTBGQlF6dEJRVUZCTEUxQlEyUXNSMEZEVVN4TFFVRkxMSEZDUVVGeFFpeERRVUZEZDFBc1IwRkJZVU1zUjBGQlkzUkhMRWRCUVdsQ1NpeE5RVUZyUWp0QlFVTnlSaXhaUVVGSkxFTkJRVU41Unp0QlFVTkVMR2RDUVVGTkxFbEJRVWtzVFVGQlRTdzBRa0ZCTkVJN1FVRkZhRVFzWlVGQlR5eExRVUZMTEdsQ1FVRnBRa0VzUjBGQllTeHpRa0ZCYzBJc1EwRkJRM2hRTEUxQlFWTjFTaXhGUVVGUkxGVkJRVlVzVFVGQlRTeFJRVUZSTEZGQlFWRXNZVUZCWVR0QlFVTXpTQ3hqUVVGSk8wRkJRMEVzYTBKQlFVMVVMRWxCUVZjc1RVRkJUU3hMUVVGTExIVkNRVUYxUWpCSExFZEJRV0Y0VUN4RFFVRkpPMEZCUTNCRkxHZENRVUZKYlVvN1FVRkRRU3h4UWtGQlFXNUtMRVZCUVVzc1UwRkJVMnRRTEVWQlFXOUNMRGhDUVVFNFFpeEhRVU42UkN4TlFVRk5MMFlzUlVGQlowSXNiMEpCUVc5Q1RDeEhRVUZWUXl4RFFVRmhPMEZCUjNoRkxHZENRVUZKTzBGQlJVRXNhMEpCUkVFc1RVRkJUU3hMUVVGTExITkNRVUZ6UWtRc1IwRkJWVU1zUjBGQlpTOUpMRU5CUVVrc1IwRkRNVVFzUzBGQlN5eHpRa0ZCYzBJNFNTeERRVUZSTzBGQlEyNURPMEZCUTBvc2MwSkJRVkV5Unl4SFFVRlpPMEZCUVVFc1owSkJRMmhDTEV0QlFVczdRVUZGUkN4NVFrRkJTek5ITEVWQlFWTXNUMEZIVGl4TlFVRk5RU3hGUVVGVExHZENRVVp1UWp0QlFVRkJMR2RDUVVkU0xFdEJRVXM3UVVGQlFTeG5Ra0ZEVEN4TFFVRkxPMEZCUVVFc1owSkJRMHdzUzBGQlN6dEJRVUZCTEdkQ1FVTk1MRXRCUVVzN1FVRkZSQ3gzUWtGQlRUUkhMRWxCUVZjc1RVRkJUU3hMUVVGTExHbENRVUZwUWpWSExFTkJRVkU3UVVGRGNrUXNlVUpCUVVFNVNTeEZRVUZMTEdGQlFXRnJVQ3hGUVVGdlFpd3dRa0ZCTUVKUExFTkJRVmtzUjBGRGNrVndSaXhGUVVGTkxFMUJRVTBzVlVGQlZTeExRVUZMTEhGQ1FVRnhRaXcyUWtGQk5FSXNRMEZCUlN4RlFVRkZMR2RDUVVGblFpeE5RVUZOYjBZc1ZVRkJjVUlzUTBGQlEwVXNUVUZCYjBJN1FVRkRia29zZDBKQlFVazdRVUZEUVN3d1FrRkJTVVlzVFVGQmFVSTdRVUZEYWtJc0swSkJRVTlETEVWQlFWTTdRVUZGWml3d1FrRkJTVVFzVFVGQmFVSTdRVUZEZEVJc0swSkJRVTlETEVWQlFWTTdRVUZGWml3d1FrRkJTVVFzVFVGQmFVSTdRVUZEZEVJc0swSkJRVTlETEVWQlFWTTdRVUZGWml3d1FrRkJTVVFzVFVGQmFVSTdRVUZEZEVJc0swSkJRVTlETEVWQlFWTTdRVUZGWml3d1FrRkJTVVFzVFVGQmFVSTdRVUZEZEVJc0swSkJRVTlETEVWQlFWTTdRVUZGWml3d1FrRkJTVVFzVFVGQmFVSTdRVUZEZEVJc0swSkJRVTlETEVWQlFWTTdRVUZGWml3d1FrRkJTVVFzVFVGQmFVSTdRVUZEZEVJc0swSkJRVTlETEVWQlFWTTdRVUZIYUVJc05FSkJRVTBzU1VGQlNTeE5RVUZOTEdkRFFVRm5RenRCUVVGQkxHOUNRVVYyUkN4VlFVTlBPMEZCUTBvc2MwSkJRVUZETEVWQlFXZENMRWxCUVVjN1FVRkJRU3h2UWtGRGRFSTdRVUZCUVN4clFrRkRla01zUTBGQmNVTTdRVUZCUVN4alFVTlNPMEZCUVVFc1dVRkRTaXhWUVVOUE8wRkJRMG9zYjBKQlFVMHNTMEZCU3l4clFrRkJhMEkzUnl4RFFVRlJPMEZCUVVFc1dVRkRlRU03UVVGQlFTeFZRVVZTTEZWQlEwODdRVUZEU2l4WlFVRkJPVWtzUlVGQlN5eEpRVUZITzBGQlFVRXNWVUZEV0R0QlFVRkJMRkZCUTBvc1EwRkJRU3hEUVVGRE8wRkJRVUVzVFVGRFpDeEhRVU5STEV0QlFVc3NOa0pCUVRaQ0xFTkJRVU4zVUN4SFFVRmhja2NzUjBGQmFVSktMRTFCUVd0Q08wRkJReTlGTEZsQlFVa3NRMEZCUTNsSE8wRkJRMFFzWjBKQlFVMHNTVUZCU1N4TlFVRk5MRFJDUVVFMFFqdEJRVVZvUkN4bFFVRlBMRXRCUVVzc2FVSkJRV2xDUVN4SFFVRmhMRGhDUVVFNFFpeERRVUZEZUZBc1RVRkJVM1ZLTEVWQlFWRXNWVUZCVlN4TlFVRk5MRkZCUVZFc1VVRkJVU3hoUVVGaE8wRkJRMjVKTEdOQlFVazdRVUZEUVN4clFrRkJUVlFzU1VGQlZ5eE5RVUZOTEV0QlFVc3NkVUpCUVhWQ01FY3NSMEZCWVhoUUxFTkJRVWs3UVVGRGNFVXNaMEpCUVVsdFNqdEJRVU5CTEhGQ1FVRkJia29zUlVGQlN5eFRRVUZUYTFBc1JVRkJiMElzT0VKQlFUaENMRWRCUTNwRUxFMUJRVTB2Uml4RlFVRm5RaXh2UWtGQmIwSk1MRWRCUVZWRExFTkJRV0U3UVVGRk5VVXNaMEpCUVVrN1FVRkRRU3h2UWtGQlRTeExRVUZMTEhOQ1FVRnpRa1FzUjBGQlZVTXNSMEZCWlM5SkxFTkJRVWs3UVVGQlFTeFpRVU5xUlN4VlFVTlBPMEZCUTBvc2IwSkJRVTBzUzBGQlN5eHJRa0ZCYTBJNFNTeERRVUZSTzBGQlFVRXNXVUZEZUVNN1FVRkJRU3hWUVVOS0xGVkJRMDg3UVVGRFNpeFpRVUZCT1Vrc1JVRkJTeXhKUVVGSE8wRkJRVUVzVlVGRFdEdEJRVUZCTEZGQlEwb3NRMEZCUVN4RFFVRkRPMEZCUVVFc1RVRkRaQ3hIUVVOUkxFdEJRVXNzY1VKQlFYRkNMRU5CUVVNNFVDeE5RVUYzUWp0QlFVY3ZReXhaUVVaQkxFdEJRVXNzZFVKQlFYVkNNMFVzUlVGQmNVSXNkVU5CUVhWRExFdEJRVXNzWjBKQlFXZENMRWRCUXpkSExFdEJRVXNzYVVOQlFXbERRU3hGUVVGeFFpeHBSRUZCYVVRc1MwRkJTeXd3UWtGQk1FSXNSMEZEZGtrc1EwRkJReXhMUVVGTExEaENRVUU0UWl4RFFVRkRMRXRCUVVzN1FVRkRNVU1zWjBKQlFVMHNTVUZCU1N4TlFVRk5MR2REUVVGblF6dEJRVU53UkN4UlFVRkpNa1VzVFVGRFFUTkZMRVZCUVhGQ0xEWkNRVUUyUWl4WFFVRlhNa1U3UVVGQlFTeE5RVVUzUlN4SFFVTlJMRXRCUVVzc2JVSkJRVzFDTEVOQlFVTm9TQ3hOUVVOa2RVSXNSVUZCVFN4TlFVRk5MRlZCUVZVc1MwRkJTeXh4UWtGQmNVSXNOa0pCUVRoQ0xFTkJRVUVzUlVGQlJTeG5Ra0ZCWjBJc2IwSkJRVzlDTEVOQlFVTnlTeXhOUVVGVGRVb3NSVUZCVVN4VlFVRlZMRTFCUVUwc1VVRkJVU3hSUVVGUkxHRkJRV0U3UVVGRGRFd3NXVUZCU1R0QlFVTkJMR2RDUVVGTmQwY3NTVUZCVlN4TlFVRk5ha2dzUlVGQlV5eGxRVU42UW10SUxFbEJRWE5DTEV0QlFVc3NkVUpCUVhWQ2JFZ3NRMEZCVVR0QlFVTm9SU3hqUVVGSkxFTkJRVU5yU0R0QlFVTkVMR3RDUVVGTkxFbEJRVWtzVFVGQlRTeHZSRUZCYjBRN1FVRkRlRVVzYVVKQlFVOHNTMEZCU3l4cFFrRkJhVUlzYVVKQlFXbENRU3hIUVVGeFFrUXNRMEZCVHp0QlFVRkJMRkZCUXpkRkxGVkJRMDg3UVVGRFNpeFZRVUZCTDFBc1JVRkJTeXhKUVVGSE8wRkJRVUVzVVVGRFdEdEJRVUZCTEUxQlEwb3NRMEZCUVN4RFFVRkRMRWRCUlU0c1MwRkJTeXgzUWtGQmQwSXNRMEZCUXpoSkxFMUJRMjVDUVN4RlFVRlRMRmRCUVZjc1QwRkJUeXhEUVVGRFFTeEZRVUZUTEUxQlIyaEVMRXRCUVVzc2IwSkJRVzlDTEVOQlFVTkJMRTFCUVdGVExFVkJRVkVzVlVGQlZTeE5RVUZOTEZGQlFWRXNVVUZCVVN4aFFVRmhPMEZCUTNoR0xGRkJRVWtzUTBGQlExUXNSVUZCVXl4WlFVRlpRU3hGUVVGVExGTkJReTlDTEUxQlFVMUJMRVZCUVZNN1RVRkZMMElzUTBGQlV5eEhRVU5FTEV0QlFVc3NkMEpCUVhkQ0xFTkJRVU5CTEVkQlFWVkRMRWRCUVdWclNDeE5RVU0xUXpWR0xFVkJRVTBzVFVGQlRTeFZRVUZWTEV0QlFVc3NjVUpCUVhGQ0xEWkNRVUU0UWl4RFFVRkJMRVZCUVVVc1owSkJRV2RDTEhsQ1FVRjVRaXhEUVVGRGNrc3NUVUZCVTNWS0xFVkJRVkVzVlVGQlZTeE5RVUZOTEZGQlFWRXNVVUZCVVN4aFFVRmhPMEZCUXpOTUxGbEJRVWx1VXl4SFFVRkpOa003UVVGRFVpeFpRVUZKTzBGQlEwRXNZMEZCU1RaUExFVkJRVk03UVVGRFZEdEJRVU5LTEZWQlFVRnRTQ3hGUVVGclFpeFZRVUZWTzBGQlFVRXNXVUZEZUVJc1RVRkJUVFZHTEVWQlFVMHNaVUZCWlR0QlFVRkJMRmxCUXpOQ0xGTkJRVk03UVVGQlFTeFZRVU5xUXl4RFFVRnhRanRCUVVORUxHZENRVUZOTmtZc1NVRkJZWEJJTEVWQlFWTXNVVUZEZEVKeFNDeEpRVUZ4UWtRc1JVRkJWenRCUVVOMFF5eGpRVUZKTEVOQlFVTnVTQ3hMUVVGclFpeERRVUZEUVN4RlFVRmpiMGdzUTBGQmEwSXNTMEZCU3l4RlFVRkZSQ3hMUVVGakxFOUJRVTlCTEVsQlFXRXNUMEZCVDI1SUxFVkJRV01zUzBGQlN5eE5RVUZOTEVWQlFVVnRTQ3hMUVVGakxFOUJRVTlCTEVsQlFXRXNUMEZCVDI1SUxFVkJRV01zUzBGQlN5eEpRVUZMTzBGQlEyaE5MRmxCUVVGclNDeEZRVUZyUWl4aFFVRmhaaXhGUVVGdlFpeG5RMEZCWjBNc1JVRkJTenRCUVVONFJpeHJRa0ZCVFdoa0xFbEJRVkVzU1VGQlNXbGFMRVZCUVhGQ0xGTkJRVk1zYTBkQlFXdEhLMFVzUTBGQlZUdEJRVU0xU2l4clFrRkJRVVFzUlVGQmEwSXNaMEpCUVdkQ0wyUXNRMEZCU3l4SFFVTnFRMEU3UVVGQlFUdEJRVVZXTEZWQlFVRXJaQ3hGUVVGclFpeGhRVUZoWml4RlFVRnZRaXhuUTBGQlowTXNSVUZCU1R0QlFVTjJSaXhuUWtGQlRYQm9RaXhMUVVGWGJVMHNTMEZCVFRkRExFbEJRVXN5VWl4RlFVRmpiMGdzUTBGQmEwSXNUMEZCVHl4UlFVRlJMMWtzVFVGQlR5eFRRVUZUUVN4SlFVRk5PRmtzUzBGQll5eFBRVUZQUVN4SlFVRmhMRTFCUVUxdVNDeEZRVUZqTEV0QlFVc3NTVUZCU1N4WlFVRm5RaXhSUVVGUk9VOHNUVUZCVHl4VFFVRlRRU3hKUVVGTmFWY3NTMEZCWXl4UFFVRlBRU3hKUVVGaExFMUJRVTF1U0N4RlFVRmpMRXRCUVVzc1NVRkJTU3hSUVVOMlVUSkhMRXRCUVZjc1RVRkJUU3hMUVVGTExHbENRVUZwUWpWSExFTkJRVkU3UVVGRGNrUXNZMEZCU1RWWExFbEJRVkZ0V1N4RlFVRk5MRTFCUVUwc1ZVRkJWU3hMUVVGTExIRkNRVUZ4UWl3MlFrRkJPRUlzUTBGQlFTeEZRVUZGTEdkQ1FVRm5RaXhyUWtGQmEwSXNRMEZCUTNOR0xFMUJRVzlDTzBGQlF5OUpMR2RDUVVGSk8wRkJRMEVzY1VKQlFVOUVMRWRCUVZNc1pVRkJaVFZvUWl4RFFVRlBPMEZCUVVFc1dVRkRla01zVlVGRFR6dEJRVU5LTEdOQlFVRTJhRUlzUlVGQlowSXNTVUZCUnp0QlFVRkJMRmxCUTNSQ08wRkJRVUVzVlVGRGVrSXNRMEZCY1VJN1FVRkRSQ3huUWtGQlFVMHNSVUZCYTBJc1lVRkJZV1lzUlVGQmIwSXNOa0pCUVRaQ0xFTkJRVU1zUTBGQlEyaGtMRU5CUVVzc1IwRkRiRVpCTEUxQlEwUkJMRWxCUVZFc1NVRkJTV2xhTEVWQlFYRkNMRk5CUVZNc01FSkJRVEJDTEU5QlFVOXFXaXhEUVVGTExFbEJRM0JHSzJRc1JVRkJhMElzWjBKQlFXZENMMlFzUTBGQlN5eEhRVU5xUTBFN1FVRkJRU3hSUVVOVUxGVkJRMDg3UVVGRFNpeFZRVUZCT0U0c1JVRkJTeXhKUVVGSE8wRkJRVUVzVVVGRFdEdEJRVUZCTEUxQlEwb3NRMEZCUVN4RFFVRkRMRWRCUlU0c1MwRkJTeXg1UWtGQmVVSXNRMEZCUTNkUUxFZEJRV0ZUTEVkQlFXMUNSeXhOUVVOd1JDOUdMRVZCUVUwc1RVRkJUU3hWUVVGVkxFdEJRVXNzY1VKQlFYRkNMRFpDUVVFNFFpeERRVUZCTEVWQlFVVXNaMEpCUVdkQ0xEQkNRVUV3UWl4RFFVRkRja3NzVFVGQlUzVktMRVZCUVZFc1ZVRkJWU3hOUVVGTkxGRkJRVkVzVVVGQlVTeGhRVUZoTzBGQlF6Vk1MRmxCUVVrN1FVRkRRU3hqUVVGSkxFTkJRVU5wUnp0QlFVTkVMR3RDUVVGTkxFbEJRVWtzVFVGQlRTdzBRa0ZCTkVJN1FVRkZhRVFzWlVGQlN5eG5RMEZCWjBOQkxFTkJRVmM3UVVGRGFFUXNaMEpCUVUxaExFbEJRVzlDTEVOQlFVRTdRVUZETVVJc1ZVRkJTVVFzVFVGRFFVTXNSVUZCYTBJc1UwRkJXVVFzU1VGRmJFTXNUVUZCVFN4TFFVRkxMSFZDUVVGMVFpeHZRa0ZCYjBKYUxFZEJRV0ZoTEVOQlFXbENPMEZCUTNCR0xHZENRVUZOY0Zrc1NVRkJWU3hOUVVGTkxFdEJRVXNzYVVOQlFXbERkVmdzUjBGQllWTXNRMEZCYVVJN1FVRkRNVVlzVlVGQlNTeExRVUZMTEhkQ1FVTk1WQ3hGUVVGWkxHdENRVUZyUWl4RFFVRkRMRXRCUVVzc2IwSkJRVzlDTEVOQlFVTTdRVUZGTjBRc1kwRkJTVEZITEVsQlFWY3NUVUZCVFN4TFFVRkxMRmRCUVZjc1lVRkJZVEJITEVWQlFWa3NTMEZCUzNaWUxFZEJRVk4xV0N4RlFVRlpMR3RDUVVGdFFpeERRVUZCTzBGQlJUTkhMR05CUkVFeFJ5eEpRVUZYTEUxQlFVMHNTMEZCU3l3eVFrRkJNa0l3Unl4SFFVRmhNVWNzUjBGQlZXMUlMRWRCUVcxQ1J5eERRVUZOTEVkQlF6ZEdkRWdzUjBGQlZUdEJRVU5XTEd0Q1FVRk5kMGdzU1VGQmQwSjRTQ3hGUVVGVExGRkJRVkVzU1VGQlNTeG5Ra0ZCWjBJN1FVRkRia1VzV1VGQlNYZElMRXRCUTBGTUxFVkJRV3RDTEdGQlFXRXNaME5CUVdkRExGTkJRVk5MTEVOQlFYRkNMRU5CUVVNN1FVRkZiRWNzYTBKQlFVMU9MRWxCUVhOQ2JFZ3NSVUZCVXl4UlFVRlJMRWxCUVVrc1kwRkJZenRCUVVNdlJDeFpRVUZKYTBnc1MwRkRRVU1zUlVGQmEwSXNZVUZCWVN3NFFrRkJPRUpFTEVOQlFXMUNMRWRCUlhCR1F5eEZRVUZyUWl4aFFVRmhMRzlDUVVGdlFtNUlMRVZCUVZNc1RVRkJUVHRCUVVGQk8wRkJSM1JGTEdsQ1FVRlBRVHRCUVVGQkxGRkJRMVlzVlVGRFR6dEJRVU5LTEZWQlFVRTVTU3hGUVVGTExFbEJRVWM3UVVGQlFTeFJRVU5ZTzBGQlFVRXNUVUZEU2l4RFFVRkJMRU5CUVVNc1IwRkZUaXhMUVVGTExEWkNRVUUyUWl4RFFVRkRkMUFzUjBGQllURkhMRWRCUVZWdFNDeEhRVUZ0UWtjc1RVRkJWemRITEVWQlFWRXNWVUZCVlN4TlFVRk5MRkZCUVZFc1VVRkJVU3hoUVVGaE8wRkJRM3BKTEdWQlFVOWpMRVZCUVUwc1RVRkJUU3hWUVVGVkxFdEJRVXNzY1VKQlFYRkNMRFpDUVVFNFFpeERRVUZCTEVWQlFVVXNaMEpCUVdkQ0xEaENRVUU0UWl4RFFVRkRja3NzVFVGQlUzVktMRVZCUVZFc1ZVRkJWU3hOUVVGTkxGRkJRVkVzVVVGQlVTeGhRVUZoTzBGQlEyaE5MR05CUVVrN1FVRkRRU3hyUWtGQlRXZElMRWxCUVdsQ0xFdEJRVXNzYzBKQlFYTkNla2dzUjBGQlZYTklMRU5CUVUwN1FVRkRiRVVzYlVKQlFVbEhMRXRCUTBGMlVTeEZRVUZMTEZOQlFWTnJVQ3hGUVVGdlFpdzRRa0ZCT0VJc1IwRkRhRVZsTEVWQlFXdENMR0ZCUVdFc2IwSkJRVzlDTEVOQlFVTXNSMEZEY0VRc1RVRkJUU3hMUVVGTExHdENRVUZyUW01SUxFTkJRVkVzUjBGRE9VSXNUVUZCVFN4TFFVRkxMSFZDUVVGMVFqQkhMRWRCUVdGVExFZEJRVzFDVFN4RFFVRmpMRXRCUlhCR2VrZzdRVUZCUVN4VlFVTldMRlZCUTA4N1FVRkRTaXhaUVVGQk9Va3NSVUZCU3l4SlFVRkhPMEZCUVVFc1ZVRkRXRHRCUVVGQkxGRkJRMG9zUTBGQlFTeERRVUZETzBGQlFVRXNUVUZEWkN4RFFVRlRMRWRCUTBRc1MwRkJTeXgzUWtGQmQwSXNRMEZCUXpoSkxFZEJRVlZ6U0N4TlFVRlhPMEZCUXk5RExGbEJRVWwwU0N4RlFVRlRMRmRCUVZjc1QwRkJUeXhEUVVGRGMwZ3NSMEZCVVR0QlFVZHdReXhuUWtGQlRVa3NTVUZCZDBJeFNDeEZRVUZUTEZGQlFWRXNTVUZCU1N4clFrRkJhMEk3UVVGRGNrVXNZMEZCU1RCSUxFdEJRWGxDTEdGQlFXRXNTMEZCUzBFc1EwRkJjVUlzUjBGQlJ6dEJRVU51UlN4clFrRkJUVU1zU1VGQlowSkVMRVZCUVhOQ0xGRkJRVkVzWTBGQll5eEZRVUZGTEVWQlFVVXNUVUZCVFN4SFFVRkhPMEZCUXk5RkxIVkNRVUZYUlN4TFFVRm5Ra1FzUjBGQlpUdEJRVU4wUXl4dlFrRkJUVVVzU1VGQmJVSkVMRVZCUVdFN1FVRkRkRU1zYTBKQlFVa3NiVUpCUVcxQ0xFdEJRVXRETEVOQlFXZENPMEZCUTNoRExIVkNRVUZQUVN4RlFVRnBRaXhSUVVGUkxITkNRVUZ6UWl4SlFVRkpPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzVFVGTmRFWXNSMEZEVVN4TFFVRkxMR3REUVVGclF5eERRVUZEYmtJc1RVRkJaMEk3UVVGRGNFUXNVVUZCUVVFc1JVRkJXU3hsUVVGbExGVkJRV0VzUzBGQlN6dEJRVUZCTEUxQlEzcEVMRWRCUTFFc1MwRkJTeXh0UTBGQmJVTXNRMEZCUTBFc1IwRkJZVk1zVFVGRE0wTTFSaXhGUVVGTkxFMUJRVTBzVlVGQlZTeExRVUZMTEhGQ1FVRnhRaXcyUWtGQk9FSXNRMEZCUVN4RlFVRkZMR2RDUVVGblFpeHZRMEZCYjBNc1EwRkJRM0pMTEUxQlFWTjFTaXhGUVVGUkxGVkJRVlVzVFVGQlRTeFJRVUZSTEZGQlFWRXNZVUZCWVR0QlFVTjBUU3haUVVGSmJsTTdRVUZEU2l4WlFVRkpPMEZCUTBFc1owSkJRVTAwVml4TFFVRlZOVllzU1VGQlMyOVpMRVZCUVZrc1owSkJRV2RDTEZGQlFWRndXU3hOUVVGUExGTkJRVk1zVTBGQlUwRXNSVUZCUnl4VFFVRlJMRWRCUTNaR2Qxb3NTVUZCVFhCQ0xFVkJRVms3UVVGRGVFSXNWVUZCUVZNc1JVRkJhMElzWVVGQllTeGxRVUZsYWtRc1MwRkJaMFFzUlVGQlJUdEJRVU5vUnl4blFrRkJUVFpFTEVsQlFXOUNSQ3hGUVVGSkxGRkJRVkVzUzBGQlN5eEpRVUZKTEVsQlEzcERSU3hKUVVGcFFrWXNSVUZCU1N4TlFVRk5MRXRCUVVzN1FVRkRkRU1zVlVGQlNVTXNTMEZEUVZvc1JVRkJhMElzWVVGQllTeGxRVUZsWVN4RlFVRmxMRU5CUVVNc1EwRkJRenRCUVVWdVJTeG5Ra0ZCVFVNc1NVRkJiVUpHTEVsQlFXOUNReXhGUVVGbExFTkJRVU1zU1VGQlNVWTdRVUZEYWtVc1ZVRkJRVmdzUlVGQmEwSXNZVUZCWVN4aFFVRmhZeXhGUVVGcFFpeE5RVUZOTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkRkRVVzUzBGQlN5eHhRa0ZCY1VJc2VVSkJRekZDWkN4RlFVRnJRaXhoUVVGaExGbEJRVmtzYlVKQlFXMUNWeXhEUVVGSExFTkJRVU03UVVGRmRFVXNaMEpCUVUxSkxFdEJRWFZDZUVJc1JVRkJXU3hSUVVGUkxHZENRVUZuUWp0QlFVTnFSU3hWUVVGSmQwSXNUVUZEUVdZc1JVRkJhMElzWVVGQllTd3JRa0ZCSzBJc1UwRkJVMlVzUjBGQmNVSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZia2NzWjBKQlFVMURMRWxCUVhGQ2VrSXNSVUZCV1N4UlFVRlJMR05CUVdNN1FVRkROMFFzVlVGQlNYbENMRXRCUTBGb1FpeEZRVUZyUWl4aFFVRmhMRFpDUVVFMlFtZENMRU5CUVd0Q08wRkJSV3hHTEdkQ1FVRk5ReXhKUVVGVk1VSXNSVUZCV1N4VlFVRlZMRTlCUVU4c1VVRkJVVUVzUlVGQldTeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVOd1owSXNTVUZCUzI5Q0xFVkJRVXNzVFVGQlRTeERRVUZEY0VJc1IwRkJTU3hyUWtGQmJVSXNSMEZCUlN4TFFVRkxMR2RDUVVGblFtOUNMRVZCUVVzc1EwRkJReXhEUVVGRExFbEJRVWs3UVVGTk1Vb3NhVUpCVEdkQ08wRkJRVUVzV1VGRFdpeFJRVUZCZDJNN1FVRkJRU3haUVVOQkxGTkJRVUZyUlR0QlFVRkJMRmxCUTBFc1RVRkJUVEZDTEVWQlFWazdRVUZCUVN4VlFVTXhRenRCUVVGQkxGRkJSV2xDTEZWQlEwODdRVUZEU2l4VlFVRkJlRkFzUlVGQlN5eEpRVUZITzBGQlFVRXNVVUZEV0R0QlFVRkJMRTFCUTBvc1EwRkJRU3hEUVVGRExFZEJSVTRzUzBGQlN5eHJRa0ZCYTBJc1EwRkJRM2hRTEUxQlEyaENRU3hGUVVGTkxGTkJRVk1zU1VGRFVpeExRVVZHUVN4RlFVRk5MRmRCUVZjc1NVRkRaa0VzUlVGQlRTeERRVUZETEVsQlIxQkJMRVZCUVUwc1QwRkJUeXhEUVVGRE1tZENMRWRCUVV0RExFMUJRVkZFTEVsQlFVMURMRWRCUVVzc1IwRkJSeXhIUVUxNFJDeExRVUZMTERoQ1FVRTRRaXhEUVVGRE5VSXNUVUZCWjBKcVJ5eEZRVUZSTEZWQlFWVXNUVUZCVFN4UlFVRlJMRkZCUVZFc1lVRkJZVHRCUVVOeVJ5eFpRVUZKTEVOQlFVTnBSenRCUVVORUxHZENRVUZOTEVsQlFVa3NUVUZCVFN3MFFrRkJORUk3UVVGRmFFUXNjVUpCUVUwc1MwRkJTeXgxUWtGQmRVSXNiMEpCUVc5Q1FTeEhRVUZoTEUxQlFWTXNSMEZEY2tVc1MwRkJTeXhwUWtGQmFVSkJMRWRCUVdFc0swSkJRU3RDTEVOQlFVTjRVQ3hOUVVGVGRVb3NSVUZCVVN4VlFVRlZMRTFCUVUwc1VVRkJVU3hSUVVGUkxHRkJRV0U3UVVGRmNFa3NhVUpCUkdkQ0xFMUJRVTBzUzBGQlN5eHBRMEZCYVVOcFJ5eEhRVUZoZUZBc1EwRkJTVHRCUVVGQkxGRkJSV2hHTEVOQlFVRXNRMEZCUXp0QlFVRkJMRTFCUTJRc1EwRkJVeXhIUVVOSExFTkJRVU50VUR0QlFVTkVMR05CUVUwc1NVRkJTU3hOUVVGTkxIZERRVUYzUXp0QlFVVTFSQ3hWUVVGSkxFTkJRVU5ETzBGQlEwUXNZMEZCVFN4SlFVRkpMRTFCUVUwc2JVTkJRVzFETzBGQlJYWkVMRlZCUVVrc1EwRkJRME03UVVGRFJDeGpRVUZOTEVsQlFVa3NUVUZCVFN3MlEwRkJOa003UVVGRmFrVXNWVUZCU1N4RFFVRkRXRHRCUVVORUxHTkJRVTBzU1VGQlNTeE5RVUZOTERSQ1FVRTBRanRCUVVWb1JDeFZRVUZMTVVVN1FVRkpSQ3hoUVVGTExIVkNRVUYxUWl4SlFVRkpUU3hGUVVGMVFpeDVRa0ZCZVVKT0xFTkJRVzlDTzBGQlFVRTdRVUZJY0Vjc1kwRkJUU3hKUVVGSkxFMUJRVTBzYzBOQlFYTkRPMEZCUVVFc1NVRkxOMFE3UVVGQlFTeEZRVU5LTzBGQlF6QkNMRk5CUVVGblJpeEhRVUZCTEhOQ1FVRkhSU3hIUVVNNVFrRXNSVUZCYjBJc01rSkJRVEpDTEhGRFFVTXZRMEVzUlVGQmIwSXNhVU5CUVdsRExHZEVRVU55UkVFc1JVRkJiMElzYVVOQlFXbERMREpEUVVOeVJFRXNSVUZCYjBJc09FSkJRVGhDTEhkRFFVTnNSRUVzUlVGQmIwSXNhVU5CUVdsRE96czdPM2RDUXpOblFuSkVMRTlCUVU4c1pVRkJaVW9zU1VGQlV5eGpRVUZqTEVWQlFVVXNUMEZCVHl4SFFVRkpMRU5CUVVVN096czdkMEpEVFRWRUxFOUJRVThzWlVGQlpYVkRMRWxCUVZNc1kwRkJZeXhGUVVGRkxFOUJRVThzUjBGQlNTeERRVUZGTEVkQlF6VkVRU3hIUVVGQkxHbENRVUY1UWtFc1IwRkJRU3h0UWtGQk1rSXNVVUZKY0VSQkxFZEJRVUVzYlVKQlFUSkNPMEZCUVVFc1NVRkRka0lzUzBGQlN5eERRVUZETEV0QlFVc3NTMEZCU3l4TFFVRkxMRXRCUVVzc1IwRkJSenRCUVVGQkxFbEJRemRDTEUxQlFVMHNRMEZCUXl4TFFVRkxMRXRCUVVzc1MwRkJTeXhMUVVGTExFdEJRVXNzUjBGQlJ6dEJRVUZCTEVsQlEyNURMRXRCUVVzc1EwRkJReXhMUVVGTExFdEJRVXNzUzBGQlN5eExRVUZMTEV0QlFVc3NSMEZCUnp0QlFVRkJMRWxCUTJ4RExFOUJRVThzUTBGQlF5eExRVUZMTEV0QlFVc3NTMEZCU3l4TFFVRkxMRWRCUVVjN1FVRkJRU3hKUVVNdlFpeFJRVUZSTEVOQlFVTXNTMEZCU3l4TFFVRkxMRXRCUVVzc1MwRkJTeXhMUVVGTExFZEJRVWM3UVVGQlFTeEZRVU42UXl4SFFVbEJRU3hIUVVGQkxHbENRVUY1UWp0QlFVRkJMRWxCUTNKQ0xFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFTeEpRVU5NTEV0QlFVczdRVUZCUVN4SlFVTk1MRXRCUVVzN1FVRkJRU3hKUVVOTUxFdEJRVXM3UVVGQlFUczdPenM3UVVNMVJWUXNWMEZCVHl4bFFVRmpiR3BDTEVkQlFWVXNZMEZCWXl4RlFVRkZMRTlCUVU4c1IwRkJTU3hEUVVGRkxFZEJRelZFUVN4RlFVRjNRaXhuUWtGQlFTeFJRVk4yUWl4VFFVRlZiV3BDTEVkQlFXVTdRVUZEZEVJc1RVRkJRVUVzUlVGQlkwRXNSVUZCWXl4VFFVRlpMRU5CUVVNc1NVRkJTU3hWUVVNM1EwRXNSVUZCWTBFc1JVRkJZeXhUUVVGWkxFTkJRVU1zU1VGQlNUdEJRVUZCTEUxQlF6bENibXBDTEVWQlFWRXNhMEpCUVd0Q1FTeEZRVUZCTEdkQ1FVRjNRaXhEUVVGQkxFVkJRVWM3UVVGQlFUczdPenM3TzFWRFluaEZMRTlCUVU4c1pVRkJaVzlxUWl4SlFVRlRMR05CUVdNc1JVRkJSU3hQUVVGUExFZEJRVWtzUTBGQlJTeEhRVU40UTBFc1IwRkJRU3hsUVVGSE8wRkJRM1pDTEZGQlFVMXNTQ3hKUVVGUllpeEpRVU5TWXl4SlFVRjVRa01zVFVGRGVrSnBTQ3hKUVVGeFFpOUhMRTFCUTNKQ1owZ3NTVUZCYTBKeVJ6dEJRVTk0UWl4UlFVRk5jMGNzUlVGQllUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzU1VGUlppeFpRVUZaTVdNc1IwRkJVekpqTEVkQlFWYzdRVUZOTlVJc1YwRkJTeXhWUVVGVk8wRkJRVUVzVVVGRFdDeGxRVUZsUml4RlFVRm5RaXhqUVVGak8wRkJRVUVzVVVGRE4wTXNaVUZCWlR0QlFVRkJMRkZCUTJZc2FVSkJRV2xDTzBGQlFVRXNUVUZETjBJN1FVRkRVU3haUVVGTlJ5eEpRVUZsTEU5QlFVOHNUMEZCVHl4TFFVRkxMRk5CUVZNMVl5eERRVUZQTzBGQlEzaEVMRlZCUVVrMFl5eEZRVUZoTEd0Q1FVRnJRaXhQUVVGUFFTeEZRVUZoTEd0Q1FVRnJRanRCUVVOeVJTeGpRVUZOTEVsQlFVa3NUVUZCVFN3MFJFRkJORVE3UVVGRmFFWXNWMEZCU3l4VlFVRlZRU3hIUVVObUxFdEJRVXNzV1VGQldVUXNTMEZCZVVRc2IwSkJRVWs3U1VGRGFrWTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEpRVTlFTEhsQ1FVRjVRa1VzUjBGQlpUdEJRVU53UXl4WlFVRk5ReXhKUVVGclFrNHNSVUZCYlVJc2FVSkJRV2xDU3l4RFFVRmhPMEZCUTNwRkxHRkJRVTlETEVWQlFXZENMRXRCUVVzc1RVRkJUU3hMUVVGTExGZEJRVmRCTEVWQlFXZENMRTFCUVUwc1EwRkJRenRCUVVGQkxFbEJRelZGTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEpRVkZFTEdWQlFXVkRMRWRCUVhGQ1F5eEhRVUZYTzBGQlF6TkRMRmxCUVUxRExFbEJRVlZHTEVWQlFXOUNPMEZCUTNCRExHRkJRVWxGTEUxQlFWa3NVMEZEVEVRc1NVRkZTa0VzUlVGQlZTeFJRVUZSUXl4SFFVRlRMRVZCUVVVc1JVRkJSU3hMUVVGSk8wRkJRVUVzU1VGRE4wTTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVsQlVVUXNZMEZCWTBZc1IwRkJjVUpITEVkQlFWbE1MRWRCUVdVN1FVRkRNVVFzVlVGQlNVVXNSVUZCYjBJc2EwSkJRV3RDVGl4RlFVRm5RaXhqUVVGakxGRkJRVkU3UVVGRE5VVXNXVUZCU1Uwc1JVRkJiMElzWlVGQlpUdEJRVU51UXl4cFFrRkJUMEVzUlVGQmIwSTdRVUZGTVVJN1FVRkZSQ3huUWtGQlRVa3NTVUZCWXl4TFFVRkxMR1ZCUVdWS0xFZEJRWEZDUnl4RFFVRlZMRWRCUTJwRlJTeEpRVUZ0UWl4TFFVRkxMRlZCUVZVc1NVRkJTVVFzUTBGQlZ6dEJRVU4yUkN4alFVRkpReXhOUVVGeFFpeFJRVUZYTzBGQlJXaERMR3RDUVVGTlF5eEpRVUZWUkN4RlFVRnBRaXhKUVVGSlVDeERRVUZoTzBGQlEyeEVMR2RDUVVGSlVTeE5RVUZaTzBGQlExb3NjVUpCUVU5Qk8wRkJRVUU3UVVGTldDeHBRa0ZCU3l4VlFVRlZMRkZCUVZFc1EwRkJRemRvUWl4SFFVRlBjRUlzVFVGQlVUdEJRVU51UXl4clFrRkJTV2RKTzBGQlJVb3NhMEpCUkdsQ0xFbEJRVWtzVDBGQlQyaEpMRWxCUVUwc1IwRkJSeXhGUVVONFFpeExRVUZMSzJsQ0xFTkJRVmNzUjBGQlJ6dEJRVU0xUWl4elFrRkJUVWNzUzBGQlowSnNZaXhKUVVGTExFdEJRVXNzVlVGQlZTeEpRVUZKYUVrc1EwRkJSeXhQUVVGUExGRkJRVkZuU1N4TlFVRlBMRk5CUVZNc1UwRkJVMEVzUlVGQlJ5eEpRVUZKZVdFc1EwRkJZVHRCUVVNM1J5eHZRa0ZCU1ZNc1RVRkJhVUk3UVVGRGFrSXNlVUpCUVU5Qk8wRkJRVUU3UVVGQlFTeFpRVWQyUXl4RFFVRnhRanRCUVVGQk8wRkJRVUU3UVVGTFlpeGhRVUZQTEV0QlFVc3NlVUpCUVhsQ1ZDeERRVUZoTzBGQlFVRXNTVUZEY2tRN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1NVRlRSQ3h0UWtGQmJVSkZMRWRCUVhGQ04wSXNSMEZCV1R0QlFVTm9SQ3hWUVVGSk5rSXNSVUZCYjBJN1FVRkRjRUlzWlVGQlQwRXNSVUZCYjBJN1FVRkZMMElzVlVGQlNYWm5RanRCUVVOS0xGVkJRVWt3WlN4TFFVRmpMRXRCUVVzN1FVRkRia0lzWTBGQlRYRkRMRWxCUVdObUxFVkJRVzFDTEdWQlFXVjBRaXhEUVVGVkxFZEJRekZFYzBNc1NVRkJZVlFzUlVGQmIwSTdRVUZEZGtNc1VVRkJRWFpuUWl4SlFVRlBPMEZCUVVFc1ZVRkRTQ3hQUVVGUE8wRkJRVUVzV1VGRFNDeE5RVUZOSzJkQ08wRkJRVUVzV1VGRFRpeFRRVUZUUXp0QlFVRkJMRlZCUTFvN1FVRkJRU3hSUVVOcVFqdEJRVUZCTzBGQlIxa3NVVUZCUVdob1FpeEpRVUZQTEVOQlFVRTdRVUZGV0N4aFFVRlBRVHRCUVVGQkxFbEJRMVk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hKUVU5RUxHOUNRVUZ2UWpKR0xFZEJRVXMwVlN4SFFVRnJRanRCUVVOMlF5eFZRVUZKTTFVN1FVRkRTaXhWUVVGSk1sVXNSVUZCYVVJc1YwRkJWenRCUVVNMVFpeGpRVUZOTEVsQlFVa3NUVUZCVFN4cFEwRkJhVU03UVVGRmNrUXNXVUZCVFRoR0xFbEJRV2RDT1VZc1JVRkJhVUlzVVVGRGFrTnRSU3hKUVVGaExFdEJRVXNzWTBGQll5eExRVUZMTEZOQlFWTXZXU3hIUVVGTE1HRXNRMEZCWVN4SFFVTm9SVmtzU1VGQlpTeExRVUZMTEcxQ1FVRnRRaXhMUVVGTExGTkJRVk4yUXl4RFFVRlZMRWRCUXk5RWQwTXNTVUZCWVN4UFFVRlBSQ3hMUVVGcFFpeFhRVUZYUVN4SlFVRmxMRXRCUVVzc1ZVRkJWVUVzUTBGQldUdEJRVU5vUnl4aFFVRlBPMEZCUVVFc1VVRkRTQ3hMUVVGQmRHSTdRVUZCUVN4UlFVTkJMRTFCUVUxMVlqdEJRVUZCTEZGQlEwNHNVVUZCVVhoRE8wRkJRVUVzVVVGRFVpeFpRVUZaTEV0QlFVc3NVVUZCVVR0QlFVRkJMRkZCUTNwQ0xGVkJRVlU1V1N4SlFVRkxMRXRCUVVzc1VVRkJVU3hoUVVGaExGRkJRVkZCTEUxQlFVOHNVMEZCVTBFc1NVRkJTeXhEUVVGRk8wRkJRVUVzVFVGRGNFWTdRVUZCUVN4SlFVTkxPMEZCUVVFc1NVRkRSQ3hSUVVGUlJDeEhRVUZMZDFNc1IwRkJZVWtzUjBGQlowSTdRVUZEZEVNc1dVRkJUV0VzVVVGQmFVSk9MRVZCUVhWQ0xHOURRVUZ2UTFBc1EwRkJZenRCUVVOb1J5eGhRVUZKWVN4SlFVTlBVQ3hGUVVGTkxFMUJRVTBzVlVGQlZVOHNSVUZCVnl3MlFrRkJPRUlzUTBGQlFTeEZRVUZGTEdkQ1FVRm5RaXd3UWtGQk1FSXNRMEZCUXpWTExFMUJRVk03UVVGRGVFZ3NXVUZCU1R0QlFVTkJMR2xDUVVGQlFTeEZRVUZMTEdGQlFXRXNORU5CUVRSRExFVkJRVWtzUjBGRE0wUXNTMEZCU3l4VFFVRlROMGtzUjBGQlMzZFRMRWRCUVdGSkxFTkJRV003UVVGQlFTeFJRVU40UkN4VlFVTlBPMEZCUTBvc1ZVRkJRUzlLTEVWQlFVc3NTVUZCUnp0QlFVRkJMRkZCUTFnN1FVRkJRU3hOUVVOcVFpeERRVUZoTEVsQlJVVXNTMEZCU3l4VFFVRlROMGtzUjBGQlMzZFRMRWRCUVdGSkxFTkJRV003UVVGQlFTeEpRVU40UkR0QlFVRkJMRWxCUTBRc1UwRkJVelZUTEVkQlFVdDNVeXhIUVVGaFNTeEhRVUZuUWk5S0xFZEJRVTA3UVVGRE4wTXNWVUZCU1N4TFFVRkxMRTFCUVUwc1MwRkJTeXhQUVVGTkxFbEJRVXNzUjBGQlJ5eEpRVUZKTEV0QlFVc3NVVUZCVVR0QlFVTXZReXhsUVVFMFEwRXNSMEZCU3l4VFFVRlRNRklzUlVGQllTdzJRa0ZCTmtJc1IwRkROMFlzVVVGQlVTeFJRVUZSTEV0QlFVc3NiMEpCUVc5Q2RtRXNSMEZCUzNkVExFTkJRVmNzUTBGQlF6dEJRVWRxUlN4VlFVRkpMRU5CUVVNc1MwRkJTenRCUVVOT0xHTkJRVTBzU1VGQlNTeE5RVUZOTEhkRVFVRjNSRHRCUVVVMVJTeGhRVUZQTEV0QlFVc3NTMEZCU3l4UlFVRlJlRk1zUjBGQlMzZFRMRWRCUVdGSkxFTkJRV003UVVGQlFTeEpRVVZvUlR0QlFVRkJMRVZCUTBvN1FVRkRiVUlzVTBGQlFYZElMRWRCUVVFc1pVRkJSMGNzUjBGRGRrSkJMRVZCUVdFc1owTkJRV2RET3pzN08zZENRM2hNTjBNc1QwRkJUeXhsUVVGbFN5eEpRVUZUTEdOQlFXTXNSVUZCUlN4UFFVRlBMRWRCUVVrc1EwRkJSU3hIUVVNNVFrRXNSMEZCUVN4NVFrRkJSeXhSUVVOcVEwRXNSMEZCUVN4NVFrRkJhVU03T3pzN2QwSkRVbXBETEU5QlFVOHNaVUZCWlZrc1NVRkJVeXhqUVVGakxFVkJRVVVzVDBGQlR5eEhRVUZKTEVOQlFVVTdPenM3TzBGRFFUVkVMRmRCUVU4c1pVRkJZM2hyUWl4SFFVRlZMR05CUVdNc1JVRkJSU3hQUVVGUExFZEJRVWtzUTBGQlJTeEhRVU0xUkVFc1JVRkJNa0lzYlVKQlFVRkJMRVZCUVVFc05rSkJRWEZETEZGQlEyaEZRU3hGUVVGQkxEWkNRVUZ4UXp0QlFVTnlReXhWUVVGTmVXdENMRVZCUVdsQ08wRkJRVUVzVFVGRGJrSXNXVUZCV1VRc1IwRkJlVUk3UVVGRGFrTXNZVUZCU3l3d1FrRkJNRUpCTzBGQlFVRXNUVUZEYkVNN1FVRkJRU3hOUVVORUxGRkJRVkY0WWl4SFFVRkxkMU1zUjBGQllVa3NSMEZCWjBJN1FVRlBkRU1zV1VGT1NTeExRVUZMTERKQ1FVRXlRaXhMUVVGTExIZENRVUYzUWl4M1FrRkROMFFzUzBGQlN5eDNRa0ZCZDBJc2MwSkJRWE5DTlZNc1IwRkJTM2RUTEVkQlFXRkpMRWRCUVdkQ0xFdEJRVXNzZDBKQlFYZENMRzFDUVVGdFFpeEpRVVZvU1VFc1MwRkJhMEpCTEVWQlFXVTFZaXhGUVVGUkxEQkNRVUV3UWl4TFFVTjRSVFJpTEVWQlFXVTFZaXhGUVVGUkxEQkNRVUV3UWl4RlFVRkZMSE5DUVVGelFtZEtMRWRCUVV0M1V5eEhRVUZoU1N4RFFVRmpMRWRCUlhwSExFTkJRVU1zUzBGQlN6dEJRVU5PTEdkQ1FVRk5MRWxCUVVrc1RVRkJUU3gzUkVGQmQwUTdRVUZGTlVVc1pVRkJUeXhMUVVGTExFdEJRVXNzVVVGQlVUVlRMRWRCUVV0M1V5eEhRVUZoU1N4RFFVRmpPMEZCUVVFc1RVRkROVVE3UVVGQlFTeEpRVU5LTzBGQlEwUXNTVUZCUVRWaUxFVkJRVUVzYlVKQlFUSkNlV3RDTzBGQlFVRTdPenM3ZDBKRFpETkNMRTlCUVU4c1pVRkJaVU1zU1VGQlV5eGpRVUZqTEVWQlFVVXNUMEZCVHl4SFFVRkpMRU5CUVVVN096dEJRMEUxUkN4VFFVRlBMR1ZCUVdNeGEwSXNSMEZCVlN4alFVRmpMRVZCUVVVc1QwRkJUeXhIUVVGSkxFTkJRVVU3UVVGRE5VUXNVVUZCVFc5aUxFbEJRVlZETzBGQlIyaENMRVZCUVVGRUxFVkJRVkVzWVVGQllXZENMRWRCUVdkRExFZEJRVVZ3WXl4RFFVRlBMRWRCUXpsRWIySXNSVUZCVVN4aFFVRmhhMElzUjBGQmRVSXNSMEZCUlhSakxFTkJRVThzUjBGRGNrUnZZaXhGUVVGUkxHRkJRV0UyUWl4SFFVRnRReXhIUVVGRmFtUXNRMEZCVHl4SFFVTnFSVzlpTEVWQlFWRXNZVUZCWVN0Q0xFZEJRWEZETEVkQlFVVnVaQ3hEUVVGUExFZEJRMjVGYjJJc1JVRkJVU3hoUVVGaGRVUXNSMEZCTWtNc1IwRkJSVE5sTEVOQlFVOHNSMEZEZWtWdllpeEZRVUZSTEdGQlFXRjFTaXhIUVVGelJDeEhRVUZGTTJ0Q0xFTkJRVThzUjBGRGNFWnZZaXhGUVVGUkxHRkJRV0YzU2l4SFFVRjNReXhIUVVGRk5XdENMRU5CUVU4c1IwRkRkRVZ2WWl4RlFVRlJMR0ZCUVdGNVNpeEhRVUZ4UXl4SFFVRkZOMnRDTEVOQlFVOHNSMEZEYmtWdllpeEZRVUZSTEdGQlFXRXdTaXhIUVVGNVF5eEhRVUZGT1d0Q0xFTkJRVThzUjBGRGRrVnZZaXhGUVVGUkxHRkJRV0V5U2l4SFFVRnZSQ3hIUVVGRkwydENMRU5CUVU4c1IwRkRiRVp2WWl4RlFVRlJMR0ZCUVdFMFNpeEhRVUU0UXl4SFFVRkZhR3hDTEVOQlFVOHNSMEZETlVWdllpeEZRVUZSTEdGQlFXRTJTaXhIUVVFNFJDeEhRVUZGYW14Q0xFTkJRVThzUjBGRE5VWnZZaXhGUVVGUkxHRkJRV0U0U2l4SFFVRjFSQ3hIUVVGRmJHeENMRU5CUVU4c1IwRkRja1p2WWl4RlFVRlJMR0ZCUVdFclNpeEhRVUZ2UkN4SFFVRkZibXhDTEVOQlFVOHNSMEZEYkVadllpeEZRVUZSTEdGQlFXRm5TeXhIUVVGM1JDeEhRVUZGY0d4Q0xFTkJRVThzUjBGRGRFWnZZaXhGUVVGUkxHRkJRV0ZwU3l4SFFVRjNSQ3hIUVVGRmNteENMRU5CUVU4c1IwRkRkRVp2WWl4RlFVRlJMR0ZCUVdGclN5eEhRVUY1UXl4SFFVRkZkR3hDTEVOQlFVOHNSMEZEZGtWdllpeEZRVUZSTEdGQlFXRnRTeXhIUVVFd1F5eEhRVUZGZG14Q0xFTkJRVThzUjBGRGVFVnZZaXhGUVVGUkxHRkJRV0Z2U3l4SFFVRTRRaXhIUVVGRmVHeENMRU5CUVU4c1IwRkROVVJ2WWl4RlFVRlJMR0ZCUVdGeFN5eEhRVUZ0UXl4SFFVRkZlbXhDTEVOQlFVODdPMEZEZWtJeFJDeE5RVUZOTUd4Q0xFZEJRVFJETzBGQlFVRTdRVUZCUVN4RlFVVTVRenRCUVVGQk8wRkJRVUVzUlVGRlFUdEJRVU5ZTzBGRFRFOHNUVUZCVFVNc1IwRkJhMFU3UVVGQlFUdEJRVUZCTEVWQlJXNUZPMEZCUVVFN1FVRkJRU3hGUVVWQk8wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0U0xFbEJRVmNzYVVKQlFXbENPMEZCUTNoQ0xGZEJRVThzUzBGQlN6dEJRVUZCTEVWQlEyaENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NaVUZCWlhScVFpeEhRVUZuUXp0QlFVTjBSQ3hUUVVGTExHdENRVUZyUWtFN1FVRkJRU3hGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExGTkJRVk03UVVGRGFFSXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhQUVVGUFFTeEhRVUUyUWp0QlFVTXpReXhUUVVGTExGVkJRVlZCTzBGQlFVRXNSVUZEYmtJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVWxQTEdOQlFXTTdRVUZEYWtJc1UwRkJTeXhyUWtGQmEwSTdSVUZETTBJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNkMEpCUVc5Rk8wRkJRMmhGTEZkQlFVRTdRVUZCUVN4TlFVTklMRkZCUVZVc1EwRkJTM3BDTEUxQlFVRTdRVUZCVHl4aFFVRkJMRk5CUVZOQkxFVkJRVVU3VFVGQk1FTTdRVUZCUVN4TlFVTXpSU3hWUVVGWkxFTkJRVXRCTEUxQlFVRTdRVUZCVHl4aFFVRkJMRmRCUVZkQkxFVkJRVVU3VFVGQk1FTTdRVUZCUVN4SlFVRkJPMEZCUVVFc1JVRkZka1k3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzA4c1ZVRkJWWEZHTEVkQlFXOURPMEZCUTJwRUxGRkJRVWNzUTBGQlEwRTdRVUZCWXl4WlFVRkJMRWxCUVVrc1RVRkJUU3cwUWtGQk5FSTdRVUZEYWtRc1NVRkJRVUVzUlVGQlFTeHBRMEZCZVVNc1ZVRkJWU3hMUVVGTExFMUJRVTBzUjBGRE9VUkJMRVZCUVVFc2FVTkJRWGxETEZsQlFWa3NTMEZCU3l4UlFVRlJMRWRCUTJ4RlFTeEZRVUZCTEc5Q1FVRnZRaXhMUVVGTExHTkJRV003UVVGQlFTeEZRVU5zUkR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFFTeEpRVUZYTEZkQlFWYzdRVUZEYkVJc1YwRkJUeXhMUVVGTE8wRkJRVUVzUlVGRGFFSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eFRRVUZUTlVRc1IwRkJOa0k3UVVGRE4wTXNVMEZCU3l4WlFVRlpRVHRCUVVGQkxFVkJRM0pDTzBGQlEwbzdRVU01UlU4c1RVRkJUWFZxUWl4SFFVRjVSVHRCUVVGQk8wRkJRVUVzUlVGRk1VVTdRVUZCUVR0QlFVRkJMRVZCUlVFN1FVRkJRVHRCUVVGQkxFVkJSVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzFJc1NVRkJWeXhwUWtGQmFVSTdRVUZEZUVJc1YwRkJUeXhMUVVGTE8wRkJRVUVzUlVGRGFFSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eGxRVUZsZG1wQ0xFZEJRV2RETzBGQlEzUkVMRk5CUVVzc2EwSkJRV3RDUVR0QlFVRkJMRVZCUXpOQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZKVHl4alFVRmpPMEZCUTJwQ0xGTkJRVXNzYTBKQlFXdENPMFZCUXpOQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1kwRkJZenRCUVVOeVFpeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRmxCUVZsQkxFZEJRVEpDTzBGQlF6bERMRk5CUVVzc1pVRkJaVUU3UVVGQlFTeEZRVU40UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eDNRa0ZCYjBVN1FVRkRhRVVzVjBGQlFUdEJRVUZCTEUxQlEwZ3NZVUZCWlN4RFFVRkxla0lzVFVGQlFUdEJRVUZQTEdGQlFVRXNZMEZCWTBFc1JVRkJSVHROUVVGclFqdEJRVUZCTEUxQlF6ZEVMRkZCUVZVc1EwRkJTMEVzVFVGQlFUdEJRVUZQTEdGQlFVRXNVMEZCVTBFc1JVRkJSVHROUVVGdFFqdEJRVUZCTEVsQlFVRTdRVUZCUVN4RlFVVTFSRHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRk5CUVZNN1FVRkRhRUlzVjBGQlR5eExRVUZMTzBGQlFVRXNSVUZEYUVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4UFFVRlBlVUlzUjBGQk5FSTdRVUZETVVNc1UwRkJTeXhWUVVGVlFUdEJRVUZCTEVWQlEyNUNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRQTEZWQlFWVTBSQ3hIUVVGdlF6dEJRVU5xUkN4UlFVRkhMRU5CUVVOQk8wRkJRV01zV1VGQlFTeEpRVUZKTEUxQlFVMHNORUpCUVRSQ08wRkJRMnBFTEVsQlFVRkJMRVZCUVVFc2FVSkJRV2xDTEdWQlFXVXNTMEZCU3l4WFFVRlhMRWRCUTJoRVFTeEZRVUZCTEd0Q1FVRnJRaXhWUVVGVkxFdEJRVXNzVFVGQlRTeEhRVU4yUTBFc1JVRkJRU3h2UWtGQmIwSXNTMEZCU3l4alFVRmpPMEZCUVVFc1JVRkRiRVE3UVVGRFNqdEJRek5GVHl4TlFVRk5OR1lzUjBGQmIwVTdRVUZCUVR0QlFVRkJMRVZCUlhKRk8wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVN4RlFVVkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRTTEVsQlFWY3NhVUpCUVdsQ08wRkJRM2hDTEZkQlFVOHNTMEZCU3p0QlFVRkJMRVZCUTJoQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1pVRkJaWGhxUWl4SFFVRm5RenRCUVVOMFJDeFRRVUZMTEd0Q1FVRnJRa0U3UVVGQlFTeEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTVThzWTBGQll6dEJRVU5xUWl4VFFVRkxMR3RDUVVGclFqdEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eDNRa0ZCYjBVN1FVRkRhRVVzVjBGQlFUdEJRVUZCTEUxQlEwZ3NaMEpCUVd0Q0xFTkJRVXQ2UWl4TlFVRkJPMEZCUVU4c1lVRkJRU3hwUWtGQmFVSkJMRVZCUVVVN1RVRkJhMEk3UVVGQlFTeE5RVU51UlN4WlFVRmpMRU5CUVV0QkxFMUJRVUU3UVVGQlR5eGhRVUZCTEdGQlFXRkJMRVZCUVVVN1RVRkJhMEk3UVVGQlFTeEpRVUZCTzBGQlFVRXNSVUZGYmtVN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4cFFrRkJhVUk3UVVGRGVFSXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhsUVVGbGVVSXNSMEZCTWtJN1FVRkRha1FzVTBGQlN5eHJRa0ZCYTBKQk8wRkJRVUVzUlVGRE0wSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eGhRVUZoTzBGQlEzQkNMRmRCUVU4c1MwRkJTenRCUVVGQkxFVkJRMmhDTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0QkxFbEJRVmNzVjBGQlYwRXNSMEZCTWtJN1FVRkROME1zVTBGQlN5eGpRVUZqUVR0QlFVRkJMRVZCUTNaQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdFBMRlZCUVZVMFJDeEhRVUZ2UXp0QlFVTnFSQ3hSUVVGSExFTkJRVU5CTzBGQlFXTXNXVUZCUVN4SlFVRkpMRTFCUVUwc05FSkJRVFJDTzBGQlEycEVMRWxCUVVGQkxFVkJRVUVzYVVKQlFXbENMR3RDUVVGclFpeExRVUZMTEdOQlFXTXNSMEZEZEVSQkxFVkJRVUVzYVVKQlFXbENMR05CUVdNc1MwRkJTeXhWUVVGVkxFZEJRemxEUVN4RlFVRkJMRzlDUVVGdlFpeExRVUZMTEdOQlFXTTdRVUZCUVN4RlFVTnNSRHRCUVVOS08wRkRNVVZQTEZOQlFWTTJaaXhIUVVFNFJFTXNSMEZCYzBVN1FVRkRhRW9zVFVGQlJ5eERRVUZEUVR0QlFVRnBRaXhWUVVGQkxFbEJRVWtzVFVGQlRTd3JRa0ZCSzBJN1FVRkRPVVFzVTBGQlR5eEpRVUZKUXl4SFFVRnJRenRCUVVOcVJEdEJRMFpQTEUxQlFVMURMRWRCUVd0Rk8wRkJRVUU3UVVGQlFTeEZRVVZ1UlR0QlFVRkJPMEZCUVVFc1JVRkZRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMVWl4SlFVRlhMR2xDUVVGcFFqdEJRVU40UWl4WFFVRlBMRXRCUVVzN1FVRkJRU3hGUVVOb1FqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExHVkJRV1UxYWtJc1IwRkJaME03UVVGRGRFUXNVMEZCU3l4clFrRkJhMEpCTzBGQlFVRXNSVUZETTBJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVWxQTEdOQlFXTTdRVUZEYWtJc1UwRkJTeXhyUWtGQmEwSTdSVUZETTBJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNkMEpCUVc5Rk8wRkJRMmhGTEZkQlFVRTdRVUZCUVN4TlFVTklMRTlCUVZNc1EwRkJTM3BDTEUxQlFVRTdRVUZCVHl4aFFVRkJMRkZCUVZGQkxFVkJRVVVzTkVKQlFTdEVhMnhDTEVWQlFUWkVPMEZCUVVFc1RVRkJSenRCUVVGQkxFbEJRVUU3UVVGQlFTeEZRVVYwU3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eFZRVUZWTjJZc1IwRkJiME03UVVGRGFrUXNVVUZCUnl4RFFVRkRRVHRCUVVGakxGbEJRVUVzU1VGQlNTeE5RVUZOTERSQ1FVRTBRanRCUVVOcVJDeEpRVUZCUVN4RlFVRkJMRGhDUVVGcFJTeFRRVUZUTEV0QlFVc3NTMEZCU3l4SFFVTndSa0VzUlVGQlFTeHZRa0ZCYjBJc1MwRkJTeXhqUVVGak8wRkJRVUVzUlVGRGJFUTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eFJRVUZSTzBGQlEyWXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhOUVVGTk5VUXNSMEZCZDBRN1FVRkRja1VzVTBGQlN5eFRRVUZUUVR0QlFVRkJMRVZCUTJ4Q08wRkJRMG83UVVONFJFOHNUVUZCVFRKcVFpeEhRVUUwUlR0QlFVRkJPMEZCUVVFc1JVRkZOMFU3UVVGQlFUdEJRVUZCTEVWQlJVRTdRVUZCUVR0QlFVRkJMRVZCUlVFN1FVRkJRVHRCUVVGQkxFVkJSVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzFJc1NVRkJWeXhwUWtGQmFVSTdRVUZEZUVJc1YwRkJUeXhMUVVGTE8wRkJRVUVzUlVGRGFFSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eGxRVUZsTTJwQ0xFZEJRV2RETzBGQlEzUkVMRk5CUVVzc2EwSkJRV3RDUVR0QlFVRkJMRVZCUXpOQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1YwRkJWenRCUVVOc1FpeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRk5CUVZOQkxFZEJRVFJDTzBGQlF6VkRMRk5CUVVzc1dVRkJXVUU3UVVGQlFTeEZRVU55UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTVThzWTBGQll6dEJRVU5xUWl4VFFVRkxMR3RDUVVGclFqdEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFFTeEpRVUZYTEdOQlFXTTdRVUZEY2tJc1YwRkJUeXhMUVVGTE8wRkJRVUVzUlVGRGFFSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eFpRVUZaUVN4SFFVRXlRanRCUVVNNVF5eFRRVUZMTEdWQlFXVkJPMEZCUVVFc1JVRkRlRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzA4c2QwSkJRVzlGTzBGQlEyaEZMRmRCUVVFN1FVRkJRU3hOUVVOSUxGVkJRVmtzUTBGQlMzcENMRTFCUVVFN1FVRkJUeXhoUVVGQkxGZEJRVmRCTEVWQlFVVTdUVUZCYlVJN1FVRkJRU3hOUVVONFJDeGhRVUZsTEVOQlFVdEJMRTFCUVVFN1FVRkJUeXhoUVVGQkxHTkJRV05CTEVWQlFVVTdUVUZCYTBJN1FVRkJRU3hOUVVNM1JDeEpRVUZOTEVOQlFVdEJMRTFCUVVFN1FVRkJUeXhoUVVGQkxFdEJRVXRCTEVWQlFVVTdUVUZCYTBJN1FVRkJRU3hKUVVGQk8wRkJRVUVzUlVGRmJrUTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eExRVUZMTzBGQlExb3NWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhIUVVGSGVVSXNSMEZCTWtJN1FVRkRja01zVTBGQlN5eE5RVUZOUVR0QlFVRkJMRVZCUTJZN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNWVUZCVlRSRUxFZEJRVzlETzBGQlEycEVMRkZCUVVjc1EwRkJRMEU3UVVGQll5eFpRVUZCTEVsQlFVa3NUVUZCVFN3MFFrRkJORUk3UVVGRGFrUXNTVUZCUVVFc1JVRkJRU3hyUWtGQmEwSXNXVUZCV1N4TFFVRkxMRkZCUVZFc1IwRkRNME5CTEVWQlFVRXNhVUpCUVdsQ0xHVkJRV1VzUzBGQlN5eFhRVUZYTEVkQlEyaEVRU3hGUVVGQkxHbENRVUZwUWl4TlFVRk5MRXRCUVVzc1JVRkJSU3hIUVVNNVFrRXNSVUZCUVN4dlFrRkJiMElzUzBGQlN5eGpRVUZqTzBGQlFVRXNSVUZEYkVRN1FVRkRTanRCUTJoSFR5eE5RVUZOYVdkQ0xFZEJRWEZGTzBGQlFVRTdRVUZCUVN4RlFVVjBSVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMVWl4SlFVRlhMR2xDUVVGcFFqdEJRVU40UWl4WFFVRlBMRXRCUVVzN1FVRkJRU3hGUVVOb1FqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExHVkJRV1UzYWtJc1IwRkJaME03UVVGRGRFUXNVMEZCU3l4clFrRkJhMEpCTzBGQlFVRXNSVUZETTBJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVWxQTEdOQlFXTTdRVUZEYWtJc1UwRkJTeXhyUWtGQmEwSTdSVUZETTBJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNkMEpCUVc5Rk8wRkJRM1pGTEZkQlFVODdSVUZGV0R0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eFZRVUZWTkVRc1IwRkJiME03UVVGRGFrUXNVVUZCUnl4RFFVRkRRVHRCUVVGakxGbEJRVUVzU1VGQlNTeE5RVUZOTERSQ1FVRTBRanRCUVVOcVJDeEpRVUZCUVN4RlFVRkJMRzlDUVVGdlFpeExRVUZMTEdOQlFXTTdRVUZCUVN4RlFVTnNSRHRCUVVOS08wRkRkRU5QTEZOQlFWTnJaMElzUjBGQk1rUktMRWRCUVcxRk8wRkJRekZKTEUxQlFVY3NRMEZCUTBFN1FVRkJhVUlzVlVGQlFTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRemxFTEZOQlFVOHNTVUZCU1Vnc1IwRkJLMEk3UVVGRE9VTTdRVU5LVHl4TlFVRk5VU3hYUVVFclEzaGtMRVZCUVcxRU8wRkJRVUU3UVVGQlFTeEZRVVZ1Unp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFVpeEpRVUZYTEdsQ1FVRnBRanRCUVVONFFpeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMR1ZCUVdWMlJ5eEhRVUZuUXp0QlFVTjBSQ3hUUVVGTExHdENRVUZyUWtFN1FVRkJRU3hGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCU1U4c1kwRkJZenRCUVVOWUxHRkJRMDRzUzBGQlN5eHJRa0ZCYTBJN1JVRkRNMEk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzA4c2QwSkJRVzlGTzBGQlEzWkZMRmRCUVU4N1JVRkZXRHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMVHl4VlFVRlZORVFzUjBGQmIwTTdRVUZEYWtRc1VVRkJSeXhEUVVGRFFUdEJRVUZqTEZsQlFVRXNTVUZCU1N4TlFVRk5MRFJDUVVFMFFqdEJRVU5xUkN4SlFVRkJRU3hGUVVGQkxHOUNRVUZ2UWl4TFFVRkxMR05CUVdNN1FVRkJRU3hGUVVOc1JEdEJRVU5LTzBGRGVFTlBMRTFCUVUxdlowSXNWMEZCSzBONlpDeEZRVUZ0UkR0QlFVRkJPMEZCUVVFc1JVRkZia2M3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzFJc1NVRkJWeXhwUWtGQmFVSTdRVUZEZUVJc1YwRkJUeXhMUVVGTE8wRkJRVUVzUlVGRGFFSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eGxRVUZsZGtjc1IwRkJaME03UVVGRGRFUXNVMEZCU3l4clFrRkJhMEpCTzBGQlFVRXNSVUZETTBJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVWxQTEdOQlFXTTdRVUZEV0N4aFFVTk9MRXRCUVVzc2EwSkJRV3RDTzBWQlF6TkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRQTEhkQ1FVRnZSVHRCUVVOMlJTeFhRVUZQTzBWQlJWZzdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMDhzVlVGQlZUUkVMRWRCUVc5RE8wRkJRMnBFTEZGQlFVY3NRMEZCUTBFN1FVRkJZeXhaUVVGQkxFbEJRVWtzVFVGQlRTdzBRa0ZCTkVJN1FVRkRha1FzU1VGQlFVRXNSVUZCUVN4dlFrRkJiMElzUzBGQlN5eGpRVUZqTzBGQlFVRXNSVUZEYkVRN1FVRkRTanRCUTNoRFR5eE5RVUZOY1dkQ0xGZEJRU3RETVdRc1JVRkJiVVE3UVVGQlFUdEJRVUZCTEVWQlJXNUhPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRTTEVsQlFWY3NhVUpCUVdsQ08wRkJRM2hDTEZkQlFVOHNTMEZCU3p0QlFVRkJMRVZCUTJoQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1pVRkJaWFpITEVkQlFXZERPMEZCUTNSRUxGTkJRVXNzYTBKQlFXdENRVHRCUVVGQkxFVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkpUeXhqUVVGak8wRkJRMWdzWVVGRFRpeExRVUZMTEd0Q1FVRnJRanRGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxUeXgzUWtGQmIwVTdRVUZEZGtVc1YwRkJUenRGUVVWWU8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdFBMRlZCUVZVMFJDeEhRVUZ2UXp0QlFVTnFSQ3hSUVVGSExFTkJRVU5CTzBGQlFXTXNXVUZCUVN4SlFVRkpMRTFCUVUwc05FSkJRVFJDTzBGQlEycEVMRWxCUVVGQkxFVkJRVUVzYjBKQlFXOUNMRXRCUVVzc1kwRkJZenRCUVVGQkxFVkJRMnhFTzBGQlEwbzdRVU4yUTA4c1UwRkJVM05uUWl4SFFVRnRSVklzUjBGQk1rVTdRVUZETVVvc1RVRkJSeXhEUVVGRFFUdEJRVUZwUWl4VlFVRkJMRWxCUVVrc1RVRkJUU3dyUWtGQkswSTdRVUZET1VRc1UwRkJUeXhKUVVGSlN5eEhRVUYxUXp0QlFVTjBSRHRCUTBoUExGTkJRVk5KTEVkQlFXMUZWQ3hIUVVFeVJUdEJRVU14U2l4TlFVRkhMRU5CUVVOQk8wRkJRV2xDTEZWQlFVRXNTVUZCU1N4TlFVRk5MQ3RDUVVFclFqdEJRVU01UkN4VFFVRlBMRWxCUVVsTkxFZEJRWFZETzBGQlEzUkVPMEZEU0U4c1UwRkJVMGtzUjBGQmJVVldMRWRCUVRKRk8wRkJRekZLTEUxQlFVY3NRMEZCUTBFN1FVRkJhVUlzVlVGQlFTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRemxFTEZOQlFVOHNTVUZCU1U4c1IwRkJkVU03UVVGRGRFUTdRVU5OVHl4TlFVRk5TU3hIUVVGdlFqdEJRVUZCTzBGQlFVRXNSVUZGY2tJN1FVRkJRVHRCUVVGQkxFVkJSVUU3UVVGQlFUdEJRVUZCTEVWQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTlJDeFpRVUZaYmswc1IwRkJPRVJhTEVkQlFXZERPMEZCUXpkSExGRkJRVWNzUTBGQlExazdRVUZCYzBJc1dVRkJRU3hKUVVGSkxFMUJRVTBzYjBOQlFXOURPMEZCUTNoRkxGRkJRVWNzUTBGQlExbzdRVUZCYzBJc1dVRkJRU3hKUVVGSkxFMUJRVTBzYjBOQlFXOURPMEZCUTNoRkxGTkJRVXNzWTBGQll6dEJRVU5pTEZWQlFVRm5UaXhKUVVGbGRrMHNSVUZCYTBKSExFTkJRV003UVVGRGNrUXNVMEZCU3l4cFFrRkJhVUp2VFN4SFFVTjBRaXhMUVVGTExHbENRVUZwUW1oT08wRkJRVUVzUlVGRE1VSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlVVOHNTMEZCUzNSWExFZEJRV2xFZFdwQ0xFZEJRV2RHTlV3c1IwRkJjVWM3UVVGRE9VOHNVVUZCUnl4RFFVRkRNMWc3UVVGQldTeFpRVUZCTEVsQlFVa3NUVUZCVFN3d1FrRkJNRUk3UVVGRGNFUXNWVUZCVFdkbExFbEJRV01zUzBGQlN6dEJRVUZCTEUxQlEzSkNhR1U3UVVGQlFTeE5RVUZOZFdwQ08wRkJRVUVzU1VGQlFTeEhRVVZLUXl4SlFVRXdSRHRCUVVGQkxFMUJRelZFTEV0QlFVOU9PMEZCUVVFc1RVRkRVQ3hMUVVGUFF6dEJRVUZCTEUxQlExQXNTMEZCVDBNN1FVRkJRU3hKUVVGQk8wRkJSVmdzVjBGQlR5eExRVUZMTEdkQ1FVRm5RaXhWUVVFd1EzQkdMRWRCUVdFNFJTeEpRVUUwUkc1TUxFZEJRV2xDTmt3c1EwRkJXU3hMUVVGTExGRkJRVkVzVDBGQlR5eEpRVUZKTEUxQlFVMHNlVUpCUVhsQ0xFTkJRVU03UVVGQlFTeEZRVU40VHp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlQwOHNlVUpCUVhsQ2VHcENMRWRCUVdsRWRXcENMRWRCUVhGSE8wRkJRMnhNTEZGQlFVY3NRMEZCUTNacVFqdEJRVUZaTEZsQlFVRXNTVUZCU1N4TlFVRk5MREJDUVVFd1FqdEJRVU01UXl4VlFVRkJaMlVzU1VGQll5eEpRVUZKTTBnN1FVRkRlRUlzVjBGQlFUSklMRVZCUVZrc1kwRkJZeXhMUVVGTExHRkJReTlDUVN4RlFVRlpMR2xDUVVGcFFpeExRVUZMTEdkQ1FVTnNRMEVzUlVGQldTeGhRVUZoTlVjc1JVRkJWeXhOUVVOd1F6UkhMRVZCUVZrc1VVRkJVU3hUUVVGWkxFTkJRVU1zYTBKQlFXdENMRWRCUXk5RGRVWXNUVUZEV1haR0xFVkJRVUVzYTBKQlFXdENkVVlzUlVGQmNVSXNUMEZCVHl4SFFVTTVRM1pHTEVWQlFVRXNhMEpCUVd0Q2RVWXNSVUZCY1VJc1QwRkJUeXhKUVVVNVJIWkdMRVZCUVZrc2RVSkJRWFZDTEV0QlFVc3NaMEpCUVdkQ0xHOUNRVUZ2UW1obExFTkJRVWtzUjBGRGVrVm5aVHRCUVVGQkxFVkJRMWc3UVVGRFNqdEJRM0JGVHl4VFFVRlRlVVlzUjBGQmMwUm1MRWRCUVRoRU8wRkJRMmhKTEUxQlFVY3NRMEZCUTBFN1FVRkJhVUlzVlVGQlFTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRemxFTEZOQlFVOHNTVUZCU1VZc1IwRkJNRUk3UVVGRGVrTTdRVU5JVHl4VFFVRlRhMElzUjBGQmRVUm9RaXhIUVVFclJEdEJRVU5zU1N4TlFVRkhMRU5CUVVOQk8wRkJRV2xDTEZWQlFVRXNTVUZCU1N4TlFVRk5MQ3RDUVVFclFqdEJRVU01UkN4VFFVRlBMRWxCUVVsSExFZEJRVEpDTzBGQlF6RkRPMEZEU2s4c1RVRkJUV01zVjBGQk1FTndaU3hGUVVGdFJEdEJRVUZCTzBGQlFVRXNSVUZGT1VZN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMxSXNTVUZCVnl4cFFrRkJhVUk3UVVGRGVFSXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhsUVVGbGRrY3NSMEZCWjBNN1FVRkRkRVFzVTBGQlN5eHJRa0ZCYTBKQk8wRkJRVUVzUlVGRE0wSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVVsUExHTkJRV003UVVGRFdDeGhRVU5PTEV0QlFVc3NhMEpCUVd0Q08wVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0UExIZENRVUZ2UlR0QlFVTjJSU3hYUVVGUE8wVkJSVmc3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzA4c1ZVRkJWVFJFTEVkQlFXOURPMEZCUTJwRUxGRkJRVWNzUTBGQlEwRTdRVUZCWXl4WlFVRkJMRWxCUVVrc1RVRkJUU3cwUWtGQk5FSTdRVUZEYWtRc1NVRkJRVUVzUlVGQlFTeHZRa0ZCYjBJc1MwRkJTeXhqUVVGak8wRkJRVUVzUlVGRGJFUTdRVUZEU2p0QlEzaERUeXhOUVVGTloyaENMRmRCUVRCRGNtVXNSVUZCYlVRN1FVRkJRVHRCUVVGQkxFVkJSVGxHTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0U0xFbEJRVmNzYVVKQlFXbENPMEZCUTNoQ0xGZEJRVThzUzBGQlN6dEJRVUZCTEVWQlEyaENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NaVUZCWlhaSExFZEJRV2RETzBGQlEzUkVMRk5CUVVzc2EwSkJRV3RDUVR0QlFVRkJMRVZCUXpOQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZKVHl4alFVRmpPMEZCUTFnc1lVRkRUaXhMUVVGTExHdENRVUZyUWp0RlFVTXpRanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMVHl4M1FrRkJiMFU3UVVGRGRrVXNWMEZCVHp0RlFVVllPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRQTEZWQlFWVTBSQ3hIUVVGdlF6dEJRVU5xUkN4UlFVRkhMRU5CUVVOQk8wRkJRV01zV1VGQlFTeEpRVUZKTEUxQlFVMHNORUpCUVRSQ08wRkJRMnBFTEVsQlFVRkJMRVZCUVVFc2IwSkJRVzlDTEV0QlFVc3NZMEZCWXp0QlFVRkJMRVZCUTJ4RU8wRkJRMG83UVVONFEwOHNUVUZCVFdsb1FpeFhRVUV3UTNSbExFVkJRVzFFTzBGQlFVRTdRVUZCUVN4RlFVVTVSanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMVWl4SlFVRlhMR2xDUVVGcFFqdEJRVU40UWl4WFFVRlBMRXRCUVVzN1FVRkJRU3hGUVVOb1FqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExHVkJRV1YyUnl4SFFVRm5RenRCUVVOMFJDeFRRVUZMTEd0Q1FVRnJRa0U3UVVGQlFTeEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTVThzWTBGQll6dEJRVU5ZTEdGQlEwNHNTMEZCU3l4clFrRkJhMEk3UlVGRE0wSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMDhzZDBKQlFXOUZPMEZCUTNaRkxGZEJRVTg3UlVGRldEdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxUeXhWUVVGVk5FUXNSMEZCYjBNN1FVRkRha1FzVVVGQlJ5eERRVUZEUVR0QlFVRmpMRmxCUVVFc1NVRkJTU3hOUVVGTkxEUkNRVUUwUWp0QlFVTnFSQ3hKUVVGQlFTeEZRVUZCTEc5Q1FVRnZRaXhMUVVGTExHTkJRV003UVVGQlFTeEZRVU5zUkR0QlFVTktPMEZEZUVOUExFMUJRVTFyYUVJc1YwRkJNa04yWlN4RlFVRnRSRHRCUVVGQk8wRkJRVUVzUlVGRkwwWTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMUlzU1VGQlZ5eHBRa0ZCYVVJN1FVRkRlRUlzVjBGQlR5eExRVUZMTzBGQlFVRXNSVUZEYUVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4bFFVRmxka2NzUjBGQlowTTdRVUZEZEVRc1UwRkJTeXhyUWtGQmEwSkJPMEZCUVVFc1JVRkRNMEk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVbFBMR05CUVdNN1FVRkRXQ3hoUVVOT0xFdEJRVXNzYTBKQlFXdENPMFZCUXpOQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdFBMSGRDUVVGdlJUdEJRVU4yUlN4WFFVRlBPMFZCUlZnN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNWVUZCVlRSRUxFZEJRVzlETzBGQlEycEVMRkZCUVVjc1EwRkJRMEU3UVVGQll5eFpRVUZCTEVsQlFVa3NUVUZCVFN3MFFrRkJORUk3UVVGRGFrUXNTVUZCUVVFc1JVRkJRU3h2UWtGQmIwSXNTMEZCU3l4alFVRmpPMEZCUVVFc1JVRkRiRVE3UVVGRFNqdEJRM2hEVHl4TlFVRk5iV2hDTEZkQlFUSkRlR1VzUlVGQmJVUTdRVUZCUVR0QlFVRkJMRVZCUlM5R08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdFNMRWxCUVZjc2FVSkJRV2xDTzBGQlEzaENMRmRCUVU4c1MwRkJTenRCUVVGQkxFVkJRMmhDTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0QkxFbEJRVmNzWlVGQlpYWkhMRWRCUVdkRE8wRkJRM1JFTEZOQlFVc3NhMEpCUVd0Q1FUdEJRVUZCTEVWQlF6TkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGSlR5eGpRVUZqTzBGQlExZ3NZVUZEVGl4TFFVRkxMR3RDUVVGclFqdEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eDNRa0ZCYjBVN1FVRkRka1VzVjBGQlR6dEZRVVZZTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0UExGVkJRVlUwUkN4SFFVRnZRenRCUVVOcVJDeFJRVUZITEVOQlFVTkJPMEZCUVdNc1dVRkJRU3hKUVVGSkxFMUJRVTBzTkVKQlFUUkNPMEZCUTJwRUxFbEJRVUZCTEVWQlFVRXNiMEpCUVc5Q0xFdEJRVXNzWTBGQll6dEJRVUZCTEVWQlEyeEVPMEZCUTBvN1FVTjRRMDhzVFVGQlRXOW9RaXhYUVVFeVEzcGxMRVZCUVcxRU8wRkJRVUU3UVVGQlFTeEZRVVV2Ump0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFVpeEpRVUZYTEdsQ1FVRnBRanRCUVVONFFpeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMR1ZCUVdWMlJ5eEhRVUZuUXp0QlFVTjBSQ3hUUVVGTExHdENRVUZyUWtFN1FVRkJRU3hGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCU1U4c1kwRkJZenRCUVVOWUxHRkJRMDRzUzBGQlN5eHJRa0ZCYTBJN1JVRkRNMEk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzA4c2QwSkJRVzlGTzBGQlEzWkZMRmRCUVU4N1JVRkZXRHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMVHl4VlFVRlZORVFzUjBGQmIwTTdRVUZEYWtRc1VVRkJSeXhEUVVGRFFUdEJRVUZqTEZsQlFVRXNTVUZCU1N4TlFVRk5MRFJDUVVFMFFqdEJRVU5xUkN4SlFVRkJRU3hGUVVGQkxHOUNRVUZ2UWl4TFFVRkxMR05CUVdNN1FVRkJRU3hGUVVOc1JEdEJRVU5LTzBGRGRrTlBMRk5CUVZOeGFFSXNSMEZCT0VSMlFpeEhRVUZ6UlR0QlFVTm9TaXhOUVVGSExFTkJRVU5CTzBGQlFXbENMRlZCUVVFc1NVRkJTU3hOUVVGTkxDdENRVUVyUWp0QlFVTTVSQ3hUUVVGUExFbEJRVWxwUWl4SFFVRnJRenRCUVVOcVJEdEJRMGhQTEZOQlFWTlBMRWRCUVRoRWVFSXNSMEZCYzBVN1FVRkRhRW9zVFVGQlJ5eERRVUZEUVR0QlFVRnBRaXhWUVVGQkxFbEJRVWtzVFVGQlRTd3JRa0ZCSzBJN1FVRkRPVVFzVTBGQlR5eEpRVUZKYTBJc1IwRkJhME03UVVGRGFrUTdRVU5JVHl4VFFVRlRUeXhIUVVFNFJIcENMRWRCUVhORk8wRkJRMmhLTEUxQlFVY3NRMEZCUTBFN1FVRkJhVUlzVlVGQlFTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRemxFTEZOQlFVOHNTVUZCU1cxQ0xFZEJRV3RETzBGQlEycEVPMEZEU0U4c1UwRkJVMDhzUjBGQkswUXhRaXhIUVVGMVJUdEJRVU5zU2l4TlFVRkhMRU5CUVVOQk8wRkJRV2xDTEZWQlFVRXNTVUZCU1N4TlFVRk5MQ3RDUVVFclFqdEJRVU01UkN4VFFVRlBMRWxCUVVsdlFpeEhRVUZ0UXp0QlFVTnNSRHRCUTBoUExGTkJRVk5QTEVkQlFTdEVNMElzUjBGQmRVVTdRVUZEYkVvc1RVRkJSeXhEUVVGRFFUdEJRVUZwUWl4VlFVRkJMRWxCUVVrc1RVRkJUU3dyUWtGQkswSTdRVUZET1VRc1UwRkJUeXhKUVVGSmNVSXNSMEZCYlVNN1FVRkRiRVE3UVVOSVR5eFRRVUZUVHl4SFFVRXJSRFZDTEVkQlFYVkZPMEZCUTJ4S0xFMUJRVWNzUTBGQlEwRTdRVUZCYVVJc1ZVRkJRU3hKUVVGSkxFMUJRVTBzSzBKQlFTdENPMEZCUXpsRUxGTkJRVThzU1VGQlNYTkNMRWRCUVcxRE8wRkJRMnhFTzBGRFNFOHNVMEZCVTA4c1IwRkJiMFEzUWl4SFFVRTBSRHRCUVVNMVNDeE5RVUZITEVOQlFVTkJPMEZCUVdsQ0xGVkJRVUVzU1VGQlNTeE5RVUZOTEN0Q1FVRXJRanRCUVVNNVJDeFRRVUZQTEVsQlFVbEZMRWRCUVhkQ08wRkJRM1pETzBGRFNrOHNUVUZCVFRSQ0xGZEJRWGREYW1Zc1JVRkJiVVE3UVVGQlFUdEJRVUZCTEVWQlJUVkdPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRTTEVsQlFWY3NhVUpCUVdsQ08wRkJRM2hDTEZkQlFVOHNTMEZCU3p0QlFVRkJMRVZCUTJoQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1pVRkJaWFpITEVkQlFXZERPMEZCUTNSRUxGTkJRVXNzYTBKQlFXdENRVHRCUVVGQkxFVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkpUeXhqUVVGak8wRkJRMWdzWVVGRFRpeExRVUZMTEd0Q1FVRnJRanRGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxUeXgzUWtGQmIwVTdRVUZEZGtVc1YwRkJUenRGUVVWWU8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdFBMRlZCUVZVMFJDeEhRVUZ2UXp0QlFVTnFSQ3hSUVVGSExFTkJRVU5CTzBGQlFXTXNXVUZCUVN4SlFVRkpMRTFCUVUwc05FSkJRVFJDTzBGQlEycEVMRWxCUVVGQkxFVkJRVUVzYjBKQlFXOUNMRXRCUVVzc1kwRkJZenRCUVVGQkxFVkJRMnhFTzBGQlEwbzdRVU40UTA4c1RVRkJUVFpvUWl4WFFVRjNRMnhtTEVWQlFXMUVPMEZCUVVFN1FVRkJRU3hGUVVVMVJqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxVaXhKUVVGWExHbENRVUZwUWp0QlFVTjRRaXhYUVVGUExFdEJRVXM3UVVGQlFTeEZRVU5vUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFFTeEpRVUZYTEdWQlFXVjJSeXhIUVVGblF6dEJRVU4wUkN4VFFVRkxMR3RDUVVGclFrRTdRVUZCUVN4RlFVTXpRanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlNVOHNZMEZCWXp0QlFVTllMR0ZCUTA0c1MwRkJTeXhyUWtGQmEwSTdSVUZETTBJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNkMEpCUVc5Rk8wRkJRM1pGTEZkQlFVODdSVUZGV0R0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eFZRVUZWTkVRc1IwRkJiME03UVVGRGFrUXNVVUZCUnl4RFFVRkRRVHRCUVVGakxGbEJRVUVzU1VGQlNTeE5RVUZOTERSQ1FVRTBRanRCUVVOcVJDeEpRVUZCUVN4RlFVRkJMRzlDUVVGdlFpeExRVUZMTEdOQlFXTTdRVUZCUVN4RlFVTnNSRHRCUVVOS08wRkRlRU5QTEUxQlFVMDRhRUlzVjBGQmQwTnVaaXhGUVVGdFJEdEJRVUZCTzBGQlFVRXNSVUZGTlVZN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMxSXNTVUZCVnl4cFFrRkJhVUk3UVVGRGVFSXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhsUVVGbGRrY3NSMEZCWjBNN1FVRkRkRVFzVTBGQlN5eHJRa0ZCYTBKQk8wRkJRVUVzUlVGRE0wSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVVsUExHTkJRV003UVVGRFdDeGhRVU5PTEV0QlFVc3NhMEpCUVd0Q08wVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0UExIZENRVUZ2UlR0QlFVTjJSU3hYUVVGUE8wVkJSVmc3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzA4c1ZVRkJWVFJFTEVkQlFXOURPMEZCUTJwRUxGRkJRVWNzUTBGQlEwRTdRVUZCWXl4WlFVRkJMRWxCUVVrc1RVRkJUU3cwUWtGQk5FSTdRVUZEYWtRc1NVRkJRVUVzUlVGQlFTeHZRa0ZCYjBJc1MwRkJTeXhqUVVGak8wRkJRVUVzUlVGRGJFUTdRVUZEU2p0QlEzWkRUeXhUUVVGVEsyaENMRWRCUVRSRWFrTXNSMEZCYjBVN1FVRkROVWtzVFVGQlJ5eERRVUZEUVR0QlFVRnBRaXhWUVVGQkxFbEJRVWtzVFVGQlRTd3JRa0ZCSzBJN1FVRkRPVVFzVTBGQlR5eEpRVUZKT0VJc1IwRkJaME03UVVGREwwTTdRVU5JVHl4VFFVRlRTU3hIUVVFMFJHeERMRWRCUVc5Rk8wRkJRelZKTEUxQlFVY3NRMEZCUTBFN1FVRkJhVUlzVlVGQlFTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRemxFTEZOQlFVOHNTVUZCU1N0Q0xFZEJRV2RETzBGQlF5OURPMEZEU0U4c1UwRkJVMGtzUjBGQk5FUnVReXhIUVVGdlJUdEJRVU0xU1N4TlFVRkhMRU5CUVVOQk8wRkJRV2xDTEZWQlFVRXNTVUZCU1N4TlFVRk5MQ3RDUVVFclFqdEJRVU01UkN4VFFVRlBMRWxCUVVsblF5eEhRVUZuUXp0QlFVTXZRenRCUTAxUExFbEJRVUZKTEV0QlFVRXNUVUZCTUVJN1FVRkJRVHRCUVVGQkxFVkJSWEpDTzBGQlFVRTdRVUZCUVN4RlFVVkJPMEZCUVVFN1FVRkJRU3hGUVVWQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCVFVRc1dVRkJXVFZPTEVkQlFUaEVXaXhIUVVGblF6dEJRVU0zUnl4UlFVRkhMRU5CUVVOWk8wRkJRWE5DTEZsQlFVRXNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVU40UlN4UlFVRkhMRU5CUVVOYU8wRkJRWE5DTEZsQlFVRXNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVU40UlN4VFFVRkxMR05CUVdNN1FVRkRZaXhWUVVGQlowNHNTVUZCWlhaTkxFVkJRV3RDUnl4RFFVRmpPMEZCUTNKRUxGTkJRVXNzYVVKQlFXbENiMDBzUjBGRGRFSXNTMEZCU3l4cFFrRkJhVUpvVGp0QlFVRkJMRVZCUXpGQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRlBUeXhKUVVGSmFVNHNSMEZCSzBVMVRDeEhRVUU0Ump0QlFVTndUQ3hWUVVGTmNVY3NTVUZCWXl4TFFVRkxPMEZCUVVFc1RVRkRja0oxUmp0QlFVRkJMRWxCUVVFc1IwRkZSVU1zU1VGQk1FUTdRVUZCUVN4TlFVTTFSQ3hMUVVGUGJVSTdRVUZCUVN4TlFVTlFMRXRCUVU5RE8wRkJRVUVzVFVGRFVDeExRVUZQUXp0QlFVRkJMRWxCUVVFN1FVRkZXQ3hYUVVGUExFdEJRVXNzWjBKQlFXZENMRlZCUVcxRE4wY3NSMEZCWVhWSExFbEJRWEZFTlUwc1IwRkJhVUkyVEN4RFFVRlpMRXRCUVVzc1VVRkJVU3hQUVVGUExFbEJRVWtzVFVGQlRTeDVRa0ZCZVVJc1EwRkJRenRCUVVGQkxFVkJRekZPTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJUVThzZDBKQlFYZENSQ3hIUVVGdlJ6dEJRVU42U0N4VlFVRkJka1lzU1VGQll5eEpRVUZKTTBnN1FVRkRlRUlzVjBGQlFUSklMRVZCUVZrc1kwRkJZeXhMUVVGTExHRkJReTlDUVN4RlFVRlpMR2xDUVVGcFFpeExRVUZMTEdkQ1FVTnNRMEVzUlVGQldTeGhRVUZoTlVjc1JVRkJWeXhMUVVOd1F6UkhMRVZCUVZrc1VVRkJVU3hUUVVGWkxFTkJRVU1zYTBKQlFXdENMRWRCUXk5RGRVWXNUVUZEV1haR0xFVkJRVUVzYTBKQlFXdENkVVlzUlVGQmNVSXNUMEZCVHl4SFFVTTVRM1pHTEVWQlFVRXNjME5CUVhORGRVWXNSVUZCY1VJc1pVRkJaU3hIUVVNeFJYWkdMRVZCUVVFc2EwSkJRV3RDZFVZc1JVRkJjVUlzVDBGQlR5eEpRVVYyUkhaR08wRkJRVUVzUlVGRFdEdEJRVU5LTzBGRGFrUlBMRTFCUVUwclJ5eEhRVUU0UWp0QlFVRkJPMEZCUVVFc1JVRkZMMEk3UVVGQlFUdEJRVUZCTEVWQlJVRTdRVUZCUVR0QlFVRkJMRVZCUlZJc1NVRkJWeXhSUVVFMlFqdEJRVU53UXl4WFFVRlBMRWxCUVVsRExFZEJRVzlDTEV0QlFVc3NaMEpCUVdkQ0xFdEJRVXNzWTBGQll6dEJRVUZCTEVWQlF6TkZPMEZCUVVFN1FVRkJRU3hGUVVWUk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCVFVRc1dVRkJXVGxPTEVkQlFUaEVXaXhIUVVGblF6dEJRVU0zUnl4UlFVRkhMRU5CUVVOWk8wRkJRWE5DTEZsQlFVRXNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVU40UlN4UlFVRkhMRU5CUVVOYU8wRkJRWE5DTEZsQlFVRXNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVU40UlN4VFFVRkxMR05CUVdNN1FVRkRZaXhWUVVGQlowNHNTVUZCWlhaTkxFVkJRV3RDUnl4RFFVRmpPMEZCUTNKRUxGTkJRVXNzYVVKQlFXbENiMDBzUjBGRGRFSXNTMEZCU3l4cFFrRkJhVUpvVGp0QlFVRkJMRVZCUXpGQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRlBUeXhKUVVGSmFVNHNSMEZCZVVZMVRDeEhRVUZuUnp0QlFVTm9UU3hWUVVGTmNVY3NTVUZCWXl4TFFVRkxPMEZCUVVFc1RVRkRja0oxUmp0QlFVRkJMRWxCUVVFc1IwRkZSVU1zU1VGQk1FUTdRVUZCUVN4TlFVTTFSQ3hMUVVGUFV6dEJRVUZCTEUxQlExQXNTMEZCVDBNN1FVRkJRU3hOUVVOUUxFdEJRVTlETzBGQlFVRXNTVUZCUVR0QlFVVllMRmRCUVU4c1MwRkJTeXhuUWtGQlowSXNWVUZCY1VOdVJ5eEhRVUZoZVVZc1NVRkJkVVE1VEN4SFFVRnBRalpNTEVOQlFWa3NTMEZCU3l4UlFVRlJMRTlCUVU4c1NVRkJTU3hOUVVGTkxIbENRVUY1UWl4RFFVRkRPMEZCUVVFc1JVRkRPVTQ3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJVVThzUzBGQlMzaHFRaXhIUVVFeVEzVnFRaXhIUVVFd1JqVk1MRWRCUVdsSE8wRkJRemxQTEZGQlFVY3NRMEZCUXpOWU8wRkJRVmtzV1VGQlFTeEpRVUZKTEUxQlFVMHNNRUpCUVRCQ08wRkJRM0JFTEZWQlFVMW5aU3hKUVVGakxFdEJRVXM3UVVGQlFTeE5RVU55UW1obE8wRkJRVUVzVFVGQlRYVnFRanRCUVVGQkxFbEJRVUVzUjBGRlNrTXNTVUZCTUVRN1FVRkJRU3hOUVVNMVJDeExRVUZQV1R0QlFVRkJMRTFCUTFBc1MwRkJUME03UVVGQlFTeE5RVU5RTEV0QlFVOURPMEZCUVVFc1NVRkJRVHRCUVVWWUxGZEJRVThzUzBGQlN5eG5Ra0ZCWjBJc1ZVRkJjME4wUnl4SFFVRmhNRVlzU1VGQmQwUXZUQ3hIUVVGcFFqWk1MRU5CUVZrc1MwRkJTeXhSUVVGUkxFOUJRVThzU1VGQlNTeE5RVUZOTEhsQ1FVRjVRaXhEUVVGRE8wRkJRVUVzUlVGRGFFODdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTlR5eDNRa0ZCZDBKRUxFZEJRVGhITzBGQlEyNUpMRlZCUVVGMlJpeEpRVUZqTEVsQlFVa3pTRHRCUVVONFFpeFhRVUZCTWtnc1JVRkJXU3hqUVVGakxFdEJRVXNzWVVGREwwSkJMRVZCUVZrc2FVSkJRV2xDTEV0QlFVc3NaMEpCUTJ4RFFTeEZRVUZaTEdGQlFXRTFSeXhGUVVGWExFdEJRM0JETkVjc1JVRkJXU3hSUVVGUkxGTkJRVmtzUTBGQlF5eHJRa0ZCYTBJc1IwRkRMME4xUml4TlFVTlpka1lzUlVGQlFTeHJRa0ZCYTBKMVJpeEZRVUZ4UWl4UFFVRlBMRWRCUXpsRGRrWXNSVUZCUVN4clFrRkJhMEoxUml4RlFVRnhRaXhQUVVGUExFbEJSWFpFZGtZN1FVRkJRU3hGUVVOWU8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRlBUeXg1UWtGQmVVSm9aU3hIUVVFeVEzVnFRaXhIUVVFclJ6dEJRVU4wVEN4UlFVRkhMRU5CUVVOMmFrSTdRVUZCV1N4WlFVRkJMRWxCUVVrc1RVRkJUU3d3UWtGQk1FSTdRVUZET1VNc1ZVRkJRV2RsTEVsQlFXTXNTVUZCU1ROSU8wRkJRM2hDTEZkQlFVRXlTQ3hGUVVGWkxHTkJRV01zUzBGQlN5eGhRVU12UWtFc1JVRkJXU3hwUWtGQmFVSXNTMEZCU3l4blFrRkRiRU5CTEVWQlFWa3NZVUZCWVRWSExFVkJRVmNzVFVGRGNFTTBSeXhGUVVGWkxGRkJRVkVzVTBGQldTeERRVUZETEd0Q1FVRnJRaXhIUVVNdlEzVkdMRTFCUTFsMlJpeEZRVUZCTEd0Q1FVRnJRblZHTEVWQlFYRkNMRTlCUVU4c1IwRkRPVU4yUml4RlFVRkJMR3RDUVVGclFuVkdMRVZCUVhGQ0xFOUJRVThzU1VGRk9VUjJSaXhGUVVGWkxIVkNRVUYxUWl4TFFVRkxMR2RDUVVGblFpeHZRa0ZCYjBKb1pTeERRVUZKTEVkQlEzcEZaMlU3UVVGQlFTeEZRVU5ZTzBGQlEwbzdRVU01UjA4c1RVRkJUV2xJTEVkQlFYVkNPMEZCUVVFN1FVRkJRU3hGUVVWNFFqdEJRVUZCTzBGQlFVRXNSVUZGUVR0QlFVRkJPMEZCUVVFc1JVRkZRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVMUVMRmxCUVZrdlRpeEhRVUU0UkZvc1IwRkJaME03UVVGRE4wY3NVVUZCUnl4RFFVRkRXVHRCUVVGelFpeFpRVUZCTEVsQlFVa3NUVUZCVFN4dlEwRkJiME03UVVGRGVFVXNVVUZCUnl4RFFVRkRXanRCUVVGelFpeFpRVUZCTEVsQlFVa3NUVUZCVFN4dlEwRkJiME03UVVGRGVFVXNVMEZCU3l4alFVRmpPMEZCUTJJc1ZVRkJRV2RPTEVsQlFXVjJUU3hGUVVGclFrY3NRMEZCWXp0QlFVTnlSQ3hUUVVGTExHbENRVUZwUW05TkxFZEJRM1JDTEV0QlFVc3NhVUpCUVdsQ2FFNDdRVUZCUVN4RlFVTXhRanRCUVVOS08wRkRiRUpQTEUxQlFVMDBUeXhIUVVFd1FqdEJRVUZCTzBGQlFVRXNSVUZGYmtNc1NVRkJWeXhYUVVGdFF6dEJRVU14UXl4WFFVRlBMRWxCUVVsRUxFZEJRWFZDTEV0QlFVc3NaMEpCUVdkQ0xFdEJRVXNzWTBGQll6dEJRVUZCTEVWQlF6bEZPMEZCUVVFN1FVRkJRU3hGUVVWUk8wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVN4RlFVVkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlRVUXNXVUZCV1M5T0xFZEJRVGhFV2l4SFFVRm5RenRCUVVNM1J5eFJRVUZITEVOQlFVTlpPMEZCUVhOQ0xGbEJRVUVzU1VGQlNTeE5RVUZOTEc5RFFVRnZRenRCUVVONFJTeFJRVUZITEVOQlFVTmFPMEZCUVhOQ0xGbEJRVUVzU1VGQlNTeE5RVUZOTEc5RFFVRnZRenRCUVVONFJTeFRRVUZMTEdOQlFXTTdRVUZEWWl4VlFVRkJaMDRzU1VGQlpYWk5MRVZCUVd0Q1J5eERRVUZqTzBGQlEzSkVMRk5CUVVzc2FVSkJRV2xDYjAwc1IwRkRkRUlzUzBGQlN5eHBRa0ZCYVVKb1RqdEJRVUZCTEVWQlF6RkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlRVOHNZVUZCWVhwYUxFZEJRVFJETzBGQlF6VkVMRkZCUVVjc1EwRkJRMEU3UVVGQlZTeFpRVUZCTEVsQlFVa3NUVUZCVFN4M1FrRkJkMEk3UVVGRE1VTXNWVUZCUVhsdFFpeEpRVUZsZGswc1JVRkJhMElzUzBGQlN5eGpRVUZqTzBGQlF6RkVMRmRCUVVGMVRTeEZRVUZoTEZsQlFXVjZiVUlzUjBGRGNrSXNTVUZCU1d0dlFpeEhRVUU0UW5wQ0xFZEJRV01zUzBGQlN5eGpRVUZqTzBGQlFVRXNSVUZET1VVN1FVRkRTanRCUTNKRFR5eE5RVUZOTmtJc1IwRkJiVUk3UVVGQlFUdEJRVUZCTEVWQlJYQkNPMEZCUVVFN1FVRkJRU3hGUVVWQk8wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJUVVFzV1VGQldXcFBMRWRCUVRoRVdpeEhRVUZuUXp0QlFVTTNSeXhSUVVGSExFTkJRVU5aTzBGQlFYTkNMRmxCUVVFc1NVRkJTU3hOUVVGTkxHOURRVUZ2UXp0QlFVTjRSU3hSUVVGSExFTkJRVU5hTzBGQlFYTkNMRmxCUVVFc1NVRkJTU3hOUVVGTkxHOURRVUZ2UXp0QlFVTjRSU3hUUVVGTExHTkJRV003UVVGRFlpeFZRVUZCWjA0c1NVRkJaWFpOTEVWQlFXdENSeXhEUVVGak8wRkJRM0pFTEZOQlFVc3NhVUpCUVdsQ2IwMHNSMEZEZEVJc1MwRkJTeXhwUWtGQmFVSm9UanRCUVVGQkxFVkJRekZDTzBGQlEwbzdRVU5xUWs4c1RVRkJUVGhQTEVkQlFYTkNPMEZCUVVFN1FVRkJRU3hGUVVVdlFpeEpRVUZYTEZGQlFUWkNPMEZCUTNCRExGZEJRVThzU1VGQlNTOUNMRWRCUVc5Q0xFdEJRVXNzWjBKQlFXZENMRXRCUVVzc1kwRkJZenRCUVVGQkxFVkJRek5GTzBGQlFVRTdRVUZCUVN4RlFVVkJMRWxCUVZjc1QwRkJNa0k3UVVGRGJFTXNWMEZCVHl4SlFVRkpPRUlzUjBGQmJVSXNTMEZCU3l4blFrRkJaMElzUzBGQlN5eGpRVUZqTzBGQlFVRXNSVUZETVVVN1FVRkJRVHRCUVVGQkxFVkJSVkU3UVVGQlFUdEJRVUZCTEVWQlJVRTdRVUZCUVR0QlFVRkJMRVZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZOUkN4WlFVRlphazhzUjBGQk9FUmFMRWRCUVdkRE8wRkJRemRITEZGQlFVY3NRMEZCUTFrN1FVRkJjMElzV1VGQlFTeEpRVUZKTEUxQlFVMHNiME5CUVc5RE8wRkJRM2hGTEZGQlFVY3NRMEZCUTFvN1FVRkJjMElzV1VGQlFTeEpRVUZKTEUxQlFVMHNiME5CUVc5RE8wRkJRM2hGTEZOQlFVc3NZMEZCWXp0QlFVTmlMRlZCUVVGblRpeEpRVUZsZGswc1JVRkJhMEpITEVOQlFXTTdRVUZEY2tRc1UwRkJTeXhwUWtGQmFVSnZUU3hIUVVOMFFpeExRVUZMTEdsQ1FVRnBRbWhPTzBGQlFVRXNSVUZETVVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZOVHl4VFFVRlRlbG9zUjBGQmQwTTdRVUZEY0VRc1VVRkJSeXhEUVVGRFFUdEJRVUZWTEZsQlFVRXNTVUZCU1N4TlFVRk5MSGRDUVVGM1FqdEJRVU14UXl4VlFVRkJlVzFDTEVsQlFXVjJUU3hGUVVGclFpeExRVUZMTEdOQlFXTTdRVUZETVVRc1YwRkJRWFZOTEVWQlFXRXNVVUZCVjNwdFFpeEhRVU5xUWl4SlFVRkpjVzlDTEVkQlFUQkNOVUlzUjBGQll5eExRVUZMTEdOQlFXTTdRVUZCUVN4RlFVTXhSVHRCUVVOS08wRkRPVU5QTEUxQlFVMHJRaXhIUVVGak8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZKZGtJc1dVRkJXVU1zUjBGQlZ6dEJRVU51UWl4VFFVRkxMRmxCUVZsQkxFZEJRMnBDTEV0QlFVc3NhVUpCUVdsQ0xFMUJRVTBzUzBGQlN5eFhRVU5xUXl4TFFVRkxMR1ZCUVdVc1EwRkJRME1zVFVGQlpTeEpRVUZKUml4SFFVRmpMRXRCUVVzc1ZVRkJWVVVzUTBGQlZTeERRVUZETEVkQlEyaEdMRXRCUVVzc2EwSkJRV3RDTEUxQlFVMHNTMEZCU3l4WFFVTnNReXhMUVVGTExHbENRVUZwUWl4TlFVRk5MRXRCUVVzc1YwRkRha01zUzBGQlN5eGxRVUZsTEUxQlFVMHNTMEZCU3l4WFFVTXZRaXhMUVVGTExHVkJRV1VzVFVGQlRTeExRVUZMTEZkQlF5OUNMRXRCUVVzc2JVSkJRVzFDTEUxQlFVMHZVaXhGUVVGVExFMUJRVTBzUzBGQlN5eGxRVUZqTEVOQlFVVXNSMEZEYkVVc1MwRkJTeXh0UWtGQmJVSXNUVUZCVFRCRExFZEJRVk1zVFVGQlRTeExRVUZMTEdWQlFXTXNRMEZCUlN4SFFVTnNSU3hMUVVGTExHMUNRVUZ0UWl4TlFVRk5ZaXhIUVVGVExFMUJRVTBzUzBGQlN5eGxRVUZqTEVOQlFVVXNSMEZEYkVVc1MwRkJTeXhwUTBGQmFVTXNUVUZETTBJc1MwRkJTeXhWUVVGVkxFbEJRVWtzUTBGQlEyNVhMRTFCUVUwN1FVRkROMElzV1VGQlRYTnRRaXhKUVVGdFFpeEpRVUZKU0N4SFFVRmpibTFDTEVOQlFVTXNSMEZEZEVOMWJVSXNTVUZCVlN4UFFVRlBkbTFDTzBGQlEzWkNMRlZCUVVsMWJVSXNUVUZCV1R0QlFVTmFMR1ZCUVU5RUxFVkJRV2xDTzBGQlJYWkNMRlZCUVVsRExFMUJRVms3UVVGRGFrSXNaVUZCVDBRc1JVRkJhVUk3UVVGRmRrSXNWVUZCU1VNc1RVRkJXVHRCUVVOcVFpeGxRVUZQUkN4RlFVRnBRanRCUVVWMlFpeFZRVUZKZEcxQ0xHRkJRV0U3UVVGRGJFSXNaVUZCVDNOdFFpeEZRVUZwUWp0QlFVVjJRaXhWUVVGSmRHMUNMR0ZCUVdGelZUdEJRVU5zUWl4bFFVRlBaMU1zUlVGQmFVSTdRVUZGZGtJc1ZVRkJTWFJ0UWl4aFFVRmhaMWc3UVVGRGJFSXNaVUZCVDNOUUxFVkJRV2xDTzBGQlJYWkNMRlZCUVVsMGJVSXNZVUZCWVcxWE8wRkJRMnhDTEdWQlFVOXRVU3hGUVVGcFFqdEJRVWQ0UWl4WlFVRk5MRWxCUVVrc1RVRkJUU3h6UkVGQmMwUXNUMEZCVDNSdFFpeEhRVUZITzBGQlFVRXNTVUZGY0Vjc1EwRkJZU3hIUVVWTUxFdEJRVXNzT0VKQlFUaENMRU5CUVVNeVJpeE5RVU42UWl4TFFVRkxMRlZCUTFBc1NVRkJTU3hEUVVGRE0wWXNUVUZCVFN4SlFVRkpiVzFDTEVkQlFXTnViVUlzUTBGQlF5eERRVUZETEVWQlF5OUNMRWxCUVVrc1EwRkJRMEVzVFVGQlRVRXNSVUZCUlN4bFFVRmxNa1lzUTBGQlNTeERRVUZETEVkQlJURkRMRXRCUVVzc2FVSkJRV2xDTEVOQlFVTkJMRTFCUVZNN1FVRkROVUlzV1VGQlRTOUdMRWxCUVZNclJpeEZRVUZMTEVsQlFVazdRVUZEZUVJc1lVRkJTU3hMUVVGTExEWkNRVU5NTEV0QlFVc3NNRUpCUVRCQ0wwWXNRMEZCVFN4SFFVVjZReXhMUVVGTExHdENRVUZyUWtFc1EwRkJUU3hIUVVONlFpeExRVUZMTERSQ1FVTk1MRXRCUVVzc2VVSkJRWGxDUVN4RFFVRk5MRWRCUldwRFFUdEJRVUZCTEVsQlEyNUNMRWRCUTFFc1MwRkJTeXhuUWtGQlowSXNRMEZCUXl0R0xFMUJRVk03UVVGRE0wSXNXVUZCVFRablFpeEpRVUZaTEV0QlFVczdRVUZEZGtJc1lVRkJTMEVzU1VGSFJVRXNSVUZCVlN4TlFVRk5MRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU40YlVJc1RVRkJUVEpHTEVWQlFVdG5WQ3hIUVVGelFqTlpMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJSakZFTzBsQlIzWkNMRWRCUTFFc1MwRkJTeXhsUVVGbExFTkJRVU15Uml4TlFVRlRPMEZCUXpGQ0xGbEJRVTFuVVN4SlFVRlRMRXRCUVVzc1kwRkJZMmhSTEVOQlFVazdRVUZEZEVNc1ZVRkJTV2RSTEVWQlFVOHNVMEZCVXp0QlFVTm9RaXhsUVVGUFFTeEZRVUZQTEVOQlFVTTdRVUZCUVN4SlFVc3ZRaXhIUVVOUkxFdEJRVXNzYjBKQlFXOUNMRU5CUVVNNFVTeE5RVUZUTzBGQlF5OUNMRmxCUVUxRExFbEJRVk5FTEVWQlFVczdRVUZEY0VJc1ZVRkJTVVU3UVVGRFNpeFpRVUZOUXl4SlFVRlRTRHRCUVVsbUxFMUJTRWxITEV0QlFWVkJMRVZCUVU4c2JVSkJRMnBDUkN4SlFVRnhRa01zUlVGQlR5eHBRa0ZGTTBJc1MwRkJTeXhoUVVWV0xFOUJRVThzVVVGQlVTeExRVUZMTEZOQlFWTXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRM1pzUWl4SFFVRkhla1FzUTBGQlF5eE5RVUZOTzBGQlF5OURMR05CUVUxclNTeEpRVUZsTkdkQ0xFVkJRVTl5YkVJc1EwRkJRenRCUVVNM1FpeFJRVUZKZVVVc1NVRkRRVUVzUlVGQllTeEpRVUZKY1dkQ0xFZEJRV04yYjBJc1EwRkJReXhEUVVGRExFbEJSVFZDSzI5Q0xFMUJRMHhCTEVWQlFXMUNkR3hDTEVOQlFVTXNTVUZCU1hwRU8wRkJRVUVzVFVGRk5VTXNRMEZCWVR0QlFVRkJMRWxCUTJJN1FVRkJRU3hGUVVOTE8wRkJRMHc3UVVOb1IwOHNUVUZCVFdsd1FpeEZRVUYzUWp0QlFVRkJMRVZCUTJwRExHTkJRV003UVVGRFZpeFRRVUZMTEZOQlFWTXNTVUZEWkN4TFFVRkxMRzFDUVVGdFFpeERRVUZEYm05Q0xFZEJRVXR2UWl4TlFVRlZPMEZCUTNCRExFMUJRVUZ3UWl4TFFVRlBiMElzUzBGQlV5eExRVUZMTEd0Q1FVRnJRbkJDTEVOQlFVY3NSMEZETVVOdlFpeExRVUZUTEV0QlFVc3NUMEZCVHl4TFFVRkxMRWxCUVVsQkxFbEJRVkVzUjBGRGRFTndRaXhMUVVGUGIwSXNTMEZCVXl4TFFVRkxMRTlCUVU4c1MwRkJTeXR0UWl4RlFVRjNRaXhwUWtGQmFVSTdRVUZCUVN4SlFVTjBSaXhIUVVOUkxFdEJRVXNzYjBKQlFXOUNMRU5CUVVOdWIwSXNUVUZCVVR0QlFVTTVRaXhYUVVGTExFOUJRVThzUzBGQlN5eEpRVUZKUVN4TFFVRlBPMEZCUVVFc1NVRkRlRU1zUjBGRFVTeExRVUZMTEc5Q1FVRnZRaXhEUVVGRFFTeEhRVUZMYjBJc1RVRkJWVHRCUVVOeVF5eFpRVUZOWjI1Q0xFbEJRV2xDYUc1Q0xFdEJRVlU3UVVGRGFrTXNUVUZCUVhCQ0xFdEJRVTl2YjBJc1MwRkJhMElzUzBGQlN5eHJRa0ZCYTBKd2IwSXNRMEZCUnl4SFFVTnVSRzl2UWl4TFFVRnJRaXhMUVVGTExFOUJRVThzUzBGQlN5eEhRVUZIYUc1Q0xFZEJRVThzUjBGRE4wTndRaXhMUVVOSmIyOUNMRXRCUTBFc1MwRkJTeXhQUVVGUExFdEJRVXRFTEVWQlFYZENMR2xDUVVGcFFqdEJRVUZCTEVsQlF6RkZMRWRCUTFFc1MwRkJTeXh0UWtGQmJVSXNRMEZCUTI1dlFpeEhRVUZMYjBJc1RVRkJWVHRCUVVOd1F5eE5RVUZCY0VJc1MwRkJUMjlDTEV0QlFWTXNTMEZCU3l4clFrRkJhMEp3UWl4RFFVRkhMRWRCUXpGRGIwSXNTMEZCVXl4TFFVRkxMRTlCUVU4c1MwRkJTeXhIUVVGSFFTeEhRVUZQTEVkQlEzQkRjRUlzUzBGQlQyOUNMRXRCUVZNc1MwRkJTeXhQUVVGUExFdEJRVXNyYlVJc1JVRkJkMElzYVVKQlFXbENPMEZCUVVFc1NVRkRkRVlzUjBGRFVTeExRVUZMTEdsQ1FVRnBRaXhEUVVGRGJtOUNMRWRCUVV0dlFpeE5RVUZWTzBGQlEyeERMRTFCUVVGd1FpeExRVUZQYjBJc1MwRkJVeXhMUVVGTExHdENRVUZyUW5CQ0xFTkJRVWNzUjBGRE1VTnZRaXhMUVVGVExFdEJRVXNzVDBGQlR5eExRVUZMTEVsQlFVbEJMRWxCUVZFc1IwRkRkRU53UWl4TFFVRlBiMElzUzBGQlV5eExRVUZMTEU5QlFVOHNTMEZCU3l0dFFpeEZRVUYzUWl4cFFrRkJhVUk3UVVGQlFTeEpRVU4wUml4SFFVTlJMRXRCUVVzc2FVSkJRV2xDTEVOQlFVTnViMElzUjBGQlMyOUNMRTFCUVZVN1FVRkRiRU1zVFVGQlFYQkNMRXRCUVU5dlFpeExRVUZUTEV0QlFVc3NhMEpCUVd0Q2NFSXNRMEZCUnl4SFFVTXhRMjlDTEV0QlFWTXNTMEZCU3l4UFFVRlBMRXRCUVVzc1NVRkJTVUVzUlVGQlRTeFpRVUZYTEVsQlFVc3NSMEZEY0VSd1FpeExRVUZQYjBJc1MwRkJVeXhMUVVGTExFOUJRVThzUzBGQlN5dHRRaXhGUVVGM1FpeHBRa0ZCYVVJN1FVRkJRU3hKUVVOMFJpeEhRVU5STEV0QlFVc3NjVUpCUVhGQ0xFTkJRVU51YjBJc1IwRkJTMjlDTEUxQlFWVTdRVUZEZEVNc1RVRkJRWEJDTEV0QlFVOXZRaXhMUVVGVExFdEJRVXNzYTBKQlFXdENjRUlzUTBGQlJ5eEhRVU14UTI5Q0xFdEJRVk1zUzBGQlN5eFBRVUZQTEV0QlFVc3NTVUZCU1VFc1JVRkJUU3hUUVVGUkxFbEJRVXNzUjBGRGFrUndRaXhMUVVGUGIwSXNTMEZCVXl4TFFVRkxMRTlCUVU4c1MwRkJTeXR0UWl4RlFVRjNRaXhwUWtGQmFVSTdRVUZCUVN4SlFVTjBSaXhIUVVOUkxFdEJRVXNzY1VKQlFYRkNMRU5CUVVOdWIwSXNSMEZCUzI5Q0xFMUJRVlU3UVVGRGRFTXNUVUZCUVhCQ0xFdEJRVTl2UWl4TFFVRlRMRXRCUVVzc2EwSkJRV3RDY0VJc1EwRkJSeXhIUVVNeFEyOUNMRXRCUVZNc1MwRkJTeXhQUVVGUExFdEJRVXNzU1VGQlNVRXNSVUZCVFN4VFFVRlJMRWxCUVVzc1IwRkRha1J3UWl4TFFVRlBiMElzUzBGQlV5eExRVUZMTEU5QlFVOHNTMEZCU3l0dFFpeEZRVUYzUWl4cFFrRkJhVUk3UVVGQlFTeEpRVU4wUml4SFFVTlJMRXRCUVVzc2NVSkJRWEZDTEVOQlFVTnViMElzUjBGQlMyOUNMRTFCUVZVN1FVRkRkRU1zVFVGQlFYQkNMRXRCUVU5dlFpeExRVUZUTEV0QlFVc3NhMEpCUVd0Q2NFSXNRMEZCUnl4SFFVTXhRMjlDTEV0QlFWTXNTMEZCU3l4UFFVRlBMRXRCUVVzc1NVRkJTVUVzUlVGQlRTeFRRVUZSTEVsQlFVc3NSMEZEYWtSd1FpeExRVUZQYjBJc1MwRkJVeXhMUVVGTExFOUJRVThzUzBGQlN5dHRRaXhGUVVGM1FpeHBRa0ZCYVVJN1FVRkJRU3hKUVVOMFJpeEhRVU5STEV0QlFVc3NhVUpCUVdsQ0xFTkJRVU51YjBJc1RVRkJVVHRCUVVNelFpeE5RVUZCUVN4TFFVRlBMRXRCUVVzc2EwSkJRV3RDUVN4RFFVRkhMRWRCUTJwRExFdEJRVXNzVDBGQlR5eExRVUZMTEUxQlFVMHNSMEZEZGtKQkxFdEJRVThzUzBGQlN5eFBRVUZQTEV0QlFVdHRiMElzUlVGQmQwSXNhVUpCUVdsQ08wRkJRVUVzU1VGRE4wVXNSMEZEVVN4TFFVRkxMRzFEUVVGdFF5eERRVUZEYm05Q0xFZEJRVXRwV0N4TlFVRlhPMEZCUTNKRUxFMUJRVWxCTEUxQlEwRnFXQ3hMUVVGUExFdEJRVXNzYTBKQlFXdENRU3hEUVVGSExFZEJRMnBETEV0QlFVc3NUMEZCVHl4TFFVRkxMRWRCUVVjc1IwRkRjRUpwV0N4RlFVRlBMRkZCUVZFc1EwRkJReTlZTEVkQlFVZHRjRUlzVFVGQlVUdEJRVU4yUWl4aFFVRkxMR05CUVdNc1VVRkJWMjV3UWl4RFFVRkRMRWRCUXk5Q2JYQkNMRWxCUVUwc1NVRkJTWEJTTEVWQlFVOHNWVUZEWWl4TFFVRkxMRTlCUVU4c1MwRkJTMnRTTEVWQlFYZENMR2xDUVVGcFFqdEJRVUZCTEUxQlEyeEdMRU5CUVdsQ0xFZEJRMFFzUzBGQlN5eFBRVUZQTEV0QlFVc3NSMEZCUnl4SFFVTndRbTV2UWl4TFFVRlBMRXRCUVVzc1QwRkJUeXhMUVVGTGJXOUNMRVZCUVhkQ0xHbENRVUZwUWp0QlFVRkJMRWxCUldwR0xFZEJRMUVzUzBGQlN5eG5RMEZCWjBNc1EwRkJRMjV2UWl4SFFVRkxhVmdzVFVGQlZ6dEJRVU5zUkN4TlFVRkpRU3hOUVVOQmFsZ3NTMEZCVHl4TFFVRkxMR3RDUVVGclFrRXNRMEZCUnl4SFFVTnFReXhMUVVGTExFOUJRVThzUzBGQlN5eEhRVUZITEVkQlEzQkNhVmdzUlVGQlR5eFJRVUZSTEVOQlFVTXZXQ3hOUVVGTk8wRkJRMnhDTEdGQlFVc3NhVUpCUVdsQ0xGRkJRVmRCTEVOQlFVTXNSMEZEYkVNc1MwRkJTeXhQUVVGUExFdEJRVXRwY0VJc1JVRkJkMElzYVVKQlFXbENPMEZCUVVFc1RVRkRPVVVzUTBGQmFVSXNSMEZEUjJ4U0xFVkJRVThzVTBGQlV5eExRVVZvUWl4TFFVRkxMRTlCUVU4c1QwRkZhRUlzUzBGQlN5eFBRVUZQTEV0QlFVc3NSMEZCUnl4SFFVTndRbXBZTEV0QlFVOHNTMEZCU3l4UFFVRlBMRXRCUVV0dGIwSXNSVUZCZDBJc2FVSkJRV2xDTzBGQlFVRXNTVUZGYWtZc1IwRkRVU3hMUVVGTExHMUNRVUZ0UWl4RFFVRkRibTlDTEVkQlFVdHZRaXhOUVVGVk8wRkJRM0JETEUxQlFVbEJMRTFCUTBsd1FpeExRVU5CTEV0QlFVc3NhMEpCUVd0Q1FTeERRVUZITEVkQlJUbENMRXRCUVVzc0swSkJRMFFzUzBGQlN5dzBRa0ZCTkVKdlFpeERRVUZMTEVkQlF6RkRMRXRCUVVzc1QwRkJUeXhMUVVGTExFZEJRVWNzUjBGRGNFSXNTMEZCU3l3NFFrRkRSQ3hMUVVGTExESkNRVUV5UWtFc1IwRkJUeXhKUVVGSkxFZEJReTlEUVN4RlFVRk5MRlZCUVZVc1NVRkJTU3hIUVVOd1FpeExRVUZMTERoQ1FVRTRRaXhMUVVGTExESkNRVUV5UWtFc1EwRkJTeXhIUVVOd1JTeExRVUZMTEU5QlFVOHNVMEZCVXl4TFFVTnlRaXhMUVVGTExFOUJRVThzUzBGQlN5eFBRVUZQTEZOQlFWTXNRMEZCUXl4TlFVTTVRaXR0UWl4RlFVRjNRaXh4UWtGRk5VSXNTMEZCU3l4UFFVRlBMRTlCUldoQ0xFdEJRVXNzVDBGQlR5eExRVUZMTEVkQlFVY3NSMEZEY0VKdWIwSXNTMEZCVHl4TFFVRkxMRTlCUVU4c1MwRkJTMjF2UWl4RlFVRjNRaXhwUWtGQmFVSTdRVUZCUVN4SlFVVnFSaXhIUVVOUkxFdEJRVXNzYVVKQlFXbENMRU5CUVVOdWIwSXNUVUZCVVdsWUxFMUJRVmM3UVVGRGRFTXNWVUZCU1VFc1JVRkJUeXhUUVVGVExFZEJRVWM3UVVGRGJrSXNZMEZCVFRaUkxFbEJRVmszVVN4RlFVTmlMRTlCUVU4c1EwRkJRek5XTEUxQlFVMUJMRTFCUVUwc1RVRkJVeXhGUVVNM1FpeEpRVUZKTEVOQlFVTkJMRTFCUVUwc1IwRkJSMEVzUjBGQlJ6dEJRVU4wUWl4UlFVRkpkMjFDTEVWQlFWVXNVMEZCVXl4TFFVTnVRaXhMUVVGTExHbENRVUZwUWpsdVFpeEhRVUZMT0c1Q0xFVkJRVlVzVDBGQlR5eERRVUZEZUcxQ0xFZEJRVWRsTEUxQlFVMHNSMEZCUjJZc1RVRkJUV1VzUjBGQlJ5eERRVUZETzBGQlFVRTdRVUZCUVN4SlFVZDJSaXhIUVVOUkxFdEJRVXNzZFVKQlFYVkNMRTFCUTJwQ0xFdEJRVXNzTWtKQlFUSkNMRXRCUVVzc1QwRkJUeXhMUVVGTExFVkJRVVVzUTBGQlF5eEhRVVV2UkN4TFFVRkxMRFpDUVVFMlFpeERRVUZETmtzc1RVRkJVVHRCUVVOMlF5eFpRVUZOYjJJc1NVRkJZeXhKUVVGSkxGbEJRVmx3WWl4RlFVRkpMRTFCUVUwc1IwRkRlRU54WWl4SlFVRmhMRWxCUVVrc1YwRkJWMFFzUTBGQlZ6dEJRVU0zUXl4bFFVRlROVzlDTEVsQlFVa3NSMEZCUjBFc1NVRkJTWGRPTEVWQlFVa3NVVUZCVVhoT08wRkJRelZDTEZGQlFVRTJiMElzUlVGQlZ6ZHZRaXhEUVVGRExFbEJRVWwzVGl4RlFVRkpMRmRCUVZkNFRpeERRVUZETzBGQlJYQkRMR0ZCUVU4MGIwSTdRVUZCUVN4SlFVTnVRaXhIUVVOUkxFdEJRVXNzYzBKQlFYTkNMRU5CUVVOc2JrSXNUVUZCVlR0QlFVTnNReXhWUVVGTFFUdEJRVVZNTEcxQ1FVRlhjRUlzUzBGQlQyOUNPMEZCUTJRc1pVRkJTeXhqUVVGamNFSXNSMEZCUzI5Q0xFVkJRVTF3UWl4RFFVRkhMRU5CUVVNN1FVRkJRU3hKUVVWc1JDeEhRVU5STEV0QlFVc3NPRUpCUVRoQ0xFTkJRVU5CTEVkQlFVdHZRaXhOUVVGVk8wRkJReTlETEUxQlFVbHdRaXhMUVVOQkxFdEJRVXNzYTBKQlFXdENRU3hEUVVGSExFZEJSVGxDTEV0QlFVc3NUMEZCVHl4TFFVRkxMRXRCUVVzc1ZVRkJWVzlDTEVOQlFVc3NSMEZCUnl0dFFpeEZRVUYzUWl4cFFrRkJhVUk3UVVGQlFTeEpRVU0zUml4SFFVTlJMRXRCUVVzc1owSkJRV2RDTEVOQlFVTnViMElzUjBGQlMyOUNMRTFCUVZVN1FVRkRha01zVlVGQk1rSkJMRXRCUVZVc1RVRkJUVHRCUVVOMlF5eGpRVUZOZFZnc1NVRkJXU3hQUVVGUGRsZzdRVUZEZWtJc1dVRkJTWFZZTEUxQlFXTTdRVUZEWkN4bFFVRkxMR3RDUVVGclFqTlpMRWRCUVV0dlFpeERRVUZMTzBGQlFVRXNhVUpCUlRWQ2RWZ3NUVUZCWXp0QlFVTnVRaXhsUVVGTExHbENRVUZwUWpOWkxFZEJRVXR2UWl4RFFVRkxPMEZCUVVFc2FVSkJSVE5DUVN4aFFVRnBRanRCUVVOMFFpeGxRVUZMTEdWQlFXVndRaXhIUVVGTGIwSXNRMEZCU3p0QlFVRkJMR2xDUVVWNlFrRXNZVUZCYVVKM1ZUdEJRVU4wUWl4bFFVRkxMRzFDUVVGdFFqVldMRWRCUVV0dlFpeERRVUZMTzBGQlFVRXNhVUpCUlRkQ1FTeGhRVUZwUW10WU8wRkJRM1JDTEdWQlFVc3NiVUpCUVcxQ2RGa3NSMEZCUzI5Q0xFTkJRVXM3UVVGQlFTeHBRa0ZGTjBKQkxHRkJRV2xDY1ZjN1FVRkRkRUlzWlVGQlN5eHRRa0ZCYlVKNldDeEhRVUZMYjBJc1EwRkJTenRCUVVGQkxHbENRVVUzUW5WWUxFMUJRV003UVVGRGJrSXNaVUZCU3l4cFFrRkJhVUl6V1N4SFFVRkxiMElzUTBGQlN6dEJRVUZCTEdsQ1FVVXpRaXhOUVVGTkxGRkJRVkZCTEVOQlFVczdRVUZEZUVJc1pVRkJTeXhwUTBGQmFVTndRaXhIUVVGTGIwSXNRMEZCU3p0QlFVRkJMR2xDUVVVelEzVllMRTFCUVdNN1FVRkRia0lzWlVGQlN5dzBRa0ZCTkVJeldTeEhRVUZMYjBJc1EwRkJTenRCUVVGQk8wRkJSek5ETEdkQ1FVRk5MRWxCUVVrc1RVRkJUU3gxUkVGQmRVUjFXQ3hIUVVGWE8wRkJRVUU3UVVGSmRFWXNZVUZCU3l4bFFVRmxNMWtzUTBGQlJ6dEJRVUZCTEVsQlJYWkRPMEZCUVVFc1JVRkRTenRCUVVOTU8wRkJRMEZ0YjBJc1JVRkJkMElzYjBKQlFXOUNPMEZEY0V4eVF5eE5RVUZOU3l4SFFVRnhRanRCUVVGQkxFVkJRemxDTEhOQ1FVRnpRanRCUVVOc1FpeFhRVUZQTzBGQlFVRXNSVUZEVmp0QlFVRkJMRVZCUTBRc2FVSkJRV2xDZEd0Q0xFZEJRV0ZETEVkQlFWTTdRVUZEYmtNc1VVRkJTMEU3UVVGSFFTeFZRVUZMUkR0QlFVZE1MRmxCUVVrc1MwRkJTeXh2UWtGQmNVSXNUVUZCUzBFN1FVRkRjRU1zWjBKQlFVMHNTVUZCU1N4TlFVRk5MR05CUVdNc1MwRkJTeXh2UWtGQmNVSXNaMEpCUVdVN1FVRkJRVHRCUVVoMlJTeGpRVUZOTEVsQlFVa3NUVUZCVFN3eVEwRkJNa003UVVGQlFUdEJRVWd6UkN4WlFVRk5MRWxCUVVrc1RVRkJUU3h6UTBGQmMwTTdRVUZSTVVRc1YwRkJUeXhKUVVGSmRXcENMRWRCUVdNc1MwRkJTeXg1UWtGQmVVSjBha0lzUTBGQlR5eERRVUZETzBGQlFVRXNSVUZEYkVVN1FVRkJRU3hGUVVORUxIbENRVUY1UWtFc1IwRkJVenRCUVVVNVFpeFZRVUZOYzJ0Q0xFbEJSRlVzU1VGQlNTeGpRVU5UTEU5QlFVOTBhMElzUTBGQlR6dEJRVU16UXl4WFFVRlBMRXRCUVVzc1RVRkJUWE5yUWl4RFFVRlpPMEZCUVVFc1JVRkRha003UVVGRFREdEJRM0pDVHl4TlFVRk5ReXhIUVVFclFqdEJRVUZCTEVWQlEzaERMSE5DUVVGelFqdEJRVU5zUWl4WFFVRlBPMEZCUVVFc1JVRkRWanRCUVVGQkxFVkJRMFFzZFVKQlFYVkNlR3RDTEVkQlFXRTdRVUZEYUVNc1VVRkJTMEU3UVVGSFFTeFZRVUZKTEV0QlFVc3NiMEpCUVhGQ0xFMUJRVXRCTzBGQlEzQkRMR05CUVUwc1NVRkJTU3hOUVVGTkxHTkJRV01zUzBGQlN5eHZRa0ZCY1VJc1owSkJRV1U3UVVGQlFUdEJRVWgyUlN4WlFVRk5MRWxCUVVrc1RVRkJUU3d5UTBGQk1rTTdRVUZMTDBRc1YwRkJUeXhKUVVGSmFXdENMRVZCUVhWQ08wRkJRVUVzUlVGRGNrTTdRVUZEVER0QlExQlBMRTFCUVUxUkxFZEJRVTA3UVVGQlFUdEJRVUZCTEVWQlJWQTdRVUZCUVR0QlFVRkJMRVZCUlVFN1FVRkJRVHRCUVVGQkxFVkJSVUU3UVVGQlFUdEJRVUZCTEVWQlJWSXNTVUZCVnl4VlFVRnBRenRCUVVONFF5eFhRVUZQTEVsQlFVbHVRaXhIUVVGelFpeExRVUZMTEdkQ1FVRm5RaXhMUVVGTExHTkJRV003UVVGQlFTeEZRVU0zUlR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eFpRVUZaT1U4c1IwRkJaME03UVVGREwwTXNVVUZCUnl4RFFVRkRRVHRCUVVGelFpeFpRVUZCTEVsQlFVa3NUVUZCVFN4dlEwRkJiME03UVVGRGVFVXNVMEZCU3l4cFFrRkJhVUlzU1VGRGRFSXNTMEZCU3l4alFVRmpMR05CUTI1Q0xFdEJRVXNzYVVKQlFXbENRU3hIUVVOMFFqRlNMRWRCUVRCQ01HaENMRVZCUVRoQ0xFZEJRM2hFZG1oQ0xFZEJRVFJDY1doQ0xFVkJRVzlDTEVkQlNUTkRMRXRCUVVFc1pVRkJaU3hWUVVGaE8wRkJRVUVzUlVGRGNrTTdRVUZEU2p0QlF6RkNUeXhOUVVGTlNTeEhRVUZ2UXp0QlFVRkJMRVZCUTNaRE8wRkJRVUVzUlVGRFFUdEJRVUZCTEVWQlJWSXNXVUZCV1M5R0xFZEJRV3RDTzBGQlF6VkNMRlZCUVUxblJ5eEpRVUZWTEVsQlFVa3ZTU3hIUVVGQk8wRkJRVUVzVFVGRGJFSXNTVUZCU1M5WExFZEJRV2RETzBGQlFVRXNTVUZCUVR0QlFVVjBReXhKUVVGQk9HWXNSVUZCVVN4VlFVRlZhRWNzUzBGQlZ5eEpRVU40UWl4TFFVRkJMRk5CUVZNc1NVRkJTVGhHTEVkQlFVMUZMRU5CUVU4c1IwRkRNVUlzUzBGQlFTeDFRa0ZEU0N4SlFVRkpjRVVzVFVGRFRpeExRVUZMTEhGQ1FVRnhRaXhWUVVGVkxFVkJRVVVzWlVGQlpTeERRVUZETEU5QlFVODdSVUZETDBRN1FVRkJRU3hGUVVWQkxFMUJRVTBzU1VGQlNYSnZRaXhIUVVGbFF5eEhRVUZ4UXp0QlFVTTFSQ3hWUVVGTk5rVXNTVUZCVXl4TlFVRk5MRXRCUVVzc1QwRkJUeXhSUVVNNVFpeFRRVUZUT1VVc1EwRkJTeXhGUVVOa0xHRkJRV0ZETEVOQlFWTXNSVUZEZEVJc1NVRkJTU3hMUVVGTExHOUNRVUZ2UWp0QlFVTjZRaXhYUVVGQk8wRkJRVUVzVFVGRFRDeFhRVUZYTmtVc1IwRkJVU3hyUWtGQmEwSTdRVUZCUVN4TlFVTnlReXhQUVVGUFFTeEhRVUZSTEdOQlFXTTdRVUZCUVN4SlFVRkJPMEZCUVVFc1JVRkZha003UVVGQlFTeEZRVVZCTEUxQlFVMHNUVUZEU2psRkxFZEJRMEZETEVkQlEwRkhMRWxCUVdkRExFbEJRMlk3UVVGVFppeFpRVkpoTEUxQlFVMHNTMEZCU3l4UFFVRlBMRkZCUXpsQ0xGTkJRVk5LTEVOQlFVc3NSVUZEWkN4aFFVRmhReXhEUVVGVExFVkJRM1JDTEUxQlFVMHNTVUZCU1R0QlFVRkJMRTFCUTFRc1UwRkJVeXhMUVVGTExIRkNRVUZ4UWp0QlFVRkJMRTFCUTI1RExHbENRVUZwUWl4RlFVRkZMRkZCUVZGSExFbEJRVmNzWVVGQllTeGhRVUZoTzBGQlFVRXNTVUZCUVN4RFFVTnFSU3hKUVVWUExFOUJRVThzU1VGQlNTeERRVUZETEVWQlFVVXNTVUZCUVhsRExFZEJRVWtzWVVGQlFUWndRaXhIUVVGaExGVkJRVUYwYzBJc1UwRkJaMEk3UVVGQlFTeE5RVU55UkN4SlFVRkplVU1zUzBGQlRUdEJRVUZCTEUxQlExWXNUVUZCVFRad1FpeExRVUZsTzBGQlFVRXNUVUZEY2tJc1ZVRkJWU3hEUVVGRExFTkJRVU4wYzBJN1FVRkJRVUVzU1VGQlFTeEZRVU5hTEV0QlFVc3NRMEZCUVR0QlFVRkJMRVZCUlZnN1FVRkJRU3hGUVVWQkxFMUJRVTBzVDBGRFNrb3NSMEZEUVVNc1IwRkRRVThzUjBGRFpUdEJRVU5VTEZWQlFVRjNSaXhKUVVGUExFbEJRVWx6YVVJN1FVRkRha0lzU1VGQlFYUnBRaXhGUVVGTExGTkJRVk40Uml4SFFVTmtMRTFCUVUwc1MwRkJTeXhQUVVGUFVpeEhRVUZQUXl4SFFVRlhLMFlzUTBGQlNUdEJRVUZCTEVWQlJURkRPMEZCUVVFc1JVRkZRU3hOUVVGTkxGTkJRMHBvUnl4SFFVTkJReXhIUVVOQlR5eEhRVU5sTzBGQlExUXNWVUZCUVhkR0xFbEJRVThzU1VGQlNYTnBRanRCUVVOcVFpeEpRVUZCZEdsQ0xFVkJRVXNzVjBGQlYzaEdMRWRCUTJoQ0xFMUJRVTBzUzBGQlN5eFBRVUZQVWl4SFFVRlBReXhIUVVGWEswWXNRMEZCU1R0QlFVRkJMRVZCUlRGRE8wRkJRVUVzUlVGRlFTeE5RVUZqTEU5QlExcG9SeXhIUVVOQlF5eEhRVU5CSzBZc1IwRkRaVHRCUVVOV0xGTkJRVUVzVDBGQlR5eFJRVU5VTEZOQlFWTm9SeXhEUVVGTExFVkJRMlFzWVVGQllVTXNRMEZCVXl4RlFVTjBRaXhMUVVGTEswWXNSMEZCVFN4TFFVRkxMRzlDUVVGdlFqdEJRVUZCTEVWQlEzcERPMEZCUTBZN1FVTndSazhzVTBGQlV6SnRRaXhIUVVGdlJXcEZMRWRCUVRSRk8wRkJRelZLTEUxQlFVY3NRMEZCUTBFN1FVRkJhVUlzVlVGQlFTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRemxFTEZOQlFVOHNTVUZCU1d0RkxFZEJRWGRETzBGQlEzWkVPMEZEUms4c1RVRkJUVU1zVjBGQmVVTjBhRUlzUlVGQmJVUTdRVUZCUVR0QlFVRkJMRVZCUlRkR08wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0U0xFbEJRVmNzYVVKQlFXbENPMEZCUTNoQ0xGZEJRVThzUzBGQlN6dEJRVUZCTEVWQlEyaENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NaVUZCWlhaSExFZEJRV2RETzBGQlEzUkVMRk5CUVVzc2EwSkJRV3RDUVR0QlFVRkJMRVZCUXpOQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZKVHl4alFVRmpPMEZCUTFnc1lVRkRUaXhMUVVGTExHdENRVUZyUWp0RlFVTXpRanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRk5CUVZNN1FVRkRhRUlzVjBGQlR5eExRVUZMTzBGQlFVRXNSVUZEYUVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4UFFVRlBRU3hIUVVFNFJEdEJRVU0xUlN4VFFVRkxMRlZCUVZWQk8wRkJRVUVzUlVGRGJrSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMDhzZDBKQlFXOUZPMEZCUTJoRkxGZEJRVUU3UVVGQlFTeE5RVU5JTEZGQlFWVXNRMEZCUzNwQ0xFMUJRVUU3UVVGQlR5eGhRVUZCTEZOQlFWTkJMRVZCUVVVc05FSkJRWEZGYjNCQ0xFVkJRVzFGTzBGQlFVRXNUVUZCUnp0QlFVRkJMRWxCUVVFN1FVRkJRU3hGUVVWd1REdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxUeXhWUVVGVkwycENMRWRCUVc5RE8wRkJRMnBFTEZGQlFVY3NRMEZCUTBFN1FVRkJZeXhaUVVGQkxFbEJRVWtzVFVGQlRTdzBRa0ZCTkVJN1FVRkRha1FzU1VGQlFVRXNSVUZCUVN3NFFrRkJkVVVzVlVGQlZTeExRVUZMTEUxQlFVMHNSMEZETlVaQkxFVkJRVUVzYjBKQlFXOUNMRXRCUVVzc1kwRkJZenRCUVVGQkxFVkJRMnhFTzBGQlEwbzdRVU0xUkU4c1RVRkJUV2RyUWl4SFFVRnJSanRCUVVGQk8wRkJRVUVzUlVGRmJrWTdRVUZCUVR0QlFVRkJMRVZCUlVFN1FVRkJRVHRCUVVGQkxFVkJSVUU3UVVGQlFUdEJRVUZCTEVWQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMUlzU1VGQlZ5eHBRa0ZCYVVJN1FVRkRlRUlzVjBGQlR5eExRVUZMTzBGQlFVRXNSVUZEYUVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4bFFVRmxOVzVDTEVkQlFXZERPMEZCUTNSRUxGTkJRVXNzYTBKQlFXdENRVHRCUVVGQkxFVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkpUeXhqUVVGak8wRkJRMnBDTEZOQlFVc3NhMEpCUVd0Q08wVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0QkxFbEJRVmNzWlVGQlpUdEJRVU4wUWl4WFFVRlBMRXRCUVVzN1FVRkJRU3hGUVVOb1FqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExHRkJRV0ZCTEVkQlFUSkNPMEZCUXk5RExGTkJRVXNzWjBKQlFXZENRVHRCUVVGQkxFVkJRM3BDTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0UExIZENRVUZ2UlR0QlFVTm9SU3hYUVVGQk8wRkJRVUVzVFVGRFNDeFBRVUZUTEVOQlFVdDZRaXhOUVVGQk8wRkJRVThzWVVGQlFTeGxRVUZsUVN4RlFVRkZPMDFCUVd0Q08wRkJRVUVzVFVGRGVFUXNWVUZCV1N4RFFVRkxRU3hOUVVGQk8wRkJRVThzWVVGQlFTeFhRVUZYUVN4RlFVRkZPMDFCUVd0Q08wRkJRVUVzVFVGRGRrUXNZMEZCWjBJc1EwRkJTMEVzVFVGQlFUdEJRVUZQTEdGQlFVRXNaVUZCWlVFc1JVRkJSVHROUVVGclFqdEJRVUZCTEVsQlFVRTdRVUZCUVN4RlFVVjJSVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRmRCUVZjN1FVRkRiRUlzVjBGQlR5eExRVUZMTzBGQlFVRXNSVUZEYUVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4VFFVRlRlVUlzUjBGQk1rSTdRVUZETTBNc1UwRkJTeXhaUVVGWlFUdEJRVUZCTEVWQlEzSkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NaVUZCWlR0QlFVTjBRaXhYUVVGUExFdEJRVXM3UVVGQlFTeEZRVU5vUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFFTeEpRVUZYTEdGQlFXRkJMRWRCUVRKQ08wRkJReTlETEZOQlFVc3NaMEpCUVdkQ1FUdEJRVUZCTEVWQlEzcENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRQTEZWQlFWVTBSQ3hIUVVGdlF6dEJRVU5xUkN4UlFVRkhMRU5CUVVOQk8wRkJRV01zV1VGQlFTeEpRVUZKTEUxQlFVMHNORUpCUVRSQ08wRkJRMnBFTEVsQlFVRkJMRVZCUVVFc2FVSkJRV2xDTEZOQlFWTXNTMEZCU3l4WlFVRlpMRWRCUXpORFFTeEZRVUZCTEdsQ1FVRnBRaXhaUVVGWkxFdEJRVXNzVVVGQlVTeEhRVU14UTBFc1JVRkJRU3hwUWtGQmFVSXNaMEpCUVdkQ0xFdEJRVXNzV1VGQldTeEhRVU5zUkVFc1JVRkJRU3h2UWtGQmIwSXNTMEZCU3l4alFVRmpPMEZCUVVFc1JVRkRiRVE3UVVGRFNqdEJReTlHV1N4SlFVRkJhMnRDTEhWQ1FVRkJRU3hQUVVOU1FTeEZRVUZCTEV0QlFVc3NUVUZEVEVFc1JVRkJRU3hYUVVGWExGbEJRMWhCTEVWQlFVRXNZVUZCWVN4alFVTmlRU3hGUVVGQkxIVkNRVUYxUWl4M1FrRktaa0VzU1VGQlFVRXNUVUZCUVN4RFFVRkJMRU5CUVVFN1FVTkhUQ3hOUVVGTlF5eEhRVUZ6UlR0QlFVRkJPMEZCUVVFc1JVRkZka1U3UVVGQlFUdEJRVUZCTEVWQlJVRTdRVUZCUVR0QlFVRkJMRVZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMxSXNTVUZCVnl4cFFrRkJhVUk3UVVGRGVFSXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhsUVVGbEwyNUNMRWRCUVdkRE8wRkJRM1JFTEZOQlFVc3NhMEpCUVd0Q1FUdEJRVUZCTEVWQlF6TkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGSlR5eGpRVUZqTzBGQlEycENMRk5CUVVzc2EwSkJRV3RDTzBWQlF6TkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NZMEZCWXp0QlFVTnlRaXhYUVVGUExFdEJRVXM3UVVGQlFTeEZRVU5vUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFFTeEpRVUZYTEZsQlFWbEJMRWRCUVRKQ08wRkJRemxETEZOQlFVc3NaVUZCWlVFN1FVRkJRU3hGUVVONFFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxUeXgzUWtGQmIwVTdRVUZEYUVVc1YwRkJRVHRCUVVGQkxFMUJRMGdzWVVGQlpTeERRVUZMZWtJc1RVRkJRVHRCUVVGUExHRkJRVUVzWTBGQlkwRXNSVUZCUlR0TlFVRnJRanRCUVVGQkxFMUJRemRFTEZGQlFWVXNRMEZCUzBFc1RVRkJRVHRCUVVGUExHRkJRVUVzVTBGQlUwRXNSVUZCUlN4aFFVRnBSSFZ3UWl4RlFVRnJRenRCUVVGQkxFMUJRVWM3UVVGQlFTeEpRVUZCTzBGQlFVRXNSVUZGTDBnN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4VFFVRlRPMEZCUTJoQ0xGZEJRVThzUzBGQlN6dEJRVUZCTEVWQlEyaENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NUMEZCVHpsdVFpeEhRVUYxUkR0QlFVTnlSU3hUUVVGTExGVkJRVlZCTzBGQlFVRXNSVUZEYmtJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNWVUZCVlRSRUxFZEJRVzlETzBGQlEycEVMRkZCUVVjc1EwRkJRMEU3UVVGQll5eFpRVUZCTEVsQlFVa3NUVUZCVFN3MFFrRkJORUk3UVVGRGFrUXNTVUZCUVVFc1JVRkJRU3hwUWtGQmFVSXNaVUZCWlN4TFFVRkxMRmRCUVZjc1IwRkRhRVJCTEVWQlFVRXNaVUZCYlVRc1ZVRkJWU3hMUVVGTExFMUJRVTBzUjBGRGVFVkJMRVZCUVVFc2IwSkJRVzlDTEV0QlFVc3NZMEZCWXp0QlFVRkJMRVZCUTJ4RU8wRkJRMG83UVVNelJVOHNVMEZCVTI5clFpeEhRVUV3UkhSRkxFZEJRV3RGTzBGQlEzaEpMRTFCUVVjc1EwRkJRMEU3UVVGQmFVSXNWVUZCUVN4SlFVRkpMRTFCUVUwc0swSkJRU3RDTzBGQlF6bEVMRk5CUVU4c1NVRkJTWFZGTEVkQlFUaENPMEZCUXpkRE8wRkRSazhzVFVGQlRVTXNWMEZCWjBNemFFSXNSVUZCYlVRN1FVRkJRVHRCUVVGQkxFVkJSWEJHTzBGQlFVRTdRVUZCUVN4RlFVVkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRTTEVsQlFWY3NhVUpCUVdsQ08wRkJRM2hDTEZkQlFVOHNTMEZCU3p0QlFVRkJMRVZCUTJoQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1pVRkJaWFpITEVkQlFXZERPMEZCUTNSRUxGTkJRVXNzYTBKQlFXdENRVHRCUVVGQkxFVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkpUeXhqUVVGak8wRkJRMWdzWVVGRFRpeExRVUZMTEd0Q1FVRnJRanRGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExHVkJRV1U3UVVGRGRFSXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhoUVVGaFFTeEhRVUZyUkR0QlFVTjBSU3hUUVVGTExHZENRVUZuUWtFN1FVRkJRU3hGUVVONlFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxUeXgzUWtGQmIwVTdRVUZEYUVVc1YwRkJRVHRCUVVGQkxFMUJRMGdzVDBGQlV5eERRVUZMZWtJc1RVRkJRVHRCUVVGUExHRkJRVUVzWlVGQlpVRXNSVUZCUlN4bFFVRTRRM2x3UWl4RlFVRjVSRHRCUVVGQkxFMUJRVWM3UVVGQlFTeEpRVUZCTzBGQlFVRXNSVUZGZUVvN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNWVUZCVlhCclFpeEhRVUZ2UXp0QlFVTnFSQ3hSUVVGSExFTkJRVU5CTzBGQlFXTXNXVUZCUVN4SlFVRkpMRTFCUVUwc05FSkJRVFJDTzBGQlEycEVMRWxCUVVGQkxFVkJRVUVzYVVKQlFXZEVMRk5CUVZNc1MwRkJTeXhaUVVGWkxFZEJRekZGUVN4RlFVRkJMRzlDUVVGdlFpeExRVUZMTEdOQlFXTTdRVUZCUVN4RlFVTnNSRHRCUVVOS08wRkROVVJQTEUxQlFVMXhhMElzUjBGQmQwVTdRVUZCUVR0QlFVRkJMRVZCUlhwRk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdFNMRWxCUVZjc2FVSkJRV2xDTzBGQlEzaENMRmRCUVU4c1MwRkJTenRCUVVGQkxFVkJRMmhDTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0QkxFbEJRVmNzWlVGQlpXcHZRaXhIUVVGblF6dEJRVU4wUkN4VFFVRkxMR3RDUVVGclFrRTdRVUZCUVN4RlFVTXpRanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlNVOHNZMEZCWXp0QlFVTnFRaXhUUVVGTExHdENRVUZyUWp0RlFVTXpRanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMVHl4M1FrRkJiMFU3UVVGRGRrVXNWMEZCVHp0RlFVVllPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRQTEZWQlFWVTBSQ3hIUVVGdlF6dEJRVU5xUkN4UlFVRkhMRU5CUVVOQk8wRkJRV01zV1VGQlFTeEpRVUZKTEUxQlFVMHNORUpCUVRSQ08wRkJRMnBFTEVsQlFVRkJMRVZCUVVFc2IwSkJRVzlDTEV0QlFVc3NZMEZCWXp0QlFVRkJMRVZCUTJ4RU8wRkJRMG83UVVOMlEwOHNUVUZCVFhWclFpeFhRVUZ4UWpWb1FpeEZRVUZ0UkR0QlFVRkJPMEZCUVVFc1JVRkZla1U3UVVGQlFUdEJRVUZCTEVWQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMUlzU1VGQlZ5eHBRa0ZCYVVJN1FVRkRlRUlzVjBGQlR5eExRVUZMTzBGQlFVRXNSVUZEYUVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4bFFVRmxka2NzUjBGQlowTTdRVUZEZEVRc1UwRkJTeXhyUWtGQmEwSkJPMEZCUVVFc1JVRkRNMEk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVbFBMR05CUVdNN1FVRkRXQ3hoUVVOT0xFdEJRVXNzYTBKQlFXdENPMFZCUXpOQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1pVRkJaVHRCUVVOMFFpeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMR0ZCUVdGQkxFZEJRVEpDTzBGQlF5OURMRk5CUVVzc1owSkJRV2RDUVR0QlFVRkJMRVZCUTNwQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdFBMSGRDUVVGdlJUdEJRVU5vUlN4WFFVRkJPMEZCUVVFc1RVRkRTQ3hQUVVGVExFTkJRVXQ2UWl4TlFVRkJPMEZCUVU4c1lVRkJRU3hsUVVGbFFTeEZRVUZGTzAxQlFXdENPMEZCUVVFc1NVRkJRVHRCUVVGQkxFVkJSV2hGTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0UExGVkJRVlZ4Uml4SFFVRnZRenRCUVVOcVJDeFJRVUZITEVOQlFVTkJPMEZCUVdNc1dVRkJRU3hKUVVGSkxFMUJRVTBzTkVKQlFUUkNPMEZCUTJwRUxFbEJRVUZCTEVWQlFVRXNhVUpCUVdsQ0xGTkJRVk1zUzBGQlN5eFpRVUZaTEVkQlF6TkRRU3hGUVVGQkxHOUNRVUZ2UWl4TFFVRkxMR05CUVdNN1FVRkJRU3hGUVVOc1JEdEJRVU5LTzBGRGVrUlBMRk5CUVZOM2EwSXNSMEZCTkVNeFJTeEhRVUZ2UkR0QlFVTTFSeXhOUVVGSExFTkJRVU5CTzBGQlFXbENMRlZCUVVFc1NVRkJTU3hOUVVGTkxDdENRVUVyUWp0QlFVTTVSQ3hUUVVGUExFbEJRVWt5UlN4SFFVRm5RanRCUVVNdlFqdEJRMGhQTEZOQlFWTkRMRWRCUVRKRE5VVXNSMEZCYlVRN1FVRkRNVWNzVFVGQlJ5eERRVUZEUVR0QlFVRnBRaXhWUVVGQkxFbEJRVWtzVFVGQlRTd3JRa0ZCSzBJN1FVRkRPVVFzVTBGQlR5eEpRVUZKTmtVc1IwRkJaVHRCUVVNNVFqdEJRMFJQTEUxQlFVMURMRWRCUVhsRU8wRkJRVUU3UVVGQlFTeEZRVVV4UkR0QlFVRkJPMEZCUVVFc1JVRkZRVHRCUVVGQk8wRkJRVUVzUlVGRlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxVaXhKUVVGWExHbENRVUZwUWp0QlFVTjRRaXhYUVVGUExFdEJRVXM3UVVGQlFTeEZRVU5vUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFFTeEpRVUZYTEdWQlFXVjRiMElzUjBGQlowTTdRVUZEZEVRc1UwRkJTeXhyUWtGQmEwSkJPMEZCUVVFc1JVRkRNMEk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVbFBMR05CUVdNN1FVRkRha0lzVTBGQlN5eHJRa0ZCYTBJN1JVRkRNMEk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzA4c2QwSkJRVzlGTzBGQlEyaEZMRmRCUVVFN1FVRkJRU3hOUVVOSUxFOUJRVk1zUTBGQlMzcENMRTFCUVVFN1FVRkJUeXhoUVVGQkxGRkJRVkZCTEVWQlFVVXNaVUZCWjBNMmNFSXNSVUZCTWtNN1FVRkJRU3hOUVVGSE8wRkJRVUVzVFVGRE4wY3NUVUZCVVN4RFFVRkxOM0JDTEUxQlFVRTdRVUZCVHl4aFFVRkJMRTlCUVU5QkxFVkJRVVVzWlVGQkswSXJjRUlzUlVGQk1FTTdRVUZCUVN4TlFVRkhPMEZCUVVFc1NVRkJRVHRCUVVGQkxFVkJSV3BJTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0QkxFbEJRVmNzVVVGQlVUdEJRVU5tTEZkQlFVOHNTMEZCU3p0QlFVRkJMRVZCUTJoQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1RVRkJUWFJ2UWl4SFFVRnZRenRCUVVOcVJDeFRRVUZMTEZOQlFWTkJPMEZCUVVFc1JVRkRiRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhQUVVGUE8wRkJRMlFzVjBGQlR5eExRVUZMTzBGQlFVRXNSVUZEYUVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4TFFVRkxRU3hIUVVGdFF6dEJRVU12UXl4VFFVRkxMRkZCUVZGQk8wRkJRVUVzUlVGRGFrSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMDhzVlVGQlZUUkVMRWRCUVc5RE8wRkJRMnBFTEZGQlFVY3NRMEZCUTBFN1FVRkJZeXhaUVVGQkxFbEJRVWtzVFVGQlRTdzBRa0ZCTkVJN1FVRkRha1FzU1VGQlFVRXNSVUZCUVN4cFFrRkJhME1zVTBGQlV5eExRVUZMTEV0QlFVc3NSMEZEY2tSQkxFVkJRVUVzYVVKQlFXbERMRkZCUVZFc1MwRkJTeXhKUVVGSkxFZEJRMnhFUVN4RlFVRkJMRzlDUVVGdlFpeExRVUZMTEdOQlFXTTdRVUZCUVN4RlFVTnNSRHRCUVVOS08wRkRPVVZQTEUxQlFVMTVhMElzUjBGQk1FUTdRVUZCUVR0QlFVRkJMRVZCUlRORU8wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVN4RlFVVkJPMEZCUVVFN1FVRkJRU3hGUVVWQk8wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0U0xFbEJRVmNzYVVKQlFXbENPMEZCUTNoQ0xGZEJRVThzUzBGQlN6dEJRVUZCTEVWQlEyaENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NaVUZCWlhKdlFpeEhRVUZuUXp0QlFVTjBSQ3hUUVVGTExHdENRVUZyUWtFN1FVRkJRU3hGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCU1U4c1kwRkJZenRCUVVOcVFpeFRRVUZMTEd0Q1FVRnJRanRGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExGRkJRVkU3UVVGRFppeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRTFCUVUxQkxFZEJRVEpDTzBGQlEzaERMRk5CUVVzc1UwRkJVMEU3UVVGQlFTeEZRVU5zUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eDNRa0ZCYjBVN1FVRkRhRVVzVjBGQlFUdEJRVUZCTEUxQlEwZ3NUMEZCVXl4RFFVRkxla0lzVFVGQlFUdEJRVUZQTEdGQlFVRXNVVUZCVVVFc1JVRkJSVHROUVVGclFqdEJRVUZCTEUxQlEycEVMRTFCUVZFc1EwRkJTMEVzVFVGQlFUdEJRVUZQTEdGQlFVRXNUMEZCVDBFc1JVRkJSVHROUVVGclFqdEJRVUZCTEUxQlF5OURMRTFCUVZFc1EwRkJTMEVzVFVGQlFUdEJRVUZQTEdGQlFVRXNUMEZCVDBFc1JVRkJSVHROUVVGclFqdEJRVUZCTEUxQlF5OURMRlZCUVZrc1EwRkJTMEVzVFVGQlFUdEJRVUZQTEdGQlFVRXNWMEZCVjBFc1JVRkJSVHROUVVGclFqdEJRVUZCTEVsQlFVRTdRVUZCUVN4RlFVVXZSRHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRTlCUVU4N1FVRkRaQ3hYUVVGUExFdEJRVXM3UVVGQlFTeEZRVU5vUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFFTeEpRVUZYTEV0QlFVdDVRaXhIUVVFeVFqdEJRVU4yUXl4VFFVRkxMRkZCUVZGQk8wRkJRVUVzUlVGRGFrSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eFBRVUZQTzBGQlEyUXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhMUVVGTFFTeEhRVUV5UWp0QlFVTjJReXhUUVVGTExGRkJRVkZCTzBGQlFVRXNSVUZEYWtJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4WFFVRlhPMEZCUTJ4Q0xGZEJRVThzUzBGQlN6dEJRVUZCTEVWQlEyaENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NVMEZCVTBFc1IwRkJNa0k3UVVGRE0wTXNVMEZCU3l4WlFVRlpRVHRCUVVGQkxFVkJRM0pDTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0UExGVkJRVlUwUkN4SFFVRnZRenRCUVVOcVJDeFJRVUZITEVOQlFVTkJPMEZCUVdNc1dVRkJRU3hKUVVGSkxFMUJRVTBzTkVKQlFUUkNPMEZCUTJwRUxFbEJRVUZCTEVWQlFVRXNhVUpCUVdsQ0xGTkJRVk1zUzBGQlN5eExRVUZMTEVkQlEzQkRRU3hGUVVGQkxHbENRVUZwUWl4UlFVRlJMRXRCUVVzc1NVRkJTU3hIUVVOc1EwRXNSVUZCUVN4cFFrRkJhVUlzVVVGQlVTeExRVUZMTEVsQlFVa3NSMEZEYkVOQkxFVkJRVUVzYVVKQlFXbENMRmxCUVZrc1MwRkJTeXhSUVVGUkxFZEJRekZEUVN4RlFVRkJMRzlDUVVGdlFpeExRVUZMTEdOQlFXTTdRVUZCUVN4RlFVTnNSRHRCUVVOS08wRkRMMGRQTEUxQlFVMHlhMElzUjBGQmVVUTdRVUZCUVR0QlFVRkJMRVZCUlRGRU8wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0U0xFbEJRVmNzYVVKQlFXbENPMEZCUTNoQ0xGZEJRVThzUzBGQlN6dEJRVUZCTEVWQlEyaENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRCTEVsQlFWY3NaVUZCWlhadlFpeEhRVUZuUXp0QlFVTjBSQ3hUUVVGTExHdENRVUZyUWtFN1FVRkJRU3hGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCU1U4c1kwRkJZenRCUVVOcVFpeFRRVUZMTEd0Q1FVRnJRanRGUVVNelFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExGRkJRVkU3UVVGRFppeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRTFCUVUxQkxFZEJRVEpDTzBGQlEzaERMRk5CUVVzc1UwRkJVMEU3UVVGQlFTeEZRVU5zUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eDNRa0ZCYjBVN1FVRkRhRVVzVjBGQlFUdEJRVUZCTEUxQlEwZ3NUMEZCVXl4RFFVRkxla0lzVFVGQlFUdEJRVUZQTEdGQlFVRXNVVUZCVVVFc1JVRkJSVHROUVVGclFqdEJRVUZCTEVsQlFVRTdRVUZCUVN4RlFVVjZSRHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMVHl4VlFVRlZjVVlzUjBGQmIwTTdRVUZEYWtRc1VVRkJSeXhEUVVGRFFUdEJRVUZqTEZsQlFVRXNTVUZCU1N4TlFVRk5MRFJDUVVFMFFqdEJRVU5xUkN4SlFVRkJRU3hGUVVGQkxHbENRVUZwUWl4VFFVRlRMRXRCUVVzc1MwRkJTeXhIUVVOd1EwRXNSVUZCUVN4dlFrRkJiMElzUzBGQlN5eGpRVUZqTzBGQlFVRXNSVUZEYkVRN1FVRkRTanRCUTNwRVR5eE5RVUZOTm10Q0xFZEJRU3RETzBGQlFVRTdRVUZCUVN4RlFVVm9SRHRCUVVGQk8wRkJRVUVzUlVGRlFUdEJRVUZCTzBGQlFVRXNSVUZGUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFVpeEpRVUZYTEcxQ1FVRnRRanRCUVVNeFFpeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMR2xDUVVGcFFucHZRaXhIUVVFeVFqdEJRVU51UkN4VFFVRkxMRzlDUVVGdlFrRTdRVUZCUVN4RlFVTTNRanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMR2xDUVVGcFFqdEJRVU40UWl4WFFVRlBMRXRCUVVzN1FVRkJRU3hGUVVOb1FqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExHVkJRV1ZCTEVkQlFXZERPMEZCUTNSRUxGTkJRVXNzYTBKQlFXdENRVHRCUVVGQkxFVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkpUeXhqUVVGak8wRkJRMnBDTEZOQlFVc3NhMEpCUVd0Q08wVkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0UExIZENRVUZ2UlR0QlFVTm9SU3hYUVVGQk8wRkJRVUVzVFVGRFNDeHJRa0ZCYjBJc1EwRkJTM3BDTEUxQlFVRTdRVUZCVHl4aFFVRkJMRzFDUVVGdFFrRXNSVUZCUlR0TlFVRnJRanRCUVVGQkxFMUJRM1pGTEdsQ1FVRnRRaXhEUVVGTFFTeE5RVUZCTzBGQlFVOHNZVUZCUVN4clFrRkJhMEpCTEVWQlFVVTdUVUZCYTBJN1FVRkJRU3hKUVVGQk8wRkJRVUVzUlVGRk4wVTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMDhzVlVGQlZYRkdMRWRCUVc5RE8wRkJRMnBFTEZGQlFVY3NRMEZCUTBFN1FVRkJZeXhaUVVGQkxFbEJRVWtzVFVGQlRTdzBRa0ZCTkVJN1FVRkRha1FzU1VGQlFVRXNSVUZCUVN4cFFrRkJhVUlzYjBKQlFXOUNMRXRCUVVzc1owSkJRV2RDTEVkQlF6RkVRU3hGUVVGQkxHbENRVUZwUWl4dFFrRkJiVUlzUzBGQlN5eGxRVUZsTEVkQlEzaEVRU3hGUVVGQkxHOUNRVUZ2UWl4TFFVRkxMR05CUVdNN1FVRkJRU3hGUVVOc1JEdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkxRU3hKUVVGWExHdENRVUZyUWp0QlFVTjZRaXhYUVVGUExFdEJRVXM3UVVGQlFTeEZRVU5vUWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFFTeEpRVUZYTEdkQ1FVRm5RalZFTEVkQlFUSkNPMEZCUTJ4RUxGTkJRVXNzYlVKQlFXMUNRVHRCUVVGQkxFVkJRelZDTzBGQlEwbzdRVU16UlU4c1RVRkJUVEJ2UWl4SFFVRnpSRHRCUVVGQk8wRkJRVUVzUlVGRmRrUTdRVUZCUVR0QlFVRkJMRVZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMxSXNTVUZCVnl4dFFrRkJiVUk3UVVGRE1VSXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhwUWtGQmFVSXhiMElzUjBGQk1rSTdRVUZEYmtRc1UwRkJTeXh2UWtGQmIwSkJPMEZCUVVFc1JVRkROMEk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhwUWtGQmFVSTdRVUZEZUVJc1YwRkJUeXhMUVVGTE8wRkJRVUVzUlVGRGFFSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eGxRVUZsUVN4SFFVRm5RenRCUVVOMFJDeFRRVUZMTEd0Q1FVRnJRa0U3UVVGQlFTeEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTVThzWTBGQll6dEJRVU5xUWl4VFFVRkxMR3RDUVVGclFqdEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eDNRa0ZCYjBVN1FVRkRhRVVzVjBGQlFUdEJRVUZCTEUxQlEwZ3NhMEpCUVc5Q0xFTkJRVXQ2UWl4TlFVRkJPMEZCUVU4c1lVRkJRU3h0UWtGQmJVSkJMRVZCUVVVN1RVRkJhMEk3UVVGQlFTeEpRVUZCTzBGQlFVRXNSVUZGTDBVN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNWVUZCVlhGR0xFZEJRVzlETzBGQlEycEVMRkZCUVVjc1EwRkJRMEU3UVVGQll5eFpRVUZCTEVsQlFVa3NUVUZCVFN3MFFrRkJORUk3UVVGRGFrUXNTVUZCUVVFc1JVRkJRU3hwUWtGQmFVSXNiMEpCUVc5Q0xFdEJRVXNzWjBKQlFXZENMRWRCUXpGRVFTeEZRVUZCTEc5Q1FVRnZRaXhMUVVGTExHTkJRV003UVVGQlFTeEZRVU5zUkR0QlFVTktPMEZEZWtSUExFMUJRVTByYTBJc1IwRkJhMFE3UVVGQlFUdEJRVUZCTEVWQlJXNUVPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVXRTTEVsQlFWY3NhVUpCUVdsQ08wRkJRM2hDTEZkQlFVOHNTMEZCU3p0QlFVRkJMRVZCUTJoQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdEJMRWxCUVZjc1pVRkJaVE52UWl4SFFVRm5RenRCUVVOMFJDeFRRVUZMTEd0Q1FVRnJRa0U3UVVGQlFTeEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTVThzWTBGQll6dEJRVU5xUWl4VFFVRkxMR3RDUVVGclFqdEZRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFR5eDNRa0ZCYjBVN1FVRkRka1VzVjBGQlR6dEZRVVZZTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVV0UExGVkJRVlUwUkN4SFFVRnZRenRCUVVOcVJDeFJRVUZITEVOQlFVTkJPMEZCUVdNc1dVRkJRU3hKUVVGSkxFMUJRVTBzTkVKQlFUUkNPMEZCUTJwRUxFbEJRVUZCTEVWQlFVRXNiMEpCUVc5Q0xFdEJRVXNzWTBGQll6dEJRVUZCTEVWQlEyeEVPMEZCUTBvN1FVTjBRMDhzVTBGQlUyZHNRaXhIUVVGcFEyeEdMRWRCUVhsRE8wRkJRM1JHTEUxQlFVY3NRMEZCUTBFN1FVRkJhVUlzVlVGQlFTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRemxFTEZOQlFVOHNTVUZCU1N0RkxFZEJRVXM3UVVGRGNFSTdRVU5HVHl4TlFVRk5TU3hYUVVGdlEwd3NSMEZCYlVNN1FVRkJRVHRCUVVGQkxFVkJSWGhGTzBGQlFVRTdRVUZCUVN4RlFVVkJPMEZCUVVFN1FVRkJRU3hGUVVWQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4RlFVdFNMRWxCUVZjc1ZVRkJWVHRCUVVOcVFpeFhRVUZQTEV0QlFVczdRVUZCUVN4RlFVTm9RanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRkZCUVZGNGIwSXNSMEZCTWtJN1FVRkRNVU1zVTBGQlN5eFhRVUZYUVR0QlFVRkJMRVZCUTNCQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZKVHl4alFVRmpPMEZCUTFnN1JVRkRWanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZMUVN4SlFVRlhMRmRCUVZjN1FVRkRiRUlzVjBGQlR5eExRVUZMTzBGQlFVRXNSVUZEYUVJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwRXNTVUZCVnl4VFFVRlRRU3hIUVVFeVFqdEJRVU16UXl4VFFVRkxMRmxCUVZsQk8wRkJRVUVzUlVGRGNrSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJTMEVzU1VGQlZ5eFBRVUZQTzBGQlEyUXNWMEZCVHl4TFFVRkxPMEZCUVVFc1JVRkRhRUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCUzBFc1NVRkJWeXhMUVVGTFFTeEhRVUV5UWp0QlFVTjJReXhUUVVGTExGRkJRVkZCTzBGQlFVRXNSVUZEYWtJN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNkMEpCUVc5Rk8wRkJRMmhGTEZkQlFVRTdRVUZCUVN4TlFVRkRMRWRCUVVjc1RVRkJUU3h6UWtGQmMwSTdRVUZCUVN4TlFVTnVReXhUUVVGWExFTkJRVXQ2UWl4TlFVRkJPMEZCUVU4c1lVRkJRU3hWUVVGVlFTeEZRVUZGTzAxQlFXdENPMEZCUVVFc1RVRkRja1FzVlVGQldTeERRVUZMUVN4TlFVRkJPMEZCUVU4c1lVRkJRU3hYUVVGWFFTeEZRVUZGTzAxQlFXdENPMEZCUVVFc1RVRkRka1FzVFVGQlVTeERRVUZMUVN4TlFVRkJPMEZCUVU4c1lVRkJRU3hQUVVGUFFTeEZRVUZGTERSQ1FVRnJRM0Z4UWl4RlFVRm5RenRCUVVGQkxFMUJRVWM3UVVGQlFTeEpRVUZCTzBGQlFVRXNSVUZGTVVjN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlMwOHNWVUZCVldoc1FpeEhRVUZ2UXp0QlFVTnFSQ3hSUVVGSExFTkJRVU5CTzBGQlFXTXNXVUZCUVN4SlFVRkpMRTFCUVUwc05FSkJRVFJDTzBGQlEzaEVMRlZCUVUwc1ZVRkJWVUVzUTBGQlRTeEhRVU5tUVN4RlFVRkJMR2xDUVVGcFFpeFhRVUZYTEV0QlFVc3NUMEZCVHl4SFFVTjRRMEVzUlVGQlFTeHBRa0ZCYVVJc1dVRkJXU3hMUVVGTExGRkJRVkVzUjBGRE1VTkJMRVZCUVVFc09FSkJRVzlETEZGQlFWRXNTMEZCU3l4SlFVRkpPMEZCUVVFc1JVRkRhRVU3UVVGRFNqdEJRemxGVHl4VFFVRlRhMnhDTEVkQlFUWkVjRVlzUjBGQmNVVTdRVUZET1Vrc1RVRkJSeXhEUVVGRFFUdEJRVUZwUWl4VlFVRkJMRWxCUVVrc1RVRkJUU3dyUWtGQkswSTdRVUZET1VRc1UwRkJUeXhKUVVGSmJVVXNSMEZCYVVNN1FVRkRhRVE3UVVOSVR5eFRRVUZUYTBJc1IwRkJkMFJ5Uml4SFFVRm5SVHRCUVVOd1NTeE5RVUZITEVOQlFVTkJPMEZCUVdsQ0xGVkJRVUVzU1VGQlNTeE5RVUZOTEN0Q1FVRXJRanRCUVVNNVJDeFRRVUZQTEVsQlFVbHhSU3hIUVVFMFFqdEJRVU16UXp0QlEwaFBMRk5CUVZOcFFpeEhRVUZ2UkhSR0xFZEJRVFJFTzBGQlF6VklMRTFCUVVjc1EwRkJRMEU3UVVGQmFVSXNWVUZCUVN4SlFVRkpMRTFCUVUwc0swSkJRU3RDTzBGQlF6bEVMRk5CUVU4c1NVRkJTWGRGTEVkQlFYZENPMEZCUTNaRE8wRkRTVThzVFVGQlRXVXNSMEZCZVVJN1FVRkJRVHRCUVVGQkxFVkJSVEZDTzBGQlFVRTdRVUZCUVN4RlFVVkJPMEZCUVVFN1FVRkJRU3hGUVVWQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCVFVRc1dVRkJXUzlSTEVkQlFUaEVXaXhIUVVGblF6dEJRVU0zUnl4UlFVRkhMRU5CUVVOWk8wRkJRWE5DTEZsQlFVRXNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVU40UlN4UlFVRkhMRU5CUVVOYU8wRkJRWE5DTEZsQlFVRXNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVU40UlN4VFFVRkxMR05CUVdNN1FVRkRZaXhWUVVGQlowNHNTVUZCWlhaTkxFVkJRV3RDUnl4RFFVRmpPMEZCUTNKRUxGTkJRVXNzYVVKQlFXbENiMDBzUjBGRGRFSXNTMEZCU3l4cFFrRkJhVUpvVGp0QlFVRkJMRVZCUXpGQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRlBUeXhKUVVGSmFVNHNSMEZCYjBZMVRDeEhRVUZyUnp0QlFVTTNUQ3hWUVVGTmNVY3NTVUZCWXl4TFFVRkxPMEZCUVVFc1RVRkRja0oxUmp0QlFVRkJMRWxCUVVFc1IwRkZSVU1zU1VGQk1FUTdRVUZCUVN4TlFVTTFSQ3hMUVVGUGMwVTdRVUZCUVN4TlFVTlFMRXRCUVU5Rk8wRkJRVUVzU1VGQlFUdEJRVVZZTEZkQlFVOHNTMEZCU3l4blFrRkJaMElzVlVGQmRVTm9TeXhIUVVGaEswb3NTVUZCZVVSd1VTeEhRVUZwUWpaTUxFTkJRVmtzUzBGQlN5eFJRVUZSTEU5QlFVOHNTVUZCU1N4TlFVRk5MSGxDUVVGNVFpeERRVUZETzBGQlFVRXNSVUZEYkU4N1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNSVUZOVHl4M1FrRkJkMEpFTEVkQlFYbEhPMEZCUXpsSUxGVkJRVUYyUml4SlFVRmpMRWxCUVVrelNEdEJRVU40UWl4WFFVRkJNa2dzUlVGQldTeGpRVUZqTEV0QlFVc3NZVUZETDBKQkxFVkJRVmtzYVVKQlFXbENMRXRCUVVzc1owSkJRMnhEUVN4RlFVRlpMR0ZCUVdFMVJ5eEZRVUZYTEV0QlEzQkRORWNzUlVGQldTeFJRVUZSTEZOQlFWa3NRMEZCUXl4clFrRkJhMElzUjBGREwwTjFSaXhOUVVOWmRrWXNSVUZCUVN4clFrRkJhMEoxUml4RlFVRnhRaXhQUVVGUExFZEJRemxEZGtZc1JVRkJRU3hyUWtGQmEwSjFSaXhGUVVGeFFpeFBRVUZQTEVsQlJYWkVka1k3UVVGQlFTeEZRVU5ZTzBGQlEwbzdRVU0xUkU4c1UwRkJVMnRMTEVkQlFYbERlRVlzUjBGQmFVUTdRVUZEZEVjc1RVRkJSeXhEUVVGRFFUdEJRVUZwUWl4VlFVRkJMRWxCUVVrc1RVRkJUU3dyUWtGQkswSTdRVUZET1VRc1UwRkJUeXhKUVVGSmVVVXNSMEZCWVR0QlFVTTFRanRCUTBWUExFMUJRVTFuUWl4SFFVRjNRanRCUVVGQk8wRkJRVUVzUlVGRmVrSTdRVUZCUVR0QlFVRkJMRVZCUlVFN1FVRkJRVHRCUVVGQkxFVkJSVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRk5SQ3haUVVGWmFsSXNSMEZCT0VSYUxFZEJRV2RETzBGQlF6ZEhMRkZCUVVjc1EwRkJRMWs3UVVGQmMwSXNXVUZCUVN4SlFVRkpMRTFCUVUwc2IwTkJRVzlETzBGQlEzaEZMRkZCUVVjc1EwRkJRMW83UVVGQmMwSXNXVUZCUVN4SlFVRkpMRTFCUVUwc2IwTkJRVzlETzBGQlEzaEZMRk5CUVVzc1kwRkJZenRCUVVOaUxGVkJRVUZuVGl4SlFVRmxkazBzUlVGQmEwSkhMRU5CUVdNN1FVRkRja1FzVTBGQlN5eHBRa0ZCYVVKdlRTeEhRVU4wUWl4TFFVRkxMR2xDUVVGcFFtaE9PMEZCUVVFc1JVRkRNVUk3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRk5UeXhQUVVGUGFVNHNSMEZCYzBZMVRDeEhRVUVyUkR0QlFVTXZTaXhWUVVGTmNVY3NTVUZCWXl4TFFVRkxPMEZCUVVFc1RVRkRja0oxUmp0QlFVRkJMRWxCUVVFc1IwRkZSVU1zU1VGQk1FUTdRVUZCUVN4TlFVTTFSQ3hMUVVGUE1FVTdRVUZCUVN4TlFVTlFMRXRCUVU5Qk8wRkJRVUVzU1VGQlFUdEJRVVZZTEZkQlFVOHNTMEZCU3l4blFrRkJaMElzTWtKQlFUSkNiRXNzUjBGQllYSkhMRWRCUVdsQ05rd3NRMEZCV1N4TFFVRkxMRkZCUVZFc1QwRkJUeXhKUVVGSkxFMUJRVTBzZVVKQlFYbENMRU5CUVVNN1FVRkJRU3hGUVVNM1NqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hGUVUxUExESkNRVUV5UWtRc1IwRkJNa2M3UVVGRGJra3NWVUZCUVhaR0xFbEJRV01zU1VGQlNUTklPMEZCUTNoQ0xGZEJRVUV5U0N4RlFVRlpMR05CUVdNc1MwRkJTeXhoUVVNdlFrRXNSVUZCV1N4cFFrRkJhVUlzUzBGQlN5eG5Ra0ZEYkVOQkxFVkJRVmtzWVVGQllUVkhMRVZCUVZjc1VVRkRhRU50VFN4TlFVTlpka1lzUlVGQlFTeHJRa0ZCYTBKMVJpeEZRVUZ4UWl4UFFVRlBMRWRCUXpsRGRrWXNSVUZCUVN4clFrRkJhMEoxUml4RlFVRnhRaXhQUVVGUExFbEJSWFpFZGtZN1FVRkJRU3hGUVVOWU8wRkJRMG83UVVONFJFOHNVMEZCVTI5TExFZEJRWGRFTVVZc1IwRkJaMFU3UVVGRGNFa3NUVUZCUnl4RFFVRkRRVHRCUVVGcFFpeFZRVUZCTEVsQlFVa3NUVUZCVFN3clFrRkJLMEk3UVVGRE9VUXNVMEZCVHl4SlFVRkpiVVlzUjBGQk5FSTdRVUZETTBNN1FVTkxUeXhOUVVGTk4wTXNSMEZCYjBJN1FVRkJRVHRCUVVGQkxFVkJSWEpDTzBGQlFVRTdRVUZCUVN4RlFVVkJPMEZCUVVFN1FVRkJRU3hGUVVWQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRVZCVFVRc1dVRkJXVGxPTEVkQlFUaEVXaXhIUVVGblF6dEJRVU0zUnl4UlFVRkhMRU5CUVVOWk8wRkJRWE5DTEZsQlFVRXNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVU40UlN4UlFVRkhMRU5CUVVOYU8wRkJRWE5DTEZsQlFVRXNTVUZCU1N4TlFVRk5MRzlEUVVGdlF6dEJRVU40UlN4VFFVRkxMR05CUVdNN1FVRkRZaXhWUVVGQlowNHNTVUZCWlhaTkxFVkJRV3RDUnl4RFFVRmpPMEZCUTNKRUxGTkJRVXNzYVVKQlFXbENiMDBzUjBGRGRFSXNTMEZCU3l4cFFrRkJhVUpvVGp0QlFVRkJMRVZCUXpGQ08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRlBUeXhKUVVGSmFVNHNSMEZCSzBVMVRDeEhRVUZyUnp0QlFVTjRUQ3hWUVVGTmNVY3NTVUZCWXl4TFFVRkxPMEZCUVVFc1RVRkRja0oxUmp0QlFVRkJMRWxCUVVFc1IwRkZSVU1zU1VGQk1FUTdRVUZCUVN4TlFVTTFSQ3hMUVVGUE1FVTdRVUZCUVN4SlFVRkJPMEZCUlZnc1YwRkJUeXhMUVVGTExHZENRVUZuUWl4VlFVRjFRMnhMTEVkQlFXRnZTeXhKUVVGNVJIcFJMRWRCUVdsQ05rd3NRMEZCV1N4TFFVRkxMRkZCUVZFc1QwRkJUeXhKUVVGSkxFMUJRVTBzZVVKQlFYbENMRU5CUVVNN1FVRkJRU3hGUVVOc1R6dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGUlR5eExRVUZMZUdwQ0xFZEJRU3RDZFdwQ0xFZEJRV2RHTlV3c1IwRkJNa1U3UVVGRGJFMHNVVUZCUnl4RFFVRkRNMWc3UVVGQldTeFpRVUZCTEVsQlFVa3NUVUZCVFN3d1FrRkJNRUk3UVVGRGNFUXNWVUZCVFdkbExFbEJRV01zUzBGQlN6dEJRVUZCTEUxQlEzSkNhR1U3UVVGQlFTeE5RVUZOZFdwQ08wRkJRVUVzU1VGQlFTeEhRVVZLUXl4SlFVRXdSRHRCUVVGQkxFMUJRelZFTEV0QlFVOHdSVHRCUVVGQkxFbEJRVUU3UVVGRldDeFhRVUZQTEV0QlFVc3NaMEpCUVdkQ0xGVkJRV2RDYkVzc1IwRkJZVFJLTEVsQlFXdERhbEVzUjBGQmFVSTJUQ3hEUVVGWkxFdEJRVXNzVVVGQlVTeFBRVUZQTEVsQlFVa3NUVUZCVFN4NVFrRkJlVUlzUTBGQlF6dEJRVUZCTEVWQlEzQk1PMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlRVOHNkMEpCUVhkQ1JDeEhRVUZ2Unp0QlFVTjZTQ3hWUVVGQmRrWXNTVUZCWXl4SlFVRkpNMGc3UVVGRGVFSXNWMEZCUVRKSUxFVkJRVmtzWTBGQll5eExRVUZMTEdGQlF5OUNRU3hGUVVGWkxHbENRVUZwUWl4TFFVRkxMR2RDUVVOc1EwRXNSVUZCV1N4aFFVRmhOVWNzUlVGQlZ5eExRVU53UXpSSExFVkJRVmtzVVVGQlVTeFRRVUZaTEVOQlFVTXNhMEpCUVd0Q0xFZEJReTlEZFVZc1RVRkRXWFpHTEVWQlFVRXNhMEpCUVd0Q2RVWXNSVUZCY1VJc1QwRkJUeXhIUVVNNVEzWkdMRVZCUVVFc2MwTkJRWE5EZFVZc1JVRkJjVUlzWlVGQlpTeEhRVU14UlhaR0xFVkJRVUVzYTBKQlFXdENkVVlzUlVGQmNVSXNUMEZCVHl4SlFVVjJSSFpHTzBGQlFVRXNSVUZEV0R0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTEVWQlQwOHNlVUpCUVhsQ2FHVXNSMEZCSzBKMWFrSXNSMEZCY1VjN1FVRkRhRXNzVVVGQlJ5eERRVUZEZG1wQ08wRkJRVmtzV1VGQlFTeEpRVUZKTEUxQlFVMHNNRUpCUVRCQ08wRkJRemxETEZWQlFVRm5aU3hKUVVGakxFbEJRVWt6U0R0QlFVTjRRaXhYUVVGQk1rZ3NSVUZCV1N4alFVRmpMRXRCUVVzc1lVRkRMMEpCTEVWQlFWa3NhVUpCUVdsQ0xFdEJRVXNzWjBKQlEyeERRU3hGUVVGWkxHRkJRV0UxUnl4RlFVRlhMRTFCUTNCRE5FY3NSVUZCV1N4UlFVRlJMRk5CUVZrc1EwRkJReXhyUWtGQmEwSXNSMEZETDBOMVJpeE5RVU5aZGtZc1JVRkJRU3hyUWtGQmEwSjFSaXhGUVVGeFFpeFBRVUZQTEVkQlF6bERka1lzUlVGQlFTeHJRa0ZCYTBKMVJpeEZRVUZ4UWl4UFFVRlBMRWxCUlRsRWRrWXNSVUZCV1N4MVFrRkJkVUlzUzBGQlN5eG5Ra0ZCWjBJc2IwSkJRVzlDYUdVc1EwRkJTU3hIUVVONlJXZGxPMEZCUVVFc1JVRkRXRHRCUVVOS08wRkRiRWRQTEZOQlFWTnhTeXhIUVVGdlF6TkdMRWRCUVRSRE8wRkJRelZHTEUxQlFVY3NRMEZCUTBFN1FVRkJhVUlzVlVGQlFTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRemxFTEZOQlFVOHNTVUZCU1dsR0xFZEJRVkU3UVVGRGRrSTdRVU5GVHl4TlFVRk5WeXhIUVVGMVFqdEJRVUZCTzBGQlFVRXNSVUZGZUVJN1FVRkJRVHRCUVVGQkxFVkJSVUU3UVVGQlFUdEJRVUZCTEVWQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTlJDeFpRVUZaY0ZJc1IwRkJPRVJhTEVkQlFXZERPMEZCUXpkSExGRkJRVWNzUTBGQlExazdRVUZCYzBJc1dVRkJRU3hKUVVGSkxFMUJRVTBzYjBOQlFXOURPMEZCUTNoRkxGRkJRVWNzUTBGQlExbzdRVUZCYzBJc1dVRkJRU3hKUVVGSkxFMUJRVTBzYjBOQlFXOURPMEZCUTNoRkxGTkJRVXNzWTBGQll6dEJRVU5pTEZWQlFVRm5UaXhKUVVGbGRrMHNSVUZCYTBKSExFTkJRV003UVVGRGNrUXNVMEZCU3l4cFFrRkJhVUp2VFN4SFFVTjBRaXhMUVVGTExHbENRVUZwUW1oT08wRkJRVUVzUlVGRE1VSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeEZRVTlQTEVsQlFVbHBUaXhIUVVGclJqVk1MRWRCUVRoRk8wRkJRM1pMTEZWQlFVMXhSeXhKUVVGakxFdEJRVXM3UVVGQlFTeE5RVU55UW5WR08wRkJRVUVzU1VGQlFUdEJRVVZLTEZkQlFVOHNTMEZCU3l4blFrRkJaMElzVlVGQmJVSjJSaXhIUVVGaGNVc3NTVUZCY1VNeFVTeEhRVUZwUWl4TlFVRlRMRXRCUVVzc1VVRkJVU3hQUVVGUExFbEJRVWtzVFVGQlRTeDVRa0ZCZVVJc1EwRkJRenRCUVVGQkxFVkJRM1pNTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJUVThzZDBKQlFYZENORXdzUjBGQmRVYzdRVUZETlVnc1ZVRkJRWFpHTEVsQlFXTXNTVUZCU1ROSU8wRkJRM2hDTEZkQlFVRXlTQ3hGUVVGWkxHTkJRV01zUzBGQlN5eGhRVU12UWtFc1JVRkJXU3hwUWtGQmFVSXNTMEZCU3l4blFrRkRiRU5CTEVWQlFWa3NZVUZCWVRWSExFVkJRVmNzUzBGRGNFTTBSeXhGUVVGWkxGRkJRVkVzVTBGQldTeERRVUZETEd0Q1FVRnJRaXhIUVVNdlEzVkdMRTFCUTFsMlJpeEZRVUZCTEd0Q1FVRnJRblZHTEVWQlFYRkNMRTlCUVU4c1IwRkRPVU4yUml4RlFVRkJMR3RDUVVGclFuVkdMRVZCUVhGQ0xFOUJRVThzU1VGRmRrUjJSanRCUVVGQkxFVkJRMWc3UVVGRFNqdEJReTlEVHl4TlFVRk5kVXNzUjBGQllUdEJRVUZCTzBGQlFVRXNSVUZGZEVJc1NVRkJWeXhoUVVGMVF6dEJRVU01UXl4WFFVRlBMRWxCUVVsT0xFZEJRWGxDTEV0QlFVc3NaMEpCUVdkQ0xFdEJRVXNzWTBGQll6dEJRVUZCTEVWQlEyaEdPMEZCUVVFN1FVRkJRU3hGUVVWUk8wRkJRVUU3UVVGQlFTeEZRVVZCTzBGQlFVRTdRVUZCUVN4RlFVVlNMRWxCUVZjc1VVRkJOa0k3UVVGRGNFTXNWMEZCVHl4SlFVRkpha1FzUjBGQmIwSXNTMEZCU3l4blFrRkJaMElzUzBGQlN5eGpRVUZqTzBGQlFVRXNSVUZETTBVN1FVRkJRVHRCUVVGQkxFVkJSVUVzU1VGQlZ5eFhRVUZ0UXp0QlFVTXhReXhYUVVGUExFbEJRVWx6UkN4SFFVRjFRaXhMUVVGTExHZENRVUZuUWl4TFFVRkxMR05CUVdNN1FVRkJRU3hGUVVNNVJUdEJRVUZCTzBGQlFVRXNSVUZGVVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzUlVGTFJDeFpRVUZaYUZNc1IwRkJaME03UVVGREwwTXNVVUZCUnl4RFFVRkRRVHRCUVVGelFpeFpRVUZCTEVsQlFVa3NUVUZCVFN4dlEwRkJiME03UVVGRGVFVXNVMEZCU3l4cFFrRkJhVUlzU1VGRGRFSXNTMEZCU3l4alFVRmpMR05CUTI1Q0xFdEJRVXNzYVVKQlFXbENRU3hIUVVOMFFqRlNMRWRCUVRCQ01HaENMRVZCUVRoQ0xFZEJRM2hFZG1oQ0xFZEJRVFJDY1doQ0xFVkJRVzlDTEVsQlF6VkRPVkFzUlVGQlpTeFpRVUZaTEZWQlFXRkJMRVZCUVdVc1dVRkJXU3hSUVVOdVJVRXNSVUZCWlN4VlFVRlZMSGxDUVVWNFFpeExRVUZCTEdWQlFXVXNWVUZCWVVFc1JVRkJaVHRCUVVGQkxFVkJRM0JFTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFVkJUVThzVlVGQlZYcGFMRWRCUVhORE8wRkJRMjVFTEZGQlFVY3NRMEZCUTBFN1FVRkJWU3haUVVGQkxFbEJRVWtzVFVGQlRTeDNRa0ZCZDBJN1FVRkRNVU1zVlVGQlFYbHRRaXhKUVVGbGRrMHNSVUZCYTBJc1MwRkJTeXhqUVVGak8wRkJRekZFTEZkQlFVRjFUU3hGUVVGaExFdEJRVkY2YlVJc1IwRkRaQ3hKUVVGSmMzSkNMRWRCUVhkQ04wVXNSMEZCWXl4TFFVRkxMR05CUVdNN1FVRkJRU3hGUVVONFJUdEJRVU5LTzBGRE9VTlBMRTFCUVUxclJpeEhRVUU0UXp0QlFVRkJMRVZCUTJwRU8wRkJRVUVzUlVGRFFUdEJRVUZCTEVWQlJWSXNXVUZCV1M5SUxFZEJRV3RDTzBGQlEzWkNMRk5CUVVFc2MwSkJRWE5DTEVsQlFVbG5TVHRCUVVNdlFpeFZRVUZOYUVNc1NVRkJWU3hKUVVGSkwwa3NSMEZCUVR0QlFVRkJMRTFCUTJ4Q0xFbEJRVWszVnl4RlFVRnpReXhMUVVGTExHMUNRVUZ0UWp0QlFVRkJMRWxCUVVFN1FVRkZjRVVzU1VGQlFUUm1MRVZCUVZFc1ZVRkJWV2hITEV0QlFWY3NTVUZEZUVJc1MwRkJRU3hUUVVGVExFbEJRVWs0U0N4SFFVRmhPVUlzUTBGQlR6dEJRVUZCTEVWQlEzaERPMEZCUVVFc1JVRkZRU3hOUVVGTkxFbEJRVWw2YzBJc1IwRkJaVU1zUjBGQmNVTTdRVUZETlVRc1ZVRkJUVFpGTEVsQlFWTXNUVUZCVFN4TFFVRkxMRTlCUVU4c1RVRkJUU3hKUVVGSk8wRkJRM0JETEZkQlFVRXNSVUZCUlN4UFFVRlBRU3hIUVVGUkxGbEJRVmtzUjBGQlJ5eFhRVUZYUVN4SFFVRlJMRmRCUVZjN1JVRkRka1U3UVVGQlFTeEZRVVZCTEUxQlFVMHNUVUZEU2psRkxFZEJRMEZETEVkQlEwRkhMRWRCUTJsQ08wRkJRMnBDTEZWQlFVMHdSU3hKUVVGVExFMUJRVTBzUzBGQlN5eFBRVUZQTEUxQlFVMHNTVUZCU1R0QlFVVjJReXhYUVVGRFFTeEhRVUZSTEU5QlNVNUJMRVZCUVU4c1MwRkJTeXhKUVVGSkxFTkJRVU1zUlVGQlJTeHBRa0ZCUVRSd1FpeEhRVUZwUWl4clFrRkJRVU1zVTBGQmQwSTdRVUZCUVN4TlFVTnFSU3hKUVVGSlJEdEJRVUZCTEUxQlEwb3NUVUZCVFVNN1FVRkJRU3hOUVVOT0xGVkJRVlU3UVVGQlFTeEpRVU5XTEVWQlFVRXNTVUZRVHp0RlFWRllPMEZCUVVFc1JVRkZRU3hOUVVGTkxFOUJRMG96ZFVJc1IwRkRRVU1zUjBGRFFVOHNSMEZEWlR0QlFVTlVMRlZCUVVGM1JpeEpRVUZQTEVsQlFVa3dia0k3UVVGRFdpeEpRVUZCTVc1Q0xFVkJRVUVzYlVKQlFXMUNlRVlzUlVGQlVTeERRVUZETEVkQlEycERMRTFCUVUwc1MwRkJTeXhQUVVGUExFMUJRVTBzUzBGQlMzZEdMRU5CUVVrN1FVRkJRU3hGUVVWdVF6dEJRVUZCTEVWQlJVRXNUVUZCVFN4VFFVTkthRWNzUjBGRFFVTXNSMEZEUVU4c1IwRkRaVHRCUVVObUxGVkJRVTBzUzBGQlN5eFBRVUZQTEZWQlFWVkJMRVZCUVZFc1EwRkJReXhEUVVGRExFVkJRVVU3UlVGRk1VTTdRVUZEUmp0QlFVVkJMRTFCUVUxcGRVSXNSMEZCTmtNN1FVRkJRU3hGUVVOcVJDeHpRa0ZEUlRscFFpeEhRVU5CWlN4SFFVTnBRanRCUVVOV0xGZEJRVUVzVVVGQlVTeFJRVUZSTEU5QlFVODdRVUZCUVN4RlFVTm9RenRCUVVGQkxFVkJSVUVzTWtKQlFXdEVPMEZCUTJoRUxGZEJRVThzU1VGQlNXcENMRWRCUVRCQ0xHOUNRVUZCTEVsQlFVRXNRMEZCU3p0QlFVRkJMRVZCUXpWRE8wRkJRMFk3UVVOeVJHZENMRk5CUVVGdGFrSXNSMEZCVjBNc1IwRkJiMEp3U1N4SFFVRnJRenRCUVVNdlJTeFZRVUZSYjBrc1IwRkJXVHRCUVVGQkxFbEJRMnhDTEV0QlFVczdRVUZEU1N4aFFVRkJMRWxCUVVseVF5eEhRVUZWTDBZc1EwRkJUenRCUVVGQkxFbEJRemxDTEV0QlFVczdRVUZEU1N4aFFVRkJMRWxCUVVrclNDeEhRVUZ2UWk5SUxFTkJRVTg3UVVGQlFTeEpRVU40UXl4TFFVRkxPMEZCUTBnc1lVRkJUeXhKUVVGSk1XMUNMRWRCUVZrN1FVRkJRU3hKUVVONlFqdEJRVU5STEZsQlFVRXNTVUZCU1N4TlFVRk5MR2xEUVVGcFF6aDFRaXhEUVVGVk8wRkJRVUVzUlVGREwwUTdRVUZEUmpzaUxDSjRYMmR2YjJkc1pWOXBaMjV2Y21WTWFYTjBJanBiTVN3eUxETXNOQ3cxTERZc055dzRMRGtzTVRBc01URXNNVElzTVRNc01UUXNNVFVzTVRZc01UY3NNVGdzTVRrc01qQXNNakVzTWpJc01qTXNNalFzTWpVc01qWXNNamNzTWpnc01qa3NNekFzTXpFc016SXNNek1zTXpRc016VXNNellzTXpjc016Z3NNemtzTkRBc05ERXNORElzTkRNc05EUXNORFVzTkRZc05EY3NORGdzTkRrc05UQXNOVEVzTlRJc05UTXNOVFFzTlRVc05UWXNOVGNzTlRnc05Ua3NOakFzTmpFc05qSXNOak1zTmpRc05qVXNOallzTmpjc05qZ3NOamtzTnpBc056RXNOeklzTnpNc056UXNOelVzTnpZc056Y3NOemdzTnprc09EQXNPREVzT0RJc09ETXNPRFFzT0RVc09EWXNPRGNzT0Rnc09Ea3NPVEFzT1RFc09USXNPVE1zT1RRc09UVXNPVFlzT1Rjc09UZ3NPVGtzTVRBd0xERXdNU3d4TURJc01UUTJMREUwTnl3eE5EZ3NNVFE1WFgwPVxuIiwiaW1wb3J0IHsgQ29udGV4dCwgY3JlYXRlQ29udGV4dCwgUHJvcHNXaXRoQ2hpbGRyZW4sIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGdldFNlcnZpY2UsIExpY2Vuc2VTZXJ2aWNlIH0gZnJvbSBcImNsaWVudFwiO1xuXG50eXBlIFNlcnZpY2VDb250ZXh0UHJvcHMgPSB7XG4gIHNlcnZpY2VOYW1lOiBzdHJpbmc7XG4gIGJhc2VVcmw/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgU2VydmljZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PExpY2Vuc2VTZXJ2aWNlIHwgdW5kZWZpbmVkPihcbiAgdW5kZWZpbmVkXG4pO1xuXG5mdW5jdGlvbiB1c2VSZXF1aXJlZENvbnRleHQ8VD4oY29udGV4dDogQ29udGV4dDxUPik6IE5vbk51bGxhYmxlPFQ+IHtcbiAgY29uc3QgcmVzb2x2ZWQgPSB1c2VDb250ZXh0KGNvbnRleHQpO1xuXG4gIGlmIChyZXNvbHZlZCAhPT0gdW5kZWZpbmVkICYmIHJlc29sdmVkICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHJlc29sdmVkO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBObyBwcm92aWRlciBmb3VuZCBmb3IgY29udGV4dCwgbWFrZSBzdXJlIGl0IGlzIGluY2x1ZGVkIGluIHlvdXIgY29tcG9uZW50IGhpZXJhcmNoeS5gXG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCB1c2VTZXJ2aWNlID0gKCkgPT4gdXNlUmVxdWlyZWRDb250ZXh0KFNlcnZpY2VDb250ZXh0KTtcblxuZXhwb3J0IGNvbnN0IFNlcnZpY2VDb250ZXh0UHJvdmlkZXIgPSAoe1xuICBzZXJ2aWNlTmFtZSxcbiAgYmFzZVVybCxcbiAgY2hpbGRyZW4sXG59OiBQcm9wc1dpdGhDaGlsZHJlbjxTZXJ2aWNlQ29udGV4dFByb3BzPikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxTZXJ2aWNlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Z2V0U2VydmljZShzZXJ2aWNlTmFtZSwgYmFzZVVybCl9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvU2VydmljZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IHtcbiAgRW1wdHlTdGF0ZSxcbiAgRW1wdHlTdGF0ZUJvZHksXG4gIEVtcHR5U3RhdGVJY29uLFxuICBFbXB0eVN0YXRlVmFyaWFudCxcbiAgVGl0bGUsXG59IGZyb20gJ0BwYXR0ZXJuZmx5L3JlYWN0LWNvcmUnO1xuaW1wb3J0IHsgU2VhcmNoSWNvbiB9IGZyb20gJ0BwYXR0ZXJuZmx5L3JlYWN0LWljb25zJztcbmltcG9ydCB0eXBlIHsgVm9pZEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBFbXB0eVN0YXRlTm9SZXN1bHRzUHJvcHMgPSB7XG4gIG9uQ2xlYXJBbGxGaWx0ZXJzOiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IEVtcHR5U3RhdGVOb1Jlc3VsdHM6IFZvaWRGdW5jdGlvbkNvbXBvbmVudDxcbiAgRW1wdHlTdGF0ZU5vUmVzdWx0c1Byb3BzXG4+ID0gKHsgb25DbGVhckFsbEZpbHRlcnMgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxFbXB0eVN0YXRlIHZhcmlhbnQ9e0VtcHR5U3RhdGVWYXJpYW50LnhzfT5cbiAgICAgIDxFbXB0eVN0YXRlSWNvbiBpY29uPXtTZWFyY2hJY29ufSAvPlxuICAgICAgPFRpdGxlIGhlYWRpbmdMZXZlbD1cImgyXCIgc2l6ZT1cImxnXCI+XG4gICAgICAgIE5vIHJlc3VsdHMgZm91bmRcbiAgICAgIDwvVGl0bGU+XG4gICAgICA8RW1wdHlTdGF0ZUJvZHk+XG4gICAgICAgIEFkanVzdCB5b3VyIGZpbHRlcnMgYW5kIHRyeSBhZ2Fpbiwgb3ImbmJzcDtcbiAgICAgICAgPGEgb25DbGljaz17b25DbGVhckFsbEZpbHRlcnN9PmNsZWFyIGFsbCBmaWx0ZXJzPC9hPi5cbiAgICAgIDwvRW1wdHlTdGF0ZUJvZHk+XG4gICAgPC9FbXB0eVN0YXRlPlxuICApO1xufTtcbiIsImltcG9ydCB0eXBlIHsgVGFibGVWaWV3UHJvcHMgfSBmcm9tICdAcmhvYXMvYXBwLXNlcnZpY2VzLXVpLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgVGFibGVWaWV3IH0gZnJvbSAnQHJob2FzL2FwcC1zZXJ2aWNlcy11aS1jb21wb25lbnRzJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICdjbGllbnQnO1xuaW1wb3J0IHtcbiAgRW1wdHlTdGF0ZU5vUmVzdWx0cyxcbiAgRW1wdHlTdGF0ZU5vUmVzdWx0c1Byb3BzLFxufSBmcm9tICcuL0VtcHR5U3RhdGVOb1Jlc3VsdHMnO1xuXG5leHBvcnQgY29uc3QgQ29sdW1ucyA9IFsnbmFtZSddIGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgbGFiZWxzOiB7IFtrZXkgaW4gKHR5cGVvZiBDb2x1bW5zKVtudW1iZXJdXTogc3RyaW5nIH0gPSB7XG4gIG5hbWU6ICdEaXNwbGF5IG5hbWUnLFxufTtcblxuZXhwb3J0IHR5cGUgVXNlcnNQaWNrZXJUYWJsZVByb3BzID0ge1xuICB1c2VyczogQXJyYXk8VXNlcj4gfCB1bmRlZmluZWQgfCBudWxsO1xuICBpc1VzZXJDaGVja2VkOiAocm93OiBVc2VyKSA9PiBib29sZWFuO1xuICB1c2VybmFtZXM6IHN0cmluZ1tdO1xuICBvblNlYXJjaFVzZXJuYW1lOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgb25SZW1vdmVVc2VybmFtZUNoaXA6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICBvblJlbW92ZVVzZXJuYW1lQ2hpcHM6ICgpID0+IHZvaWQ7XG4gIG9uQ2hlY2tVc2VyOiAocm93OiBVc2VyLCBpc0NoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG59ICYgUGljazxcbiAgVGFibGVWaWV3UHJvcHM8VXNlciwgKHR5cGVvZiBDb2x1bW5zKVtudW1iZXJdPixcbiAgfCAnaXRlbUNvdW50J1xuICB8ICdwYWdlJ1xuICB8ICdwZXJQYWdlJ1xuICB8ICdvblBhZ2VDaGFuZ2UnXG4gIHwgJ2lzQ29sdW1uU29ydGFibGUnXG4gIHwgJ29uQ2xlYXJBbGxGaWx0ZXJzJ1xuPiAmXG4gIEVtcHR5U3RhdGVOb1Jlc3VsdHNQcm9wcztcblxuZXhwb3J0IGNvbnN0IFVzZXJzUGlja2VyVGFibGUgPSAoe1xuICB1c2VycyxcbiAgaXRlbUNvdW50LFxuICBwYWdlLFxuICBwZXJQYWdlLFxuICB1c2VybmFtZXMsXG4gIGlzQ29sdW1uU29ydGFibGUsXG4gIGlzVXNlckNoZWNrZWQsXG4gIG9uUGFnZUNoYW5nZSxcbiAgb25TZWFyY2hVc2VybmFtZSxcbiAgb25SZW1vdmVVc2VybmFtZUNoaXAsXG4gIG9uUmVtb3ZlVXNlcm5hbWVDaGlwcyxcbiAgb25DbGVhckFsbEZpbHRlcnMsXG4gIG9uQ2hlY2tVc2VyLFxufTogVXNlcnNQaWNrZXJUYWJsZVByb3BzKSA9PiB7XG4gIGNvbnN0IGJyZWFrcG9pbnQgPSAnbGcnO1xuXG4gIGNvbnN0IGlzRmlsdGVyZWQgPSB1c2VybmFtZXMubGVuZ3RoID4gMDtcblxuICByZXR1cm4gKFxuICAgIDxUYWJsZVZpZXdcbiAgICAgIGRhdGE9e3VzZXJzfVxuICAgICAgY29sdW1ucz17Q29sdW1uc31cbiAgICAgIHJlbmRlckhlYWRlcj17KHsgY29sdW1uLCBUaCwga2V5IH0pID0+IChcbiAgICAgICAgPFRoIGtleT17a2V5fT57bGFiZWxzW2NvbHVtbl19PC9UaD5cbiAgICAgICl9XG4gICAgICByZW5kZXJDZWxsPXsoeyBjb2x1bW4sIHJvdywgVGQsIGtleSB9KSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFRkIGtleT17a2V5fSBkYXRhTGFiZWw9e2xhYmVsc1tjb2x1bW5dfT5cbiAgICAgICAgICAgIHtyb3dbY29sdW1uXX1cbiAgICAgICAgICA8L1RkPlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICAgIGlzQ29sdW1uU29ydGFibGU9e2lzQ29sdW1uU29ydGFibGV9XG4gICAgICBpc1Jvd0NoZWNrZWQ9eyh7IHJvdyB9KSA9PiBpc1VzZXJDaGVja2VkKHJvdyl9XG4gICAgICBvbkNoZWNrPXsoe3Jvd30sIGlzQ2hlY2tlZCkgPT5cbiAgICAgICAgb25DaGVja1VzZXIocm93LCBpc0NoZWNrZWQpXG4gICAgICB9XG4gICAgICB0b29sYmFyQnJlYWtwb2ludD17YnJlYWtwb2ludH1cbiAgICAgIGZpbHRlcnM9e3tcbiAgICAgICAgWydVc2VybmFtZSddOiB7XG4gICAgICAgICAgdHlwZTogJ3NlYXJjaCcsXG4gICAgICAgICAgY2hpcHM6IHVzZXJuYW1lcyxcbiAgICAgICAgICBvblNlYXJjaDogb25TZWFyY2hVc2VybmFtZSxcbiAgICAgICAgICBvblJlbW92ZUNoaXA6IG9uUmVtb3ZlVXNlcm5hbWVDaGlwLFxuICAgICAgICAgIG9uUmVtb3ZlR3JvdXA6IG9uUmVtb3ZlVXNlcm5hbWVDaGlwcyxcbiAgICAgICAgICB2YWxpZGF0ZTogKHZhbHVlKSA9PiAvXlthLXpdKFstYS16MC05XSpbYS16MC05XSk/JC8udGVzdCh2YWx1ZSksXG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiAnSW52YWxpZCBzdHJpbmcnLFxuICAgICAgICB9LFxuICAgICAgfX1cbiAgICAgIGl0ZW1Db3VudD17aXRlbUNvdW50fVxuICAgICAgcGFnZT17cGFnZX1cbiAgICAgIHBlclBhZ2U9e3BlclBhZ2V9XG4gICAgICBvblBhZ2VDaGFuZ2U9e29uUGFnZUNoYW5nZX1cbiAgICAgIG9uQ2xlYXJBbGxGaWx0ZXJzPXtvbkNsZWFyQWxsRmlsdGVyc31cbiAgICAgIGFyaWFMYWJlbD17J1NlYXRzIEFkbWluaXN0cmF0aW9uIHVzZXJzJ31cbiAgICAgIGlzRmlsdGVyZWQ9e2lzRmlsdGVyZWR9XG4gICAgICBlbXB0eVN0YXRlTm9EYXRhPXs8PnsvKiB0aGlzIGNhbid0IGhhcHBlbiAqL308Lz59XG4gICAgICBlbXB0eVN0YXRlTm9SZXN1bHRzPXtcbiAgICAgICAgPEVtcHR5U3RhdGVOb1Jlc3VsdHMgb25DbGVhckFsbEZpbHRlcnM9e29uQ2xlYXJBbGxGaWx0ZXJzfSAvPlxuICAgICAgfVxuICAgIC8+XG4gICk7XG59O1xuIiwiaW1wb3J0IHsgQWxlcnQsIEJ1dHRvbiwgQnV0dG9uVmFyaWFudCwgTW9kYWwgfSBmcm9tIFwiQHBhdHRlcm5mbHkvcmVhY3QtY29yZVwiO1xuaW1wb3J0IHtcbiAgdXNlUGFnaW5hdGlvblNlYXJjaFBhcmFtcyxcbiAgdXNlVVJMU2VhcmNoUGFyYW1zQ2hpcHMsXG59IGZyb20gXCJAcmhvYXMvYXBwLXNlcnZpY2VzLXVpLWNvbXBvbmVudHNcIjtcbmltcG9ydCB7IHVzZU11dGF0aW9uLCB1c2VRdWVyeSB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IExpY2Vuc2UsIFVzZXIgfSBmcm9tIFwiY2xpZW50XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlcnZpY2UgfSBmcm9tIFwiLi4vQ29tcG9uZW50cy9TZXJ2aWNlUHJvdmlkZXJcIjtcbmltcG9ydCB7IFVzZXJzUGlja2VyVGFibGUgfSBmcm9tIFwiLi4vQ29tcG9uZW50cy9Vc2Vyc1BpY2tlclRhYmxlXCI7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uID0ge1xuICBvblN1Y2Nlc3M6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9uRXJyb3I6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBBZGRVc2Vyc1BhZ2UgPSAoe29uU3VjY2Vzcywgb25FcnJvcn06IE5vdGlmaWNhdGlvbikgPT4ge1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICBjb25zdCBzZXJ2aWNlID0gdXNlU2VydmljZSgpO1xuXG4gIGNvbnN0IGNsb3NlID0gKCkgPT4gaGlzdG9yeS5wdXNoKFwiL1wiKTtcblxuICBjb25zdCBzdWJzY3JpcHRpb25zID0gdXNlUXVlcnk8TGljZW5zZT4oe1xuICAgIHF1ZXJ5S2V5OiBbXCJzdWJzY3JpcHRpb25zXCJdLFxuICAgIHF1ZXJ5Rm46ICgpID0+IHNlcnZpY2UuZ2V0KFwibzFcIiwgXCJzbWFydHNcIiksXG4gIH0pO1xuICBjb25zdCB7IHBhZ2UsIHBlclBhZ2UsIHNldFBhZ2luYXRpb24sIHNldFBhZ2luYXRpb25RdWVyeSB9ID1cbiAgICB1c2VQYWdpbmF0aW9uU2VhcmNoUGFyYW1zKCk7XG4gIGNvbnN0IHJlc2V0UGFnaW5hdGlvblF1ZXJ5ID0gdXNlQ2FsbGJhY2soXG4gICAgKCkgPT4gc2V0UGFnaW5hdGlvblF1ZXJ5KDEsIHBlclBhZ2UpLFxuICAgIFtwZXJQYWdlLCBzZXRQYWdpbmF0aW9uUXVlcnldXG4gICk7XG5cbiAgY29uc3QgdXNlcm5hbWVDaGlwcyA9IHVzZVVSTFNlYXJjaFBhcmFtc0NoaXBzKFwibmFtZVwiLCByZXNldFBhZ2luYXRpb25RdWVyeSk7XG4gIGNvbnN0IHVzZXJzID0gdXNlUXVlcnk8VXNlcltdPih7XG4gICAgcXVlcnlLZXk6IFtcInVzZXJzXCIsIHsgcGFnZSwgcGVyUGFnZSwgdXNlcm5hbWVzOiB1c2VybmFtZUNoaXBzLmNoaXBzIH1dLFxuICAgIHF1ZXJ5Rm46ICgpID0+IHNlcnZpY2Uuc2VhdHMoXCJvMVwiLCBcInNtYXJ0c1wiLCBmYWxzZSksXG4gIH0pO1xuXG4gIGNvbnN0IHsgbXV0YXRlLCBpc0xvYWRpbmcgfSA9IHVzZU11dGF0aW9uKFxuICAgICgpID0+IHNlcnZpY2UuYXNzaWduKFwibzFcIiwgXCJzbWFydHNcIiwgY2hlY2tlZFVzZXJzKSxcbiAgICB7XG4gICAgICBvblN1Y2Nlc3M6ICgpID0+IHtcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgb25TdWNjZXNzKFwiU3VjY2Vzc2Z1bGx5IGFzc2lnbmVkIHVzZXJzXCIpO1xuICAgICAgfSxcbiAgICAgIG9uRXJyb3I6IChlcnJvcikgPT4ge1xuICAgICAgICBvbkVycm9yKFwidGhlcmUgd2FzIGFuIGVycm9yOiBcIiArIGVycm9yKTtcbiAgICAgIH0sXG4gICAgfVxuICApO1xuXG4gIGNvbnN0IFtjaGVja2VkVXNlcnMsIHNldENoZWNrZWRVc2Vyc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICBjb25zdCBhc3NpZ25lZFNlYXRzID1cbiAgICAoc3Vic2NyaXB0aW9ucy5kYXRhPy50b3RhbCB8fCAwKSAtIChzdWJzY3JpcHRpb25zLmRhdGE/LmF2YWlsYWJsZSB8fCAwKTtcbiAgY29uc3QgaXNBZGREaXNhYmxlZCA9XG4gICAgc3Vic2NyaXB0aW9ucy5kYXRhPy50b3RhbCA9PT0gdW5kZWZpbmVkXG4gICAgICA/IHRydWVcbiAgICAgIDogY2hlY2tlZFVzZXJzLmxlbmd0aCA+IDBcbiAgICAgID8gY2hlY2tlZFVzZXJzLmxlbmd0aCArIGFzc2lnbmVkU2VhdHMgPiBzdWJzY3JpcHRpb25zLmRhdGEudG90YWxcbiAgICAgIDogdHJ1ZTtcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbFxuICAgICAgaXNPcGVuXG4gICAgICB0aXRsZT1cIkFzc2lnbiB1c2Vyc1wiXG4gICAgICB2YXJpYW50PVwibWVkaXVtXCJcbiAgICAgIG9uQ2xvc2U9e2Nsb3NlfVxuICAgICAgYWN0aW9ucz17W1xuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAga2V5PVwiYXNzaWduXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBtdXRhdGUoKX1cbiAgICAgICAgICBpc0Rpc2FibGVkPXtpc0FkZERpc2FibGVkfVxuICAgICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxuICAgICAgICA+XG4gICAgICAgICAgQXNzaWduXG4gICAgICAgIDwvQnV0dG9uPixcbiAgICAgICAgPEJ1dHRvbiBrZXk9XCJjYW5jZWxcIiBvbkNsaWNrPXtjbG9zZX0gdmFyaWFudD17QnV0dG9uVmFyaWFudC5saW5rfT5cbiAgICAgICAgICBDYW5jZWxcbiAgICAgICAgPC9CdXR0b24+LFxuICAgICAgXX1cbiAgICA+XG4gICAgICB7Y2hlY2tlZFVzZXJzLmxlbmd0aCArIGFzc2lnbmVkU2VhdHMgPlxuICAgICAgICAoc3Vic2NyaXB0aW9ucy5kYXRhPy50b3RhbCB8fCAwKSAmJiAoXG4gICAgICAgIDxBbGVydFxuICAgICAgICAgIHZhcmlhbnQ9XCJ3YXJuaW5nXCJcbiAgICAgICAgICBpc0lubGluZVxuICAgICAgICAgIHRpdGxlPVwiWW91ciBvcmdhbml6YXRpb24gZG9lcyBub3QgaGF2ZSBlbm91Z2ggUHJvamVjdCBXaXNkb20gc2VhdHMgZm9yIHRoZSBhc3NpZ25tZW50cyBiZWxvd1wiXG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAgPFVzZXJzUGlja2VyVGFibGVcbiAgICAgICAgdXNlcnM9e3VzZXJzLmRhdGF9XG4gICAgICAgIGl0ZW1Db3VudD17dXNlcnMuZGF0YT8ubGVuZ3RofVxuICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICBwZXJQYWdlPXtwZXJQYWdlfVxuICAgICAgICBvblBhZ2VDaGFuZ2U9e3NldFBhZ2luYXRpb259XG4gICAgICAgIHVzZXJuYW1lcz17dXNlcm5hbWVDaGlwcy5jaGlwc31cbiAgICAgICAgb25TZWFyY2hVc2VybmFtZT17dXNlcm5hbWVDaGlwcy5hZGR9XG4gICAgICAgIG9uUmVtb3ZlVXNlcm5hbWVDaGlwPXt1c2VybmFtZUNoaXBzLnJlbW92ZX1cbiAgICAgICAgb25SZW1vdmVVc2VybmFtZUNoaXBzPXt1c2VybmFtZUNoaXBzLmNsZWFyfVxuICAgICAgICBvbkNsZWFyQWxsRmlsdGVycz17dXNlcm5hbWVDaGlwcy5jbGVhcn1cbiAgICAgICAgaXNVc2VyQ2hlY2tlZD17KHVzZXIpID0+IGNoZWNrZWRVc2Vycy5pbmNsdWRlcyh1c2VyLmlkKX1cbiAgICAgICAgb25DaGVja1VzZXI9eyh1c2VyLCBpc0NoZWNrZWQpID0+IHtcbiAgICAgICAgICBzZXRDaGVja2VkVXNlcnMoXG4gICAgICAgICAgICBpc0NoZWNrZWRcbiAgICAgICAgICAgICAgPyBbLi4uY2hlY2tlZFVzZXJzLCB1c2VyLmlkXVxuICAgICAgICAgICAgICA6IGNoZWNrZWRVc2Vycy5maWx0ZXIoKHUpID0+IHUgIT09IHVzZXIuaWQpXG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgPC9Nb2RhbD5cbiAgKTtcbn07XG4iLCJpbXBvcnQge1xuICBFbXB0eVN0YXRlLFxuICBFbXB0eVN0YXRlQm9keSxcbiAgRW1wdHlTdGF0ZUljb24sXG4gIEljb24sXG4gIFRpdGxlLFxufSBmcm9tICdAcGF0dGVybmZseS9yZWFjdC1jb3JlJztcbmltcG9ydCB7IEV4Y2xhbWF0aW9uQ2lyY2xlSWNvbiB9IGZyb20gJ0BwYXR0ZXJuZmx5L3JlYWN0LWljb25zJztcbmltcG9ydCB0eXBlIHsgVm9pZEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBEYW5nZXJJY29uOiBWb2lkRnVuY3Rpb25Db21wb25lbnQgPSAoKSA9PiAoXG4gIDxJY29uIHN0YXR1cz17J2Rhbmdlcid9IHNpemU9eyd4bCd9PlxuICAgIDxFeGNsYW1hdGlvbkNpcmNsZUljb24gLz5cbiAgPC9JY29uPlxuKTtcblxuZXhwb3J0IGNvbnN0IEVtcHR5U3RhdGVOb1N1YnNjcmlwdGlvbjogVm9pZEZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxFbXB0eVN0YXRlIGlzRnVsbEhlaWdodD17dHJ1ZX0+XG4gICAgICA8RW1wdHlTdGF0ZUljb24gY29tcG9uZW50PXtEYW5nZXJJY29ufSB2YXJpYW50PXsnY29udGFpbmVyJ30gLz5cbiAgICAgIDxUaXRsZSBoZWFkaW5nTGV2ZWw9XCJoMlwiIHNpemU9XCJsZ1wiPlxuICAgICAgICBZb3VyIG9yZ2FuaXphdGlvbiBubyBsb25nZXIgaGFzIGFuIFNlYXRzIEFkbWluaXN0cmF0aW9uIHN1YnNjcmlwdGlvbi5cbiAgICAgIDwvVGl0bGU+XG4gICAgICA8RW1wdHlTdGF0ZUJvZHk+XG4gICAgICAgIFBsZWFzZSBjb250YWN0IFJlZCBIYXQgaWYgdGhlcmUgaXMgYW4gaXNzdWUgd2l0aCB5b3VyIHN1YnNjcmlwdGlvbiBvciBpZlxuICAgICAgICB5b3Ugd2lzaCB0byBjb250aW51ZS5cbiAgICAgIDwvRW1wdHlTdGF0ZUJvZHk+XG4gICAgPC9FbXB0eVN0YXRlPlxuICApO1xufTtcbiIsImltcG9ydCB7XG4gIEJ1dHRvbixcbiAgQnV0dG9uVmFyaWFudCxcbiAgTW9kYWwsXG4gIE1vZGFsVmFyaWFudCxcbn0gZnJvbSAnQHBhdHRlcm5mbHkvcmVhY3QtY29yZSc7XG5pbXBvcnQgeyBWb2lkRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCB0eXBlIFJlbW92ZVVzZXJzTW9kYWxQcm9wcyA9IHtcbiAgdXNlcnNUb1JlbW92ZTogbnVtYmVyO1xuICBvbk9rOiAoKSA9PiB2b2lkO1xufTtcblxuY29uc3QgUmVtb3ZlVXNlcnNNb2RhbDogVm9pZEZ1bmN0aW9uQ29tcG9uZW50PFJlbW92ZVVzZXJzTW9kYWxQcm9wcz4gPSAoe1xuICB1c2Vyc1RvUmVtb3ZlLFxuICBvbk9rLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxNb2RhbFxuICAgICAgaWQ9XCJyZW1vdmUtdXNlcnMtbW9kYWxcIlxuICAgICAgdmFyaWFudD17TW9kYWxWYXJpYW50LnNtYWxsfVxuICAgICAgaXNPcGVuPXt0cnVlfVxuICAgICAgYXJpYS1sYWJlbD17J1JlbW92ZSB1c2VycyBmcm9tIHNlYXRzJ31cbiAgICAgIHRpdGxlPXsnUmVtb3ZlIHVzZXJzIGZyb20gc2VhdHMnfVxuICAgICAgdGl0bGVJY29uVmFyaWFudD1cIndhcm5pbmdcIlxuICAgICAgc2hvd0Nsb3NlPXtmYWxzZX1cbiAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJtb2RhbC1tZXNzYWdlXCJcbiAgICAgIGFjdGlvbnM9e1tcbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtvbk9rfSBrZXk9ezF9IHZhcmlhbnQ9e0J1dHRvblZhcmlhbnQucHJpbWFyeX0+XG4gICAgICAgICAgT2tcbiAgICAgICAgPC9CdXR0b24+LFxuICAgICAgXX1cbiAgICA+XG4gICAgICBZb3VyIG9yZ2FuaXphdGlvbiBoYXMgZGVjcmVhc2VkIHRoZSBhbW91bnQgb2Ygc2VhdHNcbiAgICAgIGF2YWlsYWJsZS4gUGxlYXNlIHJlbW92ZSB7dXNlcnNUb1JlbW92ZX0gdXNlcnMgZnJvbSB0aGVpclxuICAgICAgc2VhdHMgdG8gY29udGludWUgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICA8L01vZGFsPlxuICApO1xufTtcblxuZXhwb3J0IHsgUmVtb3ZlVXNlcnNNb2RhbCB9O1xuIiwiaW1wb3J0IHtcbiAgTGFiZWwsXG4gIExldmVsLFxuICBMZXZlbEl0ZW0sXG4gIFBhZ2VTZWN0aW9uLFxuICBUZXh0LFxuICBUZXh0Q29udGVudCxcbiAgVGl0bGUsXG59IGZyb20gJ0BwYXR0ZXJuZmx5L3JlYWN0LWNvcmUnO1xuaW1wb3J0IHsgVm9pZEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBTZWF0c0hlYWRlclByb3BzID0ge1xuICBhdmFpbGFibGVTZWF0czogbnVtYmVyO1xuICB0b3RhbFNlYXRzOiBudW1iZXI7XG59O1xuZXhwb3J0IGNvbnN0IFNlYXRzSGVhZGVyOiBWb2lkRnVuY3Rpb25Db21wb25lbnQ8U2VhdHNIZWFkZXJQcm9wcz4gPSAoe1xuICBhdmFpbGFibGVTZWF0cyxcbiAgdG90YWxTZWF0cyxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8UGFnZVNlY3Rpb24gdmFyaWFudD17J2xpZ2h0J30gaGFzU2hhZG93Qm90dG9tPXt0cnVlfT5cbiAgICAgIDxUZXh0Q29udGVudD5cbiAgICAgICAgPFRpdGxlIGhlYWRpbmdMZXZlbD17J2gxJ30+U2VhdHMgQWRtaW5pc3RyYXRpb248L1RpdGxlPlxuICAgICAgICA8TGV2ZWw+XG4gICAgICAgICAgPExldmVsSXRlbT5cbiAgICAgICAgICAgIDxUZXh0PlxuICAgICAgICAgICAgICBUaGlzIGdyb3VwIGNvbnRhaW5zIGFsbCB1c2VycyBhc3NpZ25lZCBzZWF0cyB3aXRoaW5cbiAgICAgICAgICAgICAgeW91ciBvcmdhbml6YXRpb24uXG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPC9MZXZlbEl0ZW0+XG4gICAgICAgICAge3RvdGFsU2VhdHMgPiAwICYmIChcbiAgICAgICAgICAgIDxMZXZlbEl0ZW0+XG4gICAgICAgICAgICAgIDxUZXh0PlxuICAgICAgICAgICAgICAgIFNlYXRzIGF2YWlsYWJsZTombmJzcDtcbiAgICAgICAgICAgICAgICA8TGFiZWwgaXNDb21wYWN0PXt0cnVlfT5cbiAgICAgICAgICAgICAgICAgIHthdmFpbGFibGVTZWF0c30gb2Yge3RvdGFsU2VhdHN9XG4gICAgICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9MZXZlbEl0ZW0+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9MZXZlbD5cbiAgICAgIDwvVGV4dENvbnRlbnQ+XG4gICAgPC9QYWdlU2VjdGlvbj5cbiAgKTtcbn07XG4iLCJpbXBvcnQge1xuICBCdXR0b24sXG4gIEVtcHR5U3RhdGUsXG4gIEVtcHR5U3RhdGVCb2R5LFxuICBFbXB0eVN0YXRlSWNvbixcbiAgVGl0bGUsXG59IGZyb20gJ0BwYXR0ZXJuZmx5L3JlYWN0LWNvcmUnO1xuaW1wb3J0IHsgUGx1c0NpcmNsZUljb24gfSBmcm9tICdAcGF0dGVybmZseS9yZWFjdC1pY29ucyc7XG5pbXBvcnQgdHlwZSB7IFZvaWRGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHR5cGUgRW1wdHlTdGF0ZU5vQXNzaWduZWRTZWF0UHJvcHMgPSB7XG4gIHRvdGFsU2VhdHM6IG51bWJlcjtcbiAgb25BZGRVc2VyczogKCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBFbXB0eVN0YXRlTm9Bc3NpZ25lZFNlYXQ6IFZvaWRGdW5jdGlvbkNvbXBvbmVudDxcbiAgRW1wdHlTdGF0ZU5vQXNzaWduZWRTZWF0UHJvcHNcbj4gPSAoeyB0b3RhbFNlYXRzLCBvbkFkZFVzZXJzIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8RW1wdHlTdGF0ZSBpc0Z1bGxIZWlnaHQ9e3RydWV9PlxuICAgICAgPEVtcHR5U3RhdGVJY29uIGljb249e1BsdXNDaXJjbGVJY29ufSAvPlxuICAgICAgPFRpdGxlIGhlYWRpbmdMZXZlbD1cImgyXCIgc2l6ZT1cImxnXCI+XG4gICAgICAgIFRoZXJlIGFyZSBjdXJyZW50bHkgbm8gdXNlcnMgaW4geW91ciBvcmdhbml6YXRpb24gYXNzaWduZWQgc2VhdHMuXG4gICAgICAgIDxiciAvPlxuICAgICAgICBZb3VyIG9yZ2FuaXphdGlvbiBoYXMge3RvdGFsU2VhdHN9IHNlYXRzIGF2YWlsYWJsZS5cbiAgICAgIDwvVGl0bGU+XG4gICAgICA8RW1wdHlTdGF0ZUJvZHk+XG4gICAgICAgIFBsZWFzZSBhZGQgdXNlcnMgYnkgdXNpbmcgdGhlIGJ1dHRvbiBiZWxvdy5cbiAgICAgIDwvRW1wdHlTdGF0ZUJvZHk+XG4gICAgICA8QnV0dG9uXG4gICAgICAgIG91aWFJZD1cImJ1dHRvbi1jcmVhdGVcIlxuICAgICAgICB2YXJpYW50PVwicHJpbWFyeVwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQWRkVXNlcnMoKX1cbiAgICAgID5cbiAgICAgICAgQWRkIHVzZXJzXG4gICAgICA8L0J1dHRvbj5cbiAgICA8L0VtcHR5U3RhdGU+XG4gICk7XG59O1xuIiwiaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkBwYXR0ZXJuZmx5L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7IEFjdGlvbnNDb2x1bW4gfSBmcm9tIFwiQHBhdHRlcm5mbHkvcmVhY3QtdGFibGVcIjtcbmltcG9ydCB0eXBlIHsgVGFibGVWaWV3UHJvcHMgfSBmcm9tIFwiQHJob2FzL2FwcC1zZXJ2aWNlcy11aS1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBUYWJsZVZpZXcgfSBmcm9tIFwiQHJob2FzL2FwcC1zZXJ2aWNlcy11aS1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcImNsaWVudFwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBFbXB0eVN0YXRlTm9Bc3NpZ25lZFNlYXQgfSBmcm9tIFwiLi9FbXB0eVN0YXRlTm9Bc3NpZ25lZFNlYXRcIjtcbmltcG9ydCB7XG4gIEVtcHR5U3RhdGVOb1Jlc3VsdHMsXG4gIEVtcHR5U3RhdGVOb1Jlc3VsdHNQcm9wcyxcbn0gZnJvbSBcIi4vRW1wdHlTdGF0ZU5vUmVzdWx0c1wiO1xuXG5leHBvcnQgY29uc3QgQ29sdW1ucyA9IFtcIm5hbWVcIl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBsYWJlbHM6IHsgW2tleSBpbiAodHlwZW9mIENvbHVtbnMpW251bWJlcl1dOiBzdHJpbmcgfSA9IHtcbiAgbmFtZTogXCJVc2VybmFtZVwiLFxufTtcblxuZXhwb3J0IHR5cGUgVXNlcnNXaXRoU2VhdFRhYmxlUHJvcHMgPSB7XG4gIHVzZXJzOiBBcnJheTxVc2VyPiB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIGdldFVybEZvclVzZXI6IChyb3c6IFVzZXIpID0+IHN0cmluZztcbiAgdG90YWxTZWF0czogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICB1c2VybmFtZXM6IHN0cmluZ1tdO1xuICBjYW5BZGRVc2VyOiBib29sZWFuO1xuICBvbkFkZFVzZXI6ICgpID0+IHZvaWQ7XG4gIGlzVXNlckNoZWNrZWQ6ICh1c2VyOiBVc2VyKSA9PiBib29sZWFuO1xuICBvbkNoZWNrVXNlcjogKHVzZXI6IFVzZXIsIGlzQ2hlY2tlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgb25TZWFyY2hVc2VybmFtZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9uUmVtb3ZlVXNlcm5hbWVDaGlwOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgb25SZW1vdmVVc2VybmFtZUNoaXBzOiAoKSA9PiB2b2lkO1xuICBvblJlbW92ZVNlYXQ6IChyb3c/OiBVc2VyKSA9PiB2b2lkO1xufSAmIFBpY2s8XG4gIFRhYmxlVmlld1Byb3BzPFVzZXIsICh0eXBlb2YgQ29sdW1ucylbbnVtYmVyXT4sXG4gIHwgXCJpdGVtQ291bnRcIlxuICB8IFwicGFnZVwiXG4gIHwgXCJwZXJQYWdlXCJcbiAgfCBcIm9uUGFnZUNoYW5nZVwiXG4gIHwgXCJpc0NvbHVtblNvcnRhYmxlXCJcbiAgfCBcIm9uQ2xlYXJBbGxGaWx0ZXJzXCJcbj4gJlxuICBFbXB0eVN0YXRlTm9SZXN1bHRzUHJvcHM7XG5cbmV4cG9ydCBjb25zdCBVc2Vyc1dpdGhTZWF0VGFibGUgPSAoe1xuICB1c2VycyxcbiAgaXRlbUNvdW50LFxuICBwYWdlLFxuICBwZXJQYWdlLFxuICB1c2VybmFtZXMsXG4gIHRvdGFsU2VhdHMsXG4gIGdldFVybEZvclVzZXIsXG4gIGlzQ29sdW1uU29ydGFibGUsXG4gIGNhbkFkZFVzZXIsXG4gIGlzVXNlckNoZWNrZWQsXG4gIG9uQ2hlY2tVc2VyLFxuICBvblBhZ2VDaGFuZ2UsXG4gIG9uUmVtb3ZlU2VhdCxcbiAgb25BZGRVc2VyLFxuICBvblNlYXJjaFVzZXJuYW1lLFxuICBvblJlbW92ZVVzZXJuYW1lQ2hpcCxcbiAgb25SZW1vdmVVc2VybmFtZUNoaXBzLFxuICBvbkNsZWFyQWxsRmlsdGVycyxcbn06IFVzZXJzV2l0aFNlYXRUYWJsZVByb3BzKSA9PiB7XG4gIGNvbnN0IGJyZWFrcG9pbnQgPSBcImxnXCI7XG5cbiAgY29uc3QgaXNGaWx0ZXJlZCA9IHVzZXJuYW1lcy5sZW5ndGggPiAwO1xuXG4gIHJldHVybiAoXG4gICAgPFRhYmxlVmlld1xuICAgICAgZGF0YT17dXNlcnN9XG4gICAgICBjb2x1bW5zPXtDb2x1bW5zfVxuICAgICAgcmVuZGVySGVhZGVyPXsoeyBjb2x1bW4sIFRoLCBrZXkgfSkgPT4gKFxuICAgICAgICA8VGgga2V5PXtrZXl9PntsYWJlbHNbY29sdW1uXX08L1RoPlxuICAgICAgKX1cbiAgICAgIHJlbmRlckNlbGw9eyh7IGNvbHVtbiwgcm93LCBUZCwga2V5IH0pID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8VGQga2V5PXtrZXl9IGRhdGFMYWJlbD17bGFiZWxzW2NvbHVtbl19PlxuICAgICAgICAgICAgeygoKSA9PiB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm5hbWVcIjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwibGlua1wiXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PXsocHJvcHMpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtnZXRVcmxGb3JVc2VyKHJvdyl9IHsuLi5wcm9wc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtyb3cubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgIGlzSW5saW5lXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiByb3dbY29sdW1uXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKX1cbiAgICAgICAgICA8L1RkPlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICAgIHJlbmRlckFjdGlvbnM9eyh7IHJvdyB9KSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEFjdGlvbnNDb2x1bW5cbiAgICAgICAgICAgIHJvd0RhdGE9e2hhY2taSW5kZXh9XG4gICAgICAgICAgICBpdGVtcz17W1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiUmVtb3ZlIHNlYXRcIixcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBvblJlbW92ZVNlYXQocm93KSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF19XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH19XG4gICAgICBpc0NvbHVtblNvcnRhYmxlPXtpc0NvbHVtblNvcnRhYmxlfVxuICAgICAgdG9vbGJhckJyZWFrcG9pbnQ9e2JyZWFrcG9pbnR9XG4gICAgICBmaWx0ZXJzPXt7XG4gICAgICAgIFtcIlVzZXJuYW1lXCJdOiB7XG4gICAgICAgICAgdHlwZTogXCJzZWFyY2hcIixcbiAgICAgICAgICBjaGlwczogdXNlcm5hbWVzLFxuICAgICAgICAgIG9uU2VhcmNoOiBvblNlYXJjaFVzZXJuYW1lLFxuICAgICAgICAgIG9uUmVtb3ZlQ2hpcDogb25SZW1vdmVVc2VybmFtZUNoaXAsXG4gICAgICAgICAgb25SZW1vdmVHcm91cDogb25SZW1vdmVVc2VybmFtZUNoaXBzLFxuICAgICAgICAgIHZhbGlkYXRlOiAodmFsdWUpID0+IC9eW2Etel0oWy1hLXowLTldKlthLXowLTldKT8kLy50ZXN0KHZhbHVlKSxcbiAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwiSW52YWxpZCBzdHJpbmdcIixcbiAgICAgICAgfSxcbiAgICAgIH19XG4gICAgICBhY3Rpb25zPXtbXG4gICAgICAgIC4uLihjYW5BZGRVc2VyXG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJBc3NpZ24gdXNlcihzKVwiLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IG9uQWRkVXNlcixcbiAgICAgICAgICAgICAgICBpc1ByaW1hcnk6IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBbXSksXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogXCJSZW1vdmUgdXNlcihzKVwiLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IG9uUmVtb3ZlU2VhdCgpLFxuICAgICAgICAgIGlzUHJpbWFyeTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICBdfVxuICAgICAgaXRlbUNvdW50PXtpdGVtQ291bnR9XG4gICAgICBwYWdlPXtwYWdlfVxuICAgICAgcGVyUGFnZT17cGVyUGFnZX1cbiAgICAgIG9uUGFnZUNoYW5nZT17b25QYWdlQ2hhbmdlfVxuICAgICAgb25DbGVhckFsbEZpbHRlcnM9e29uQ2xlYXJBbGxGaWx0ZXJzfVxuICAgICAgYXJpYUxhYmVsPXtcIlNlYXRzIEFkbWluaXN0cmF0aW9uIHVzZXJzXCJ9XG4gICAgICBpc0ZpbHRlcmVkPXtpc0ZpbHRlcmVkfVxuICAgICAgaXNSb3dDaGVja2VkPXsoe3Jvd30pID0+IGlzVXNlckNoZWNrZWQocm93KX1cbiAgICAgIG9uQ2hlY2s9eyh7IHJvdyB9LCBpc0NoZWNrZWQpID0+IG9uQ2hlY2tVc2VyKHJvdywgaXNDaGVja2VkKX1cbiAgICAgIGVtcHR5U3RhdGVOb0RhdGE9e1xuICAgICAgICA8RW1wdHlTdGF0ZU5vQXNzaWduZWRTZWF0XG4gICAgICAgICAgdG90YWxTZWF0cz17dG90YWxTZWF0cyB8fCAwfVxuICAgICAgICAgIG9uQWRkVXNlcnM9e29uQWRkVXNlcn1cbiAgICAgICAgLz5cbiAgICAgIH1cbiAgICAgIGVtcHR5U3RhdGVOb1Jlc3VsdHM9e1xuICAgICAgICA8RW1wdHlTdGF0ZU5vUmVzdWx0cyBvbkNsZWFyQWxsRmlsdGVycz17b25DbGVhckFsbEZpbHRlcnN9IC8+XG4gICAgICB9XG4gICAgLz5cbiAgKTtcbn07XG5cbmNvbnN0IGhhY2taSW5kZXggPSB7XG4gIGFjdGlvblByb3BzOiB7XG4gICAgc3R5bGU6IHsgekluZGV4OiA5OTk5IH0sXG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgQnV0dG9uLCBNb2RhbCB9IGZyb20gXCJAcGF0dGVybmZseS9yZWFjdC1jb3JlXCI7XG5pbXBvcnQgeyBUYWJsZVZpZXcgfSBmcm9tIFwiQHJob2FzL2FwcC1zZXJ2aWNlcy11aS1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcImNsaWVudFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxudHlwZSBDb25maXJtUmVtb3ZlRGlhbG9nUHJvcHMgPSB7XG4gIHVzZXJzOiBVc2VyW107XG4gIG9uQ29uZmlybTogKCkgPT4gdm9pZDtcbiAgb25DYW5jZWw6ICgpID0+IHZvaWQ7XG59O1xuXG5jb25zdCBQQUdFX1NJWkUgPSA1O1xuXG5leHBvcnQgY29uc3QgQ29uZmlybVJlbW92ZURpYWxvZyA9ICh7XG4gIHVzZXJzLFxuICBvbkNvbmZpcm0sXG4gIG9uQ2FuY2VsLFxufTogQ29uZmlybVJlbW92ZURpYWxvZ1Byb3BzKSA9PiB7XG4gIGNvbnN0IFt1c2Vyc1BhZ2UsIHNldFVzZXJQYWdlXSA9IHVzZVN0YXRlPFVzZXJbXT4odXNlcnMuc2xpY2UoMCwgUEFHRV9TSVpFKSk7XG4gIGNvbnN0IFtwYWdlLCBzZXRQYWdlXSA9IHVzZVN0YXRlKDEpO1xuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsXG4gICAgICB0aXRsZT1cIlJlbW92ZSB1c2Vyc1wiXG4gICAgICB0aXRsZUljb25WYXJpYW50PVwid2FybmluZ1wiXG4gICAgICBpc09wZW5cbiAgICAgIHZhcmlhbnQ9e3VzZXJzLmxlbmd0aCA+IDUgPyBcIm1lZGl1bVwiIDogXCJzbWFsbFwifVxuICAgICAgYWN0aW9ucz17W1xuICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJkYW5nZXJcIiBvbkNsaWNrPXsoKSA9PiBvbkNvbmZpcm0oKX0+XG4gICAgICAgICAgUmVtb3ZlIHVzZXIocylcbiAgICAgICAgPC9CdXR0b24+LFxuICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJsaW5rXCIgb25DbGljaz17KCkgPT4gb25DYW5jZWwoKX0+XG4gICAgICAgICAgQ2FuY2VsXG4gICAgICAgIDwvQnV0dG9uPixcbiAgICAgIF19XG4gICAgICBvbkNsb3NlPXtvbkNhbmNlbH1cbiAgICA+XG4gICAgICBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSB1c2VyKHMpIGJlbG93IGZyb20gUHJvamVjdCBXaXNkb21cbiAgICAgIHt1c2Vycy5sZW5ndGggPiA1ID8gKFxuICAgICAgICA8VGFibGVWaWV3XG4gICAgICAgICAgZGF0YT17dXNlcnNQYWdlfVxuICAgICAgICAgIGNvbHVtbnM9e1tcIm5hbWVcIl19XG4gICAgICAgICAgaXRlbUNvdW50PXt1c2Vycy5sZW5ndGh9XG4gICAgICAgICAgcGVyUGFnZT17UEFHRV9TSVpFfVxuICAgICAgICAgIHBhZ2U9e3BhZ2V9XG4gICAgICAgICAgb25QYWdlQ2hhbmdlPXsocGFnZTogbnVtYmVyLCBwZXJQYWdlOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIHNldFBhZ2UocGFnZSk7XG4gICAgICAgICAgICBzZXRVc2VyUGFnZSh1c2Vycy5zbGljZSgocGFnZSAtIDEpICogcGVyUGFnZSwgcGFnZSAqIHBlclBhZ2UpKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIGVtcHR5U3RhdGVOb0RhdGE9ezw+PC8+fVxuICAgICAgICAgIGVtcHR5U3RhdGVOb1Jlc3VsdHM9ezw+PC8+fVxuICAgICAgICAgIGFyaWFMYWJlbD17XCJcIn1cbiAgICAgICAgICByZW5kZXJIZWFkZXI9eyh7IFRoLCBrZXkgfSkgPT4gPFRoIGtleT17a2V5fT5OYW1lPC9UaD59XG4gICAgICAgICAgcmVuZGVyQ2VsbD17KHsgcm93LCBUZCwga2V5IH0pID0+IChcbiAgICAgICAgICAgIDxUZCBrZXk9e2tleX0gZGF0YUxhYmVsPVwiTmFtZVwiPlxuICAgICAgICAgICAgICB7cm93Lm5hbWV9XG4gICAgICAgICAgICA8L1RkPlxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG4gICAgICApIDogKFxuICAgICAgICA8cCBjbGFzc05hbWU9XCJwZi11LXB0LW1kXCI+XG4gICAgICAgICAge3VzZXJzLm1hcCgodXNlciwgaSkgPT4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPGI+e3VzZXIubmFtZX08L2I+XG4gICAgICAgICAgICAgIHtpICE9PSB1c2Vycy5sZW5ndGggLSAxID8gXCIsIFwiIDogXCJcIn1cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3A+XG4gICAgICApfVxuICAgIDwvTW9kYWw+XG4gICk7XG59O1xuIiwiaW1wb3J0IHsgQWxlcnQsIFBhZ2UsIFBhZ2VTZWN0aW9uIH0gZnJvbSBcIkBwYXR0ZXJuZmx5L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7XG4gIHVzZVBhZ2luYXRpb25TZWFyY2hQYXJhbXMsXG4gIHVzZVVSTFNlYXJjaFBhcmFtc0NoaXBzLFxufSBmcm9tIFwiQHJob2FzL2FwcC1zZXJ2aWNlcy11aS1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyB1c2VNdXRhdGlvbiwgdXNlUXVlcnkgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgRW1wdHlTdGF0ZU5vU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4uL0NvbXBvbmVudHMvRW1wdHlTdGF0ZU5vU3Vic2NyaXB0aW9uXCI7XG5pbXBvcnQgeyBSZW1vdmVVc2Vyc01vZGFsIH0gZnJvbSBcIi4uL0NvbXBvbmVudHMvUmVtb3ZlVXNlcnNNb2RhbFwiO1xuaW1wb3J0IHsgU2VhdHNIZWFkZXIgfSBmcm9tIFwiLi4vQ29tcG9uZW50cy9TZWF0c0hlYWRlclwiO1xuaW1wb3J0IHsgdXNlU2VydmljZSB9IGZyb20gXCIuLi9Db21wb25lbnRzL1NlcnZpY2VQcm92aWRlclwiO1xuaW1wb3J0IHsgVXNlcnNXaXRoU2VhdFRhYmxlIH0gZnJvbSBcIi4uL0NvbXBvbmVudHMvVXNlcnNXaXRoU2VhdFRhYmxlXCI7XG5pbXBvcnQgeyBVc2VyLCBMaWNlbnNlIH0gZnJvbSBcImNsaWVudFwiO1xuaW1wb3J0IHsgQ29uZmlybVJlbW92ZURpYWxvZyB9IGZyb20gXCIuLi9Db21wb25lbnRzL0NvbmZpcm1SZW1vdmVEaWFsb2dcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbiB9IGZyb20gXCIuL0FkZFVzZXJzUGFnZVwiO1xuXG5leHBvcnQgY29uc3QgVXNlcnNQYWdlID0gKHsgb25TdWNjZXNzLCBvbkVycm9yIH06IFBhcnRpYWw8Tm90aWZpY2F0aW9uPikgPT4ge1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICBjb25zdCBbY2hlY2tlZFVzZXJzLCBzZXRDaGVja2VkVXNlcnNdID0gdXNlU3RhdGU8VXNlcltdPihbXSk7XG4gIGNvbnN0IFtjb25maXJtT3Blbiwgc2V0Q29uZmlybU9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHsgcGFnZSwgcGVyUGFnZSwgc2V0UGFnaW5hdGlvbiwgc2V0UGFnaW5hdGlvblF1ZXJ5IH0gPVxuICAgIHVzZVBhZ2luYXRpb25TZWFyY2hQYXJhbXMoKTtcbiAgY29uc3QgcmVzZXRQYWdpbmF0aW9uUXVlcnkgPSB1c2VDYWxsYmFjayhcbiAgICAoKSA9PiBzZXRQYWdpbmF0aW9uUXVlcnkoMSwgcGVyUGFnZSksXG4gICAgW3BlclBhZ2UsIHNldFBhZ2luYXRpb25RdWVyeV1cbiAgKTtcblxuICBjb25zdCB1c2VybmFtZUNoaXBzID0gdXNlVVJMU2VhcmNoUGFyYW1zQ2hpcHMoXG4gICAgXCJ1c2VybmFtZVwiLFxuICAgIHJlc2V0UGFnaW5hdGlvblF1ZXJ5XG4gICk7XG5cbiAgY29uc3Qgc2VydmljZSA9IHVzZVNlcnZpY2UoKTtcblxuICBjb25zdCBzdWJzY3JpcHRpb25zID0gdXNlUXVlcnk8TGljZW5zZT4oe1xuICAgIHF1ZXJ5S2V5OiBbXCJzdWJzY3JpcHRpb25zXCJdLFxuICAgIHF1ZXJ5Rm46ICgpID0+IHNlcnZpY2UuZ2V0KFwibzFcIiwgXCJzbWFydHNcIiksXG4gIH0pO1xuXG4gIGNvbnN0IHVzZXJzID0gdXNlUXVlcnk8VXNlcltdPih7XG4gICAgcXVlcnlLZXk6IFtcInVzZXJzXCIsIHsgcGFnZSwgcGVyUGFnZSwgdXNlcm5hbWVzOiB1c2VybmFtZUNoaXBzLmNoaXBzIH1dLFxuICAgIHF1ZXJ5Rm46ICgpID0+IHNlcnZpY2Uuc2VhdHMoXCJvMVwiLCBcInNtYXJ0c1wiKSxcbiAgfSk7XG5cbiAgY29uc3QgbmVnYXRpdmVTZWF0cyA9IChzdWJzY3JpcHRpb25zLmRhdGE/LmF2YWlsYWJsZSB8fCAwKSA8IDA7XG4gIGNvbnN0IHVzZXJzVG9SZW1vdmUgPSBNYXRoLmFicyhzdWJzY3JpcHRpb25zLmRhdGE/LmF2YWlsYWJsZSB8fCAwKTtcblxuICBjb25zdCBjYW50QWRkVXNlcnMgPVxuICAgIChzdWJzY3JpcHRpb25zLmRhdGE/LnRvdGFsIHx8IDApID4gMCAmJiBzdWJzY3JpcHRpb25zLmRhdGE/LmF2YWlsYWJsZSA9PT0gMDtcblxuICBjb25zdCB7IG11dGF0ZSB9ID0gdXNlTXV0YXRpb24oXG4gICAgYXN5bmMgKGFyZzogVXNlcltdKSA9PiB7XG4gICAgICBhd2FpdCBzZXJ2aWNlLnVuQXNzaWduKFxuICAgICAgICBcIm8xXCIsXG4gICAgICAgIFwic21hcnRzXCIsXG4gICAgICAgIGFyZy5tYXAoKHsgaWQgfSkgPT4gaWQpXG4gICAgICApO1xuICAgICAgc2V0Q29uZmlybU9wZW4oZmFsc2UpO1xuICAgICAgc2V0Q2hlY2tlZFVzZXJzKFtdKTtcbiAgICB9LFxuICAgIHtcbiAgICAgIG9uU3VjY2VzczogKCkgPT4ge1xuICAgICAgICBvblN1Y2Nlc3MgJiYgb25TdWNjZXNzKFwiU3VjY2Vzc2Z1bGx5IHJlbW92ZWQgdXNlcnNcIik7XG4gICAgICB9LFxuICAgICAgb25FcnJvcjogKGVycm9yKSA9PiB7XG4gICAgICAgIG9uRXJyb3IgJiYgb25FcnJvcihcInRoZXJlIHdhcyBhbiBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICB9LFxuICAgIH1cbiAgKTtcbiAgcmV0dXJuIChcbiAgICA8UGFnZT5cbiAgICAgIDxTZWF0c0hlYWRlclxuICAgICAgICB0b3RhbFNlYXRzPXtzdWJzY3JpcHRpb25zLmRhdGE/LnRvdGFsIHx8IDB9XG4gICAgICAgIGF2YWlsYWJsZVNlYXRzPXtzdWJzY3JpcHRpb25zLmRhdGE/LmF2YWlsYWJsZSB8fCAwfVxuICAgICAgLz5cbiAgICAgIHtzdWJzY3JpcHRpb25zLmRhdGE/LnRvdGFsID09PSAwICYmIDxFbXB0eVN0YXRlTm9TdWJzY3JpcHRpb24gLz59XG4gICAgICB7bmVnYXRpdmVTZWF0cyAmJiB1c2Vyc1RvUmVtb3ZlICYmIChcbiAgICAgICAgPFJlbW92ZVVzZXJzTW9kYWxcbiAgICAgICAgICB1c2Vyc1RvUmVtb3ZlPXt1c2Vyc1RvUmVtb3ZlfVxuICAgICAgICAgIG9uT2s9eygpID0+IGhpc3RvcnkucHVzaChcIi9yZW1vdmUtdXNlcnNcIil9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAge2NvbmZpcm1PcGVuICYmIChcbiAgICAgICAgPENvbmZpcm1SZW1vdmVEaWFsb2dcbiAgICAgICAgICB1c2Vycz17Y2hlY2tlZFVzZXJzfVxuICAgICAgICAgIG9uQ29uZmlybT17KCkgPT4gbXV0YXRlKGNoZWNrZWRVc2Vycyl9XG4gICAgICAgICAgb25DYW5jZWw9eygpID0+IHNldENvbmZpcm1PcGVuKGZhbHNlKX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICA8UGFnZVNlY3Rpb24gaXNGaWxsZWQ+XG4gICAgICAgIHtjYW50QWRkVXNlcnMgPyAoXG4gICAgICAgICAgPEFsZXJ0XG4gICAgICAgICAgICB0aXRsZT17XG4gICAgICAgICAgICAgIFwiVGhlcmUgYXJlIDAgc2VhdHMgbGVmdCBpbiB5b3VyIG9yZ2FuaXphdGlvbidzIHN1YnNjcmlwdGlvbi4gQ29udGFjdCBSZWQgSGF0IHRvIG1hbmFnZSB5b3VyIFNlYXRzIEFkbWluaXN0cmF0aW9uIGxpY2Vuc2UuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhcmlhbnQ9XCJ3YXJuaW5nXCJcbiAgICAgICAgICAgIGlzSW5saW5lXG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIHtzdWJzY3JpcHRpb25zLmRhdGE/LnRvdGFsICE9PSAwICYmIChcbiAgICAgICAgICA8VXNlcnNXaXRoU2VhdFRhYmxlXG4gICAgICAgICAgICB0b3RhbFNlYXRzPXtzdWJzY3JpcHRpb25zLmRhdGE/LnRvdGFsfVxuICAgICAgICAgICAgdXNlcnM9e3VzZXJzLmRhdGF9XG4gICAgICAgICAgICBpdGVtQ291bnQ9e3VzZXJzLmRhdGE/Lmxlbmd0aH1cbiAgICAgICAgICAgIGNhbkFkZFVzZXI9eyFjYW50QWRkVXNlcnN9XG4gICAgICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICAgICAgcGVyUGFnZT17cGVyUGFnZX1cbiAgICAgICAgICAgIG9uUGFnZUNoYW5nZT17c2V0UGFnaW5hdGlvbn1cbiAgICAgICAgICAgIHVzZXJuYW1lcz17dXNlcm5hbWVDaGlwcy5jaGlwc31cbiAgICAgICAgICAgIG9uU2VhcmNoVXNlcm5hbWU9e3VzZXJuYW1lQ2hpcHMuYWRkfVxuICAgICAgICAgICAgb25SZW1vdmVVc2VybmFtZUNoaXA9e3VzZXJuYW1lQ2hpcHMucmVtb3ZlfVxuICAgICAgICAgICAgb25SZW1vdmVVc2VybmFtZUNoaXBzPXt1c2VybmFtZUNoaXBzLmNsZWFyfVxuICAgICAgICAgICAgb25DbGVhckFsbEZpbHRlcnM9e3VzZXJuYW1lQ2hpcHMuY2xlYXJ9XG4gICAgICAgICAgICBnZXRVcmxGb3JVc2VyPXsodXNlcikgPT4gYCMke3VzZXIubmFtZX1gfVxuICAgICAgICAgICAgb25BZGRVc2VyPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGhpc3RvcnkucHVzaChcIi9hZGQtdXNlcnNcIik7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgaXNVc2VyQ2hlY2tlZD17KHVzZXIpID0+IGNoZWNrZWRVc2Vycy5pbmNsdWRlcyh1c2VyKX1cbiAgICAgICAgICAgIG9uQ2hlY2tVc2VyPXsodXNlciwgaXNDaGVja2VkKSA9PiB7XG4gICAgICAgICAgICAgIHNldENoZWNrZWRVc2VycyhcbiAgICAgICAgICAgICAgICBpc0NoZWNrZWRcbiAgICAgICAgICAgICAgICAgID8gWy4uLmNoZWNrZWRVc2VycywgdXNlcl1cbiAgICAgICAgICAgICAgICAgIDogY2hlY2tlZFVzZXJzLmZpbHRlcigodSkgPT4gdSAhPT0gdXNlcilcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblJlbW92ZVNlYXQ9eyh1c2VyKSA9PiB7XG4gICAgICAgICAgICAgIGlmICh1c2VyKSBzZXRDaGVja2VkVXNlcnMoW3VzZXJdKTtcbiAgICAgICAgICAgICAgc2V0Q29uZmlybU9wZW4odHJ1ZSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L1BhZ2VTZWN0aW9uPlxuICAgIDwvUGFnZT5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBCdXR0b24sIEJ1dHRvblZhcmlhbnQsIE1vZGFsIH0gZnJvbSBcIkBwYXR0ZXJuZmx5L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7XG4gIHVzZVBhZ2luYXRpb25TZWFyY2hQYXJhbXMsXG4gIHVzZVVSTFNlYXJjaFBhcmFtc0NoaXBzLFxufSBmcm9tIFwiQHJob2FzL2FwcC1zZXJ2aWNlcy11aS1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyB1c2VNdXRhdGlvbiwgdXNlUXVlcnkgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyBVc2VyLCBMaWNlbnNlIH0gZnJvbSBcImNsaWVudFwiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZXJ2aWNlIH0gZnJvbSBcIi4uL0NvbXBvbmVudHMvU2VydmljZVByb3ZpZGVyXCI7XG5pbXBvcnQgeyBVc2Vyc1BpY2tlclRhYmxlIH0gZnJvbSBcIi4uL0NvbXBvbmVudHMvVXNlcnNQaWNrZXJUYWJsZVwiO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tIFwiLi9BZGRVc2Vyc1BhZ2VcIjtcblxuZXhwb3J0IGNvbnN0IFJlbW92ZVVzZXJzUGFnZSA9ICh7IG9uU3VjY2Vzcywgb25FcnJvciB9OiBOb3RpZmljYXRpb24pID0+IHtcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcbiAgY29uc3Qgc2VydmljZSA9IHVzZVNlcnZpY2UoKTtcblxuICBjb25zdCBzdWJzY3JpcHRpb25zID0gdXNlUXVlcnk8TGljZW5zZT4oe1xuICAgIHF1ZXJ5S2V5OiBbXCJzdWJzY3JpcHRpb25zXCJdLFxuICAgIHF1ZXJ5Rm46IGFzeW5jICgpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBzZXJ2aWNlLmdldChcIm8xXCIsIFwic21hcnRzXCIpO1xuICAgIH0sXG4gIH0pO1xuICBjb25zdCB7IHBhZ2UsIHBlclBhZ2UsIHNldFBhZ2luYXRpb24sIHNldFBhZ2luYXRpb25RdWVyeSB9ID1cbiAgICB1c2VQYWdpbmF0aW9uU2VhcmNoUGFyYW1zKCk7XG4gIGNvbnN0IHJlc2V0UGFnaW5hdGlvblF1ZXJ5ID0gdXNlQ2FsbGJhY2soXG4gICAgKCkgPT4gc2V0UGFnaW5hdGlvblF1ZXJ5KDEsIHBlclBhZ2UpLFxuICAgIFtwZXJQYWdlLCBzZXRQYWdpbmF0aW9uUXVlcnldXG4gICk7XG5cbiAgY29uc3QgdXNlcm5hbWVDaGlwcyA9IHVzZVVSTFNlYXJjaFBhcmFtc0NoaXBzKFxuICAgIFwidXNlcm5hbWVcIixcbiAgICByZXNldFBhZ2luYXRpb25RdWVyeVxuICApO1xuXG4gIGNvbnN0IHVzZXJzID0gdXNlUXVlcnk8VXNlcltdPih7XG4gICAgcXVlcnlLZXk6IFtcInVzZXJzXCIsIHsgcGFnZSwgcGVyUGFnZSwgdXNlcm5hbWVzOiB1c2VybmFtZUNoaXBzLmNoaXBzIH1dLFxuICAgIHF1ZXJ5Rm46ICgpID0+IHNlcnZpY2Uuc2VhdHMoXCJvMVwiLCBcInNtYXJ0c1wiKSxcbiAgfSk7XG5cbiAgY29uc3QgW2NoZWNrZWRVc2Vycywgc2V0Q2hlY2tlZFVzZXJzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG5cbiAgY29uc3QgYXNzaWduZWRTZWF0cyA9XG4gICAgKHN1YnNjcmlwdGlvbnMuZGF0YT8udG90YWwgfHwgMCkgLSAoc3Vic2NyaXB0aW9ucy5kYXRhPy5hdmFpbGFibGUgfHwgMCk7XG5cbiAgY29uc3QgeyBtdXRhdGUsIGlzTG9hZGluZyB9ID0gdXNlTXV0YXRpb24oXG4gICAgKCkgPT4ge1xuICAgICAgc2V0Q2hlY2tlZFVzZXJzKFtdKTtcbiAgICAgIHJldHVybiBzZXJ2aWNlLnVuQXNzaWduKFwibzFcIiwgXCJzbWFydHNcIiwgY2hlY2tlZFVzZXJzKTtcbiAgICB9LFxuICAgIHtcbiAgICAgIG9uU3VjY2VzczogKCkgPT4ge1xuICAgICAgICBvblN1Y2Nlc3MoXCJTdWNjZXNzZnVsbHkgcmVtb3ZlZCB1c2Vyc1wiKTtcbiAgICAgIH0sXG4gICAgICBvbkVycm9yOiAoZXJyb3IpID0+IHtcbiAgICAgICAgb25FcnJvcihcInRoZXJlIHdhcyBhbiBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICB9LFxuICAgIH1cbiAgKTtcblxuICBjb25zdCBjbG9zZSA9ICgpID0+IGhpc3RvcnkucHVzaChcIi9cIik7XG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWxcbiAgICAgIGlzT3BlblxuICAgICAgdGl0bGU9e2BSZW1vdmUgJHthc3NpZ25lZFNlYXRzfSB1c2VycyBmcm9tIHRoZWlyIGFzc2lnbmVkIHNlYXRzYH1cbiAgICAgIHZhcmlhbnQ9XCJtZWRpdW1cIlxuICAgICAgb25DbG9zZT17Y2xvc2V9XG4gICAgICBhY3Rpb25zPXtbXG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBtdXRhdGUoKX1cbiAgICAgICAgICBpc0Rpc2FibGVkPXtjaGVja2VkVXNlcnMubGVuZ3RoID4gYXNzaWduZWRTZWF0c31cbiAgICAgICAgICBpc0xvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgICAgPlxuICAgICAgICAgIFJlbW92ZVxuICAgICAgICA8L0J1dHRvbj4sXG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBvbkNsaWNrPXtjbG9zZX1cbiAgICAgICAgICB2YXJpYW50PXtCdXR0b25WYXJpYW50Lmxpbmt9XG4gICAgICAgICAgaXNEaXNhYmxlZD17aXNMb2FkaW5nfVxuICAgICAgICA+XG4gICAgICAgICAgQ2FuY2VsXG4gICAgICAgIDwvQnV0dG9uPixcbiAgICAgIF19XG4gICAgPlxuICAgICAgPFVzZXJzUGlja2VyVGFibGVcbiAgICAgICAgdXNlcnM9e3VzZXJzLmRhdGF9XG4gICAgICAgIGl0ZW1Db3VudD17dXNlcnMuZGF0YT8ubGVuZ3RofVxuICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICBwZXJQYWdlPXtwZXJQYWdlfVxuICAgICAgICBvblBhZ2VDaGFuZ2U9e3NldFBhZ2luYXRpb259XG4gICAgICAgIHVzZXJuYW1lcz17dXNlcm5hbWVDaGlwcy5jaGlwc31cbiAgICAgICAgb25TZWFyY2hVc2VybmFtZT17dXNlcm5hbWVDaGlwcy5hZGR9XG4gICAgICAgIG9uUmVtb3ZlVXNlcm5hbWVDaGlwPXt1c2VybmFtZUNoaXBzLnJlbW92ZX1cbiAgICAgICAgb25SZW1vdmVVc2VybmFtZUNoaXBzPXt1c2VybmFtZUNoaXBzLmNsZWFyfVxuICAgICAgICBvbkNsZWFyQWxsRmlsdGVycz17dXNlcm5hbWVDaGlwcy5jbGVhcn1cbiAgICAgICAgaXNVc2VyQ2hlY2tlZD17KHVzZXIpID0+IGNoZWNrZWRVc2Vycy5pbmNsdWRlcyh1c2VyLmlkKX1cbiAgICAgICAgb25DaGVja1VzZXI9eyh1c2VyLCBpc0NoZWNrZWQpID0+IHtcbiAgICAgICAgICBzZXRDaGVja2VkVXNlcnMoXG4gICAgICAgICAgICBpc0NoZWNrZWRcbiAgICAgICAgICAgICAgPyBbLi4uY2hlY2tlZFVzZXJzLCB1c2VyLmlkXVxuICAgICAgICAgICAgICA6IGNoZWNrZWRVc2Vycy5maWx0ZXIoKHUpID0+IHUgIT09IHVzZXIuaWQpXG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgPC9Nb2RhbD5cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wSXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJzaG91bGRVc2VOYXRpdmUiLCJ0ZXN0MSIsInRlc3QyIiwiaSIsIm9yZGVyMiIsIm4iLCJ0ZXN0MyIsImxldHRlciIsIm9iamVjdEFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJ0byIsInN5bWJvbHMiLCJzIiwia2V5IiwicmVxdWlyZSQkMCIsImYiLCJyZXF1aXJlJCQxIiwiZyIsInJlYWN0SnN4UnVudGltZV9wcm9kdWN0aW9uX21pbiIsImgiLCJtIiwicCIsInEiLCJjIiwiYSIsImsiLCJiIiwiZCIsImUiLCJsIiwiUmVhY3QiLCJfYXNzaWduIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJleHBvcnRzIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIlJFQUNUX1BST0ZJTEVSX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJSRUFDVF9CTE9DS19UWVBFIiwiUkVBQ1RfU0VSVkVSX0JMT0NLX1RZUEUiLCJSRUFDVF9GVU5EQU1FTlRBTF9UWVBFIiwiUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUiLCJSRUFDVF9MRUdBQ1lfSElEREVOX1RZUEUiLCJzeW1ib2xGb3IiLCJNQVlCRV9JVEVSQVRPUl9TWU1CT0wiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsImdldEl0ZXJhdG9yRm4iLCJtYXliZUl0ZXJhYmxlIiwibWF5YmVJdGVyYXRvciIsIlJlYWN0U2hhcmVkSW50ZXJuYWxzIiwiZXJyb3IiLCJmb3JtYXQiLCJfbGVuMiIsImFyZ3MiLCJfa2V5MiIsInByaW50V2FybmluZyIsImxldmVsIiwiUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSIsInN0YWNrIiwiYXJnc1dpdGhGb3JtYXQiLCJpdGVtIiwiZW5hYmxlU2NvcGVBUEkiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlIiwiZ2V0V3JhcHBlZE5hbWUiLCJvdXRlclR5cGUiLCJpbm5lclR5cGUiLCJ3cmFwcGVyTmFtZSIsImZ1bmN0aW9uTmFtZSIsImdldENvbnRleHROYW1lIiwiZ2V0Q29tcG9uZW50TmFtZSIsImNvbnRleHQiLCJwcm92aWRlciIsImxhenlDb21wb25lbnQiLCJwYXlsb2FkIiwiaW5pdCIsImRpc2FibGVkRGVwdGgiLCJwcmV2TG9nIiwicHJldkluZm8iLCJwcmV2V2FybiIsInByZXZFcnJvciIsInByZXZHcm91cCIsInByZXZHcm91cENvbGxhcHNlZCIsInByZXZHcm91cEVuZCIsImRpc2FibGVkTG9nIiwiZGlzYWJsZUxvZ3MiLCJwcm9wcyIsInJlZW5hYmxlTG9ncyIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJwcmVmaXgiLCJkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSIsIm5hbWUiLCJvd25lckZuIiwieCIsIm1hdGNoIiwicmVlbnRyeSIsImNvbXBvbmVudEZyYW1lQ2FjaGUiLCJQb3NzaWJseVdlYWtNYXAiLCJkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lIiwiZm4iLCJjb25zdHJ1Y3QiLCJmcmFtZSIsImNvbnRyb2wiLCJwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlIiwicHJldmlvdXNEaXNwYXRjaGVyIiwiRmFrZSIsInNhbXBsZSIsInNhbXBsZUxpbmVzIiwiY29udHJvbExpbmVzIiwiX2ZyYW1lIiwic3ludGhldGljRnJhbWUiLCJkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUiLCJzaG91bGRDb25zdHJ1Y3QiLCJDb21wb25lbnQiLCJwcm90b3R5cGUiLCJkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYiLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCIsImVsZW1lbnQiLCJvd25lciIsImNoZWNrUHJvcFR5cGVzIiwidHlwZVNwZWNzIiwidmFsdWVzIiwibG9jYXRpb24iLCJjb21wb25lbnROYW1lIiwiaGFzIiwidHlwZVNwZWNOYW1lIiwiZXJyb3IkMSIsImVyciIsImV4IiwiUmVhY3RDdXJyZW50T3duZXIiLCJSRVNFUlZFRF9QUk9QUyIsInNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duIiwic3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24iLCJkaWRXYXJuQWJvdXRTdHJpbmdSZWZzIiwiaGFzVmFsaWRSZWYiLCJjb25maWciLCJnZXR0ZXIiLCJoYXNWYWxpZEtleSIsIndhcm5JZlN0cmluZ1JlZkNhbm5vdEJlQXV0b0NvbnZlcnRlZCIsInNlbGYiLCJkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlciIsImRpc3BsYXlOYW1lIiwid2FybkFib3V0QWNjZXNzaW5nS2V5IiwiZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIiLCJ3YXJuQWJvdXRBY2Nlc3NpbmdSZWYiLCJSZWFjdEVsZW1lbnQiLCJyZWYiLCJqc3hERVYiLCJtYXliZUtleSIsInByb3BOYW1lIiwiZGVmYXVsdFByb3BzIiwiUmVhY3RDdXJyZW50T3duZXIkMSIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUkMSIsInNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEiLCJwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93biIsImlzVmFsaWRFbGVtZW50Iiwib2JqZWN0IiwiZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtIiwiZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJvd25lckhhc0tleVVzZVdhcm5pbmciLCJnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvIiwicGFyZW50VHlwZSIsImluZm8iLCJwYXJlbnROYW1lIiwidmFsaWRhdGVFeHBsaWNpdEtleSIsImN1cnJlbnRDb21wb25lbnRFcnJvckluZm8iLCJjaGlsZE93bmVyIiwidmFsaWRhdGVDaGlsZEtleXMiLCJub2RlIiwiY2hpbGQiLCJpdGVyYXRvckZuIiwiaXRlcmF0b3IiLCJzdGVwIiwidmFsaWRhdGVQcm9wVHlwZXMiLCJwcm9wVHlwZXMiLCJfbmFtZSIsInZhbGlkYXRlRnJhZ21lbnRQcm9wcyIsImZyYWdtZW50Iiwia2V5cyIsImpzeFdpdGhWYWxpZGF0aW9uIiwiaXNTdGF0aWNDaGlsZHJlbiIsInZhbGlkVHlwZSIsInNvdXJjZUluZm8iLCJ0eXBlU3RyaW5nIiwiY2hpbGRyZW4iLCJqc3hXaXRoVmFsaWRhdGlvblN0YXRpYyIsImpzeFdpdGhWYWxpZGF0aW9uRHluYW1pYyIsImpzeCIsImpzeHMiLCJtb2R1bGUiLCJlbiIsInIiLCJGdCIsInByIiwidCIsImd0IiwiJCIsInRuIiwiXyIsInYiLCJFIiwiRCIsIkEiLCJOIiwiVSIsInRlIiwieiIsIkciLCJLZSIsIlZlIiwiTWUiLCJJdCIsIkh0IiwiSWUiLCJPIiwiSGUiLCJGZSIsInUiLCJ5IiwidyIsIlIiLCJQIiwiZmUiLCJUIiwiQyIsIkgiLCJWIiwiTCIsIlgiLCJXIiwicmUiLCJwZSIsIloiLCJnciIsIm9lIiwieXIiLCJqZSIsInJuIiwibm4iLCJJIiwiYW4iLCJvbiIsImp0Iiwic24iLCJtciIsIndyIiwiX3IiLCJxZSIsIlVlIiwieXQiLCJtdCIsImxuIiwicXQiLCJzdCIsInVuIiwiaiIsInd0IiwiYnIiLCJkbiIsImNuIiwiYWUiLCJ2ciIsIlkiLCJobiIsImllIiwiVXQiLCJwbiIsImduIiwiUGUiLCJTZSIsIk5lIiwic2UiLCJDZSIsInluIiwibW4iLCJ3biIsImdlIiwiX24iLCJibiIsInZuIiwiRW4iLCJLIiwiQW4iLCJEbiIsIlJuIiwiVG4iLCJPbiIsIlBuIiwiU24iLCJfdCIsIk5uIiwiRXIiLCJHZSIsIkNuIiwiZGUiLCJWbiIsInpuIiwiVW4iLCJ4biIsIkxuIiwiQm4iLCJLbiIsImJ0IiwiTW4iLCJJbiIsIkhuIiwidnQiLCJGbiIsImpuIiwicW4iLCJBciIsIkduIiwibHQiLCJEciIsIlJyIiwia24iLCIkbiIsIlhuIiwiV24iLCJZbiIsImtlIiwiUW4iLCJMZSIsInplIiwiRXQiLCJBdCIsIlRyIiwiVGUiLCJEdCIsIlJ0IiwiWm4iLCJUdCIsIkpuIiwiZWEiLCJPciIsInRhIiwicmEiLCJQciIsIlNyIiwiT3QiLCJuYSIsIiRlIiwiTnIiLCJhYSIsImlhIiwiQ3IiLCJvYSIsInNhIiwidXQiLCJkdCIsImN0IiwiaHQiLCJmdCIsImxhIiwidWEiLCJkYSIsImNhIiwiaGEiLCJmYSIsInBhIiwienQiLCJnYSIsInh0IiwiQnQiLCJ5YSIsIm1hIiwiVnIiLCJNciIsIndhIiwiX2EiLCJYZSIsImJhIiwiSXIiLCJ2YSIsIlB0IiwiSHIiLCJFYSIsIkFhIiwiRGEiLCJXZSIsIlJhIiwiVGEiLCJGciIsIlllIiwiT2EiLCJ4ZSIsIlBhIiwiU2EiLCJKIiwiUSIsInB0IiwibGUiLCJlZSIsIlMiLCJKciIsIkYiLCJOYSIsIkIiLCJTdCIsIk50IiwianIiLCJDYSIsIkN0IiwiY2UiLCJ5ZSIsIm1lIiwiTHQiLCJWdCIsIndlIiwiT2UiLCJWYSIsIkt0IiwiTWEiLCJfZSIsIlFlIiwiR3QiLCJoZSIsIlplIiwia3QiLCJxciIsIiR0IiwiVXIiLCJiZSIsIkplIiwiWHQiLCJ6ciIsIld0IiwieHIiLCJ2ZSIsIll0IiwiTXQiLCJldCIsIlF0IiwiQnIiLCJadCIsIkxyIiwiRWUiLCJ0dCIsIkFlIiwiSnQiLCJJYSIsImVyIiwiS3IiLCJ0ciIsIkdyIiwicnIiLCJrciIsIm5yIiwiJHIiLCJhciIsIkhhIiwicnQiLCJpciIsIkZhIiwiRGUiLCJuZSIsIm9yIiwiamEiLCJudCIsInNyIiwiWHIiLCJsciIsInFhIiwiUmUiLCJ1ciIsIlVhIiwiYXQiLCJkciIsInphIiwiaXQiLCJjciIsInhhIiwib3QiLCJociIsIkJhIiwiTGEiLCJfX3B1YmxpY0ZpZWxkIiwiZnIiLCJLYSIsIkdhIiwia2EiLCJYYSIsIiRhIiwiV2EiLCJZYSIsIlFhIiwiWmEiLCJKYSIsImVpIiwidGkiLCJyaSIsIm5pIiwiYWkiLCJpaSIsIm9pIiwic2kiLCJsaSIsInVpIiwiZGkiLCJjaSIsImhpIiwiZmkiLCJwaSIsImdpIiwieWkiLCJtaSIsIndpIiwiX2kiLCJiaSIsInZpIiwiRWkiLCJBaSIsIkRpIiwiUmkiLCJUaSIsIk9pIiwiUGkiLCJTaSIsIk5pIiwidWUiLCJNIiwiV3IiLCJZciIsIkNpIiwiVmkiLCJfYiIsIm8iLCJNaSIsIkhpIiwiSWkiLCJRciIsIkZpIiwiamkiLCJVaSIsInFpIiwiemkiLCJ4aSIsIktpIiwiQmkiLCJHaSIsIkxpIiwia2kiLCIkaSIsIlhpIiwiWnIiLCJXaSIsIllpIiwiUWkiLCJaaSIsIkppIiwiQmUiLCJlbyIsInJvIiwibm8iLCJhbyIsImlvIiwib28iLCJzbyIsInVvIiwiU2VydmljZUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlUmVxdWlyZWRDb250ZXh0IiwicmVzb2x2ZWQiLCJ1c2VDb250ZXh0IiwidXNlU2VydmljZSIsIlNlcnZpY2VDb250ZXh0UHJvdmlkZXIiLCJzZXJ2aWNlTmFtZSIsImJhc2VVcmwiLCJnZXRTZXJ2aWNlIiwiRW1wdHlTdGF0ZU5vUmVzdWx0cyIsIm9uQ2xlYXJBbGxGaWx0ZXJzIiwiRW1wdHlTdGF0ZSIsIkVtcHR5U3RhdGVWYXJpYW50IiwiRW1wdHlTdGF0ZUljb24iLCJTZWFyY2hJY29uIiwiVGl0bGUiLCJFbXB0eVN0YXRlQm9keSIsIkNvbHVtbnMiLCJsYWJlbHMiLCJVc2Vyc1BpY2tlclRhYmxlIiwidXNlcnMiLCJpdGVtQ291bnQiLCJwYWdlIiwicGVyUGFnZSIsInVzZXJuYW1lcyIsImlzQ29sdW1uU29ydGFibGUiLCJpc1VzZXJDaGVja2VkIiwib25QYWdlQ2hhbmdlIiwib25TZWFyY2hVc2VybmFtZSIsIm9uUmVtb3ZlVXNlcm5hbWVDaGlwIiwib25SZW1vdmVVc2VybmFtZUNoaXBzIiwib25DaGVja1VzZXIiLCJicmVha3BvaW50IiwiaXNGaWx0ZXJlZCIsIlRhYmxlVmlldyIsImNvbHVtbiIsIlRoIiwicm93IiwiVGQiLCJpc0NoZWNrZWQiLCJ2YWx1ZSIsIkZyYWdtZW50IiwiQWRkVXNlcnNQYWdlIiwib25TdWNjZXNzIiwib25FcnJvciIsImhpc3RvcnkiLCJ1c2VIaXN0b3J5Iiwic2VydmljZSIsImNsb3NlIiwic3Vic2NyaXB0aW9ucyIsInVzZVF1ZXJ5Iiwic2V0UGFnaW5hdGlvbiIsInNldFBhZ2luYXRpb25RdWVyeSIsInVzZVBhZ2luYXRpb25TZWFyY2hQYXJhbXMiLCJyZXNldFBhZ2luYXRpb25RdWVyeSIsInVzZUNhbGxiYWNrIiwidXNlcm5hbWVDaGlwcyIsInVzZVVSTFNlYXJjaFBhcmFtc0NoaXBzIiwibXV0YXRlIiwiaXNMb2FkaW5nIiwidXNlTXV0YXRpb24iLCJjaGVja2VkVXNlcnMiLCJzZXRDaGVja2VkVXNlcnMiLCJ1c2VTdGF0ZSIsImFzc2lnbmVkU2VhdHMiLCJpc0FkZERpc2FibGVkIiwiX2MiLCJNb2RhbCIsIkJ1dHRvbiIsIkJ1dHRvblZhcmlhbnQiLCJfZCIsIkFsZXJ0IiwidXNlciIsIkRhbmdlckljb24iLCJJY29uIiwiRXhjbGFtYXRpb25DaXJjbGVJY29uIiwiRW1wdHlTdGF0ZU5vU3Vic2NyaXB0aW9uIiwiUmVtb3ZlVXNlcnNNb2RhbCIsInVzZXJzVG9SZW1vdmUiLCJvbk9rIiwiTW9kYWxWYXJpYW50IiwiU2VhdHNIZWFkZXIiLCJhdmFpbGFibGVTZWF0cyIsInRvdGFsU2VhdHMiLCJQYWdlU2VjdGlvbiIsIlRleHRDb250ZW50IiwiTGV2ZWwiLCJMZXZlbEl0ZW0iLCJUZXh0IiwiTGFiZWwiLCJFbXB0eVN0YXRlTm9Bc3NpZ25lZFNlYXQiLCJvbkFkZFVzZXJzIiwiUGx1c0NpcmNsZUljb24iLCJVc2Vyc1dpdGhTZWF0VGFibGUiLCJnZXRVcmxGb3JVc2VyIiwiY2FuQWRkVXNlciIsIm9uUmVtb3ZlU2VhdCIsIm9uQWRkVXNlciIsIkxpbmsiLCJBY3Rpb25zQ29sdW1uIiwiaGFja1pJbmRleCIsIlBBR0VfU0laRSIsIkNvbmZpcm1SZW1vdmVEaWFsb2ciLCJvbkNvbmZpcm0iLCJvbkNhbmNlbCIsInVzZXJzUGFnZSIsInNldFVzZXJQYWdlIiwic2V0UGFnZSIsIlVzZXJzUGFnZSIsImNvbmZpcm1PcGVuIiwic2V0Q29uZmlybU9wZW4iLCJuZWdhdGl2ZVNlYXRzIiwiY2FudEFkZFVzZXJzIiwiYXJnIiwiaWQiLCJQYWdlIiwiX2YiLCJfZyIsIl9oIiwiX2oiLCJSZW1vdmVVc2Vyc1BhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUUEsTUFBSUEsSUFBd0IsT0FBTyx1QkFDL0JDLElBQWlCLE9BQU8sVUFBVSxnQkFDbENDLElBQW1CLE9BQU8sVUFBVTtBQUV4QyxXQUFTQyxFQUFTQyxHQUFLO0FBQ3RCLFFBQUlBLEtBQVE7QUFDWCxZQUFNLElBQUksVUFBVSx1REFBdUQ7QUFHNUUsV0FBTyxPQUFPQSxDQUFHO0FBQUEsRUFDakI7QUFFRCxXQUFTQyxJQUFrQjtBQUMxQixRQUFJO0FBQ0gsVUFBSSxDQUFDLE9BQU87QUFDWCxlQUFPO0FBTVIsVUFBSUMsSUFBUSxJQUFJLE9BQU8sS0FBSztBQUU1QixVQURBQSxFQUFNLENBQUMsSUFBSSxNQUNQLE9BQU8sb0JBQW9CQSxDQUFLLEVBQUUsQ0FBQyxNQUFNO0FBQzVDLGVBQU87QUFLUixlQURJQyxJQUFRLENBQUEsR0FDSEMsSUFBSSxHQUFHQSxJQUFJLElBQUlBO0FBQ3ZCLFFBQUFELEVBQU0sTUFBTSxPQUFPLGFBQWFDLENBQUMsQ0FBQyxJQUFJQTtBQUV2QyxVQUFJQyxJQUFTLE9BQU8sb0JBQW9CRixDQUFLLEVBQUUsSUFBSSxTQUFVRyxHQUFHO0FBQy9ELGVBQU9ILEVBQU1HLENBQUM7QUFBQSxNQUNqQixDQUFHO0FBQ0Qs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\n","import { Bullseye, Spinner } from '@patternfly/react-core';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport React, { Suspense } from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport {\n  AddUsersPage,\n  RemoveUsersPage,\n  ServiceContextProvider,\n  UsersPage,\n} from 'components';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const Routes = () => {\n  const dispatch = useDispatch();\n  const handleAlert = (\n    message: string,\n    type:\n      | 'default'\n      | 'success'\n      | 'danger'\n      | 'warning'\n      | 'info'\n      | undefined = 'success'\n  ) => {\n    dispatch(\n      addNotification({\n        variant: type,\n        title: message,\n      })\n    );\n  };\n  const handleError = (message: string) => handleAlert(message, 'danger');\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <ServiceContextProvider\n        serviceName={process.env.SERVICE_KEY!}\n        baseUrl={process.env.BASE_URL}\n      >\n        <Router basename={getBaseName(window.location.pathname) + '/seats'}>\n          <Switch>\n            <Route path=\"/add-users\">\n              <UsersPage />\n              <AddUsersPage onSuccess={handleAlert} onError={handleError} />\n            </Route>\n            <Route path=\"/remove-users\">\n              <UsersPage />\n              <RemoveUsersPage onSuccess={handleAlert} onError={handleError} />\n            </Route>\n            <Route path=\"/\">\n              <UsersPage onSuccess={handleAlert} onError={handleError} />\n            </Route>\n            {/* Finally, catch all unmatched routes */}\n            <Route>\n              <InvalidObject />\n            </Route>\n          </Switch>\n        </Router>\n      </ServiceContextProvider>\n    </Suspense>\n  );\n};\n","import NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Reducer } from 'redux';\nimport './App.scss';\n\nimport { Routes } from './Routes';\n\nconst App = () => {\n  const { updateDocumentTitle, on } = useChrome();\n  const history = useHistory();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n    // You can use directly the name of your app\n    updateDocumentTitle('Starter app');\n\n    const unregister = on('APP_NAVIGATION', (event) => {\n      console.dir(event);\n      if (event.navId) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.push(event.navId);\n      }\n    });\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </Fragment>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-unused-vars */\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport type ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport type { Middleware, Reducer } from 'redux';\n\nexport let registry: ReducerRegistry<Reducer>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n"],"names":["At","Pr","Cr","Na","Object","defineProperty","m","r","e","t","enumerable","configurable","writable","value","Ia","A","Xa","exports","Ve","getOwnPropertySymbols","prototype","hasOwnProperty","propertyIsEnumerable","assign","i","String","getOwnPropertyNames","o","l","fromCharCode","map","d","join","h","split","forEach","keys","a","u","TypeError","n","arguments","length","w","call","c","Sn","Fragment","Symbol","for","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","key","ref","__self","__source","g","defaultProps","$$typeof","type","props","_owner","current","jsx","jsxs","Qa","Za","async","totalSeats","availableSeats","fetch","json","total","available","users","username","firstName","lastName","id","name","Promise","resolve","unAssign","jr","globalThis","window","global","self","Tn","__esModule","default","this","push","apply","Function","bind","getOwnPropertyDescriptor","get","v","b","O","T","P","x","V","k","B","K","M","se","pe","De","Oe","le","Xt","ve","ei","C","ne","fe","p","f","create","y","_","setPrototypeOf","__proto__","Array","constructor","D","indexOf","j","R","Reflect","decorate","H","Se","G","kind","ae","N","static","$","W","te","ce","ue","access","addInitializer","de","set","init","concat","description","metadata","next","throw","done","then","label","sent","trys","ops","return","iterator","pop","error","slice","asyncIterator","shift","raw","has","Be","Ee","contentTypeAssociatedFactories","Map","getValidContentType","Error","getRootParseNode","replace","defaultInstance","Pn","_concrete","_onBefore","_onAfter","onBeforeAssignFieldValues","onAfterAssignFieldValues","Ce","getSerializationWriter","Cn","_onStart","onBeforeObjectSerialization","onAfterObjectSerialization","onStartObjectSerialization","st","ti","Uint8Array","ri","crypto","getRandomValues","J","toString","Nr","randomUUID","ii","random","rng","toLowerCase","ni","xn","subscriptions","store","returnOnlyChangedValues","_initializationCompleted","changed","initializationCompleted","enumerate","entries","filter","enumerateKeysForValuesChangedToNull","subscribe","unsubscribe","delete","clear","jn","createBackingStore","Nn","instance","ct","super","backingStore","dt","writeNullValue","Qt","Jt","jt","Ir","ee","Zt","Set","allowedHosts","getAllowedHosts","from","setAllowedHosts","isUrlHostValid","size","isHostAndPathValid","startsWith","location","host","In","toLocaleLowerCase","protocol","Te","QueryParameter","Header","Vn","authenticateRequest","be","accessTokenProvider","claims","headers","authorizationHeaderKey","getAuthorizationToken","URL","ci","Pe","Vr","hi","match","add","di","pi","tt","rt","nt","version","stack","message","debug","xe","at","ie","fi","__read","gi","__spreadArray","yi","_namespace","namespace","Ke","info","warn","verbose","unshift","NONE","ERROR","WARN","INFO","DEBUG","VERBOSE","ALL","wi","vi","he","setLogger","logLevel","mi","suppressOverrideMessage","disable","createComponentLogger","_instance","_i","Ei","__values","Ri","_entries","getEntry","getAllEntries","setEntry","removeEntry","removeEntries","Ai","Di","Oi","er","Nt","qn","_currentContext","getValue","setValue","deleteValue","Ot","He","__extends","Ci","createHistogram","Mi","createCounter","Fi","createUpDownCounter","ki","createObservableGauge","zi","createObservableCounter","Hi","createObservableUpDownCounter","Ui","addBatchObservableCallback","removeBatchObservableCallback","tr","xi","ji","Ni","record","rr","addCallback","removeCallback","Ii","Vi","qi","Fn","INT","DOUBLE","ht","Mn","kn","Bi","Ki","$i","active","with","enable","Wi","Gi","St","Yi","wt","getInstance","setGlobalContextManager","_getContextManager","SAMPLED","nr","ar","Hn","traceId","spanId","traceFlags","et","_spanContext","spanContext","setAttribute","setAttributes","addEvent","setStatus","updateName","end","isRecording","recordException","ir","or","Xi","sr","Qi","Ji","zn","Zi","eo","Un","test","Ln","ur","to","Vt","qt","Ft","Tt","Bn","startSpan","root","ro","startActiveSpan","no","Kn","_provider","options","_getTracer","_delegate","getDelegateTracer","ao","getTracer","io","It","getDelegate","setDelegate","NOT_RECORD","RECORD","RECORD_AND_SAMPLED","INTERNAL","SERVER","CLIENT","PRODUCER","CONSUMER","UNSET","OK","Mt","uo","RegExp","lo","co","go","_internalState","_parse","_clone","unset","serialize","_keys","reduce","reverse","trim","ho","po","$n","Wn","mo","getMeter","wo","Pt","vo","setGlobalMeterProvider","getMeterProvider","Gn","bo","inject","extract","fields","lr","Yn","_o","Eo","Ro","Ct","Ao","Do","createBaggage","getBaggage","getActiveBaggage","setBaggage","deleteBaggage","setGlobalPropagator","_getGlobalPropagator","Xn","xt","Oo","_proxyTracerProvider","wrapSpanContext","isSpanContextValid","deleteSpan","getSpan","getActiveSpan","getSpanContext","setSpan","setSpanContext","setGlobalTracerProvider","getTracerProvider","pt","So","context","diag","metrics","propagation","trace","To","freeze","DiagConsoleLogger","console","log","DiagLogLevel","INVALID_SPANID","INVALID_SPAN_CONTEXT","INVALID_TRACEID","ProxyTracer","ProxyTracerProvider","ROOT_CONTEXT","SamplingDecision","SpanKind","SpanStatusCode","TraceFlags","ValueType","baggageEntryMetadataFromString","__TYPE__","createContextKey","createNoopMeter","createTraceState","defaultTextMapGetter","defaultTextMapSetter","isValidSpanId","isValidTraceId","toStringTag","Re","year","month","day","getFullYear","getMonth","getDate","exec","parseInt","groups","Date","parse","isNaN","fromDate","_e","padStart","oe","kt","InvalidDurationError","unit","symbol","parseFloat","negative","toFixed","years","months","weeks","days","hours","minutes","seconds","Boolean","je","Ae","picoseconds","getHours","getMinutes","getSeconds","getMilliseconds","milliseconds","L","pathParameters","queryParameters","_requestOptions","setContentFromParsable","tracerKey","isArray","requestTypeKey","writeCollectionOfObjectValues","writeObjectValue","setContentAndContentType","contentTypeHeader","content","getSerializedContent","getSerializationWriterFactory","setContentFromScalar","writeCollectionOfPrimitiveValues","writeBooleanValue","writeStringValue","writeDateValue","writeDateOnlyValue","writeTimeOnlyValue","writeDurationValue","writeNumberValue","setStreamContent","binaryContentType","setQueryStringParametersFromRawObject","getQueryParameter","raw_url_key","uri","urlTemplate","expand","getRequestOptions","addRequestHeaders","addRequestOptions","getKey","removeRequestOptions","Z","GET","POST","PATCH","DELETE","OPTIONS","CONNECT","TRACE","HEAD","PUT","cr","handleResponseAsync","errorMappings","dr","Qn","substring","toLocaleUpperCase","CallAndGetNative","CallAndGetNativeWithBody","Co","AllowedHostsValidator","AnonymousAuthenticationProvider","ApiError","ApiKeyAuthenticationProvider","apiKey","parameterName","validator","ApiKeyLocation","BackingStoreFactorySingleton","BackingStoreParseNodeFactory","BackingStoreSerializationWriterProxyFactory","BaseBearerTokenAuthenticationProvider","BaseRequestBuilder","requestAdapter","DateOnly","Duration","HttpMethod","InMemoryBackingStore","InMemoryBackingStoreFactory","NativeResponseHandler","NativeResponseWrapper","ParseNodeFactoryRegistry","ParseNodeProxyFactory","RequestInformation","SerializationWriterFactoryRegistry","SerializationWriterProxyFactory","TimeOnly","enableBackingStoreForParseNodeFactory","enableBackingStoreForSerializationWriterFactory","formatSegment","getPathParameters","registerDefaultDeserializer","registerDefaultSerializer","toFirstCharacterUpper","validateProtocol","hr","ze","kr","$e","We","pr","CustomFetchHandler","customFetch","execute","__awaiter","Hr","Ur","Ge","ft","xo","Ye","zr","Ue","getObservabilityOptionsFromRequest","ObservabilityOptionsImpl","ObservabilityOptionKey","_originalOptions","includeEUIIAttributes","getTracerInstrumentationName","Br","Kr","Lr","Jn","ParametersNameDecodingHandlerOptions","ParametersNameDecodingHandlerOptionsKey","charactersToDecode","Zn","ParametersNameDecodingHandler","decodeParameters","charCodeAt","reject","Wr","Gr","Xe","$r","ea","RedirectHandlerOptions","RedirectHandlerOptionKey","DEFAULT_MAX_REDIRECTS","defaultShouldRetry","maxRedirects","shouldRedirect","MAX_MAX_REDIRECTS","ta","RedirectHandler","isRedirect","REDIRECT_STATUS_CODES","status","hasLocationHeader","LOCATION_HEADER","getLocationHeader","isRelativeURL","shouldDropAuthorizationHeader","executeWithRedirect","STATUS_CODE_SEE_OTHER","method","body","AUTHORIZATION_HEADER","redirect","MANUAL_REDIRECT","Yr","Qe","me","fr","appendRequestHeader","setRequestHeader","getRequestHeader","Qr","Jr","Xr","ra","RetryHandlerOptions","RetryHandlerOptionKey","DEFAULT_DELAY","DEFAULT_MAX_RETRIES","delay","maxRetries","shouldRetry","MAX_DELAY","MAX_MAX_RETRIES","Math","min","getMaxDelay","na","RetryHandler","isRetry","RETRY_STATUS_CODES","isBuffered","getDelay","Number","RETRY_AFTER_HEADER","round","getTime","now","getExponentialBackOffTime","pow","sleep","setTimeout","executeWithRetry","RETRY_ATTEMPT_HEADER","en","tn","rn","nn","an","on","Je","Zr","ut","aa","UserAgentHandlerOptions","UserAgentHandlerOptionsKey","libraryVersion","productName","productVersion","ia","UserAgentHandler","_options","addValue","oa","MiddlewareFactory","Headers","Request","Response","sa","HttpClient","setMiddleware","getDefaultMiddlewareChain","middleware","executeFetch","un","ln","dn","hn","sn","Ze","qe","cn","ua","ChaosStrategy","MANUAL","RANDOM","pn","gn","mn","vn","lt","fn","yn","wn","__exportStar","FetchRequestAdapter","serializationWriterFactory","authenticationProvider","parseNodeFactory","httpClient","baseUrl","getResponseContentType","sendCollectionOfPrimitiveAsync","startTracingSpan","getHttpResponseMessage","eventResponseHandlerInvokedKey","throwIfFailedResponse","shouldReturnUndefined","observabilityOptions","responseTypeAttributeKey","getCollectionOfPrimitiveValues","purgeResponseBody","sendCollectionAsync","getCollectionOfObjectValues","decodeURIComponent","sendAsync","getObjectValue","sendPrimitiveAsync","arrayBuffer","getStringValue","getNumberValue","getBooleanValue","getDateValue","getDurationValue","getDateOnlyValue","getTimeOnlyValue","sendNoResponseContentAsync","enableBackingStore","bodyUsed","ok","code","errorMappingFoundAttributeName","errorBodyFoundAttributeName","setBaseUrlForRequestInformation","getRequestFromRequestInformation","retryCAEResponseIfRequired","getClaimsFromResponse","authenticateChallengedEventKey","baseurl","httpMethod","foldHeaderValue","convertToNativeRequestAsync","Io","ChaosHandler","httpStatusCode","methodStatusCode","chaosStrategy","statusMessage","chaosPercentage","manualMap","generateRandomStatusCode","floor","getRelativeURL","getStatusCode","statusCode","createResponseBody","responseBody","createChaosResponse","url","JSON","stringify","statusText","runChaos","chaosHandlerTriggeredEventKey","Fo","ChaosHandlerOptionsKey","TelemetryHandler","TelemetryHandlerOptionsKey","telemetryHandlerOptions","telemetryConfigurator","telemetryInfomation","Uo","bn","_additionalData","additionalData","_assign","getFieldDeserializers","unassign","writeAdditionalData","_unassign","Lo","_description","result","_result","Bo","seatsAvailable","seatsTotal","_seatsAvailable","_seatsTotal","Ko","Wo","$o","_users","assigned","_assigned","displayName","_displayName","_id","Go","Yo","Xo","Qo","Jo","Zo","es","ts","rs","post","toPostRequestInformation","Accept","ns","as","is","os","ss","us","ls","cs","ds","hs","ps","fs","gs","ys","ms","ws","vs","bs","_s","Es","Rs","Ds","seats","toGetRequestInformation","Os","Ss","licenses","licensesById","serviceId","Ts","Ps","check","orgs","orgsById","orgId","Fe","_jsonNode","getChildNode","getGuidValue","assignFieldValues","getEnumValues","getEnumValue","Q","writer","writePropertyName","propertySeparator","writeGuidValue","toISOString","writeAnyValue","writeEnumValue","convertStringToArrayBuffer","ArrayBuffer","writeNonParsableObjectValue","la","convertArrayBufferToJson","TextDecoder","decode","ca","Cs","v1alpha","xs","client","requestConfiguration","Authorization","modify","js","Is","Ns","errors","_errors","errorEscaped","_errorEscaped","identity","identityType","_identity","_identityType","da","ERROR_T5","ERROR_OFAC","ERROR_EXPORT_CONTROL","Vs","qs","Ms","Fs","ks","Hs","Ls","zs","Bs","Us","links","meta","_links","_meta","first","_first","last","previous","_last","_next","_previous","count","_count","Ks","account_username","_account_username","subscription_id","_subscription_id","$s","Ws","ha","Gs","allowed","_allowed","consumed","_consumed","data","_data","Ys","Xs","Qs","Js","gt","Zs","toDeleteRequestInformation","eu","tu","ru","nu","au","compliance","services","seatsById","iu","ou","getAllowedHostsValidator","su","pa","gr","uu","Su","serviceName","children","Provider","fa","onClearAllFilters","variant","icon","headingLevel","onClick","lu","_n","ga","itemCount","page","perPage","usernames","isColumnSortable","isUserChecked","onPageChange","onSearchUsername","onRemoveUsernameChip","onRemoveUsernameChips","onCheckUser","columns","renderHeader","column","Th","renderCell","row","Td","dataLabel","isRowChecked","onCheck","toolbarBreakpoint","filters","Username","chips","onSearch","onRemoveChip","onRemoveGroup","validate","errorMessage","ariaLabel","isFiltered","emptyStateNoData","emptyStateNoResults","Tu","onSuccess","onError","queryKey","queryFn","setPagination","setPaginationQuery","mutate","isLoading","isOpen","title","onClose","actions","isDisabled","isInline","remove","includes","cu","du","isFullHeight","component","hu","usersToRemove","onOk","titleIconVariant","showClose","pu","hasShadowBottom","isCompact","fu","onAddUsers","ouiaId","gu","En","yu","getUrlForUser","canAddUser","onRemoveSeat","onAddUser","renderActions","rowData","mu","items","isPrimary","actionProps","style","zIndex","wu","onConfirm","onCancel","className","Pu","abs","isFilled","Cu","Routes","dispatch","handleAlert","handleError","Suspense","fallback","Bullseye","Spinner","basename","pathname","Switch","Route","path","InvalidObject","useChrome","updateDocumentTitle","history","useHistory","useEffect","register","notifications","unregister","event","dir","navId","errorDescriptionKey"],"sourceRoot":""}